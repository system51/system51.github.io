<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Kuberentes集群添加腾讯云CBS为默认存储</title>
    <link href="/2022/05/10/kubernetes-csi-tencentcloud/"/>
    <url>/2022/05/10/kubernetes-csi-tencentcloud/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>目前公司已经将有状态服务部署在 <code>Kubernetes</code> 集群中，所以对存储能力的需求也越来越强烈。由于我们使用的是灵雀云的产品，部署在腾讯云上所以这里我们使用腾讯云的 <code>CBS</code> 做存储，腾讯自己有自己的开源 <code>CSI</code> 插件来对接 <code>CBS</code>。</p><h1 id="kubernetes-csi-tencentcloud"><a href="#kubernetes-csi-tencentcloud" class="headerlink" title="kubernetes-csi-tencentcloud"></a>kubernetes-csi-tencentcloud</h1><p><code>kubernetes-csi-tencentcloud</code> 是腾讯云 <code>Cloud Block Storage</code> 服务的一个满足 <a href="https://github.com/container-storage-interface/spec">CSI</a> 标准实现的插件。这个插件可以让你在 Kubernetes 上使用 Cloud Block Storage。</p><h2 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h2><ul><li><strong>Static Provisioning</strong> - 为一个已有的CBS盘创建PV，并在容器中使用PVC来使用它</li><li><strong>Dynamic Provisioning</strong> - 在容器需要使用时，根据PVC去创建CBS盘<ul><li>specify zone - 指定要在哪个zone创建CBS盘<ul><li><code>allowedTopologies</code> - topology key是<code>topology.com.tencent.cloud.csi.cbs/zone</code>.</li><li><code>diskZone</code> in <code>StorageClass.parameters</code> - <code>diskZone</code>中配置的zone优先级最高. 之后才是<code>allowedTopologies</code>中的zone</li></ul></li><li><strong>Topology-Aware</strong> - pod被调度完以后，在相应node所在zone创建CBS盘. 如果同时<code>diskZone</code>已配置，优先<code>diskZone</code></li></ul></li><li><strong>Volume Snapshot</strong> - 磁盘快照</li><li><strong>Volume Resizing</strong> - 磁盘扩容</li><li><strong>Volume Attach Limit</strong> - 单节点最大能attach的CBS盘数量.(每个节点最大可attach 20块CBS盘)</li></ul><h2 id="在-Kubernetes-上安装"><a href="#在-Kubernetes-上安装" class="headerlink" title="在 Kubernetes 上安装"></a>在 Kubernetes 上安装</h2><p><strong>注意</strong>:<br>在讲述<strong>前置要求</strong>之前，对于各组件设置参数启动项有些要注意的地方：</p><ul><li>有些feature gates在GA以后的版本不能再被显式设置，否则可能导致报错。实际上这些feature gates在beta版本开始则无需添加。下表整理了涉及到feature gates的beta版本的表格，在给kubelet、master&#x2F;controllermanager、scheduler设置启动参数时，可以基于此来做取舍.（举例：KubeletPluginsWatcher在1.12及以上版本则无须添加）</li></ul><table><thead><tr><th>特性</th><th>默认值</th><th>阶段</th><th>起始</th><th>直到</th></tr></thead><tbody><tr><td><code>VolumeSnapshotDataSource</code></td><td><code>true</code></td><td>Beta</td><td>1.17</td><td>-</td></tr><tr><td><code>CSINodeInfo</code></td><td><code>true</code></td><td>Beta</td><td>1.14</td><td>1.16</td></tr><tr><td><code>CSIDriverRegistry</code></td><td><code>true</code></td><td>Beta</td><td>1.14</td><td>1.17</td></tr><tr><td><code>KubeletPluginsWatcher</code></td><td><code>true</code></td><td>Beta</td><td>1.12</td><td>1.12</td></tr><tr><td><code>VolumeScheduling</code></td><td><code>true</code></td><td>Beta</td><td>1.10</td><td>1.12</td></tr><tr><td><code>ExpandCSIVolumes</code></td><td><code>true</code></td><td>Beta</td><td>1.16</td><td>-</td></tr></tbody></table><p><strong>前置要求:</strong></p><ul><li>Kubernetes v1.13.x及以上</li><li>kube-apiserver 和 kubelet 的 <code>--allow-privileged</code> flag 都要设置为 true (针对 v1.15.x 及以上版本, kubelet 默认设置 <code>--allow-privileged</code> 为 true，如果仍然显式设置，则会报错 )</li><li>所有节点的 kubelet 需要添加的启动项为:  <code>--feature-gates=VolumeSnapshotDataSource=true,CSINodeInfo=true,CSIDriverRegistry=true,KubeletPluginsWatcher=true</code></li><li>apiserver&#x2F;controller-manager:  <code>--feature-gates=VolumeSnapshotDataSource=true,CSINodeInfo=true,CSIDriverRegistry=true</code></li><li>scheduler:  <code>--feature-gates=VolumeSnapshotDataSource=true,CSINodeInfo=true,CSIDriverRegistry=true,VolumeScheduling=true</code></li></ul><h4 id="Clone-仓库"><a href="#Clone-仓库" class="headerlink" title="Clone 仓库"></a>Clone 仓库</h4><p>注： <code>kubernetes-csi-tencentcloud</code>中包括 CBS CSI， CFS CSI 与 COSFS CSI。这里我就只用CBS块存储了。其他两个也用过，感觉用起来还是不太适合。</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">git clone https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/TencentCloud/</span>kubernetes-csi-tencentcloud.git<br></code></pre></td></tr></table></figure><h4 id="使用腾讯云-API-Credential-创建-kubernetes-secret"><a href="#使用腾讯云-API-Credential-创建-kubernetes-secret" class="headerlink" title="使用腾讯云 API Credential 创建 kubernetes secret:"></a>使用腾讯云 API Credential 创建 kubernetes secret:</h4><p><em><strong>注： 如果是自建集群，必须创建；而如果是TKE集群环境，可以不创建该secret，driver中默认会根据TKE_QCSRole获取临时秘钥。</strong></em></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment">#  参考示例 deploy/kubernetes/secret.yaml</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Secret</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">cbs-csi-api-key</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">kube-system</span><br><span class="hljs-attr">data:</span><br>  <span class="hljs-comment"># 需要注意的是,secret 的 value 需要进行 base64 编码</span><br>  <span class="hljs-comment">#   echo -n &quot;&lt;SECRET_ID&gt;&quot; | base64</span><br>  <span class="hljs-attr">TENCENTCLOUD_CBS_API_SECRET_ID:</span> <span class="hljs-string">&quot;&lt;SECRET_ID&gt;&quot;</span><br>  <span class="hljs-attr">TENCENTCLOUD_CBS_API_SECRET_KEY:</span> <span class="hljs-string">&quot;&lt;SECRET_KEY&gt;&quot;</span><br></code></pre></td></tr></table></figure><h4 id="创建rbac"><a href="#创建rbac" class="headerlink" title="创建rbac"></a>创建rbac</h4><p>创建attacher,provisioner,plugin需要的rbac：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">kubectl apply -f  deploy/cbs/kubernetes/csi-controller-rbac.yaml<br>kubectl apply -f  deploy/cbs/kubernetes/csi-node-rbac.yaml<br></code></pre></td></tr></table></figure><h4 id="创建controller-node和plugin"><a href="#创建controller-node和plugin" class="headerlink" title="创建controller,node和plugin"></a>创建controller,node和plugin</h4><p>Kubernetes v1.18.x及以上版本创建controller plugin和node plugin</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh">kubectl apply -f  deploy/cbs/kubernetes/csi-controller-new.yaml<br>kubectl apply -f  deploy/cbs/kubernetes/csi-node-new.yaml<br>kubectl apply -f  deploy/cbs/kubernetes/snapshot-crd.yaml<br></code></pre></td></tr></table></figure><p>Kubernetes v1.18.x以下版本创建controller plugin和node plugin</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh">kubectl apply -f  deploy/cbs/kubernetes/csi-controller-old.yaml<br>kubectl apply -f  deploy/cbs/kubernetes/csi-node-old.yaml<br>kubectl apply -f  deploy/cbs/kubernetes/snapshot-crd.yaml<br></code></pre></td></tr></table></figure><h3 id="组件说明"><a href="#组件说明" class="headerlink" title="组件说明"></a>组件说明</h3><p>CBS-CSI 组件在集群内部署后，包含以下组件：</p><ul><li>DaemonSet：每个 Node 提供一个 DaemonSet，简称为 NodePlugin。由 CBS-CSI Driver 和 node-driver-registrar 两个容器组成，负责向节点注册 Driver，并提供挂载能力。</li><li>StatefulSet 和 Deployment：简称为 Controller。由 Driver 和多个 Sidecar（external-provisioner、external-attacher、external-resizer、external-snapshotter、snapshot-controller）一起构成，提供创删卷、attach、detach、扩容、快照等能力。</li></ul><h3 id="简单测试验证"><a href="#简单测试验证" class="headerlink" title="简单测试验证"></a>简单测试验证</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 创建storageclass</span><br>kubectl apply -f  deploy/examples/storageclass-basic.yaml<br><span class="hljs-comment"># 创建pvc</span><br>kubectl apply -f  deploy/examples/pvc.yaml<br><span class="hljs-comment"># 创建申请pvc的pod</span><br>kubectl apply -f  deploy/examples/app.yaml<br></code></pre></td></tr></table></figure><h3 id="StorageClass-支持的参数"><a href="#StorageClass-支持的参数" class="headerlink" title="StorageClass 支持的参数"></a>StorageClass 支持的参数</h3><p><strong>Note</strong>：可以参考<a href="https://github.com/TencentCloud/kubernetes-csi-tencentcloud/blob/master/deploy/cbs/examples/storageclass-examples.yaml">示例</a></p><ul><li>如果您集群中的节点存在多个可用区，那么您可以开启cbs存储卷的拓扑感知调度，需要在storageclass中添加<code>volumeBindingMode: WaitForFirstConsumer</code>，如deploy&#x2F;examples&#x2F;storageclass-topology.yaml，否则可能会出现cbs存储卷因跨可用区而挂载失败。</li><li>diskType: 代表要创建的 cbs 盘的类型；值为 <code>CLOUD_PREMIUM</code> 代表创建高性能云盘，值为 <code>CLOUD_SSD</code> 代表创建 ssd 云盘，值为 <code>CLOUD_HSSD</code> 代表创建增强型SSD云盘，</li><li>diskChargeType: 代表云盘的付费类型；值为 <code>PREPAID</code> 代表预付费，值为 <code>POSTPAID_BY_HOUR</code> 代表按量付费，需要注意的是，当值为 <code>PREPAID</code> 的时候需要指定额外的参数</li><li>diskChargeTypePrepaidPeriod：代表购买云盘的时长，当付费类型为 <code>PREPAID</code> 时需要指定，可选的值包括 <code>1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 24, 36</code>，单位为月</li><li>diskChargePrepaidRenewFlag: 代表云盘的自动续费策略，当付费类型为 <code>PREPAID</code> 时需要指定，值为<code>NOTIFY_AND_AUTO_RENEW</code> 代表通知过期且自动续费，值为 <code>NOTIFY_AND_MANUAL_RENEW</code> 代表通知过期不自动续费，值为 <code>DISABLE_NOTIFY_AND_MANUAL_RENEW</code> 代表不通知过期不自动续费</li><li>encrypt: 代表云盘是否加密，当指定此参数时，唯一可选的值为 <code>ENCRYPT</code></li><li>disktags: 可以给云盘加tag。形式如 <code>a:b,c:d</code></li><li>throughputperformance: 对hssd&#x2F;tssd盘，如果需要达到最大性能，可以填入额外性能。具体取值参见<a href="https://cloud.tencent.com/document/product/362/51896">https://cloud.tencent.com/document/product/362/51896</a></li><li>cdcid: 独占集群ID</li></ul><h2 id="不同类型云盘的大小限制"><a href="#不同类型云盘的大小限制" class="headerlink" title="不同类型云盘的大小限制"></a>不同类型云盘的大小限制</h2><p><em>云盘大小仅支持 10 的倍数（如: 100, 110, 120）</em></p><ul><li>高性能云硬盘提供最小 10 GB 到最大 32000 GB 的规格选择。</li><li>SSD云硬盘提供最小 20 GB 到最大 32000 GB 的规格选择，单块 SSD 云硬盘最高可提供 26000 随机读写IOPS、260MB&#x2F;s吞吐量的存储性能。</li><li>增强型SSD云硬盘提供最小 20 GB 到最大 32000 GB 的规格选择，单盘最高可提供 100000 随机读写IOPS、1000MB&#x2F;s吞吐量的存储性能。</li></ul><h2 id="通过-CBS-CSI-避免云硬盘跨可用区挂载"><a href="#通过-CBS-CSI-避免云硬盘跨可用区挂载" class="headerlink" title="通过 CBS-CSI 避免云硬盘跨可用区挂载"></a>通过 CBS-CSI 避免云硬盘跨可用区挂载</h2><h3 id="操作场景"><a href="#操作场景" class="headerlink" title="操作场景"></a>操作场景</h3><p>云硬盘不支持跨可用区挂载到节点，在跨可用区的集群环境中，推荐通过 CBS-CSI <strong>拓扑感知</strong>特性来避免跨可用区挂载问题。</p><h3 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h3><p>拓扑感知调度需要多个 Kubernetes 组件配合完成，包括 Scheduler、PV controller、external-provisioner。具体流程如下：</p><ol><li>PV controller 观察 PVC 对象，检查 Storageclass 的 VolumeBindingMode 是否为 <strong>WaitForFirstConsumer</strong>，如是，则不会立即处理该 PVC 的创建事件，等待 Scheduler 处理。</li><li>Scheduler 调度 Pod 后，会将 nodeName 以 annotation 的方式加入到 PVC 对象上 <code>volume.kubernetes.io/selected-node: 10.0.0.72</code>。</li><li>PV controller 获取到 PVC 对象的更新事件后，将开始处理 annotation（<code>volume.kubernetes.io/selected-node</code>），根据 nodeName 获取 Node 对象，传入到 external-provisioner 中。</li><li>external-provisioner 根据传过来的 Node 对象的 label 获取可用区（<code>failure-domain.beta.kubernetes.io/zone</code>）后在对应可用区创建 PV，达到和 Pod 相同可用区的效果，避免云硬盘和 Node 在不同可用区而无法挂载问题。</li></ol><h3 id="前提条件"><a href="#前提条件" class="headerlink" title="前提条件"></a>前提条件</h3><ul><li>已安装1.14或以上版本的 <a href="https://cloud.tencent.com/document/product/457/32189">TKE 集群</a>。</li><li>已将  <a href="https://github.com/TencentCloud/kubernetes-csi-tencentcloud/blob/master/docs/README_CBS.md">CBS-CSI</a> 或 In-Tree 组件更新为最新版本。</li></ul><h3 id="操作步骤"><a href="#操作步骤" class="headerlink" title="操作步骤"></a>操作步骤</h3><p>使用以下 YAML，在 Storageclass 中设置 volumeBindingMode 为 <strong>WaitForFirstConsumer</strong>。示例如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">kind:</span> <span class="hljs-string">StorageClass</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">cbs-topo</span><br><span class="hljs-attr">parameters:</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">cbs</span><br><span class="hljs-attr">provisioner:</span> <span class="hljs-string">com.tencent.cloud.csi.cbs</span><br><span class="hljs-attr">reclaimPolicy:</span> <span class="hljs-string">Delete</span><br><span class="hljs-attr">volumeBindingMode:</span> <span class="hljs-string">WaitForFirstConsumer</span><br></code></pre></td></tr></table></figure><blockquote><p>CBS-CSI 和 In-Tree 组件均支持该操作。</p></blockquote><h2 id="在线扩容云硬盘"><a href="#在线扩容云硬盘" class="headerlink" title="在线扩容云硬盘"></a>在线扩容云硬盘</h2><h3 id="操作场景-1"><a href="#操作场景-1" class="headerlink" title="操作场景"></a>操作场景</h3><p>TKE 支持在线扩容 PV、对应的云硬盘及文件系统，即不需要重启 Pod 即可完成扩容。为确保文件系统的稳定性，建议在云硬盘文件系统处于未挂载状态时进行操作。</p><h3 id="前提条件-1"><a href="#前提条件-1" class="headerlink" title="前提条件"></a>前提条件</h3><ul><li>已创建1.16或以上版本的 <a href="https://cloud.tencent.com/document/product/457/32189">TKE 集群</a>。</li><li>已将 <a href="https://github.com/TencentCloud/kubernetes-csi-tencentcloud/blob/master/docs/README_CBS.md">CBS-CSI</a> 更新为最新版本。</li><li>（可选）为避免扩容失败导致数据丢失，可以在扩容前 <a href="https://cloud.tencent.com/document/product/457/67080">使用快照备份数据</a>。</li></ul><h3 id="操作步骤-1"><a href="#操作步骤-1" class="headerlink" title="操作步骤"></a>操作步骤</h3><h4 id="创建允许扩容的-StorageClass"><a href="#创建允许扩容的-StorageClass" class="headerlink" title="创建允许扩容的 StorageClass"></a>创建允许扩容的 StorageClass</h4><p>使用以下 YAML 创建允许扩容的 StorageClass，在 Storageclass 中设置 <code>allowVolumeExpansion</code> 为 <code>true</code>。示例如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">allowVolumeExpansion:</span> <span class="hljs-literal">true</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">storage.k8s.io/v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">StorageClass</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">cbs-csi-expand</span><br><span class="hljs-attr">parameters:</span><br>  <span class="hljs-attr">diskType:</span> <span class="hljs-string">CLOUD_PREMIUM</span><br><span class="hljs-attr">provisioner:</span> <span class="hljs-string">com.tencent.cloud.csi.cbs</span><br><span class="hljs-attr">reclaimPolicy:</span> <span class="hljs-string">Delete</span><br><span class="hljs-attr">volumeBindingMode:</span> <span class="hljs-string">Immediate</span><br></code></pre></td></tr></table></figure><h3 id="在线扩容"><a href="#在线扩容" class="headerlink" title="在线扩容"></a>在线扩容</h3><p>提供以下两种扩容方式：</p><table><thead><tr><th>扩容方式</th><th>说明</th></tr></thead><tbody><tr><td>重启 Pod 的情况下在线扩容</td><td>待扩容的云硬盘文件系统未被挂载，能够避免扩容出错以及方式2存在的问题。<strong>推荐使用该方式进行扩容</strong>。</td></tr><tr><td>不重启 Pod 的情况下在线扩容</td><td>在节点上挂载着待扩容的云硬盘文件系统，如果存在 I&#x2F;O 进程，将可能出现文件系统扩容错误。</td></tr></tbody></table><h4 id="重启Pod情况下在线扩容"><a href="#重启Pod情况下在线扩容" class="headerlink" title="重启Pod情况下在线扩容"></a>重启Pod情况下在线扩容</h4><p>1.执行以下命令，确认扩容前 PV 和文件系统状态。示例如下，PV 和文件系统大小均为30G：</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs gradle">$ kubectl exec ivantestweb-<span class="hljs-number">0</span> df <span class="hljs-regexp">/usr/</span>share<span class="hljs-regexp">/nginx/</span>html<br>Filesystem     <span class="hljs-number">1</span>K-blocks  Used Available Use% Mounted on<br><span class="hljs-regexp">/dev/</span>vdd        <span class="hljs-number">30832548</span> <span class="hljs-number">44992</span>  <span class="hljs-number">30771172</span>   <span class="hljs-number">1</span>% <span class="hljs-regexp">/usr/</span>share<span class="hljs-regexp">/nginx/</span>html<br><br>$ kubectl get pv pvc-e193201e-<span class="hljs-number">6</span>f6d-<span class="hljs-number">48</span>cf-b96d-ccc09225cf9c <br>NAME                                       CAPACITY   ACCESS MODES   RECLAIM POLICY   STATUS   CLAIM                        STORAGECLASS   REASON   AGE<br>pvc-e193201e-<span class="hljs-number">6</span>f6d-<span class="hljs-number">48</span>cf-b96d-ccc09225cf9c   <span class="hljs-number">30</span>Gi       RWO            <span class="hljs-keyword">Delete</span>           Bound    <span class="hljs-keyword">default</span>/www1-ivantestweb-<span class="hljs-number">0</span>   cbs-csi                 <span class="hljs-number">20</span>h<br></code></pre></td></tr></table></figure><p>2.执行以下命令，为 PV 对象打上一个非法 zone 标签，旨在下一步重启 Pod 后，使 Pod 无法调度到某个节点上。示例如下：</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs maxima">$ kubectl <span class="hljs-built_in">label</span> <span class="hljs-built_in">pv</span> pvc-e193201e-6f6d-48<span class="hljs-built_in">cf</span>-b96d-ccc09225cf9c failure-<span class="hljs-built_in">domain</span>.<span class="hljs-built_in">beta</span>.kubernetes.io/zone=nozone<br></code></pre></td></tr></table></figure><p>3.执行以下命令重启 Pod，重启后由于 Pod 对应的 PV 的标签表明的是非法 zone，Pod 将处于 Pending 状态。示例如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs sql">$ kubectl <span class="hljs-keyword">delete</span> pod ivantestweb<span class="hljs-number">-0</span><br><br>$ kubectl <span class="hljs-keyword">get</span> pod ivantestweb<span class="hljs-number">-0</span><br>NAME            READY   STATUS    RESTARTS   AGE<br>ivantestweb<span class="hljs-number">-0</span>   <span class="hljs-number">0</span><span class="hljs-operator">/</span><span class="hljs-number">1</span>     Pending   <span class="hljs-number">0</span>          <span class="hljs-number">25</span>s<br><br>$ kubectl <span class="hljs-keyword">describe</span> pod ivantestweb<span class="hljs-number">-0</span><br>Events:<br>Type     Reason            Age                 <span class="hljs-keyword">From</span>               Message<br><span class="hljs-comment">----     ------            ----                ----               -------</span><br>Warning  FailedScheduling  <span class="hljs-number">40</span>s (x3 <span class="hljs-keyword">over</span> <span class="hljs-number">2</span>m3s)  <span class="hljs-keyword">default</span><span class="hljs-operator">-</span>scheduler  <span class="hljs-number">0</span><span class="hljs-operator">/</span><span class="hljs-number">1</span> nodes <span class="hljs-keyword">are</span> available: <span class="hljs-number">1</span> node(s) had <span class="hljs-keyword">no</span> available volume zone.<br></code></pre></td></tr></table></figure><p>4.执行以下命令，修改 PVC 对象中的容量，将容量扩容至40G。示例如下：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">kubectl</span> patch pvc www1-ivantestweb-<span class="hljs-number">0</span> -p &#x27;&#123;<span class="hljs-string">&quot;spec&quot;</span>:&#123;<span class="hljs-string">&quot;resources&quot;</span>:&#123;<span class="hljs-string">&quot;requests&quot;</span>:&#123;<span class="hljs-string">&quot;storage&quot;</span>:<span class="hljs-string">&quot;40Gi&quot;</span>&#125;&#125;&#125;&#125;&#x27;<br></code></pre></td></tr></table></figure><blockquote><p>注意：扩容后的PVC对象容量的大小必须为10的倍数，不同云硬盘类型所支持的存储容量规格可参考说明 <a href="https://cloud.tencent.com/document/product/362/5744#.E6.93.8D.E4.BD.9C.E6.AD.A5.E9.AA.A4">创建云硬盘</a>。</p></blockquote><p>5.执行以下命令，去除 PV 对象之前打上的标签， 标签去除之后 Pod 即可调度成功。示例如下：</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs maxima">$ kubectl <span class="hljs-built_in">label</span> <span class="hljs-built_in">pv</span> pvc-e193201e-6f6d-48<span class="hljs-built_in">cf</span>-b96d-ccc09225cf9c failure-<span class="hljs-built_in">domain</span>.<span class="hljs-built_in">beta</span>.kubernetes.io/zone-<br>persistentvolume/pvc-e193201e-6f6d-48<span class="hljs-built_in">cf</span>-b96d-ccc09225cf9c labeled<br></code></pre></td></tr></table></figure><p>6.执行以下命令，可以查看到 Pod 状态为 Running、对应的 PV 和文件系统扩容成功，从30G扩容到40G。示例如下：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">$ kubectl <span class="hljs-keyword">get</span> pod ivantestweb<span class="hljs-number">-0</span><br><span class="hljs-type">NAME</span>            READY   STATUS    RESTARTS   AGE<br>ivantestweb<span class="hljs-number">-0</span>   <span class="hljs-number">1</span>/<span class="hljs-number">1</span>     Running   <span class="hljs-number">0</span>          <span class="hljs-number">17</span>m<br><br>$ kubectl <span class="hljs-keyword">get</span> pv pvc-e193201e<span class="hljs-number">-6</span>f6d<span class="hljs-number">-48</span>cf-b96d-ccc09225cf9c<br><span class="hljs-type">NAME</span>                                       CAPACITY   <span class="hljs-keyword">ACCESS</span> MODES   RECLAIM <span class="hljs-keyword">POLICY</span>   STATUS   CLAIM                        STORAGECLASS   REASON   AGE<br>pvc-e193201e<span class="hljs-number">-6</span>f6d<span class="hljs-number">-48</span>cf-b96d-ccc09225cf9c   <span class="hljs-number">40</span>Gi       RWO            <span class="hljs-keyword">Delete</span>           Bound    <span class="hljs-keyword">default</span>/www1-ivantestweb<span class="hljs-number">-0</span>   cbs-csi                 <span class="hljs-number">20</span>h<br><br>$ kubectl <span class="hljs-keyword">get</span> pvc www1-ivantestweb<span class="hljs-number">-0</span><br><span class="hljs-type">NAME</span>                 STATUS   VOLUME                                     CAPACITY   <span class="hljs-keyword">ACCESS</span> MODES   STORAGECLASS   AGE<br>www1-ivantestweb<span class="hljs-number">-0</span>   Bound    pvc-e193201e<span class="hljs-number">-6</span>f6d<span class="hljs-number">-48</span>cf-b96d-ccc09225cf9c   <span class="hljs-number">40</span>Gi       RWO            cbs-csi        <span class="hljs-number">20</span>h<br><br>$ kubectl exec ivantestweb<span class="hljs-number">-0</span> df /usr/<span class="hljs-keyword">share</span>/nginx/html<br>Filesystem     <span class="hljs-number">1</span>K-blocks  Used Available Use% Mounted <span class="hljs-keyword">on</span><br>/dev/vdd        <span class="hljs-number">41153760</span> <span class="hljs-number">49032</span>  <span class="hljs-number">41088344</span>   <span class="hljs-number">1</span>% /usr/<span class="hljs-keyword">share</span>/nginx/html<br></code></pre></td></tr></table></figure><h4 id="不重启Pod情况下在线扩容"><a href="#不重启Pod情况下在线扩容" class="headerlink" title="不重启Pod情况下在线扩容"></a>不重启Pod情况下在线扩容</h4><p>1.执行以下命令，确认扩容前 PV 和文件系统状态。示例如下，PV 和文件系统大小均为20G：</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs gradle">$ kubectl exec ivantestweb-<span class="hljs-number">0</span> df <span class="hljs-regexp">/usr/</span>share<span class="hljs-regexp">/nginx/</span>html<br>Filesystem     <span class="hljs-number">1</span>K-blocks  Used Available Use% Mounted on<br><span class="hljs-regexp">/dev/</span>vdd        <span class="hljs-number">20511312</span> <span class="hljs-number">45036</span>  <span class="hljs-number">20449892</span>   <span class="hljs-number">1</span>% <span class="hljs-regexp">/usr/</span>share<span class="hljs-regexp">/nginx/</span>html<br><br>$ kubectl get pv pvc-e193201e-<span class="hljs-number">6</span>f6d-<span class="hljs-number">48</span>cf-b96d-ccc09225cf9c<br>NAME                                       CAPACITY   ACCESS MODES   RECLAIM POLICY   STATUS   CLAIM                        STORAGECLASS   REASON   AGE<br>pvc-e193201e-<span class="hljs-number">6</span>f6d-<span class="hljs-number">48</span>cf-b96d-ccc09225cf9c   <span class="hljs-number">20</span>Gi       RWO            <span class="hljs-keyword">Delete</span>           Bound    <span class="hljs-keyword">default</span>/www1-ivantestweb-<span class="hljs-number">0</span>   cbs-csi                 <span class="hljs-number">20</span>h<br></code></pre></td></tr></table></figure><p>2.执行以下命令，修改 PVC 对象中的容量，将容量扩容至30G。示例如下：</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">$ kubectl <span class="hljs-keyword">patch</span> pvc www1-ivantestweb-0 -p &#x27;&#123;<span class="hljs-string">&quot;spec&quot;</span>:&#123;<span class="hljs-string">&quot;resources&quot;</span>:&#123;<span class="hljs-string">&quot;requests&quot;</span>:&#123;<span class="hljs-string">&quot;storage&quot;</span>:<span class="hljs-string">&quot;30Gi&quot;</span>&#125;&#125;&#125;&#125;&#x27;<br></code></pre></td></tr></table></figure><blockquote><p>扩容后的PVC对象容量的大小必须为10的倍数，不同硬盘类型所支持的存储容量规格可参考说明 <a href="https://cloud.tencent.com/document/product/362/5744#.E6.93.8D.E4.BD.9C.E6.AD.A5.E9.AA.A4">创建云硬盘</a>。</p></blockquote><p>3.执行以下命令，可以查看到 PV 和文件系统已扩容至30G。示例如下：</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs gradle">$ kubectl exec ivantestweb-<span class="hljs-number">0</span> df <span class="hljs-regexp">/usr/</span>share<span class="hljs-regexp">/nginx/</span>html<br>Filesystem     <span class="hljs-number">1</span>K-blocks  Used Available Use% Mounted on<br><span class="hljs-regexp">/dev/</span>vdd        <span class="hljs-number">30832548</span> <span class="hljs-number">44992</span>  <span class="hljs-number">30771172</span>   <span class="hljs-number">1</span>% <span class="hljs-regexp">/usr/</span>share<span class="hljs-regexp">/nginx/</span>html<br><br>$ kubectl get pv pvc-e193201e-<span class="hljs-number">6</span>f6d-<span class="hljs-number">48</span>cf-b96d-ccc09225cf9c<br>NAME                                       CAPACITY   ACCESS MODES   RECLAIM POLICY   STATUS   CLAIM                        STORAGECLASS   REASON   AGE<br>pvc-e193201e-<span class="hljs-number">6</span>f6d-<span class="hljs-number">48</span>cf-b96d-ccc09225cf9c   <span class="hljs-number">30</span>Gi       RWO            <span class="hljs-keyword">Delete</span>           Bound    <span class="hljs-keyword">default</span>/www1-ivantestweb-<span class="hljs-number">0</span>   cbs-csi                 <span class="hljs-number">20</span>h<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Kubernetes自定义指标HPA</title>
    <link href="/2021/12/22/custom-metrics-hpa/"/>
    <url>/2021/12/22/custom-metrics-hpa/</url>
    
    <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>Kubernetes 默认提供 CPU 和内存作为 HPA 弹性伸缩的指标，如果有更复杂的场景需求，比如基于业务单副本 QPS 大小来进行自动扩缩容，可以考虑自行安装 prometheus-adapter 来实现基于自定义指标的 Pod 弹性伸缩。</p><h2 id="Promethue-adapter的作用"><a href="#Promethue-adapter的作用" class="headerlink" title="Promethue-adapter的作用"></a>Promethue-adapter的作用</h2><p>prometheus采集到的metrics并不能直接给k8s用，因为两者数据格式不兼容，这时就需要另外一个组件(prometheus-adapter)，将prometheus的metrics 数据格式转换成k8s API接口能识别的格式，因为prometheus-adapter是自定义API Service，所以还需要用Kubernetes aggregator在主API服务器中注册，以便直接通过&#x2F;apis&#x2F;来访问。</p><p>kubernetes apiserver 提供了三种 API 用于监控指标相关的操作：</p><ul><li>resource metrics API：被设计用来给 k8s 核心组件提供监控指标，例如 kubectl top；</li><li>custom metrics API：被设计用来给 HPA 控制器提供指标。</li><li>external metrics API：被设计用来通过外部指标扩容（后面细讲）</li></ul><p>prometheus-adapter支持以下三种API，<code>kubectl top node/pod</code> 是 <code>resource metrics</code> 指标。所以我们可以用<code>prometheus-adapter</code>替代<code>metrics-server</code></p><ul><li>resource metrics API</li><li>custom metrics API</li><li>external metrics API</li></ul><h2 id="Kubernetes-API-Aggregation"><a href="#Kubernetes-API-Aggregation" class="headerlink" title="Kubernetes API Aggregation"></a>Kubernetes API Aggregation</h2><p>在 Kubernetes 1.7 版本引入了聚合层，允许第三方应用程序通过将自己注册到kube-apiserver上，仍然通过 API Server 的 HTTP URL 对新的 API 进行访问和操作。为了实现这个机制，Kubernetes 在 kube-apiserver 服务中引入了一个 API 聚合层（API Aggregation Layer），用于将扩展 API 的访问请求转发到用户服务的功能。</p><p><img src="/images/custom-metrics-hpa-1.png" alt="custom-metrics-hpa-1"></p><p>当你访问 <code>apis/metrics.k8s.io/v1beta1</code> 的时候，实际上访问到的是一个叫做 kube-aggregator 的代理。而 kube-apiserver，正是这个代理的一个后端；而 Metrics Server，则是另一个后端 。通过这种方式，我们就可以很方便地扩展 Kubernetes 的 API 了。</p><p>如果你使用kubeadm部署的，默认已开启。如果你使用二进制方式部署的话，需要在kube-APIServer中添加启动参数，增加以下配置：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># vim /opt/kubernetes/cfg/kube-apiserver.conf</span><br>......<br>--proxy-client-cert-file=/etc/kubernetes/pki/front-proxy-client.crt<br>--proxy-client-key-file=/etc/kubernetes/pki/front-proxy-client.key<br>--requestheader-allowed-names=front-proxy-client<br>--requestheader-client-ca-file=/etc/kubernetes/pki/front-proxy-ca.crt<br>--requestheader-extra-headers-prefix=X-Remote-Extra-<br>--requestheader-group-headers=X-Remote-Group<br>--requestheader-username-headers=X-Remote-User<br>......<br></code></pre></td></tr></table></figure><h3 id="资源指标与自定义指标工作流程"><a href="#资源指标与自定义指标工作流程" class="headerlink" title="资源指标与自定义指标工作流程"></a>资源指标与自定义指标工作流程</h3><p><img src="/images/custom-metrics-hpa-2.png" alt="custom-metrics-hpa-2"></p><p>(1) 资源指标工作流程: hpa -&gt; apiserver -&gt; kube aggregation -&gt; metrics-server -&gt; kubelet(cadvisor)<br>(2) 自定义资源指标工作流程: hpa -&gt; apiserver -&gt; kube aggregation  -&gt; prometheus-adapter -&gt; prometheus -&gt; pods</p><h2 id="部署Prometheus-adapter"><a href="#部署Prometheus-adapter" class="headerlink" title="部署Prometheus-adapter"></a>部署Prometheus-adapter</h2><p>项目地址：<a href="https://github.com/qist/k8s/tree/main/k8s-yaml/monitoring">https://github.com/qist/k8s/tree/main/k8s-yaml/monitoring</a></p><p>在此github项目上下载<code>custom-metrics-api</code>、<code>prometheus-adapter</code>并应用，<code>custom-metrics-api</code>是创建三个APIService，还有<code>prometheus-adapter</code>是部署 <code>prometheus-adapter</code> Pod，并且添加了<code>v1beta1.metrics.k8s.io</code> APIService用于替换<code>metrics-server</code></p><p>使用以下命令可以看到创建了4个APIService，当他们访问前面的连接的时候会被反代到<code>monitoring/prometheus-adapter</code> svc上，由svc后面的Pod把数据返回会给请求者。</p><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs mathematica"><span class="hljs-punctuation">[</span><span class="hljs-variable">root</span><span class="hljs-operator">@</span><span class="hljs-variable">k8s</span><span class="hljs-operator">-</span><span class="hljs-variable">master</span><span class="hljs-operator">-</span><span class="hljs-number">01</span> <span class="hljs-variable">prometheus</span><span class="hljs-operator">-</span><span class="hljs-variable">adapter</span><span class="hljs-punctuation">]</span><span class="hljs-type">#</span>            <span class="hljs-variable">kubectl</span> <span class="hljs-variable">get</span> <span class="hljs-variable">apiservice</span><br><span class="hljs-operator">....</span><br><span class="hljs-variable">v1beta1</span><span class="hljs-operator">.</span><span class="hljs-variable">authentication</span><span class="hljs-operator">.</span><span class="hljs-variable">k8s</span><span class="hljs-operator">.</span><span class="hljs-variable">io</span>          <span class="hljs-variable">Local</span>                           <span class="hljs-built_in">True</span>        <span class="hljs-number">621</span><span class="hljs-variable">d</span><br><span class="hljs-variable">v1beta1</span><span class="hljs-operator">.</span><span class="hljs-variable">authorization</span><span class="hljs-operator">.</span><span class="hljs-variable">k8s</span><span class="hljs-operator">.</span><span class="hljs-variable">io</span>           <span class="hljs-variable">Local</span>                           <span class="hljs-built_in">True</span>        <span class="hljs-number">621</span><span class="hljs-variable">d</span><br><span class="hljs-variable">v1beta1</span><span class="hljs-operator">.</span><span class="hljs-variable">batch</span>                          <span class="hljs-variable">Local</span>                           <span class="hljs-built_in">True</span>        <span class="hljs-number">621</span><span class="hljs-variable">d</span><br><span class="hljs-variable">v1beta1</span><span class="hljs-operator">.</span><span class="hljs-variable">certificates</span><span class="hljs-operator">.</span><span class="hljs-variable">k8s</span><span class="hljs-operator">.</span><span class="hljs-variable">io</span>            <span class="hljs-variable">Local</span>                           <span class="hljs-built_in">True</span>        <span class="hljs-number">621</span><span class="hljs-variable">d</span><br><span class="hljs-variable">v1beta1</span><span class="hljs-operator">.</span><span class="hljs-variable">coordination</span><span class="hljs-operator">.</span><span class="hljs-variable">k8s</span><span class="hljs-operator">.</span><span class="hljs-variable">io</span>            <span class="hljs-variable">Local</span>                           <span class="hljs-built_in">True</span>        <span class="hljs-number">621</span><span class="hljs-variable">d</span><br><span class="hljs-variable">v1beta1</span><span class="hljs-operator">.</span><span class="hljs-variable">custom</span><span class="hljs-operator">.</span><span class="hljs-variable">metrics</span><span class="hljs-operator">.</span><span class="hljs-variable">k8s</span><span class="hljs-operator">.</span><span class="hljs-variable">io</span>          <span class="hljs-variable">monitoring</span><span class="hljs-operator">/</span><span class="hljs-variable">prometheus</span><span class="hljs-operator">-</span><span class="hljs-variable">adapter</span>   <span class="hljs-built_in">True</span>        <span class="hljs-number">31</span><span class="hljs-variable">h</span><br><span class="hljs-variable">v1beta1</span><span class="hljs-operator">.</span><span class="hljs-variable">events</span><span class="hljs-operator">.</span><span class="hljs-variable">k8s</span><span class="hljs-operator">.</span><span class="hljs-variable">io</span>                  <span class="hljs-variable">Local</span>                           <span class="hljs-built_in">True</span>        <span class="hljs-number">621</span><span class="hljs-variable">d</span><br><span class="hljs-variable">v1beta1</span><span class="hljs-operator">.</span><span class="hljs-variable">extensions</span>                     <span class="hljs-variable">Local</span>                           <span class="hljs-built_in">True</span>        <span class="hljs-number">621</span><span class="hljs-variable">d</span><br><span class="hljs-variable">v1beta1</span><span class="hljs-operator">.</span><span class="hljs-variable">external</span><span class="hljs-operator">.</span><span class="hljs-variable">metrics</span><span class="hljs-operator">.</span><span class="hljs-variable">k8s</span><span class="hljs-operator">.</span><span class="hljs-variable">io</span>        <span class="hljs-variable">monitoring</span><span class="hljs-operator">/</span><span class="hljs-variable">prometheus</span><span class="hljs-operator">-</span><span class="hljs-variable">adapter</span>   <span class="hljs-built_in">True</span>        <span class="hljs-number">31</span><span class="hljs-variable">h</span><br><span class="hljs-variable">v1beta1</span><span class="hljs-operator">.</span><span class="hljs-variable">metrics</span><span class="hljs-operator">.</span><span class="hljs-variable">k8s</span><span class="hljs-operator">.</span><span class="hljs-variable">io</span>                 <span class="hljs-variable">monitoring</span><span class="hljs-operator">/</span><span class="hljs-variable">prometheus</span><span class="hljs-operator">-</span><span class="hljs-variable">adapter</span>   <span class="hljs-built_in">True</span>        <span class="hljs-number">15</span><span class="hljs-variable">s</span><br><span class="hljs-variable">v1beta1</span><span class="hljs-operator">.</span><span class="hljs-variable">networking</span><span class="hljs-operator">.</span><span class="hljs-variable">k8s</span><span class="hljs-operator">.</span><span class="hljs-variable">io</span>              <span class="hljs-variable">Local</span>                           <span class="hljs-built_in">True</span>        <span class="hljs-number">621</span><span class="hljs-variable">d</span><br><span class="hljs-variable">v1beta1</span><span class="hljs-operator">.</span><span class="hljs-variable">node</span><span class="hljs-operator">.</span><span class="hljs-variable">k8s</span><span class="hljs-operator">.</span><span class="hljs-variable">io</span>                    <span class="hljs-variable">Local</span>                           <span class="hljs-built_in">True</span>        <span class="hljs-number">621</span><span class="hljs-variable">d</span><br><span class="hljs-variable">v1beta1</span><span class="hljs-operator">.</span><span class="hljs-variable">policy</span>                         <span class="hljs-variable">Local</span>                           <span class="hljs-built_in">True</span>        <span class="hljs-number">621</span><span class="hljs-variable">d</span><br><span class="hljs-variable">v1beta1</span><span class="hljs-operator">.</span><span class="hljs-variable">rbac</span><span class="hljs-operator">.</span><span class="hljs-variable">authorization</span><span class="hljs-operator">.</span><span class="hljs-variable">k8s</span><span class="hljs-operator">.</span><span class="hljs-variable">io</span>      <span class="hljs-variable">Local</span>                           <span class="hljs-built_in">True</span>        <span class="hljs-number">621</span><span class="hljs-variable">d</span><br><span class="hljs-variable">v1beta1</span><span class="hljs-operator">.</span><span class="hljs-variable">scheduling</span><span class="hljs-operator">.</span><span class="hljs-variable">k8s</span><span class="hljs-operator">.</span><span class="hljs-variable">io</span>              <span class="hljs-variable">Local</span>                           <span class="hljs-built_in">True</span>        <span class="hljs-number">621</span><span class="hljs-variable">d</span><br><span class="hljs-variable">v1beta1</span><span class="hljs-operator">.</span><span class="hljs-variable">storage</span><span class="hljs-operator">.</span><span class="hljs-variable">k8s</span><span class="hljs-operator">.</span><span class="hljs-variable">io</span>                 <span class="hljs-variable">Local</span>                           <span class="hljs-built_in">True</span>        <span class="hljs-number">621</span><span class="hljs-variable">d</span><br><span class="hljs-variable">v1beta2</span><span class="hljs-operator">.</span><span class="hljs-variable">custom</span><span class="hljs-operator">.</span><span class="hljs-variable">metrics</span><span class="hljs-operator">.</span><span class="hljs-variable">k8s</span><span class="hljs-operator">.</span><span class="hljs-variable">io</span>          <span class="hljs-variable">monitoring</span><span class="hljs-operator">/</span><span class="hljs-variable">prometheus</span><span class="hljs-operator">-</span><span class="hljs-variable">adapter</span>   <span class="hljs-built_in">True</span>        <span class="hljs-number">31</span><span class="hljs-variable">h</span><br><span class="hljs-variable">v2beta1</span><span class="hljs-operator">.</span><span class="hljs-variable">autoscaling</span>                    <span class="hljs-variable">Local</span>                           <span class="hljs-built_in">True</span>        <span class="hljs-number">621</span><span class="hljs-variable">d</span><br><span class="hljs-variable">v2beta2</span><span class="hljs-operator">.</span><span class="hljs-variable">autoscaling</span>                    <span class="hljs-variable">Local</span>                           <span class="hljs-built_in">True</span>        <span class="hljs-number">621</span><span class="hljs-variable">d</span><br><span class="hljs-operator">....</span><br></code></pre></td></tr></table></figure><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">[root@k8s-<span class="hljs-literal">master</span>-<span class="hljs-number">01</span> prometheus-adapter]<span class="hljs-comment"># kubectl get pod -n monitoring</span><br>NAME                                  READY   STATUS    RESTARTS   AGE<br>kube-state-metrics-<span class="hljs-number">69</span>d87f556-dcccq    <span class="hljs-number">4</span>/<span class="hljs-number">4</span>     Running   <span class="hljs-number">0</span>          <span class="hljs-number">43</span>d<br><span class="hljs-keyword">node</span><span class="hljs-title">-exporter-249cv</span>                   <span class="hljs-number">2</span>/<span class="hljs-number">2</span>     Running   <span class="hljs-number">0</span>          <span class="hljs-number">41</span>d<br><span class="hljs-keyword">node</span><span class="hljs-title">-exporter-4xbm2</span>                   <span class="hljs-number">2</span>/<span class="hljs-number">2</span>     Running   <span class="hljs-number">0</span>          <span class="hljs-number">6</span>d6h<br><span class="hljs-keyword">node</span><span class="hljs-title">-exporter-545k4</span>                   <span class="hljs-number">2</span>/<span class="hljs-number">2</span>     Running   <span class="hljs-number">0</span>          <span class="hljs-number">41</span>d<br><span class="hljs-keyword">node</span><span class="hljs-title">-exporter-8hchf</span>                   <span class="hljs-number">2</span>/<span class="hljs-number">2</span>     Running   <span class="hljs-number">0</span>          <span class="hljs-number">41</span>d<br><span class="hljs-keyword">node</span><span class="hljs-title">-exporter-kxgx7</span>                   <span class="hljs-number">2</span>/<span class="hljs-number">2</span>     Running   <span class="hljs-number">0</span>          <span class="hljs-number">41</span>d<br><span class="hljs-keyword">node</span><span class="hljs-title">-exporter-mfwxl</span>                   <span class="hljs-number">2</span>/<span class="hljs-number">2</span>     Running   <span class="hljs-number">0</span>          <span class="hljs-number">41</span>d<br><span class="hljs-keyword">node</span><span class="hljs-title">-exporter-qrpv5</span>                   <span class="hljs-number">2</span>/<span class="hljs-number">2</span>     Running   <span class="hljs-number">0</span>          <span class="hljs-number">41</span>d<br><span class="hljs-keyword">node</span><span class="hljs-title">-exporter-xhr6b</span>                   <span class="hljs-number">2</span>/<span class="hljs-number">2</span>     Running   <span class="hljs-number">0</span>          <span class="hljs-number">41</span>d<br>prometheus-adapter-<span class="hljs-number">6</span>bc9d8bd9c-<span class="hljs-number">86</span>v5q   <span class="hljs-number">1</span>/<span class="hljs-number">1</span>     Running   <span class="hljs-number">0</span>          <span class="hljs-number">30h</span><br>prometheus-adapter-<span class="hljs-number">6</span>bc9d8bd9c-<span class="hljs-number">96</span>t6q   <span class="hljs-number">1</span>/<span class="hljs-number">1</span>     Running   <span class="hljs-number">0</span>          <span class="hljs-number">30h</span><br>prometheus-k8s-<span class="hljs-number">0</span>                      <span class="hljs-number">2</span>/<span class="hljs-number">2</span>     Running   <span class="hljs-number">0</span>          <span class="hljs-number">7</span>d8h<br></code></pre></td></tr></table></figure><h2 id="Prometheus-adapter配置写法"><a href="#Prometheus-adapter配置写法" class="headerlink" title="Prometheus-adapter配置写法"></a>Prometheus-adapter配置写法</h2><p>adapter 使用字段 rules 、resourceRules 和 externalRules 分别表示 <code>custom metrics</code>、<code>resource metrics</code> 和<code>external metrics</code>，如本例中</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">ConfigMap</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">adapter-config</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">monitoring</span><br><span class="hljs-attr">data:</span><br>  <span class="hljs-attr">config.yaml:</span> <span class="hljs-string">|</span><br><span class="hljs-string">    rules:</span><br><span class="hljs-string">    - seriesQuery: &#x27;&#123;__name__=~&quot;^container_.*&quot;,container!=&quot;POD&quot;,namespace!=&quot;&quot;,pod!=&quot;&quot;&#125;&#x27;</span><br><span class="hljs-string">      seriesFilters: []</span><br><span class="hljs-string">      resources:</span><br><span class="hljs-string">        overrides:</span><br><span class="hljs-string">          namespace:</span><br><span class="hljs-string">            resource: namespace</span><br><span class="hljs-string">          pod:</span><br><span class="hljs-string">            resource: pod</span><br><span class="hljs-string">      name:</span><br><span class="hljs-string">        matches: ^container_(.*)_seconds_total$</span><br><span class="hljs-string">        as: &quot;&quot;</span><br><span class="hljs-string">      metricsQuery: sum(rate(&lt;&lt;.Series&gt;&gt;&#123;&lt;&lt;.LabelMatchers&gt;&gt;,container!=&quot;POD&quot;&#125;[1m])) by (&lt;&lt;.GroupBy&gt;&gt;)</span><br><span class="hljs-string">    - seriesQuery: &#x27;&#123;__name__=~&quot;^container_.*&quot;,container!=&quot;POD&quot;,namespace!=&quot;&quot;,pod!=&quot;&quot;&#125;&#x27;</span><br><span class="hljs-string">      seriesFilters:</span><br><span class="hljs-string">      - isNot: ^container_.*_seconds_total$</span><br><span class="hljs-string">      resources:</span><br><span class="hljs-string">        overrides:</span><br><span class="hljs-string">          namespace:</span><br><span class="hljs-string">            resource: namespace</span><br><span class="hljs-string">          pod:</span><br><span class="hljs-string">            resource: pod</span><br><span class="hljs-string">      name:</span><br><span class="hljs-string">        matches: ^container_(.*)_total$</span><br><span class="hljs-string">        as: &quot;&quot;</span><br><span class="hljs-string">      metricsQuery: sum(rate(&lt;&lt;.Series&gt;&gt;&#123;&lt;&lt;.LabelMatchers&gt;&gt;,container!=&quot;POD&quot;&#125;[1m])) by (&lt;&lt;.GroupBy&gt;&gt;)</span><br><span class="hljs-string">    - seriesQuery: &#x27;&#123;__name__=~&quot;^container_.*&quot;,container!=&quot;POD&quot;,namespace!=&quot;&quot;,pod!=&quot;&quot;&#125;&#x27;</span><br><span class="hljs-string">      seriesFilters:</span><br><span class="hljs-string">      - isNot: ^container_.*_total$</span><br><span class="hljs-string">      resources:</span><br><span class="hljs-string">        overrides:</span><br><span class="hljs-string">          namespace:</span><br><span class="hljs-string">            resource: namespace</span><br><span class="hljs-string">          pod:</span><br><span class="hljs-string">            resource: pod</span><br><span class="hljs-string">      name:</span><br><span class="hljs-string">        matches: ^container_(.*)$</span><br><span class="hljs-string">        as: &quot;&quot;</span><br><span class="hljs-string">      metricsQuery: sum(&lt;&lt;.Series&gt;&gt;&#123;&lt;&lt;.LabelMatchers&gt;&gt;,container!=&quot;POD&quot;&#125;) by (&lt;&lt;.GroupBy&gt;&gt;)</span><br><span class="hljs-string">    - seriesQuery: &#x27;&#123;namespace!=&quot;&quot;,__name__!~&quot;^container_.*&quot;&#125;&#x27;</span><br><span class="hljs-string">      seriesFilters:</span><br><span class="hljs-string">      - isNot: .*_total$</span><br><span class="hljs-string">      resources:</span><br><span class="hljs-string">        template: &lt;&lt;.Resource&gt;&gt;</span><br><span class="hljs-string">      name:</span><br><span class="hljs-string">        matches: &quot;&quot;</span><br><span class="hljs-string">        as: &quot;&quot;</span><br><span class="hljs-string">      metricsQuery: sum(&lt;&lt;.Series&gt;&gt;&#123;&lt;&lt;.LabelMatchers&gt;&gt;&#125;) by (&lt;&lt;.GroupBy&gt;&gt;)</span><br><span class="hljs-string">    - seriesQuery: &#x27;&#123;namespace!=&quot;&quot;,__name__!~&quot;^container_.*&quot;&#125;&#x27;</span><br><span class="hljs-string">      seriesFilters:</span><br><span class="hljs-string">      - isNot: .*_seconds_total</span><br><span class="hljs-string">      resources:</span><br><span class="hljs-string">        template: &lt;&lt;.Resource&gt;&gt;</span><br><span class="hljs-string">      name:</span><br><span class="hljs-string">        matches: ^(.*)_total$</span><br><span class="hljs-string">        as: &quot;&quot;</span><br><span class="hljs-string">      metricsQuery: sum(rate(&lt;&lt;.Series&gt;&gt;&#123;&lt;&lt;.LabelMatchers&gt;&gt;&#125;[1m])) by (&lt;&lt;.GroupBy&gt;&gt;)</span><br><span class="hljs-string">    - seriesQuery: &#x27;&#123;namespace!=&quot;&quot;,__name__!~&quot;^container_.*&quot;&#125;&#x27;</span><br><span class="hljs-string">      seriesFilters: []</span><br><span class="hljs-string">      resources:</span><br><span class="hljs-string">        template: &lt;&lt;.Resource&gt;&gt;</span><br><span class="hljs-string">      name:</span><br><span class="hljs-string">        matches: ^(.*)_seconds_total$</span><br><span class="hljs-string">        as: &quot;&quot;</span><br><span class="hljs-string">      metricsQuery: sum(rate(&lt;&lt;.Series&gt;&gt;&#123;&lt;&lt;.LabelMatchers&gt;&gt;&#125;[1m])) by (&lt;&lt;.GroupBy&gt;&gt;)</span><br><span class="hljs-string">    &quot;resourceRules&quot;:</span><br><span class="hljs-string">      &quot;cpu&quot;:</span><br><span class="hljs-string">        &quot;containerLabel&quot;: &quot;container&quot;</span><br><span class="hljs-string">        &quot;containerQuery&quot;: |</span><br><span class="hljs-string">          sum by (&lt;&lt;.GroupBy&gt;&gt;) (</span><br><span class="hljs-string">            irate (</span><br><span class="hljs-string">                container_cpu_usage_seconds_total&#123;&lt;&lt;.LabelMatchers&gt;&gt;,pod!=&quot;&quot;&#125;[120s]</span><br><span class="hljs-string">            )</span><br><span class="hljs-string">          )</span><br><span class="hljs-string">        &quot;nodeQuery&quot;: |</span><br><span class="hljs-string">          sum by (&lt;&lt;.GroupBy&gt;&gt;) (</span><br><span class="hljs-string">            1 - irate(</span><br><span class="hljs-string">              node_cpu_seconds_total&#123;mode=&quot;idle&quot;&#125;[60s]</span><br><span class="hljs-string">            )</span><br><span class="hljs-string">            * on(namespace, pod) group_left(node) (</span><br><span class="hljs-string">              node_namespace_pod:kube_pod_info:&#123;&lt;&lt;.LabelMatchers&gt;&gt;&#125;</span><br><span class="hljs-string">            )</span><br><span class="hljs-string">          )</span><br><span class="hljs-string">          or sum by (&lt;&lt;.GroupBy&gt;&gt;) (</span><br><span class="hljs-string">            1 - irate(</span><br><span class="hljs-string">              windows_cpu_time_total&#123;mode=&quot;idle&quot;, job=&quot;windows-exporter&quot;,&lt;&lt;.LabelMatchers&gt;&gt;&#125;[4m]</span><br><span class="hljs-string">            )</span><br><span class="hljs-string">          )</span><br><span class="hljs-string">        &quot;resources&quot;:</span><br><span class="hljs-string">          &quot;overrides&quot;:</span><br><span class="hljs-string">            &quot;namespace&quot;:</span><br><span class="hljs-string">              &quot;resource&quot;: &quot;namespace&quot;</span><br><span class="hljs-string">            &quot;node&quot;:</span><br><span class="hljs-string">              &quot;resource&quot;: &quot;node&quot;</span><br><span class="hljs-string">            &quot;pod&quot;:</span><br><span class="hljs-string">              &quot;resource&quot;: &quot;pod&quot;</span><br><span class="hljs-string">      &quot;memory&quot;:</span><br><span class="hljs-string">        &quot;containerLabel&quot;: &quot;container&quot;</span><br><span class="hljs-string">        &quot;containerQuery&quot;: |</span><br><span class="hljs-string">          sum by (&lt;&lt;.GroupBy&gt;&gt;) (</span><br><span class="hljs-string">            container_memory_working_set_bytes&#123;&lt;&lt;.LabelMatchers&gt;&gt;,pod!=&quot;&quot;&#125;</span><br><span class="hljs-string">          )</span><br><span class="hljs-string">        &quot;nodeQuery&quot;: |</span><br><span class="hljs-string">          sum by (&lt;&lt;.GroupBy&gt;&gt;) (</span><br><span class="hljs-string">            node_memory_MemTotal_bytes&#123;job=&quot;node-exporter&quot;,&lt;&lt;.LabelMatchers&gt;&gt;&#125;</span><br><span class="hljs-string">            -</span><br><span class="hljs-string">            node_memory_MemAvailable_bytes&#123;job=&quot;node-exporter&quot;,&lt;&lt;.LabelMatchers&gt;&gt;&#125;</span><br><span class="hljs-string">          )</span><br><span class="hljs-string">          or sum by (&lt;&lt;.GroupBy&gt;&gt;) (</span><br><span class="hljs-string">            windows_cs_physical_memory_bytes&#123;job=&quot;windows-exporter&quot;,&lt;&lt;.LabelMatchers&gt;&gt;&#125;</span><br><span class="hljs-string">            -</span><br><span class="hljs-string">            windows_memory_available_bytes&#123;job=&quot;windows-exporter&quot;,&lt;&lt;.LabelMatchers&gt;&gt;&#125;</span><br><span class="hljs-string">          )</span><br><span class="hljs-string">        &quot;resources&quot;:</span><br><span class="hljs-string">          &quot;overrides&quot;:</span><br><span class="hljs-string">            &quot;node&quot;:</span><br><span class="hljs-string">              &quot;resource&quot;: &quot;node&quot;</span><br><span class="hljs-string">            &quot;namespace&quot;:</span><br><span class="hljs-string">              &quot;resource&quot;: &quot;namespace&quot;</span><br><span class="hljs-string">            &quot;pod&quot;:</span><br><span class="hljs-string">              &quot;resource&quot;: &quot;pod&quot;</span><br><span class="hljs-string">      &quot;window&quot;: &quot;5m&quot;</span><br><span class="hljs-string">    externalRules:</span><br><span class="hljs-string">    - seriesQuery: &#x27;&#123;__name__=~&quot;^.*_queue_(length|size)$&quot;,namespace!=&quot;&quot;&#125;&#x27;</span><br><span class="hljs-string">      resources:</span><br><span class="hljs-string">        overrides:</span><br><span class="hljs-string">          namespace:</span><br><span class="hljs-string">            resource: namespace</span><br><span class="hljs-string">      name:</span><br><span class="hljs-string">        matches: ^.*_queue_(length|size)$</span><br><span class="hljs-string">        as: &quot;$0&quot;</span><br><span class="hljs-string">      metricsQuery: max(&lt;&lt;.Series&gt;&gt;&#123;&lt;&lt;.LabelMatchers&gt;&gt;&#125;)</span><br><span class="hljs-string">    - seriesQuery: &#x27;&#123;__name__=~&quot;^.*_queue$&quot;,namespace!=&quot;&quot;&#125;&#x27;</span><br><span class="hljs-string">      resources:</span><br><span class="hljs-string">        overrides:</span><br><span class="hljs-string">          namespace:</span><br><span class="hljs-string">            resource: namespace</span><br><span class="hljs-string">      name:</span><br><span class="hljs-string">        matches: ^.*_queue$</span><br><span class="hljs-string">        as: &quot;$0&quot;</span><br><span class="hljs-string">      metricsQuery: max(&lt;&lt;.Series&gt;&gt;&#123;&lt;&lt;.LabelMatchers&gt;&gt;&#125;)</span><br></code></pre></td></tr></table></figure><h3 id="adapter-的配置主要分为4个"><a href="#adapter-的配置主要分为4个" class="headerlink" title="adapter 的配置主要分为4个:"></a>adapter 的配置主要分为4个:</h3><p><strong>Discovery：指定需要处理的 Prometheus 的 metrics。通过 seriesQuery 挑选需要处理的 metrics 集合，可以通过 seriesFilters 精确过滤 metrics。</strong></p><p>seriesQuery 可以根据标签进行查找(如下)，也可以直接指定 metric name 查找</p><figure class="highlight flix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs flix">seriesQuery: &#x27;&#123;__name__=~<span class="hljs-string">&quot;^container_.*_total&quot;</span>,container_name!=<span class="hljs-string">&quot;POD&quot;</span>,<span class="hljs-keyword">namespace</span>!=<span class="hljs-string">&quot;&quot;</span>,pod_name!=<span class="hljs-string">&quot;&quot;</span>&#125;&#x27;<br>seriesFilters:<br>  - isNot: <span class="hljs-string">&quot;^container_.*_seconds_total&quot;</span><br></code></pre></td></tr></table></figure><p>seriesFilters：</p><figure class="highlight mercury"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mercury"><span class="hljs-keyword">is</span>: &lt;regex&gt;, 匹配包含该正则表达式的metrics.<br>isNot: &lt;regex&gt;, 匹配不包含该正则表达式的metrics.<br></code></pre></td></tr></table></figure><p><strong>Association：设置 metric 与 kubernetes resources 的映射关系，kubernetes resorces  可以通过 kubectl api-resources 命令查看。overrides 会将 Prometheus metric label与一个 kubernetes resource (下例为 deployment )关联。需要注意的是该 label 必须是一个真实的 kubernetes resource，如 metric 的 pod_name 可以映射为 kubernetes 的pod resource，但不能将 container_image 映射为 kubernetes 的 pod resource，映射错误会导致无法通过 custom metrics API 获取正确的值。这也表示 metric 中必须存在一个真实的 resource 名称，将其映射为 kubernetes resource。</strong></p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">resources:</span><br><span class="hljs-symbol">  overrides:</span><br><span class="hljs-symbol">    microservice:</span> <span class="hljs-punctuation">&#123;</span>group: <span class="hljs-string">&quot;apps&quot;</span>, resource: <span class="hljs-string">&quot;deployment&quot;</span><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p><strong>Naming：用于将 prometheus metrics 名称转化为 custom metrics API 所使用的metrics名称，但不会改变其本身的metric名称，即通过curl http:&#x2F;&#x2F;$(kubectl get service sample-app -o jsonpath&#x3D;’{ .spec.clusterIP }’)&#x2F;metrics 获得的仍然是老的 metric 名称。如果不需要可以不执行这一步。</strong></p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-meta"># 匹配将任何名称 &lt;name&gt;_total 转换为 &lt;name&gt;_per_second </span><br><span class="hljs-meta"># 例如 http_requests_total 变为 http_requests_per_second</span><br><span class="hljs-symbol">name:</span><br><span class="hljs-symbol">  matches:</span> <span class="hljs-string">&quot;^(.*)_total$&quot;</span><br><span class="hljs-symbol">  as:</span> <span class="hljs-string">&quot;$&#123;1&#125;_per_second&quot;</span><br></code></pre></td></tr></table></figure><p>如本例中 <code>HPA</code> 后续可以通过 <code>/apis/&#123;APIService-name&#125;/v1beta1/namespaces/&#123;namespaces-name&#125;/pods/*/http_requests_per_second</code> 获取metrics</p><p><strong>Querying：处理调用 custom metrics API 获取到的 metrics 的 value，该值最终提供给 HPA 进行扩缩容</strong></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-comment"># convert cumulative cAdvisor metrics into rates calculated over 2 minutes</span><br><span class="hljs-attribute">metricsQuery</span>: <span class="hljs-string">&quot;sum(rate(&lt;&lt;.Series&gt;&gt;&#123;&lt;&lt;.LabelMatchers&gt;&gt;,container_name!=&quot;</span>POD<span class="hljs-string">&quot;&#125;[2m])) by (&lt;&lt;.GroupBy&gt;&gt;)&quot;</span><br></code></pre></td></tr></table></figure><p>metricsQuery 字段使用 Go template 将 URL 请求转变为 Prometheus 的请求，它会提取 custom metrics API 请求中的字段，并将其划分为 metric name,group-resource,以及 group-resource 中的一个或多个 objects，对应如下字段：</p><ul><li>Series: metric名称</li><li>LabelMatchers: 以逗号分割的 objects，当前表示特定 group-resource 加上命名空间的 label(如果该 group-resource 是 namespaced 的)</li><li>GroupBy：以逗号分割的 label 的集合，当前表示 LabelMatchers 中的group-resource label</li></ul><p>假设 metrics http_requests_per_second 如下</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs fsharp"><span class="hljs-keyword">http_requests_per_second</span>&#123;pod<span class="hljs-operator">=</span><span class="hljs-string">&quot;pod1&quot;</span>,service<span class="hljs-operator">=</span><span class="hljs-string">&quot;nginx1&quot;</span>,<span class="hljs-keyword">namespace</span><span class="hljs-operator">=</span><span class="hljs-string">&quot;somens&quot;</span>&#125;<br><span class="hljs-keyword">http_requests_per_second</span>&#123;pod<span class="hljs-operator">=</span><span class="hljs-string">&quot;pod2&quot;</span>,service<span class="hljs-operator">=</span><span class="hljs-string">&quot;nginx2&quot;</span>,<span class="hljs-keyword">namespace</span><span class="hljs-operator">=</span><span class="hljs-string">&quot;somens&quot;</span>&#125;<br></code></pre></td></tr></table></figure><p>当调用 <code>kubectl get --raw &quot;/apis/&#123;APIService-name&#125;/v1beta1/namespaces/somens/pods/*/http_request_per_second&quot;</code>时，metricsQuery 字段的模板的实际内容如下：</p><ul><li>Series: “http_requests_total”</li><li>LabelMatchers: “pod&#x3D;~&quot;pod1|pod2”,namespace&#x3D;”somens”</li><li>GroupBy:pod</li></ul><h3 id="HPA-的配置"><a href="#HPA-的配置" class="headerlink" title="HPA 的配置"></a>HPA 的配置</h3><p>HPA 通常会根据 type 从 aggregated APIs (metrics.k8s.io, custom.metrics.k8s.io, external.metrics.k8s.io)的资源路径上拉取 metrics</p><p>HPA 支持的 metrics 类型有4种(下述为v2beta2的格式)：</p><p>resource：目前仅支持 cpu 和 memory。target 可以指定数值(targetAverageValue) 和比例 (targetAverageUtilization) 进行扩缩容 HPA 从 metrics.k8s.io 获取 resource metrics</p><p>pods：custom metrics，这类 metrics 描述了 pod 类型，target 仅支持按指定数值(targetAverageValue)进行扩缩容。targetAverageValue 用于计算所有相关 pods 上的 metrics  的平均值</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">type:</span> Pods<br><span class="hljs-symbol">pods:</span><br><span class="hljs-symbol">  metric:</span><br><span class="hljs-symbol">    name:</span> packets-per-second<br><span class="hljs-symbol">  target:</span><br><span class="hljs-symbol">    type:</span> AverageValue<br><span class="hljs-symbol">    averageValue:</span> <span class="hljs-number">1</span>k<br></code></pre></td></tr></table></figure><p>HPA 从 custom.metrics.k8s.io 获取 custom metrics</p><p>object：custom metrics，这类 metrics 描述了相同命名空间下的(非 pod )类型。target 支持通过 value 和 AverageValue 进行扩缩容，前者直接将 metric 与 target 比较进行扩缩容，后者通过 metric&#x2F; 相关的 pod 数目与 target 比较进行扩缩容</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">type:</span> Object<br><span class="hljs-symbol">object:</span><br><span class="hljs-symbol">  metric:</span><br><span class="hljs-symbol">    name:</span> requests-per-second<br><span class="hljs-symbol">  describedObject:</span><br><span class="hljs-symbol">    apiVersion:</span> extensions/v1beta1<br><span class="hljs-symbol">    kind:</span> Ingress<br><span class="hljs-symbol">    name:</span> main-route<br><span class="hljs-symbol">  target:</span><br><span class="hljs-symbol">    type:</span> Value<br><span class="hljs-symbol">    value:</span> <span class="hljs-number">2</span>k<br></code></pre></td></tr></table></figure><p>external：kubernetes 1.10+支持的新功能。通常 Prometheus 能够直接从 RabbitMQ 中抓取指标。不幸的是，RabbitMQ的指标端点并没有包含<code>queue length</code>指标。为了收集这些数据，我们使用了<code>RabbitMQ Exporter</code>. 一旦我们将它连接到 RabbitMQ，我们将拥有大量的 RabbitMQ 指标，我们可以将其用作扩展的基础，然后将它们存储在其时间序。Prometheus 能够抓取这些指标列数据库中。 prometheus 中以<code>rabbitmq_queue</code>开头的任何指标都可以通过这个新的 <code>external.metrics.k8s.io</code> API 以 1 分钟间隔的速率形式提供。（也就是说 任何pod都可以用这些值来实现pod扩容，哪怕是两个业务毫无关系。但前提是需要把他注册到api-resources）</p><ul><li>custom.metrics.k8s.io 只支持pod 本身metrics指标来扩容</li><li>external.metrics.k8s.io 可以是其它业务pod 根据这个值来扩容（例如我可以用nginx的指标值来扩 mysql，也可以用mysql_exporter的值 来扩mysql。）</li></ul><p>例如我们可以用<code>mongo_exporter</code>的连接数来扩容nginx，HPA 从 <code>external.metrics.k8s.io</code> 获取 external metrics</p><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-attribute">kind</span><span class="hljs-punctuation">:</span> <span class="hljs-string">Deployment</span><br><span class="hljs-attribute">metadata</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">deployment-firstspec:</span><br>  <span class="hljs-attribute">replicas</span><span class="hljs-punctuation">:</span> <span class="hljs-string">2</span><br>  <span class="hljs-attribute">template</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-attribute">metadata</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-attribute">labels</span><span class="hljs-punctuation">:</span><br>        <span class="hljs-attribute">app</span><span class="hljs-punctuation">:</span> <span class="hljs-string">deployment-first</span><br>  <span class="hljs-attribute">spec</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-attribute">containers</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">name: deployment-first</span><br>        <span class="hljs-attribute">image</span><span class="hljs-punctuation">:</span> <span class="hljs-string">nginx</span><br>        <span class="hljs-attribute">imagePullPolicy</span><span class="hljs-punctuation">:</span> <span class="hljs-string">Always</span><br>      <span class="hljs-attribute">ports</span><span class="hljs-punctuation">:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">containerPort: 80</span><br>      <span class="hljs-attribute">protocol</span><span class="hljs-punctuation">:</span> <span class="hljs-string">TCP</span><br>      <span class="hljs-attribute">resources</span><span class="hljs-punctuation">:</span><br>        <span class="hljs-attribute">requests</span><span class="hljs-punctuation">:</span><br>         <span class="hljs-attribute">cpu</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;1m&quot;</span><br>        <span class="hljs-attribute">limits</span><span class="hljs-punctuation">:</span><br>         <span class="hljs-attribute">cpu</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;100m</span><br></code></pre></td></tr></table></figure><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">apiVersion:</span> autoscaling/v2beta1<br><span class="hljs-symbol">kind:</span> HorizontalPodAutoscaler<br><span class="hljs-symbol">metadata:</span><br><span class="hljs-symbol">  name:</span> app-server-mongo-conn-hpa<br><span class="hljs-symbol">spec:</span><br><span class="hljs-symbol">  scaleTargetRef:</span><br><span class="hljs-symbol">    apiVersion:</span> apps/v1<br><span class="hljs-symbol">    kind:</span> Deployment<br><span class="hljs-symbol">    name:</span> deployment-first<br><span class="hljs-symbol">  minReplicas:</span> <span class="hljs-number">2</span><br><span class="hljs-symbol">  maxReplicas:</span> <span class="hljs-number">5</span><br><span class="hljs-symbol">  metrics:</span><br>  - type: External <br><span class="hljs-symbol">    external:</span><br>      metric<br><span class="hljs-symbol">        name:</span> mongodb_current_connection<br><span class="hljs-symbol">        selector:</span><br><span class="hljs-symbol">           matchLabels:</span><br><span class="hljs-symbol">             queue:</span> <span class="hljs-string">&quot;worker_tasks&quot;</span><br><span class="hljs-symbol">      target:</span><br><span class="hljs-symbol">        type:</span> AverageValue<br><span class="hljs-symbol">        averageValue:</span> <span class="hljs-number">30</span><br><br></code></pre></td></tr></table></figure><p><img src="/images/custom-metrics-hpa-3.png" alt="custom-metrics-hpa-3"></p><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-attribute">externalRules</span><span class="hljs-punctuation">:</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">seriesQuery: &#x27;&#123;__name__=~&quot;^.*_queue_(length|size)$&quot;,namespace!=&quot;&quot;&#125;&#x27;</span><br>  <span class="hljs-attribute">resources</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-attribute">overrides</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-attribute">namespace</span><span class="hljs-punctuation">:</span><br>        <span class="hljs-attribute">resource</span><span class="hljs-punctuation">:</span> <span class="hljs-string">namespace</span><br>  <span class="hljs-attribute">name</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-attribute">matches</span><span class="hljs-punctuation">:</span> <span class="hljs-string">^.*_queue_(length|size)$</span><br>    <span class="hljs-attribute">as</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;$0&quot;</span><br>  <span class="hljs-attribute">metricsQuery</span><span class="hljs-punctuation">:</span> <span class="hljs-string">max(&lt;&lt;.Series&gt;&gt;&#123;&lt;&lt;.LabelMatchers&gt;&gt;&#125;)</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">seriesQuery: &#x27;&#123;__name__=~&quot;^.*_queue$&quot;,namespace!=&quot;&quot;&#125;&#x27;</span><br>  <span class="hljs-attribute">resources</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-attribute">overrides</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-attribute">namespace</span><span class="hljs-punctuation">:</span><br>        <span class="hljs-attribute">resource</span><span class="hljs-punctuation">:</span> <span class="hljs-string">namespace</span><br>  <span class="hljs-attribute">name</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-attribute">matches</span><span class="hljs-punctuation">:</span> <span class="hljs-string">^.*_queue$</span><br>    <span class="hljs-attribute">as</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;$0&quot;</span><br>  <span class="hljs-attribute">metricsQuery</span><span class="hljs-punctuation">:</span> <span class="hljs-string">max(&lt;&lt;.Series&gt;&gt;&#123;&lt;&lt;.LabelMatchers&gt;&gt;&#125;)</span><br></code></pre></td></tr></table></figure><p>被上面的规则匹配到的指标会注册为一个新的资源对象</p><figure class="highlight moonscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs moonscript">[root@k8s-master<span class="hljs-number">-01</span> ~]# kubectl api-resources<br>.....<br>ipamhandles                                          crd.projectcalico.org          <span class="hljs-literal">false</span>        IPAMHandle<br>ippools                                              crd.projectcalico.org          <span class="hljs-literal">false</span>        IPPool<br>networkpolicies                                      crd.projectcalico.org          <span class="hljs-literal">true</span>         NetworkPolicy<br>networksets                                          crd.projectcalico.org          <span class="hljs-literal">true</span>         NetworkSet<br>events                                  ev           events.k8s.<span class="hljs-built_in">io</span>                  <span class="hljs-literal">true</span>         Event<br>ingresses                               ing          extensions                     <span class="hljs-literal">true</span>         Ingress<br>node_cpu_core_throttles_total                        external.metrics.k8s.<span class="hljs-built_in">io</span>        <span class="hljs-literal">true</span>         ExternalMetricValueList<br>node_network_transmit_queue_length                   external.metrics.k8s.<span class="hljs-built_in">io</span>        <span class="hljs-literal">true</span>         ExternalMetricValueList<br>prometheus_notifications_queue_length                external.metrics.k8s.<span class="hljs-built_in">io</span>        <span class="hljs-literal">true</span>         ExternalMetricValueList<br>nodes                                                metrics.k8s.<span class="hljs-built_in">io</span>                 <span class="hljs-literal">false</span>        NodeMetrics<br>pods                                                 metrics.k8s.<span class="hljs-built_in">io</span>                 <span class="hljs-literal">true</span>         PodMetrics<br>.....<br></code></pre></td></tr></table></figure><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs autoit">[root<span class="hljs-symbol">@k8s</span>-master<span class="hljs-number">-01</span> ~]<span class="hljs-meta"># kubectl get --raw <span class="hljs-string">&quot;/apis/external.metrics.k8s.io/v1beta1/namespaces/monitoring/node_cpu_core_throttles_total&quot;</span> | jq .                                  </span><br>&#123;<br>  <span class="hljs-string">&quot;kind&quot;</span>: <span class="hljs-string">&quot;ExternalMetricValueList&quot;</span>,<br>  <span class="hljs-string">&quot;apiVersion&quot;</span>: <span class="hljs-string">&quot;external.metrics.k8s.io/v1beta1&quot;</span>,<br>  <span class="hljs-string">&quot;metadata&quot;</span>: &#123;&#125;,<br>  <span class="hljs-string">&quot;items&quot;</span>: [<br>    &#123;<br>      <span class="hljs-string">&quot;metricName&quot;</span>: <span class="hljs-string">&quot;node_cpu_core_throttles_total&quot;</span>,<br>      <span class="hljs-string">&quot;metricLabels&quot;</span>: &#123;<br>        <span class="hljs-string">&quot;__name__&quot;</span>: <span class="hljs-string">&quot;node_cpu_core_throttles_total&quot;</span>,<br>        <span class="hljs-string">&quot;app_kubernetes_io_name&quot;</span>: <span class="hljs-string">&quot;node-exporter&quot;</span>,<br>        <span class="hljs-string">&quot;app_kubernetes_io_version&quot;</span>: <span class="hljs-string">&quot;v1.2.2&quot;</span>,<br>        <span class="hljs-string">&quot;container&quot;</span>: <span class="hljs-string">&quot;node-exporter&quot;</span>,<br>        <span class="hljs-string">&quot;core&quot;</span>: <span class="hljs-string">&quot;0&quot;</span>,<br>        <span class="hljs-string">&quot;endpoint&quot;</span>: <span class="hljs-string">&quot;https&quot;</span>,<br>        <span class="hljs-string">&quot;instance&quot;</span>: <span class="hljs-string">&quot;172.16.50.1:9100&quot;</span>,<br>        <span class="hljs-string">&quot;job&quot;</span>: <span class="hljs-string">&quot;node-exporter&quot;</span>,<br>        <span class="hljs-string">&quot;namespace&quot;</span>: <span class="hljs-string">&quot;monitoring&quot;</span>,<br>        <span class="hljs-string">&quot;package&quot;</span>: <span class="hljs-string">&quot;0&quot;</span>,<br>        <span class="hljs-string">&quot;pod&quot;</span>: <span class="hljs-string">&quot;node-exporter-8hchf&quot;</span>,<br>        <span class="hljs-string">&quot;service&quot;</span>: <span class="hljs-string">&quot;node-exporter&quot;</span>,<br>        <span class="hljs-string">&quot;service_name&quot;</span>: <span class="hljs-string">&quot;node-exporter-172.16.50.1&quot;</span><br>      &#125;,<br>      <span class="hljs-string">&quot;timestamp&quot;</span>: <span class="hljs-string">&quot;2021-12-23T08:21:49Z&quot;</span>,<br>      <span class="hljs-string">&quot;value&quot;</span>: <span class="hljs-string">&quot;0&quot;</span><br>    &#125;,<br>    &#123;<br>      <span class="hljs-string">&quot;metricName&quot;</span>: <span class="hljs-string">&quot;node_cpu_core_throttles_total&quot;</span>,<br>      <span class="hljs-string">&quot;metricLabels&quot;</span>: &#123;<br>        <span class="hljs-string">&quot;__name__&quot;</span>: <span class="hljs-string">&quot;node_cpu_core_throttles_total&quot;</span>,<br>        <span class="hljs-string">&quot;app_kubernetes_io_name&quot;</span>: <span class="hljs-string">&quot;node-exporter&quot;</span>,<br>        <span class="hljs-string">&quot;app_kubernetes_io_version&quot;</span>: <span class="hljs-string">&quot;v1.2.2&quot;</span>,<br>        <span class="hljs-string">&quot;container&quot;</span>: <span class="hljs-string">&quot;node-exporter&quot;</span>,<br>        <span class="hljs-string">&quot;core&quot;</span>: <span class="hljs-string">&quot;0&quot;</span>,<br>        <span class="hljs-string">&quot;endpoint&quot;</span>: <span class="hljs-string">&quot;https&quot;</span>,<br>        <span class="hljs-string">&quot;instance&quot;</span>: <span class="hljs-string">&quot;172.16.50.29:9100&quot;</span>,<br>        <span class="hljs-string">&quot;job&quot;</span>: <span class="hljs-string">&quot;node-exporter&quot;</span>,<br>        <span class="hljs-string">&quot;namespace&quot;</span>: <span class="hljs-string">&quot;monitoring&quot;</span>,<br>        <span class="hljs-string">&quot;package&quot;</span>: <span class="hljs-string">&quot;0&quot;</span>,<br>        <span class="hljs-string">&quot;pod&quot;</span>: <span class="hljs-string">&quot;node-exporter-mfwxl&quot;</span>,<br>        <span class="hljs-string">&quot;service&quot;</span>: <span class="hljs-string">&quot;node-exporter&quot;</span>,<br>        <span class="hljs-string">&quot;service_name&quot;</span>: <span class="hljs-string">&quot;node-exporter-172.16.50.29&quot;</span><br>      &#125;,<br>      <span class="hljs-string">&quot;timestamp&quot;</span>: <span class="hljs-string">&quot;2021-12-23T08:21:49Z&quot;</span>,<br>      <span class="hljs-string">&quot;value&quot;</span>: <span class="hljs-string">&quot;0&quot;</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Kubernetes-metrics-的获取"><a href="#Kubernetes-metrics-的获取" class="headerlink" title="Kubernetes metrics 的获取"></a>Kubernetes metrics 的获取</h3><p>假设注册的 APIService为<code>custom.metrics.k8s.io/v1beta1</code>，在注册好APIService 后 HorizontalPodAutoscaler controller 会从以 <code>/apis/custom.metrics.k8s.io/v1beta1</code> 为根 API 的路径上抓取 metrics。metrics 的 API path 可以分为 namespaced 和 non-namespaced 类型的。通过如下方式校验 HPA 是否可以获取到 metrics：</p><h4 id="namespaced"><a href="#namespaced" class="headerlink" title="namespaced"></a>namespaced</h4><p>获取指定 namespace 下指定 object 类型和名称的 metrics</p><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="language-xml">kubectl get --raw &quot;/apis/custom.metrics.k8s.io/v1beta1/namespaces/</span><span class="hljs-template-variable">&#123;namespace-name&#125;</span><span class="language-xml">/</span><span class="hljs-template-variable">&#123;object-type&#125;</span><span class="language-xml">/</span><span class="hljs-template-variable">&#123;object-name&#125;</span><span class="language-xml">/</span><span class="hljs-template-variable">&#123;metric-name...&#125;</span><span class="language-xml">&quot; | jq .   </span><br></code></pre></td></tr></table></figure><p>如获取 monitor 命名空间下名为 grafana 的 pod 的start_time_seconds metric</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">kubectl <span class="hljs-built_in">get</span> --raw <span class="hljs-string">&quot;/apis/custom.metrics.k8s.io/v1beta1/namespaces/monitor/pods/grafana/start_time_seconds&quot;</span> | jq .   <br></code></pre></td></tr></table></figure><p>获取指定 namespace 下所有特定 object 类型的 metrics</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">kubectl <span class="hljs-built_in">get</span> --raw <span class="hljs-string">&quot;/apis/custom.metrics.k8s.io/v1beta1/namespaces/&#123;namespace-name&#125;/pods/*/&#123;metric-name...&#125;&quot;</span> | jq .   <br></code></pre></td></tr></table></figure><p>如获取 monitor 命名空间下名为所有 pod 的 start_time_seconds metric</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">kubectl <span class="hljs-built_in">get</span> --raw <span class="hljs-string">&quot;/apis/custom.metrics.k8s.io/v1beta1/namespaces/monitor/pods/*/start_time_seconds&quot;</span> | jq .   <br></code></pre></td></tr></table></figure><p>使用 labelSelector 可以选择带有特定 label 的 object</p><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="language-xml">kubectl get --raw &quot;/apis/custom.metrics.k8s.io/v1beta1/namespaces/</span><span class="hljs-template-variable">&#123;namespace-name&#125;</span><span class="language-xml">/</span><span class="hljs-template-variable">&#123;object-type&#125;</span><span class="language-xml">/</span><span class="hljs-template-variable">&#123;object-name&#125;</span><span class="language-xml">/</span><span class="hljs-template-variable">&#123;metric-name...&#125;</span><span class="language-xml">?labelSelector=</span><span class="hljs-template-variable">&#123;label-name&#125;</span><span class="language-xml">&quot; | jq .   </span><br></code></pre></td></tr></table></figure><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="language-xml">kubectl get --raw &quot;/apis/custom.metrics.k8s.io/v1beta1/namespaces/</span><span class="hljs-template-variable">&#123;namespace-name&#125;</span><span class="language-xml">/pods/*/</span><span class="hljs-template-variable">&#123;metric-name...&#125;</span><span class="language-xml">?labelSelector=</span><span class="hljs-template-variable">&#123;label-name&#125;</span><span class="language-xml">&quot; | jq .   </span><br></code></pre></td></tr></table></figure><h4 id="non-namespaced"><a href="#non-namespaced" class="headerlink" title="non-namespaced"></a>non-namespaced</h4><p>non-namespaced 和 namespaced 的类似，主要有 node，namespace，PersistentVolume 等。non-namespaced 访问有些与 custom metrics API 描述不一致。</p><p>访问 object 为 namespace 的方式如下如下</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">kubectl <span class="hljs-built_in">get</span> --raw <span class="hljs-string">&quot;/apis/custom.metrics.k8s.io/v1beta1/namespaces/&#123;namespace-name&#125;/metrics/&#123;metric-name...&#125;&quot;</span> | jq .   <br></code></pre></td></tr></table></figure><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">kubectl <span class="hljs-built_in">get</span> --raw <span class="hljs-string">&quot;/apis/custom.metrics.k8s.io/v1beta1/namespaces/*/metrics/&#123;metric-name...&#125;&quot;</span> | jq .   <br></code></pre></td></tr></table></figure><p>访问 node 的方式如下</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">kubectl <span class="hljs-built_in">get</span> --raw <span class="hljs-string">&quot;/apis/custom.metrics.k8s.io/v1beta1/nodes/&#123;node-name&#125;/&#123;metric-name...&#125;&quot;</span> | jq .   <br></code></pre></td></tr></table></figure><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-meta">---</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Service</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">sample-app</span><br>  <span class="hljs-attr">labels:</span><br>    <span class="hljs-attr">app:</span> <span class="hljs-string">sample-app</span><br>  <span class="hljs-attr">annotations:</span><br>    <span class="hljs-attr">prometheus.io/scrape:</span> <span class="hljs-string">&quot;true&quot;</span><br>    <span class="hljs-attr">prometheus.io/port:</span> <span class="hljs-string">&quot;8080&quot;</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">ports:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">http</span><br>    <span class="hljs-attr">port:</span> <span class="hljs-number">8080</span><br>    <span class="hljs-attr">targetPort:</span> <span class="hljs-number">8080</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">app:</span> <span class="hljs-string">sample-app</span><br><span class="hljs-meta">---</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">apps/v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Deployment</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">sample-app</span><br>  <span class="hljs-attr">labels:</span><br>    <span class="hljs-attr">app:</span> <span class="hljs-string">sample-app</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">replicas:</span> <span class="hljs-number">1</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">matchLabels:</span><br>      <span class="hljs-attr">app:</span> <span class="hljs-string">sample-app</span><br>  <span class="hljs-attr">template:</span><br>    <span class="hljs-attr">metadata:</span><br>      <span class="hljs-attr">labels:</span><br>        <span class="hljs-attr">app:</span> <span class="hljs-string">sample-app</span><br>        <span class="hljs-attr">istio:</span> <span class="hljs-string">ingressgateway</span><br>        <span class="hljs-attr">version:</span> <span class="hljs-string">v1</span><br>      <span class="hljs-attr">annotations:</span><br>        <span class="hljs-attr">sidecar.istio.io/inject:</span> <span class="hljs-string">&quot;true&quot;</span><br>    <span class="hljs-attr">spec:</span><br>      <span class="hljs-attr">containers:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">image:</span> <span class="hljs-string">luxas/autoscale-demo:v0.1.2</span><br>        <span class="hljs-attr">name:</span> <span class="hljs-string">metrics-provider</span><br>        <span class="hljs-attr">resources:</span><br>          <span class="hljs-attr">requests:</span><br>            <span class="hljs-attr">memory:</span> <span class="hljs-string">&quot;256Mi&quot;</span><br>            <span class="hljs-attr">cpu:</span> <span class="hljs-string">&quot;500m&quot;</span><br>          <span class="hljs-attr">limits:</span><br>            <span class="hljs-attr">memory:</span> <span class="hljs-string">&quot;256Mi&quot;</span><br>            <span class="hljs-attr">cpu:</span> <span class="hljs-string">&quot;500m&quot;</span><br>        <span class="hljs-attr">ports:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">http</span><br>          <span class="hljs-attr">containerPort:</span> <span class="hljs-number">8080</span><br><span class="hljs-meta">---</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">autoscaling/v2</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">HorizontalPodAutoscaler</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">sample-app</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">maxReplicas:</span> <span class="hljs-number">10</span><br>  <span class="hljs-attr">metrics:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">pods:</span><br>      <span class="hljs-attr">metric:</span><br>        <span class="hljs-attr">name:</span> <span class="hljs-string">http_requests</span><br>      <span class="hljs-attr">target:</span><br>        <span class="hljs-attr">averageValue:</span> <span class="hljs-string">500m</span><br>        <span class="hljs-attr">type:</span> <span class="hljs-string">AverageValue</span><br>    <span class="hljs-attr">type:</span> <span class="hljs-string">Pods</span><br>  <span class="hljs-attr">minReplicas:</span> <span class="hljs-number">2</span><br>  <span class="hljs-attr">scaleTargetRef:</span><br>    <span class="hljs-attr">apiVersion:</span> <span class="hljs-string">apps/v1</span><br>    <span class="hljs-attr">kind:</span> <span class="hljs-string">Deployment</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">sample-app</span><br></code></pre></td></tr></table></figure><h3 id="HPA在k8s中的结构"><a href="#HPA在k8s中的结构" class="headerlink" title="HPA在k8s中的结构"></a>HPA在k8s中的结构</h3><p>首先可以看一下HPA在k8s中的结构，这里找了一个k8s官方给出的HPA例子，我在关键字段上给出一些注释方便理解。</p><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-attribute">apiVersion</span><span class="hljs-punctuation">:</span> <span class="hljs-string">autoscaling/v2beta2</span><br><span class="hljs-attribute">kind</span><span class="hljs-punctuation">:</span> <span class="hljs-string">HorizontalPodAutoscaler</span><br><span class="hljs-attribute">metadata</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">php-apache</span><br>  <span class="hljs-attribute">namespace</span><span class="hljs-punctuation">:</span> <span class="hljs-string">default</span><br><span class="hljs-attribute">spec</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-comment"># HPA的伸缩对象描述，HPA会动态修改该对象的pod数量</span><br>  <span class="hljs-attribute">scaleTargetRef</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-attribute">apiVersion</span><span class="hljs-punctuation">:</span> <span class="hljs-string">apps/v1</span><br>    <span class="hljs-attribute">kind</span><span class="hljs-punctuation">:</span> <span class="hljs-string">Deployment</span><br>    <span class="hljs-attribute">name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">php-apache</span><br>  <span class="hljs-comment"># HPA的最小pod数量和最大pod数量</span><br>  <span class="hljs-attribute">minReplicas</span><span class="hljs-punctuation">:</span> <span class="hljs-string">1</span><br>  <span class="hljs-attribute">maxReplicas</span><span class="hljs-punctuation">:</span> <span class="hljs-string">10</span><br>  <span class="hljs-comment"># 监控的指标数组，支持多种类型的指标共存</span><br>  <span class="hljs-attribute">metrics</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-comment"># Object类型的指标</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">type: Object</span><br>    <span class="hljs-attribute">object</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-attribute">metric</span><span class="hljs-punctuation">:</span><br>        <span class="hljs-comment"># 指标名称</span><br>        <span class="hljs-attribute">name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">requests-per-second</span><br>      <span class="hljs-comment"># 监控指标的对象描述，指标数据来源于该对象</span><br>      <span class="hljs-attribute">describedObject</span><span class="hljs-punctuation">:</span><br>        <span class="hljs-attribute">apiVersion</span><span class="hljs-punctuation">:</span> <span class="hljs-string">networking.k8s.io/v1beta1</span><br>        <span class="hljs-attribute">kind</span><span class="hljs-punctuation">:</span> <span class="hljs-string">Ingress</span><br>        <span class="hljs-attribute">name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">main-route</span><br>      <span class="hljs-comment"># Value类型的目标值，Object类型的指标只支持Value和AverageValue类型的目标值</span><br>      <span class="hljs-attribute">target</span><span class="hljs-punctuation">:</span><br>        <span class="hljs-attribute">type</span><span class="hljs-punctuation">:</span> <span class="hljs-string">Value</span><br>        <span class="hljs-attribute">value</span><span class="hljs-punctuation">:</span> <span class="hljs-string">10k</span><br>  <span class="hljs-comment"># Resource类型的指标</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">type: Resource</span><br>    <span class="hljs-attribute">resource</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-attribute">name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">cpu</span><br>      <span class="hljs-comment"># Utilization类型的目标值，Resource类型的指标只支持Utilization和AverageValue类型的目标值</span><br>      <span class="hljs-attribute">target</span><span class="hljs-punctuation">:</span><br>        <span class="hljs-attribute">type</span><span class="hljs-punctuation">:</span> <span class="hljs-string">Utilization</span><br>        <span class="hljs-attribute">averageUtilization</span><span class="hljs-punctuation">:</span> <span class="hljs-string">50</span><br>  <span class="hljs-comment"># Pods类型的指标</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">type: Pods</span><br>    <span class="hljs-attribute">pods</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-attribute">metric</span><span class="hljs-punctuation">:</span><br>        <span class="hljs-attribute">name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">packets-per-second</span><br>      <span class="hljs-comment"># AverageValue类型的目标值，Pods指标类型下只支持AverageValue类型的目标值</span><br>      <span class="hljs-attribute">target</span><span class="hljs-punctuation">:</span><br>        <span class="hljs-attribute">type</span><span class="hljs-punctuation">:</span> <span class="hljs-string">AverageValue</span><br>        <span class="hljs-attribute">averageValue</span><span class="hljs-punctuation">:</span> <span class="hljs-string">1k</span><br>  <span class="hljs-comment"># External类型的指标</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">type: External</span><br>    <span class="hljs-attribute">external</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-attribute">metric</span><span class="hljs-punctuation">:</span><br>        <span class="hljs-attribute">name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">queue_messages_ready</span><br>        <span class="hljs-comment"># 该字段与第三方的指标标签相关联，（此处官方文档有问题，正确的写法如下）</span><br>        <span class="hljs-attribute">selector</span><span class="hljs-punctuation">:</span><br>          <span class="hljs-attribute">matchLabels</span><span class="hljs-punctuation">:</span><br>            <span class="hljs-attribute">env</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;stage&quot;</span><br>            <span class="hljs-attribute">app</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;myapp&quot;</span><br>      <span class="hljs-comment"># External指标类型下只支持Value和AverageValue类型的目标值</span><br>      <span class="hljs-attribute">target</span><span class="hljs-punctuation">:</span><br>        <span class="hljs-attribute">type</span><span class="hljs-punctuation">:</span> <span class="hljs-string">AverageValue</span><br>        <span class="hljs-attribute">averageValue</span><span class="hljs-punctuation">:</span> <span class="hljs-string">30</span><br></code></pre></td></tr></table></figure><p>根据前面 adapter 中的配置文件去匹配，从上往下匹配，匹配到那条规则就用有那条规则做计算。</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs autoit">[root<span class="hljs-symbol">@k8s</span>-master<span class="hljs-number">-01</span> prometheus-adapter]<span class="hljs-meta"># kubectl get --raw <span class="hljs-string">&quot;/apis/custom.metrics.k8s.io/v1beta1/namespaces/default/pod/*/http_requests&quot;</span> | jq .</span><br>&#123;<br>  <span class="hljs-string">&quot;kind&quot;</span>: <span class="hljs-string">&quot;MetricValueList&quot;</span>,<br>  <span class="hljs-string">&quot;apiVersion&quot;</span>: <span class="hljs-string">&quot;custom.metrics.k8s.io/v1beta1&quot;</span>,<br>  <span class="hljs-string">&quot;metadata&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;selfLink&quot;</span>: <span class="hljs-string">&quot;/apis/custom.metrics.k8s.io/v1beta1/namespaces/default/pod/%2A/http_requests&quot;</span><br>  &#125;,<br>  <span class="hljs-string">&quot;items&quot;</span>: [<br>    &#123;<br>      <span class="hljs-string">&quot;describedObject&quot;</span>: &#123;<br>        <span class="hljs-string">&quot;kind&quot;</span>: <span class="hljs-string">&quot;Pod&quot;</span>,<br>        <span class="hljs-string">&quot;namespace&quot;</span>: <span class="hljs-string">&quot;default&quot;</span>,<br>        <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;sample-app-b7b48448c-ljk2f&quot;</span>,<br>        <span class="hljs-string">&quot;apiVersion&quot;</span>: <span class="hljs-string">&quot;/v1&quot;</span><br>      &#125;,<br>      <span class="hljs-string">&quot;metricName&quot;</span>: <span class="hljs-string">&quot;http_requests&quot;</span>,<br>      <span class="hljs-string">&quot;timestamp&quot;</span>: <span class="hljs-string">&quot;2021-12-24T03:07:20Z&quot;</span>,<br>      <span class="hljs-string">&quot;value&quot;</span>: <span class="hljs-string">&quot;100m&quot;</span>,<br>      <span class="hljs-string">&quot;selector&quot;</span>: <span class="hljs-literal">null</span><br>    &#125;<br>  ]<br>&#125;<br></code></pre></td></tr></table></figure><p>被此规则匹配到</p><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-bullet">-</span> <span class="hljs-string">seriesQuery: &#x27;&#123;namespace!=&quot;&quot;,__name__!~&quot;^container_.*&quot;&#125;&#x27;</span><br>  <span class="hljs-attribute">seriesFilters</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">isNot: .*_seconds_total</span><br>  <span class="hljs-attribute">resources</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-attribute">template</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&lt;&lt;.Resource&gt;&gt;</span><br>  <span class="hljs-attribute">name</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-attribute">matches</span><span class="hljs-punctuation">:</span> <span class="hljs-string">^(.*)_total$</span><br>    <span class="hljs-attribute">as</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&quot;</span><br>  <span class="hljs-attribute">metricsQuery</span><span class="hljs-punctuation">:</span> <span class="hljs-string">sum(rate(&lt;&lt;.Series&gt;&gt;&#123;&lt;&lt;.LabelMatchers&gt;&gt;&#125;[1m])) by (&lt;&lt;.GroupBy&gt;&gt;)</span><br></code></pre></td></tr></table></figure><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs awk">[root@k8s-master-<span class="hljs-number">01</span> prometheus-adapter]<span class="hljs-comment">#  ab -c 100 -n 1000000 http://10.96.152.103:8080/metrics </span><br>This is ApacheBench, Version <span class="hljs-number">2.3</span> &lt;<span class="hljs-variable">$Revision</span>: <span class="hljs-number">1430300</span> $&gt;<br>Copyright <span class="hljs-number">1996</span> Adam Twiss, Zeus Technology Ltd, http:<span class="hljs-regexp">//</span>www.zeustech.net/<br>Licensed to The Apache Software Foundation, http:<span class="hljs-regexp">//</span>www.apache.org/<br><br>Benchmarking <span class="hljs-number">10.96</span>.<span class="hljs-number">152.103</span> (be patient)<br></code></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql">[root<span class="hljs-variable">@k8s</span><span class="hljs-operator">-</span>master<span class="hljs-number">-01</span> <span class="hljs-operator">~</span>]#      kubectl <span class="hljs-keyword">get</span> pod<br>NAME                                      READY   STATUS    RESTARTS   AGE<br>nfs<span class="hljs-operator">-</span>client<span class="hljs-operator">-</span>provisioner<span class="hljs-number">-7</span>b889f4bc9<span class="hljs-operator">-</span>rb9xj   <span class="hljs-number">1</span><span class="hljs-operator">/</span><span class="hljs-number">1</span>     <span class="hljs-keyword">Running</span>   <span class="hljs-number">2</span>          <span class="hljs-number">222</span>d<br>sample<span class="hljs-operator">-</span>app<span class="hljs-operator">-</span>b7b48448c<span class="hljs-operator">-</span>ljk2f                <span class="hljs-number">1</span><span class="hljs-operator">/</span><span class="hljs-number">1</span>     <span class="hljs-keyword">Running</span>   <span class="hljs-number">0</span>          <span class="hljs-number">54</span>m<br></code></pre></td></tr></table></figure><p><img src="/images/custom-metrics-hpa-4.png" alt="custom-metrics-hpa-4"></p><p>成功扩容</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs stata">[root@k8s-master-01 ~]#      kubectl get pod -w<br>NAME                                      READY   STATUS    RESTARTS   AGE<br>nfs-client-provisioner-7b889f4bc9-rb9xj   1/1     Running   2          222d<br><span class="hljs-keyword">sample</span>-<span class="hljs-keyword">app</span>-b7b48448c-2dlvm                1/1     Running   0          81s<br><span class="hljs-keyword">sample</span>-<span class="hljs-keyword">app</span>-b7b48448c-9tm79                1/1     Running   0          66s<br><span class="hljs-keyword">sample</span>-<span class="hljs-keyword">app</span>-b7b48448c-9xzmb                1/1     Running   0          82s<br><span class="hljs-keyword">sample</span>-<span class="hljs-keyword">app</span>-b7b48448c-h6lj6                1/1     Running   0          82s<br><span class="hljs-keyword">sample</span>-<span class="hljs-keyword">app</span>-b7b48448c-jvpgn                1/1     Running   0          98s<br><span class="hljs-keyword">sample</span>-<span class="hljs-keyword">app</span>-b7b48448c-knzh9                1/1     Running   0          66s<br><span class="hljs-keyword">sample</span>-<span class="hljs-keyword">app</span>-b7b48448c-ljk2f                1/1     Running   0          56m<br><span class="hljs-keyword">sample</span>-<span class="hljs-keyword">app</span>-b7b48448c-qhtgp                1/1     Running   0          98s<br><span class="hljs-keyword">sample</span>-<span class="hljs-keyword">app</span>-b7b48448c-tc89k                1/1     Running   0          82s<br><span class="hljs-keyword">sample</span>-<span class="hljs-keyword">app</span>-b7b48448c-vgn8n                1/1     Running   0          98s<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Prometheus监控Kubernetes</title>
    <link href="/2021/12/14/prometheus-and-kubernetes/"/>
    <url>/2021/12/14/prometheus-and-kubernetes/</url>
    
    <content type="html"><![CDATA[<h2 id="cAdvisor-和-KubeStateMetrics-简介"><a href="#cAdvisor-和-KubeStateMetrics-简介" class="headerlink" title="cAdvisor 和 KubeStateMetrics 简介"></a>cAdvisor 和 KubeStateMetrics 简介</h2><p>在部署监控组件监控 Kubernetes 集群服务之前，先了解下监控组件 <code>cAdvisor</code> 和 <code>Kube State Metrics</code> 都是什么。本人从相应的俩个组件的 Github 和相关网址收集了一些信息，分别对其进行描述。</p><h3 id="什么是-cAdvisor"><a href="#什么是-cAdvisor" class="headerlink" title="什么是 cAdvisor"></a>什么是 cAdvisor</h3><p><code>cAdvisor</code> (Container Advisor) 是 Google 开源的一个容器监控工具，可用于对容器资源的使用情况和性能进行监控。它以守护进程方式运行，用于收集、聚合、处理和导出正在运行容器的有关信息。具体来说，该组件对每个容器都会记录其资源隔离参数、历史资源使用情况、完整历史资源使用情况的直方图和网络统计信息。</p><p><code>cAdvisor</code> 本身就对 <code>Docker</code> 容器支持，并且还对其它类型的容器尽可能的提供支持，力求兼容与适配所有类型的容器。</p><p>由以上介绍我们可以知道，cAdvisor 是用于监控容器引擎的。由于其监控的实用性，Kubernetes 已经默认将其与 Kubelet 融合，所以我们无需再单独部署 cAdvisor 组件来暴露节点中容器运行的信息，直接使用 Kubelet 组件提供的指标采集地址即可。</p><h3 id="什么是-KubeStateMetrics"><a href="#什么是-KubeStateMetrics" class="headerlink" title="什么是 KubeStateMetrics"></a>什么是 KubeStateMetrics</h3><p><code>Kube State Metrics</code> 是一个简单的服务，该服务通过监听 <code>Kubernetes API</code> 服务器来生成不同资源的状态的 <code>Metrics</code> 数据。它不关注 Kubernetes 节点组件的运行状况，而是关注集群内部各种资源对象 (例如 deployment、node 和 pod) 的运行状况。</p><p><code>Kube State Metrics</code> 是直接从 <code>Kubernetes API</code> 对象中获取生成的指标数据，这个过程中不会对指标数据进行修改。这样可以确保该组件提供的功能具有与 Kubernetes API 对象本身具有相同级别的稳定性。反过来讲，这意味着在某些情况下 <code>Kube State Metrics</code> 的 metrics 数据可能不会显示与 <code>Kubectl</code> 完全相同的值，因为 <code>Kubectl</code> 会应用某些启发式方法来显示可理解的消息。<code>Kube State Metrics</code> 公开了未经 <code>Kubernetes API</code> 修改的原始数据，这样用户可以拥有所需的所有数据，并根据需要执行启发式操作。</p><p>由于该组件 Kubernetes 并未与其默认集成在一起，所以需要我们单独部署。<br><a href="https://github.com/kubernetes/kube-state-metrics">Kube-State-Metrics下载</a></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>要让 <code>Prometheus</code> 能监控 <code>kubernetes</code> 中容器的性能指标和 <code>kubernetes</code> 资源对象指标，需要部署 <code>cadvisor</code> 与 <code>kube-state-metrics</code>。目前 <code>cAdvisor</code> 已经被 <code>Kubernetes</code> 默认集成，而<code>Kube State Metrics</code> 并没有被默认集成，所以我们需要在 <code>Kubernetes</code> 中部署 <code>Kube State Metrics</code> 组件，这样才能够将集群中的服务资源指标数据暴露出来，以便于我们对不同资源进行监控。</p><h2 id="Prometheus使用kubernetes-sd-config"><a href="#Prometheus使用kubernetes-sd-config" class="headerlink" title="Prometheus使用kubernetes_sd_config"></a>Prometheus使用kubernetes_sd_config</h2><p>要想监控Kubernetes中的资源，Prometheus要使用 <code>kubernetes_sd_config</code> 来自动注册和自动发现。Kubernetes SD 配置允许从 Kubernetes 的REST API检索抓取目标，并始终与集群状态保持同步。</p><p><code>kubernetes_sd_config</code> 这个是以角色(role)来定义收集的，<code>&lt;role&gt;</code>必须是<code>endpoints</code>、<code>service</code>、 <code>pod</code>、<code>node</code>或<code>ingress</code>。</p><p>以下是生产环境实际配置：</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">scrape_configs:</span><br>  - job_name: kube-apiserver/<span class="hljs-number">0</span><br><span class="hljs-symbol">    honor_timestamps:</span> true<br><span class="hljs-symbol">    scrape_interval:</span> <span class="hljs-number">30</span>s<br><span class="hljs-symbol">    scrape_timeout:</span> <span class="hljs-number">10</span>s<br><span class="hljs-symbol">    metrics_path:</span> /metrics<br><span class="hljs-symbol">    scheme:</span> https<br><span class="hljs-symbol">    authorization:</span><br><span class="hljs-symbol">      credentials_file:</span> <span class="hljs-keyword">/var/</span>run<span class="hljs-keyword">/secrets/</span>kubernetes.io<span class="hljs-keyword">/serviceaccount/</span>token<br><span class="hljs-symbol">    tls_config:</span><br><span class="hljs-symbol">      ca_file:</span> <span class="hljs-keyword">/var/</span>run<span class="hljs-keyword">/secrets/</span>kubernetes.io<span class="hljs-keyword">/serviceaccount/</span>ca.crt<br><span class="hljs-symbol">      server_name:</span> kubernetes<br><span class="hljs-symbol">      insecure_skip_verify:</span> false<br><span class="hljs-symbol">    follow_redirects:</span> true<br><span class="hljs-symbol">    kubernetes_sd_configs:</span><br>    - role: endpoints                  <span class="hljs-meta"># 使用的role</span><br><span class="hljs-symbol">      namespaces:</span>                      <span class="hljs-meta"># 指定抓取的名称空间，如不指定则表示抓取所有名称空间</span><br><span class="hljs-symbol">        names:</span><br>        - default<br></code></pre></td></tr></table></figure><p><a href="https://github.com/prometheus/prometheus/blob/release-2.32/documentation/examples/prometheus-kubernetes.yml">点击此查看官方示例</a></p><h3 id="Role可配置的发现目标"><a href="#Role可配置的发现目标" class="headerlink" title="Role可配置的发现目标"></a>Role可配置的发现目标</h3><p><a href="https://prometheus.io/docs/prometheus/latest/configuration/configuration/#kubernetes_sd_config">点击此查看官方介绍</a></p><h4 id="node"><a href="#node" class="headerlink" title="node"></a>node</h4><p>node角色发现每个群集节点有一个目标，其地址默认为Kubelet的HTTP端口。 目标地址默认为NodeInternalIP，NodeExternalIP，NodeLegacyHostIP和NodeHostName的地址类型顺序中Kubernetes节点对象的第一个现有地址。<br>可用元标签：</p><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs autohotkey">__met<span class="hljs-built_in">a_kubernetes</span>_node_name：节点对象的名称。<br>__met<span class="hljs-built_in">a_kubernetes</span>_node_label_&lt;labelname&gt;：节点对象中的每个标签。<br>__met<span class="hljs-built_in">a_kubernetes</span>_node_labelpresent_&lt;labelname&gt;：<span class="hljs-literal">true</span>对于节点对象中的每个标签。<br>__met<span class="hljs-built_in">a_kubernetes</span>_node_annotation_&lt;annotationname&gt;：来自节点对象的每个注释。<br>__met<span class="hljs-built_in">a_kubernetes</span>_node_annotationpresent_&lt;annotationname&gt;：<span class="hljs-literal">true</span>对于节点对象中的每个注释。<br>__met<span class="hljs-built_in">a_kubernetes</span>_node_address_&lt;address_type&gt;：每个节点地址类型的第一个地址（如果存在）。<br></code></pre></td></tr></table></figure><p>另外，对于节点的<code>instance</code>标签，将会被设置成从API服务中获取的节点名称。</p><h4 id="service"><a href="#service" class="headerlink" title="service"></a>service</h4><p>该service角色为每个服务发现每个服务端口的目标。这对于服务的黑盒监控通常很有用。该地址将设置为服务的Kubernetes DNS名称和相应的服务端口。<br>可用元标签：</p><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs autohotkey">__met<span class="hljs-built_in">a_kubernetes</span>_namespace：服务对象的命名空间。<br>__met<span class="hljs-built_in">a_kubernetes</span>_service_annotation_&lt;annotationname&gt;：来自服务对象的每个注释。<br>__met<span class="hljs-built_in">a_kubernetes</span>_service_annotationpresent_&lt;annotationname&gt;：“<span class="hljs-literal">true</span>”表示服务对象的每个注释。<br>__met<span class="hljs-built_in">a_kubernetes</span>_service_cluster_ip：服务的群集IP地址。（不适用于ExternalName类型的服务）<br>__met<span class="hljs-built_in">a_kubernetes</span>_service_external_name：服务的DNS名称。（适用于ExternalName类型的服务）<br>__met<span class="hljs-built_in">a_kubernetes</span>_service_label_&lt;labelname&gt;：来自服务对象的每个标签。<br>__met<span class="hljs-built_in">a_kubernetes</span>_service_labelpresent_&lt;labelname&gt;：<span class="hljs-literal">true</span>对于服务对象的每个标签。<br>__met<span class="hljs-built_in">a_kubernetes</span>_service_name：服务对象的名称。<br>__met<span class="hljs-built_in">a_kubernetes</span>_service_port_name：目标服务端口的名称。<br>__met<span class="hljs-built_in">a_kubernetes</span>_service_port_protocol：目标服务端口的协议。<br></code></pre></td></tr></table></figure><h4 id="pod"><a href="#pod" class="headerlink" title="pod"></a>pod</h4><p>该pod角色发现所有pod并将其容器公开为目标。对于容器的每个声明端口，将生成单个目标。如果容器没有指定端口，则会创建每个容器的无端口目标，以通过重新标记手动添加端口。<br>可用元标签：</p><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs autohotkey">__met<span class="hljs-built_in">a_kubernetes</span>_namespace：pod对象的命名空间。<br>__met<span class="hljs-built_in">a_kubernetes</span>_pod_name：pod对象的名称。<br>__met<span class="hljs-built_in">a_kubernetes</span>_pod_ip：pod对象的pod IP。<br>__met<span class="hljs-built_in">a_kubernetes</span>_pod_label_&lt;labelname&gt;：pod对象中的每个标签。<br>__met<span class="hljs-built_in">a_kubernetes</span>_pod_labelpresent_&lt;labelname&gt;：<span class="hljs-literal">true</span>对于pod对象中的每个标签。<br>__met<span class="hljs-built_in">a_kubernetes</span>_pod_annotation_&lt;annotationname&gt;：pod对象中的每个注释。<br>__met<span class="hljs-built_in">a_kubernetes</span>_pod_annotationpresent_&lt;annotationname&gt;：<span class="hljs-literal">true</span>对于pod对象中的每个注释。<br>__met<span class="hljs-built_in">a_kubernetes</span>_pod_container_init：<span class="hljs-literal">true</span>如果容器是InitContainer<br>__met<span class="hljs-built_in">a_kubernetes</span>_pod_container_name：目标地址指向的容器的名称。<br>__met<span class="hljs-built_in">a_kubernetes</span>_pod_container_port_name：容器端口的名称。<br>__met<span class="hljs-built_in">a_kubernetes</span>_pod_container_port_number：容器端口号。<br>__met<span class="hljs-built_in">a_kubernetes</span>_pod_container_port_protocol：容器端口的协议。<br>__met<span class="hljs-built_in">a_kubernetes</span>_pod_ready：设置为<span class="hljs-literal">true</span>或<span class="hljs-literal">false</span>准备好pod的就绪状态。<br>__met<span class="hljs-built_in">a_kubernetes</span>_pod_phase：设置为Pending，Running，Succeeded，Failed或Unknown在生命周期。<br>__met<span class="hljs-built_in">a_kubernetes</span>_pod_node_name：pod安排到的节点的名称。<br>__met<span class="hljs-built_in">a_kubernetes</span>_pod_host_ip：pod对象的当前主机IP。<br>__met<span class="hljs-built_in">a_kubernetes</span>_pod_uid：pod对象的UID。<br>__met<span class="hljs-built_in">a_kubernetes</span>_pod_controller_kind：对象类型的pod控制器。<br>__met<span class="hljs-built_in">a_kubernetes</span>_pod_controller_name：pod控制器的名称。<br></code></pre></td></tr></table></figure><h4 id="endpoints"><a href="#endpoints" class="headerlink" title="endpoints"></a>endpoints</h4><p>该endpoints角色从列出的服务端点发现目标。对于每个端点地址，每个端口发现一个目标。如果端点由pod支持，则pod的所有其他容器端口（未绑定到端点端口）也会被发现为目标。<br>可用元标签：</p><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs autohotkey">__met<span class="hljs-built_in">a_kubernetes</span>_namespace：端点对象的命名空间。<br>__met<span class="hljs-built_in">a_kubernetes</span>_endpoints_name：端点对象的名称。对于直接从端点列表中发现的所有目标（不是从底层pod中另外推断的那些），附加以下标签：<br>__met<span class="hljs-built_in">a_kubernetes</span>_endpoint_hostname：端点的主机名。<br>__met<span class="hljs-built_in">a_kubernetes</span>_endpoint_node_name：托管端点的节点的名称。<br>__met<span class="hljs-built_in">a_kubernetes</span>_endpoint_ready：设置为<span class="hljs-literal">true</span>或<span class="hljs-literal">false</span>为端点的就绪状态。<br>__met<span class="hljs-built_in">a_kubernetes</span>_endpoint_port_name：端点端口的名称。<br>__met<span class="hljs-built_in">a_kubernetes</span>_endpoint_port_protocol：端点端口的协议。<br>__met<span class="hljs-built_in">a_kubernetes</span>_endpoint_address_target_kind：端点地址目标的种类。类型不同看到的标签不同。<br>__met<span class="hljs-built_in">a_kubernetes</span>_endpoint_address_target_name：端点地址目标的名称<br></code></pre></td></tr></table></figure><p>如果端点属于服务，则附加<code>role: service</code>发现的所有标签。<br>对于由pod支持的所有目标，将附加<code>role: pod</code>发现的所有标签。</p><h4 id="ingress"><a href="#ingress" class="headerlink" title="ingress"></a>ingress</h4><p>该ingress角色发现了一个目标，为每个进入的每个路径。这通常用于黑盒监控入口。地址将设置为入口规范中指定的主机。<br>可用元标签：</p><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs autohotkey">__met<span class="hljs-built_in">a_kubernetes</span>_namespace：入口对象的命名空间。<br>__met<span class="hljs-built_in">a_kubernetes</span>_ingress_name：入口对象的名称。<br>__met<span class="hljs-built_in">a_kubernetes</span>_ingress_label_&lt;labelname&gt;：入口对象中的每个标签。<br>__met<span class="hljs-built_in">a_kubernetes</span>_ingress_labelpresent_&lt;labelname&gt;：<span class="hljs-literal">true</span>对于入口对象中的每个标签<br>__met<span class="hljs-built_in">a_kubernetes</span>_ingress_annotation_&lt;annotationname&gt;：来自入口对象的每个注释。<br>__met<span class="hljs-built_in">a_kubernetes</span>_ingress_annotationpresent_&lt;annotationname&gt;：<span class="hljs-literal">true</span>对于来自入口对象的每个注释。<br>__met<span class="hljs-built_in">a_kubernetes</span>_ingress_scheme：入口的协议方案，https如果设置了TLS配置。默认为http。<br>__met<span class="hljs-built_in">a_kubernetes</span>_ingress_path：来自入口规范的路径。默认为/。<br></code></pre></td></tr></table></figure><h2 id="配置抓取"><a href="#配置抓取" class="headerlink" title="配置抓取"></a>配置抓取</h2><h3 id="service-监控写法"><a href="#service-监控写法" class="headerlink" title="service 监控写法"></a>service 监控写法</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># 集群 内部 Service 监控</span><br><span class="hljs-string">cat</span> <span class="hljs-string">&lt;&lt;</span> <span class="hljs-string">EOF</span> <span class="hljs-string">|</span> <span class="hljs-string">kubectl</span> <span class="hljs-string">apply</span> <span class="hljs-string">-f</span> <span class="hljs-bullet">-</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Service</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">labels:</span><br>    <span class="hljs-attr">app:</span> <span class="hljs-string">prometheus-k8s</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">prometheus-k8s</span><br>  <span class="hljs-attr">annotations:</span><br>    <span class="hljs-attr">prometheus.io/scrape:</span> <span class="hljs-string">&#x27;true&#x27;</span> <span class="hljs-comment"># 多端口 prometheus.io/port: &#x27;9090&#x27;  # 监控路径 prometheus.io/path: &#x27;/metrics&#x27; # 监控http协议 prometheus.io/scheme: &#x27;http&#x27; 或者https</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">monitoring</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">ports:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">web</span><br>    <span class="hljs-attr">port:</span> <span class="hljs-number">9090</span><br>    <span class="hljs-attr">targetPort:</span> <span class="hljs-string">web</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">app:</span> <span class="hljs-string">prometheus-k8s</span><br>  <span class="hljs-attr">sessionAffinity:</span> <span class="hljs-string">ClientIP</span><br><span class="hljs-string">EOF</span><br></code></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># 集群外部 Service 模式监控</span><br><span class="hljs-string">cat</span> <span class="hljs-string">&lt;&lt;</span> <span class="hljs-string">EOF</span> <span class="hljs-string">|</span> <span class="hljs-string">kubectl</span> <span class="hljs-string">apply</span> <span class="hljs-string">-f</span> <span class="hljs-bullet">-</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Service</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">annotations:</span><br>    <span class="hljs-attr">prometheus.io/port:</span> <span class="hljs-string">&quot;10257&quot;</span><br>    <span class="hljs-attr">prometheus.io/scrape:</span> <span class="hljs-string">&quot;true&quot;</span><br>    <span class="hljs-attr">prometheus.io/scheme:</span> <span class="hljs-string">&quot;https&quot;</span><br>  <span class="hljs-attr">labels:</span><br>    <span class="hljs-attr">k8s-app:</span> <span class="hljs-string">kube-controller-manager</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">kube-controller-manager</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">monitoring</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">clusterIP:</span> <span class="hljs-string">None</span><br>  <span class="hljs-attr">ports:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">https-metrics</span><br>    <span class="hljs-attr">port:</span> <span class="hljs-number">10257</span><br>    <span class="hljs-attr">protocol:</span> <span class="hljs-string">TCP</span><br>    <span class="hljs-attr">targetPort:</span> <span class="hljs-number">10257</span><br>  <span class="hljs-attr">sessionAffinity:</span> <span class="hljs-string">None</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">ClusterIP</span><br><span class="hljs-meta">---</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Endpoints</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">labels:</span><br>    <span class="hljs-attr">k8s-app:</span> <span class="hljs-string">kube-controller-manager</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">kube-controller-manager</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">monitoring</span><br><span class="hljs-attr">subsets:</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">addresses:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">ip:</span> <span class="hljs-number">192.168</span><span class="hljs-number">.2</span><span class="hljs-number">.175</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">ip:</span> <span class="hljs-number">192.168</span><span class="hljs-number">.2</span><span class="hljs-number">.176</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">ip:</span> <span class="hljs-number">192.168</span><span class="hljs-number">.2</span><span class="hljs-number">.177</span><br>  <span class="hljs-attr">ports:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">https-metrics</span><br>    <span class="hljs-attr">port:</span> <span class="hljs-number">10257</span><br>    <span class="hljs-attr">protocol:</span> <span class="hljs-string">TCP</span><br><span class="hljs-string">EOF</span><br></code></pre></td></tr></table></figure><h4 id="service写法使用的role"><a href="#service写法使用的role" class="headerlink" title="service写法使用的role"></a>service写法使用的role</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-bullet">-</span> <span class="hljs-attr">job_name:</span> <span class="hljs-string">kubernetes-endpoints</span><br>  <span class="hljs-attr">honor_timestamps:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">scrape_interval:</span> <span class="hljs-string">10s</span><br>  <span class="hljs-attr">scrape_timeout:</span> <span class="hljs-string">10s</span><br>  <span class="hljs-attr">metrics_path:</span> <span class="hljs-string">/metrics</span><br>  <span class="hljs-attr">scheme:</span> <span class="hljs-string">http</span><br>  <span class="hljs-attr">kubernetes_sd_configs:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">role:</span> <span class="hljs-string">endpoints</span><br>  <span class="hljs-attr">bearer_token_file:</span> <span class="hljs-string">/var/run/secrets/kubernetes.io/serviceaccount/token</span><br>  <span class="hljs-attr">tls_config:</span><br>    <span class="hljs-attr">ca_file:</span> <span class="hljs-string">/var/run/secrets/kubernetes.io/serviceaccount/ca.crt</span><br>    <span class="hljs-attr">insecure_skip_verify:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">relabel_configs:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">source_labels:</span> [<span class="hljs-string">__meta_kubernetes_service_annotation_prometheus_io_scrape</span>]<br>    <span class="hljs-attr">separator:</span> <span class="hljs-string">;</span><br>    <span class="hljs-attr">regex:</span> <span class="hljs-string">&quot;true&quot;</span><br>    <span class="hljs-attr">replacement:</span> <span class="hljs-string">$1</span><br>    <span class="hljs-attr">action:</span> <span class="hljs-string">keep</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">source_labels:</span> [<span class="hljs-string">__meta_kubernetes_service_annotation_prometheus_io_scheme</span>]    <span class="hljs-comment"># 如有此元标签则使用正则表达匹配 https，如果能匹配到，则把https赋值给__scheme__，替换上面的metrics的值，如没有此标签则此规则不生效</span><br>    <span class="hljs-attr">separator:</span> <span class="hljs-string">;</span><br>    <span class="hljs-attr">regex:</span> <span class="hljs-string">(https?)</span><br>    <span class="hljs-attr">target_label:</span> <span class="hljs-string">__scheme__</span><br>    <span class="hljs-attr">replacement:</span> <span class="hljs-string">$1</span><br>    <span class="hljs-attr">action:</span> <span class="hljs-string">replace</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">source_labels:</span> [<span class="hljs-string">__meta_kubernetes_service_annotation_prometheus_io_path</span>]     <span class="hljs-comment"># 如有此元标签则使用正则表达匹配所有内容，把匹配到的内容赋值给__metrics_path__，替换上面默认的metrics_path的值，如没有此标签则此规则不生效</span><br>    <span class="hljs-attr">separator:</span> <span class="hljs-string">;</span><br>    <span class="hljs-attr">regex:</span> <span class="hljs-string">(.+)</span><br>    <span class="hljs-attr">target_label:</span> <span class="hljs-string">__metrics_path__</span><br>    <span class="hljs-attr">replacement:</span> <span class="hljs-string">$1</span><br>    <span class="hljs-attr">action:</span> <span class="hljs-string">replace</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">source_labels:</span> [<span class="hljs-string">__address__</span>, <span class="hljs-string">__meta_kubernetes_service_annotation_prometheus_io_port</span>]   <span class="hljs-comment"># 如果在添加注释时，没添加端口注释就是所有端口都监控了，如果一个service有5个端口那么会创建5个target。</span><br>    <span class="hljs-attr">separator:</span> <span class="hljs-string">;</span><br>    <span class="hljs-attr">regex:</span> <span class="hljs-string">([^:]+)(?::\d+)?;(\d+)</span><br>    <span class="hljs-attr">target_label:</span> <span class="hljs-string">__address__</span><br>    <span class="hljs-attr">replacement:</span> <span class="hljs-string">$1:$2</span><br>    <span class="hljs-attr">action:</span> <span class="hljs-string">replace</span><br></code></pre></td></tr></table></figure><h3 id="POD-监控写法"><a href="#POD-监控写法" class="headerlink" title="POD 监控写法"></a>POD 监控写法</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Pod</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">creationTimestamp:</span> <span class="hljs-literal">null</span><br>  <span class="hljs-attr">labels:</span><br>    <span class="hljs-attr">component:</span> <span class="hljs-string">kube-apiserver-ha-proxy</span><br>    <span class="hljs-attr">tier:</span> <span class="hljs-string">control-plane</span><br>  <span class="hljs-attr">annotations:</span><br>    <span class="hljs-attr">prometheus.io/port:</span> <span class="hljs-string">&quot;8404&quot;</span>  <span class="hljs-comment"># 多端口指定监控端口 prometheus.io/port: &#x27;8084&#x27;  # 监控路径 prometheus.io/path: &#x27;/metrics&#x27; # 监控http协议 prometheus.io/scheme: &#x27;http&#x27; 或者https</span><br>    <span class="hljs-attr">prometheus.io/scrape:</span> <span class="hljs-string">&quot;true&quot;</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">kube-apiserver-ha-proxy</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">kube-system</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">containers:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">args:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;CP_HOSTS=192.168.2.175,192.168.2.176,192.168.2.177&quot;</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">docker.io/juestnow/nginx-proxy:1.21.0</span><br>    <span class="hljs-attr">imagePullPolicy:</span> <span class="hljs-string">IfNotPresent</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">kube-apiserver-ha-proxy</span><br>    <span class="hljs-attr">env:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">CPU_NUM</span><br>      <span class="hljs-attr">value:</span> <span class="hljs-string">&quot;4&quot;</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">BACKEND_PORT</span><br>      <span class="hljs-attr">value:</span> <span class="hljs-string">&quot;5443&quot;</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">HOST_PORT</span><br>      <span class="hljs-attr">value:</span> <span class="hljs-string">&quot;6443&quot;</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">CP_HOSTS</span><br>      <span class="hljs-attr">value:</span> <span class="hljs-string">&quot;192.168.2.175,192.168.2.176,192.168.2.177&quot;</span><br>  <span class="hljs-attr">hostNetwork:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">priorityClassName:</span> <span class="hljs-string">system-cluster-critical</span><br><span class="hljs-attr">status:</span> &#123;&#125;<br></code></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># daemonsets deployments statefulsets 写法</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">matchLabels:</span><br>      <span class="hljs-attr">k8s-app:</span> <span class="hljs-string">traefik</span><br>  <span class="hljs-attr">template:</span><br>    <span class="hljs-attr">metadata:</span><br>      <span class="hljs-attr">creationTimestamp:</span> <span class="hljs-literal">null</span><br>      <span class="hljs-attr">labels:</span><br>        <span class="hljs-attr">k8s-app:</span> <span class="hljs-string">traefik</span><br>      <span class="hljs-attr">annotations:</span><br>        <span class="hljs-attr">prometheus.io/port:</span> <span class="hljs-string">&#x27;8080&#x27;</span>  <span class="hljs-comment"># 多端口指定监控端口 prometheus.io/port: &#x27;8080&#x27;  # 监控路径 prometheus.io/path: &#x27;/metrics&#x27; # 监控http协议 prometheus.io/scheme: &#x27;http&#x27; 或者https</span><br>        <span class="hljs-attr">prometheus.io/scrape:</span> <span class="hljs-string">&#x27;true&#x27;</span><br></code></pre></td></tr></table></figure><h4 id="pod监控使用的role"><a href="#pod监控使用的role" class="headerlink" title="pod监控使用的role"></a>pod监控使用的role</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-bullet">-</span> <span class="hljs-attr">job_name:</span> <span class="hljs-string">kubernetes-pods</span><br>  <span class="hljs-attr">honor_timestamps:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">scrape_interval:</span> <span class="hljs-string">10s</span><br>  <span class="hljs-attr">scrape_timeout:</span> <span class="hljs-string">10s</span><br>  <span class="hljs-attr">metrics_path:</span> <span class="hljs-string">/metrics</span><br>  <span class="hljs-attr">scheme:</span> <span class="hljs-string">http</span><br>  <span class="hljs-attr">bearer_token_file:</span> <span class="hljs-string">/var/run/secrets/kubernetes.io/serviceaccount/token</span><br>  <span class="hljs-attr">tls_config:</span><br>    <span class="hljs-attr">ca_file:</span> <span class="hljs-string">/var/run/secrets/kubernetes.io/serviceaccount/ca.crt</span><br>    <span class="hljs-attr">insecure_skip_verify:</span> <span class="hljs-literal">true</span>        <br>  <span class="hljs-attr">kubernetes_sd_configs:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">role:</span> <span class="hljs-string">pod</span><br>  <span class="hljs-attr">relabel_configs:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">source_labels:</span> [<span class="hljs-string">__meta_kubernetes_pod_annotation_prometheus_io_scrape</span>]<br>    <span class="hljs-attr">separator:</span> <span class="hljs-string">;</span><br>    <span class="hljs-attr">regex:</span> <span class="hljs-string">&quot;true&quot;</span><br>    <span class="hljs-attr">replacement:</span> <span class="hljs-string">$1</span><br>    <span class="hljs-attr">action:</span> <span class="hljs-string">keep</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">source_labels:</span> [<span class="hljs-string">__meta_kubernetes_pod_annotation_prometheus_io_scheme</span>]<br>    <span class="hljs-attr">separator:</span> <span class="hljs-string">;</span> <br>    <span class="hljs-attr">regex:</span> <span class="hljs-string">(https?)</span><br>    <span class="hljs-attr">target_label:</span> <span class="hljs-string">__scheme__</span><br>    <span class="hljs-attr">replacement:</span> <span class="hljs-string">$1</span><br>    <span class="hljs-attr">action:</span> <span class="hljs-string">replace</span>          <br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">source_labels:</span> [<span class="hljs-string">__meta_kubernetes_pod_annotation_prometheus_io_path</span>]<br>    <span class="hljs-attr">separator:</span> <span class="hljs-string">;</span><br>    <span class="hljs-attr">regex:</span> <span class="hljs-string">(.+)</span><br>    <span class="hljs-attr">target_label:</span> <span class="hljs-string">__metrics_path__</span><br>    <span class="hljs-attr">replacement:</span> <span class="hljs-string">$1</span><br>    <span class="hljs-attr">action:</span> <span class="hljs-string">replace</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">source_labels:</span> [<span class="hljs-string">__address__</span>, <span class="hljs-string">__meta_kubernetes_pod_annotation_prometheus_io_port</span>]<br>    <span class="hljs-attr">separator:</span> <span class="hljs-string">;</span><br>    <span class="hljs-attr">regex:</span> <span class="hljs-string">([^:]+)(?::\d+)?;(\d+)</span><br>    <span class="hljs-attr">target_label:</span> <span class="hljs-string">__address__</span><br>    <span class="hljs-attr">replacement:</span> <span class="hljs-string">$1:$2</span><br>    <span class="hljs-attr">action:</span> <span class="hljs-string">replace</span><br></code></pre></td></tr></table></figure><h3 id="blackbox-exporter-集群内部监控注释方法"><a href="#blackbox-exporter-集群内部监控注释方法" class="headerlink" title="blackbox-exporter 集群内部监控注释方法"></a>blackbox-exporter 集群内部监控注释方法</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># service 写法 http 模式 监控</span><br><span class="hljs-string">cat</span> <span class="hljs-string">&lt;&lt;</span> <span class="hljs-string">EOF</span> <span class="hljs-string">|</span> <span class="hljs-string">kubectl</span> <span class="hljs-string">apply</span> <span class="hljs-string">-f</span> <span class="hljs-bullet">-</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Service</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">labels:</span><br>    <span class="hljs-attr">app:</span> <span class="hljs-string">prometheus-k8s</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">prometheus-k8s</span><br>  <span class="hljs-attr">annotations:</span><br>    <span class="hljs-attr">prometheus.io/web:</span> <span class="hljs-string">&#x27;true&#x27;</span> <span class="hljs-comment"># 开启http 监控   # prometheus.io/tls: &#x27;https&#x27; # 默认http  # 多端口指定监控端口 prometheus.io/port: &#x27;9090&#x27; </span><br>    <span class="hljs-attr">prometheus.io/healthz:</span> <span class="hljs-string">&quot;/-/healthy&quot;</span> <span class="hljs-comment">#监控url</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">monitoring</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">ports:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">web</span><br>    <span class="hljs-attr">port:</span> <span class="hljs-number">9090</span><br>    <span class="hljs-attr">targetPort:</span> <span class="hljs-string">web</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">app:</span> <span class="hljs-string">prometheus-k8s</span><br>  <span class="hljs-attr">sessionAffinity:</span> <span class="hljs-string">ClientIP</span><br><span class="hljs-string">EOF</span><br><br><br><span class="hljs-comment"># service 写法 tcp 模式 监控</span><br><span class="hljs-string">cat</span> <span class="hljs-string">&lt;&lt;</span> <span class="hljs-string">EOF</span> <span class="hljs-string">|</span> <span class="hljs-string">kubectl</span> <span class="hljs-string">apply</span> <span class="hljs-string">-f</span> <span class="hljs-bullet">-</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Service</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">labels:</span><br>    <span class="hljs-attr">app:</span> <span class="hljs-string">prometheus-k8s</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">prometheus-k8s</span><br>  <span class="hljs-attr">annotations:</span><br>    <span class="hljs-attr">prometheus.io/tcp:</span> <span class="hljs-string">&#x27;true&#x27;</span> <span class="hljs-comment"># 开启tcp 监控 所以端口都会监控</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">monitoring</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">ports:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">web</span><br>    <span class="hljs-attr">port:</span> <span class="hljs-number">9090</span><br>    <span class="hljs-attr">targetPort:</span> <span class="hljs-string">web</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">app:</span> <span class="hljs-string">prometheus-k8s</span><br>  <span class="hljs-attr">sessionAffinity:</span> <span class="hljs-string">ClientIP</span><br><span class="hljs-string">EOF</span><br><br><br><span class="hljs-comment"># service 写法 icmp 模式 监控</span><br><span class="hljs-string">cat</span> <span class="hljs-string">&lt;&lt;</span> <span class="hljs-string">EOF</span> <span class="hljs-string">|</span> <span class="hljs-string">kubectl</span> <span class="hljs-string">apply</span> <span class="hljs-string">-f</span> <span class="hljs-bullet">-</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Service</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">labels:</span><br>    <span class="hljs-attr">app:</span> <span class="hljs-string">prometheus-k8s</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">prometheus-k8s</span><br>  <span class="hljs-attr">annotations:</span><br>    <span class="hljs-attr">prometheus.io/icmp:</span> <span class="hljs-string">&#x27;true&#x27;</span> <span class="hljs-comment"># ping service name</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">monitoring</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">ports:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">web</span><br>    <span class="hljs-attr">port:</span> <span class="hljs-number">9090</span><br>    <span class="hljs-attr">targetPort:</span> <span class="hljs-string">web</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">app:</span> <span class="hljs-string">prometheus-k8s</span><br>  <span class="hljs-attr">sessionAffinity:</span> <span class="hljs-string">ClientIP</span><br><span class="hljs-string">EOF</span><br><br><br><span class="hljs-comment">### blackbox-exporter 集群内部ingresses监控注释方法 由于prometheus 不还不支持1.22 ingresses api 所以只能监控1.22版本一下ingresses</span><br><span class="hljs-string">cat</span> <span class="hljs-string">&lt;&lt;</span> <span class="hljs-string">EOF</span> <span class="hljs-string">|</span> <span class="hljs-string">kubectl</span> <span class="hljs-string">apply</span> <span class="hljs-string">-f</span> <span class="hljs-bullet">-</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Ingress</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">networking.k8s.io/v1</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">prometheus-dashboard</span><br>  <span class="hljs-attr">annotations:</span><br>    <span class="hljs-attr">prometheus.io/probed:</span> <span class="hljs-string">&#x27;true&#x27;</span> <span class="hljs-comment"># 开启ingresses 监控</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">monitoring</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">rules:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">host:</span> <span class="hljs-string">prometheus.tycng.com</span><br>      <span class="hljs-attr">http:</span><br>        <span class="hljs-attr">paths:</span><br>          <span class="hljs-bullet">-</span> <span class="hljs-attr">pathType:</span> <span class="hljs-string">ImplementationSpecific</span><br>            <span class="hljs-attr">path:</span> <span class="hljs-string">/</span><br>            <span class="hljs-attr">backend:</span><br>              <span class="hljs-attr">service:</span> <br>                <span class="hljs-attr">name:</span> <span class="hljs-string">prometheus-k8s</span><br>                <span class="hljs-attr">port:</span> <br>                  <span class="hljs-attr">number:</span> <span class="hljs-number">9090</span><br><br><span class="hljs-string">EOF</span><br></code></pre></td></tr></table></figure><h2 id="Kubernetes-组件指标"><a href="#Kubernetes-组件指标" class="headerlink" title="Kubernetes 组件指标"></a>Kubernetes 组件指标</h2><p>Kubernetes自身的组件也是通过<code>/metrics</code>来暴露组件内部的一些指标，这样我们可以更好地了解kubernetes系统中各个组件内部发生的情况。我们可以通过 HTTP 访问组件的 <code>/metrics</code> 端点来获取组件的指标。有些组件默认情况下绑定在<code>--bind-address=127.0.0.1</code>，可以使用 <code>--bind-address=0.0.0.0</code> 标志启用。<br>这些组件的示例：(以下表格是v1.22.4版本)</p><table><thead><tr><th>组件</th><th>metrics端口</th><th>协议</th></tr></thead><tbody><tr><td>kube-controller-manager</td><td>10257</td><td>https</td></tr><tr><td>kube-proxy</td><td>10249</td><td>http</td></tr><tr><td>kkube-apiserver</td><td>6443</td><td>https</td></tr><tr><td>kube-scheduler</td><td>10259</td><td>https</td></tr><tr><td>kubelet</td><td>10250</td><td>https</td></tr></tbody></table><p>在生产环境中，你可能需要配置 Prometheus 服务器 或 某些其他指标搜集器以定期收集这些指标，并使它们在某种时间序列数据库中可用。</p><p>请注意，kubelet 还会在 <code>/metrics/cadvisor</code>， <code>/metrics/resource</code> 和 <code>/metrics/probes</code> 端点中公开度量值。这些度量值的生命周期各不相同。</p><h3 id="组件指标"><a href="#组件指标" class="headerlink" title="组件指标"></a>组件指标</h3><h4 id="kube-controller-manager-指标"><a href="#kube-controller-manager-指标" class="headerlink" title="kube-controller-manager 指标"></a>kube-controller-manager 指标</h4><p>控制器管理器指标可提供有关控制器管理器性能和运行状况的重要洞察。 这些指标包括通用的 Go 语言运行时指标（例如 go_routine 数量）和控制器特定的度量指标， 例如可用于评估集群运行状况的 etcd 请求延迟或云提供商（AWS、GCE、OpenStack）的 API 延迟等。</p><p>从 Kubernetes 1.7 版本开始，详细的云提供商指标可用于 GCE、AWS、Vsphere 和 OpenStack 的存储操作。 这些指标可用于监控持久卷操作的运行状况。</p><p>比如，对于 GCE，这些指标称为：</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs abnf">cloudprovider_gce_api_request_duration_seconds &#123; request <span class="hljs-operator">=</span> <span class="hljs-string">&quot;instance_list&quot;</span>&#125;<br>cloudprovider_gce_api_request_duration_seconds &#123; request <span class="hljs-operator">=</span> <span class="hljs-string">&quot;disk_insert&quot;</span>&#125;<br>cloudprovider_gce_api_request_duration_seconds &#123; request <span class="hljs-operator">=</span> <span class="hljs-string">&quot;disk_delete&quot;</span>&#125;<br>cloudprovider_gce_api_request_duration_seconds &#123; request <span class="hljs-operator">=</span> <span class="hljs-string">&quot;attach_disk&quot;</span>&#125;<br>cloudprovider_gce_api_request_duration_seconds &#123; request <span class="hljs-operator">=</span> <span class="hljs-string">&quot;detach_disk&quot;</span>&#125;<br>cloudprovider_gce_api_request_duration_seconds &#123; request <span class="hljs-operator">=</span> <span class="hljs-string">&quot;list_disk&quot;</span>&#125;<br></code></pre></td></tr></table></figure><h4 id="kube-scheduler-指标"><a href="#kube-scheduler-指标" class="headerlink" title="kube-scheduler 指标"></a>kube-scheduler 指标</h4><p>调度器会暴露一些可选的指标，报告所有运行中 Pods 所请求的资源和期望的约束值。 这些指标可用来构造容量规划监控面板、访问调度约束的当前或历史数据、 快速发现因为缺少资源而无法被调度的负载，或者将 Pod 的实际资源用量 与其请求值进行比较。</p><p>kube-scheduler 组件能够辩识各个 Pod 所配置的资源 请求和约束。 在 Pod 的资源请求值或者约束值非零时，kube-scheduler 会以度量值时间序列的形式 生成报告。该时间序列值包含以下标签：</p><ul><li>名字空间</li><li>Pod 名称</li><li>Pod 调度所处节点，或者当 Pod 未被调度时用空字符串表示</li><li>优先级</li><li>为 Pod 所指派的调度器</li><li>资源的名称（例如，cpu）</li><li>资源的单位，如果知道的话（例如，cores）</li></ul><p>一旦 Pod 进入完成状态（其 <code>restartPolicy</code> 为 <code>Never</code> 或 <code>OnFailure</code>，且 其处于 <code>Succeeded</code> 或 <code>Failed</code> Pod 阶段，或者已经被删除且所有容器都具有 终止状态），该时间序列停止报告，因为调度器现在可以调度其它 Pod 来执行。 这两个指标称作 <code>kube_pod_resource_request</code> 和 <code>kube_pod_resource_limit。</code></p><p>指标暴露在 HTTP 端点 <code>/metrics/resources</code>，与调度器上的 <code>/metrics</code> 端点 一样要求相同的访问授权。你必须使用 <code>--show-hidden-metrics-for-version=1.20</code> 标志才能暴露那些稳定性为 Alpha 的指标。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>关于 Alertmanager中group_interval与repeat_interval上的一些坑</title>
    <link href="/2021/12/10/Alarm-time/"/>
    <url>/2021/12/10/Alarm-time/</url>
    
    <content type="html"><![CDATA[<p>Alertmanager 中有三个关于告警时间的参数：</p><ul><li>group_wait：alertmanager 在接收到一条新的告警（第一次出现的告警）时，将这条告警发送给 receiver 之前需要等待的时间</li><li>group_interval：对于一条已经出现过的告警，alertmanager 检查会每隔 group_interval 时间检查一次告警</li><li>repeat_interval： 对于一条已经出现过的告警，每隔 repeat_interval 会重新发送给 receiver</li></ul><p>这三个参数的基础含义比较简单，但是在最近的使用中，我发现当我按照如下格式设置这三个参数时：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">group_wait</span>: <span class="hljs-number">30</span>s<br><span class="hljs-attribute">group_interval</span>: <span class="hljs-number">5</span>m<br><span class="hljs-attribute">repeat_interval</span>: <span class="hljs-number">15</span>m<br></code></pre></td></tr></table></figure><p>我将会每隔 20m 收到一次告警，如果我将 repeat_interval 设置为 20m，那我将会每 25m 收到一次告警。为什么会是这样请点击下面的issue查看，官方给出了一个比较合理的解释。</p><p><a href="https://github.com/prometheus/alertmanager/issues/2647">点此查看此 issue</a></p><p>我根据 Issue 的回答简单总结了一下这三个参数的含义：</p><blockquote><p>Alertmanager 在收到一条新的告警之后，会等待 group_wait 时间，对这条新的告警做一些分组、更新、静默的操作。当第一条告警经过 group_wait 时间之后，Alertmanager 会每隔 group_interval 时间检查一次这条告警，判断是否需要对这条告警进行一些操作，当 Alertmanager 经过 n 次 group_interval 的检查后，n * group_interval 恰好大于 repeat_interval 的时候，Alertmanager 才会将这条告警再次发送给对应的 receiver。</p></blockquote><p>结合我上面的例子，第一条告警在发送给 alertmanager 15m 后会第一次发送给 receiver，接着 Alertmanager 会每隔 5m 检查一次这条告警，在第 4 次检查的时候，到上次告警发出的时间刚好经过了 5*4&#x3D;20&gt;15，所以第二次告警会在第一条告警发出后的 20m 后再次发出，此后每条重复告警都会每隔 20m 发送一次。</p><p>此外还有一个问题：在上面的例子中，如果 alertmanager 是每隔 5m 检查一次告警，那为什么不是恰好在 15m 的时候发出这条告警？关于这个问题，在 Issue 中尚未给出比较明确的答复。</p><p>根据目前的情况，这个问题有两个暂时解决方案：</p><ul><li>调整 repeat_interval 的值：同样结合上面的例子，如果你想每隔 20m 收到一次重复告警，那就把 repeat_interval 设置为 [15m,20m] 之间的任意一个时间</li><li>调整 group_interval 的值：既然 alertmanager 会每隔 group_interval 检查一次已有的告警，那就尽可能将它的时间调的低一些，比如将其设置为 1m，这样你最多在你设置的 repeat_interval+1m 左右就可以收到重复告警</li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Kubeadm使用Containerd</title>
    <link href="/2021/12/06/kubeadm-use-containerd/"/>
    <url>/2021/12/06/kubeadm-use-containerd/</url>
    
    <content type="html"><![CDATA[<h2 id="Kubeadm如果使用Containerd"><a href="#Kubeadm如果使用Containerd" class="headerlink" title="Kubeadm如果使用Containerd"></a>Kubeadm如果使用Containerd</h2><p>前面的主机初始化步骤这里我不再赘述，可以参考 <a href="https://system51.github.io/2019/12/03/kubeadm-base-use/">使用Kubeadm搭建一个高可用集群</a> 文章中的初始化部分。我直接从Containerd的安装开始，这里我使用3台主机做演示。</p><table><thead><tr><th align="left">IP</th><th align="center">Hostname</th><th align="center">role</th><th align="center">CPU</th><th align="right">Memory</th></tr></thead><tbody><tr><td align="left">172.16.50.200</td><td align="center">k8s-master-01</td><td align="center">master</td><td align="center">4</td><td align="right">8G</td></tr><tr><td align="left">172.16.50.203</td><td align="center">k8s-node-01</td><td align="center">node</td><td align="center">4</td><td align="right">8G</td></tr><tr><td align="left">172.16.50.204</td><td align="center">k8s-node-02</td><td align="center">nide</td><td align="center">4</td><td align="right">8G</td></tr></tbody></table><h3 id="升级系统内核"><a href="#升级系统内核" class="headerlink" title="升级系统内核"></a>升级系统内核</h3><p>默认centos7.6内核版本是<code>3.10.0-957.el7.x86_64</code>这个版本比较低，无法使用<code>Cgroup v2</code>，实际在生产中我们使用默认的内核版本也是遇到过一些Bug，所以这里我会做内核版本升级，这个根据个人需求来做。当然你用默认的内核版本是没问题的。</p><p>升级内核需要使用 <code>elrepo</code> 的yum源,首先我们导入 <code>elrepo</code> 的 key并安装 <code>elrepo</code> 源</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs angelscript"><span class="hljs-string">[root@k8s-master-01 ~]</span># rpm --<span class="hljs-keyword">import</span> https:<span class="hljs-comment">//www.elrepo.org/RPM-GPG-KEY-elrepo.org</span><br><span class="hljs-string">[root@k8s-master-01 ~]</span># rpm -Uvh https:<span class="hljs-comment">//www.elrepo.org/elrepo-release-7.el7.elrepo.noarch.rpm</span><br></code></pre></td></tr></table></figure><h4 id="查看可用的内核"><a href="#查看可用的内核" class="headerlink" title="查看可用的内核"></a>查看可用的内核</h4><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs autoit">[root<span class="hljs-symbol">@k8s</span>-master<span class="hljs-number">-01</span> ~]<span class="hljs-meta"># yum --disablerepo=<span class="hljs-string">&quot;*&quot;</span> --enablerepo=<span class="hljs-string">&quot;elrepo-kernel&quot;</span> list available  --showduplicates</span><br></code></pre></td></tr></table></figure><h4 id="内核选择"><a href="#内核选择" class="headerlink" title="内核选择"></a>内核选择</h4><ul><li>kernel-lt（lt&#x3D;long-term）长期有效</li><li>kernel-ml（ml&#x3D;mainline）主流版本</li></ul><h4 id="最新内核安装"><a href="#最新内核安装" class="headerlink" title="最新内核安装"></a>最新内核安装</h4><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs autoit">[root<span class="hljs-symbol">@k8s</span>-master<span class="hljs-number">-01</span> ~]<span class="hljs-meta"># yum --enablerepo=elrepo-kernel install kernel-ml  kernel-ml-devel</span><br></code></pre></td></tr></table></figure><p>修改内核启动顺序,默认启动的顺序应该为1,升级以后内核是往前面插入,为0（如果每次启动时需要手动选择哪个内核,该步骤可以省略）</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dart">[root<span class="hljs-meta">@k</span>8s-master<span class="hljs-number">-01</span> ~]# grub2-<span class="hljs-keyword">set</span>-<span class="hljs-keyword">default</span>  <span class="hljs-number">0</span> &amp;&amp; grub2-mkconfig -o /etc/grub2.cfg<br></code></pre></td></tr></table></figure><p>使用下面命令看看确认下是否启动默认内核指向上面安装的内核</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs autoit">[root<span class="hljs-symbol">@k8s</span>-master<span class="hljs-number">-01</span> ~]<span class="hljs-meta"># grubby --default-kernel</span><br></code></pre></td></tr></table></figure><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">reboot</span><br></code></pre></td></tr></table></figure><h3 id="启用Cgroup-v2"><a href="#启用Cgroup-v2" class="headerlink" title="启用Cgroup v2"></a>启用Cgroup v2</h3><p>要启用 <code>Cgroup v2</code> 你可以通过在内核命令行中添加 <code>systemd.unified_cgroup_hierarchy=1</code> 来配置系统去使用它。 配置后必须重启节点，使参数生效。</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs routeros">yum -y install -y grubby<br>grubby <span class="hljs-attribute">--update-kernel</span>=ALL <span class="hljs-attribute">--args</span>=<span class="hljs-string">&quot;systemd.unified_cgroup_hierarchy=1&quot;</span><br>grubby <span class="hljs-attribute">--info</span>=ALL<br>reboot<br></code></pre></td></tr></table></figure><h3 id="安装-containerd"><a href="#安装-containerd" class="headerlink" title="安装 containerd"></a>安装 containerd</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">yum install -y yum-utils<br>yum-config-manager  --add-repo  https:<span class="hljs-regexp">//</span>download.docker.com<span class="hljs-regexp">/linux/</span>centos/docker-ce.repo<br>yum -y install  containerd.io<br></code></pre></td></tr></table></figure><h4 id="配置-containerd"><a href="#配置-containerd" class="headerlink" title="配置 containerd"></a>配置 containerd</h4><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs gradle">mkdir -p <span class="hljs-regexp">/etc/</span>containerd<br>containerd config <span class="hljs-keyword">default</span> | sudo tee <span class="hljs-regexp">/etc/</span>containerd/config.toml<br></code></pre></td></tr></table></figure><h3 id="使用-systemd-cgroup-驱动程序"><a href="#使用-systemd-cgroup-驱动程序" class="headerlink" title="使用 systemd cgroup 驱动程序"></a>使用 systemd cgroup 驱动程序</h3><p>结合 <code>runc</code> 使用 <code>systemd</code> cgroup 驱动，在 <code>/etc/containerd/config.toml</code> 中设置</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">[plugins.<span class="hljs-string">&quot;io.containerd.grpc.v1.cri&quot;</span><span class="hljs-string">.containerd.runtimes.runc</span>]<br>  <span class="hljs-string">...</span><br>  [plugins.<span class="hljs-string">&quot;io.containerd.grpc.v1.cri&quot;</span><span class="hljs-string">.containerd.runtimes.runc.options</span>]<br>    SystemdCgroup = <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><h4 id="重新启动-containerd"><a href="#重新启动-containerd" class="headerlink" title="重新启动 containerd"></a>重新启动 containerd</h4><p>修改配置文件后请重新启动 <code>containerd</code> 使配置生效：</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">systemctl restart containerd</span><br></code></pre></td></tr></table></figure><h4 id="安装crictl"><a href="#安装crictl" class="headerlink" title="安装crictl"></a>安装crictl</h4><p><code>crictl</code>是连接containerd的一个client端工具，用于管理containerd中的容器，这个工具比默认的ctr好用。crictl 使用 <code>k8s.io</code> 命名空间，kubernetes使用的镜像也是在这个名称空间下。</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">VERSION=<span class="hljs-string">&quot;v1.22.0&quot;</span>  <span class="hljs-comment">#下载与你的 kubernetes 版本相对应的版本</span><br>wget https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/kubernetes-sigs/</span>cri-tools<span class="hljs-regexp">/releases/</span>download<span class="hljs-regexp">/$VERSION/</span>crictl-<span class="hljs-variable">$VERSION</span>-linux-amd64.tar.gz<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">tar zxvf crictl-<span class="hljs-variable">$VERSION</span>-linux-amd64.tar.gz <br><span class="hljs-built_in">chown</span> root.root crictl<br><span class="hljs-built_in">mv</span> crictl /usr/bin/<br></code></pre></td></tr></table></figure><h4 id="配置crictl工具"><a href="#配置crictl工具" class="headerlink" title="配置crictl工具"></a>配置crictl工具</h4><p>编辑 <code>/etc/crictl.yaml</code></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">runtime-endpoint: unix:<span class="hljs-regexp">//</span><span class="hljs-regexp">/run/</span>containerd/containerd.sock <br>image-endpoint: unix:<span class="hljs-regexp">//</span><span class="hljs-regexp">/run/</span>containerd/containerd.sock<br>timeout: <span class="hljs-number">10</span><br></code></pre></td></tr></table></figure><h3 id="kubeadm部署"><a href="#kubeadm部署" class="headerlink" title="kubeadm部署"></a>kubeadm部署</h3><p>默认源在国外会无法安装，我们使用国内的镜像源，所有机器都要操作</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs routeros">cat &lt;&lt;EOF &gt;/etc/yum.repos.d/kubernetes.repo<br>[kubernetes]<br><span class="hljs-attribute">name</span>=Kubernetes<br><span class="hljs-attribute">baseurl</span>=https://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64<br><span class="hljs-attribute">enabled</span>=1<br><span class="hljs-attribute">gpgcheck</span>=0<br>EOF<br></code></pre></td></tr></table></figure><h4 id="master部分安装相关软件"><a href="#master部分安装相关软件" class="headerlink" title="master部分安装相关软件"></a>master部分安装相关软件</h4><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs subunit">yum install -y \<br>    kubeadm<span class="hljs-string">-1</span>.22.4<span class="hljs-string">-0</span> \<br>    kubectl<span class="hljs-string">-1</span>.22.4<span class="hljs-string">-0</span> \<br>    kubelet<span class="hljs-string">-1</span>.22.4<span class="hljs-string">-0</span> \<br>    --disableexcludes=kubernetes &amp;&amp; \<br>    systemctl enable kubelet<br></code></pre></td></tr></table></figure><h4 id="node部分安装相关软件"><a href="#node部分安装相关软件" class="headerlink" title="node部分安装相关软件"></a>node部分安装相关软件</h4><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs subunit">yum install -y \<br>    kubeadm<span class="hljs-string">-1</span>.22.4<span class="hljs-string">-0</span> \<br>    kubectl<span class="hljs-string">-1</span>.22.4<span class="hljs-string">-0</span> \<br>    kubelet<span class="hljs-string">-1</span>.22.4<span class="hljs-string">-0</span> \<br>    --disableexcludes=kubernetes &amp;&amp; \<br>    systemctl enable kubelet<br></code></pre></td></tr></table></figure><h4 id="kubeadm配置参数"><a href="#kubeadm配置参数" class="headerlink" title="kubeadm配置参数"></a>kubeadm配置参数</h4><p>打印默认init的配置信息（此命令仅在一台master节点上执行即可）</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">kubeadm<span class="hljs-built_in"> config </span><span class="hljs-built_in">print</span> init-defaults &gt; initconfig.yaml<br></code></pre></td></tr></table></figure><p>基于默认参数修改为如下配置，由于是演示环境所以我把etcd放在k8s集群内部。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">kubeadm.k8s.io/v1beta3</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">InitConfiguration</span><br><span class="hljs-attr">nodeRegistration:</span><br>  <span class="hljs-attr">criSocket:</span> <span class="hljs-string">unix:///var/run/containerd/containerd.sock</span><br><span class="hljs-meta">---</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">kubeadm.k8s.io/v1beta3</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">ClusterConfiguration</span><br><span class="hljs-attr">imageRepository:</span> <span class="hljs-string">registry.aliyuncs.com/k8sxio</span><br><span class="hljs-attr">kubernetesVersion:</span> <span class="hljs-string">v1.22.4</span><br><span class="hljs-attr">certificatesDir:</span> <span class="hljs-string">/etc/kubernetes/pki</span><br><span class="hljs-attr">clusterName:</span> <span class="hljs-string">kubernetes</span><br><span class="hljs-attr">networking:</span> <br>  <span class="hljs-attr">dnsDomain:</span> <span class="hljs-string">cluster.local</span><br>  <span class="hljs-attr">serviceSubnet:</span> <span class="hljs-number">10.96</span><span class="hljs-number">.0</span><span class="hljs-number">.0</span><span class="hljs-string">/12</span><br>  <span class="hljs-attr">podSubnet:</span> <span class="hljs-number">10.244</span><span class="hljs-number">.0</span><span class="hljs-number">.0</span><span class="hljs-string">/16</span><br><span class="hljs-attr">controlPlaneEndpoint:</span> <span class="hljs-number">172.16</span><span class="hljs-number">.50</span><span class="hljs-number">.200</span><span class="hljs-string">:6443</span><br><span class="hljs-attr">apiServer:</span> <br>  <span class="hljs-attr">timeoutForControlPlane:</span> <span class="hljs-string">4m0s</span><br>  <span class="hljs-attr">extraArgs:</span><br>    <span class="hljs-attr">authorization-mode:</span> <span class="hljs-string">&quot;Node,RBAC&quot;</span><br>    <span class="hljs-attr">enable-admission-plugins:</span> <span class="hljs-string">&quot;NamespaceLifecycle,LimitRanger,ServiceAccount,PersistentVolumeClaimResize,DefaultStorageClass,DefaultTolerationSeconds,NodeRestriction,MutatingAdmissionWebhook,ValidatingAdmissionWebhook,ResourceQuota,Priority&quot;</span><br>    <span class="hljs-attr">runtime-config:</span> <span class="hljs-string">api/all=true</span><br>    <span class="hljs-attr">storage-backend:</span> <span class="hljs-string">etcd3</span><br>  <span class="hljs-attr">certSANs:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span> <br>  <span class="hljs-bullet">-</span> <span class="hljs-string">localhost</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-number">172.16</span><span class="hljs-number">.50</span><span class="hljs-number">.200</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">k8s-master-01</span><br>  <span class="hljs-attr">extraVolumes:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">hostPath:</span> <span class="hljs-string">/etc/localtime</span><br>    <span class="hljs-attr">mountPath:</span> <span class="hljs-string">/etc/localtime</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">localtime</span><br>    <span class="hljs-attr">readOnly:</span> <span class="hljs-literal">true</span><br><span class="hljs-attr">controllerManager:</span> <br>  <span class="hljs-attr">extraArgs:</span><br>    <span class="hljs-attr">bind-address:</span> <span class="hljs-string">&quot;0.0.0.0&quot;</span><br>  <span class="hljs-attr">extraVolumes:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">hostPath:</span> <span class="hljs-string">/etc/localtime</span><br>    <span class="hljs-attr">mountPath:</span> <span class="hljs-string">/etc/localtime</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">localtime</span><br>    <span class="hljs-attr">readOnly:</span> <span class="hljs-literal">true</span><br><span class="hljs-attr">scheduler:</span> <br>  <span class="hljs-attr">extraArgs:</span><br>    <span class="hljs-attr">bind-address:</span> <span class="hljs-string">&quot;0.0.0.0&quot;</span><br>  <span class="hljs-attr">extraVolumes:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">hostPath:</span> <span class="hljs-string">/etc/localtime</span><br>    <span class="hljs-attr">mountPath:</span> <span class="hljs-string">/etc/localtime</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">localtime</span><br>    <span class="hljs-attr">readOnly:</span> <span class="hljs-literal">true</span><br><span class="hljs-attr">dns:</span> <br>  <span class="hljs-attr">type:</span> <span class="hljs-string">CoreDNS</span> <br><span class="hljs-attr">etcd:</span> <br>  <span class="hljs-attr">local:</span><br>    <span class="hljs-attr">dataDir:</span> <span class="hljs-string">&quot;/var/lib/etcd&quot;</span><br><span class="hljs-meta">---</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">kubeproxy.config.k8s.io/v1alpha1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">KubeProxyConfiguration</span> <br><span class="hljs-attr">mode:</span> <span class="hljs-string">ipvs</span> <span class="hljs-comment"># or iptables</span><br><span class="hljs-attr">ipvs:</span><br>  <span class="hljs-attr">excludeCIDRs:</span> <span class="hljs-literal">null</span><br>  <span class="hljs-attr">minSyncPeriod:</span> <span class="hljs-string">0s</span><br>  <span class="hljs-attr">scheduler:</span> <span class="hljs-string">&quot;rr&quot;</span> <span class="hljs-comment"># 调度算法</span><br>  <span class="hljs-attr">strictARP:</span> <span class="hljs-literal">false</span><br>  <span class="hljs-attr">syncPeriod:</span> <span class="hljs-string">15s</span><br><span class="hljs-attr">iptables:</span><br>  <span class="hljs-attr">masqueradeAll:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">masqueradeBit:</span> <span class="hljs-number">14</span><br>  <span class="hljs-attr">minSyncPeriod:</span> <span class="hljs-string">0s</span><br>  <span class="hljs-attr">syncPeriod:</span> <span class="hljs-string">30s</span><br><span class="hljs-meta">---</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">kubelet.config.k8s.io/v1beta1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">KubeletConfiguration</span> <br><span class="hljs-attr">cgroupDriver:</span> <span class="hljs-string">systemd</span><br><span class="hljs-attr">failSwapOn:</span> <span class="hljs-literal">true</span> <span class="hljs-comment"># 如果开启swap则设置为false</span><br></code></pre></td></tr></table></figure><p>至于如何自定义参数请参考官方文档：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">https:<span class="hljs-regexp">//</span>kubernetes.io<span class="hljs-regexp">/zh/</span>docs<span class="hljs-regexp">/setup/</span>production-environment<span class="hljs-regexp">/tools/</span>kubeadm<span class="hljs-regexp">/control-plane-flags/</span><br>https:<span class="hljs-regexp">//</span>kubernetes.io<span class="hljs-regexp">/docs/</span>reference<span class="hljs-regexp">/config-api/</span>kubeadm-config.v1beta3/<span class="hljs-comment">#kubeadm-k8s-io-v1beta3-ClusterConfiguration</span><br>https:<span class="hljs-regexp">//</span>kubernetes.io<span class="hljs-regexp">/zh/</span>docs<span class="hljs-regexp">/setup/</span>production-environment<span class="hljs-regexp">/tools/</span>kubeadm<span class="hljs-regexp">/kubelet-integration/</span><span class="hljs-comment">#propagating-cluster-level-configuration-to-each-kubelet</span><br></code></pre></td></tr></table></figure><p>干运行模式（此步骤会模拟运行看是否能够跑通）</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">kubeadm init <span class="hljs-attr">--config</span> initconfig<span class="hljs-selector-class">.yaml</span> <span class="hljs-attr">--dry-run</span><br></code></pre></td></tr></table></figure><p>检查镜像是否正确</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arduino">kubeadm config images list --config initconfig.yaml<br></code></pre></td></tr></table></figure><p>预先拉取镜像</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">kubeadm config images pull --config initconfig.yaml <span class="hljs-comment"># 下面是输出</span><br>[config/images] Pulled registry.aliyuncs.com/k8sxio/kube-apiserver:v1.22.4<br>[config/images] Pulled registry.aliyuncs.com/k8sxio/kube-controller-manager:v1.22.4<br>[config/images] Pulled registry.aliyuncs.com/k8sxio/kube-scheduler:v1.22.4<br>[config/images] Pulled registry.aliyuncs.com/k8sxio/kube-proxy:v1.22.4<br>[config/images] Pulled registry.aliyuncs.com/k8sxio/pause:3.5<br>[config/images] Pulled registry.aliyuncs.com/k8sxio/etcd:3.5.0-0<br>failed to pull image <span class="hljs-string">&quot;registry.aliyuncs.com/k8sxio/coredns:v1.8.4&quot;</span><br></code></pre></td></tr></table></figure><h4 id="修改containerd-pause地址"><a href="#修改containerd-pause地址" class="headerlink" title="修改containerd pause地址"></a>修改containerd pause地址</h4><p>默认containerd配置文件中<code>sandbox_image</code>地址我们是无法拉取的，所以我们需要修改为上面我们预拉取的pause镜像地址。</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">vim <span class="hljs-regexp">/etc/</span>containerd/config.toml<br>sandbox_image = <span class="hljs-string">&quot;registry.aliyuncs.com/k8sxio/pause:3.5&quot;</span><br></code></pre></td></tr></table></figure><h4 id="kubeadm-init"><a href="#kubeadm-init" class="headerlink" title="kubeadm init"></a>kubeadm init</h4><p>由于我上面拉取<code>coredns</code>镜像失败所以我下面多了加个参数忽略镜像错误参数<code>--ignore-preflight-errors=&quot;ImagePull&quot;</code> 这个问题后续自己处理。</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">kubeadm init <span class="hljs-attr">--config</span> initconfig<span class="hljs-selector-class">.yaml</span>  <span class="hljs-attr">--ignore-preflight-errors</span>=<span class="hljs-string">&quot;ImagePull&quot;</span><br></code></pre></td></tr></table></figure><p>记住init后打印的token，复制kubectl的kubeconfig，kubectl的kubeconfig路径默认是~&#x2F;.kube&#x2F;config</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">mkdir</span> -p <span class="hljs-variable">$HOME</span>/.kube<br><span class="hljs-built_in">cp</span> /etc/kubernetes/admin.conf <span class="hljs-variable">$HOME</span>/.kube/config<br></code></pre></td></tr></table></figure><p>init的yaml信息实际上会存在集群的configmap里，我们可以随时查看，该yaml在其他node和master join的时候会使用到</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs vim">kubectl <span class="hljs-built_in">get</span> <span class="hljs-keyword">cm</span> -n kube-<span class="hljs-built_in">system</span><br>kubectl -n kube-<span class="hljs-built_in">system</span> <span class="hljs-built_in">get</span> <span class="hljs-keyword">cm</span> kubeadm-config -<span class="hljs-keyword">o</span> yaml<br></code></pre></td></tr></table></figure><h4 id="node节点加入"><a href="#node节点加入" class="headerlink" title="node节点加入"></a>node节点加入</h4><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stata">kubeadm join 172.16.50.200:6443 --<span class="hljs-keyword">token</span> 4yvo6z.wv2u5tmehdhv4dc9 --discovery-<span class="hljs-keyword">token</span>-<span class="hljs-keyword">ca</span>-cert-hash sha256:b0c0724a1fbee5e53e3bd436902960b5aba17c298544155a0a10b219ef711266<br></code></pre></td></tr></table></figure><h4 id="安装flannel"><a href="#安装flannel" class="headerlink" title="安装flannel"></a>安装flannel</h4><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">kubectl apply -f https:<span class="hljs-regexp">//</span>raw.githubusercontent.com<span class="hljs-regexp">/coreos/</span>flannel<span class="hljs-regexp">/master/</span>Documentation/kube-flannel.yml<br></code></pre></td></tr></table></figure><h4 id="查看集群节点"><a href="#查看集群节点" class="headerlink" title="查看集群节点"></a>查看集群节点</h4><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">[root@k8s-<span class="hljs-literal">master</span>-<span class="hljs-number">01</span> ~]<span class="hljs-comment"># kubectl get nodes -o wide</span><br>NAME            STATUS   ROLES                  AGE   <span class="hljs-keyword">VERSION</span>   INTERNAL-IP     EXTERNAL-IP   OS-IMAGE                KERNEL-<span class="hljs-keyword">VERSION</span>               CONTAINER-RUNTIME<br>k8s-<span class="hljs-literal">master</span>-<span class="hljs-number">01</span>   Ready    control-plane,<span class="hljs-keyword">master</span>   <span class="hljs-title">16h</span>   v1.<span class="hljs-number">22.4</span>   <span class="hljs-number">172.16</span>.<span class="hljs-number">50.200</span>   <span class="hljs-tag">&lt;none&gt;</span>        CentOS Linux <span class="hljs-number">7</span> (Core)   <span class="hljs-number">5.15</span>.<span class="hljs-number">6</span>-<span class="hljs-number">1</span>.el7.elrepo.x86_64   containerd://<span class="hljs-number">1.4</span>.<span class="hljs-number">12</span><br>k8s-<span class="hljs-keyword">node</span><span class="hljs-title">-01</span>     Ready    <span class="hljs-tag">&lt;none&gt;</span>                 <span class="hljs-number">24m</span>   v1.<span class="hljs-number">22.4</span>   <span class="hljs-number">172.16</span>.<span class="hljs-number">50.203</span>   <span class="hljs-tag">&lt;none&gt;</span>        CentOS Linux <span class="hljs-number">7</span> (Core)   <span class="hljs-number">5.15</span>.<span class="hljs-number">6</span>-<span class="hljs-number">1</span>.el7.elrepo.x86_64   containerd://<span class="hljs-number">1.4</span>.<span class="hljs-number">12</span><br>k8s-<span class="hljs-keyword">node</span><span class="hljs-title">-02</span>     Ready    <span class="hljs-tag">&lt;none&gt;</span>                 <span class="hljs-number">23m</span>   v1.<span class="hljs-number">22.4</span>   <span class="hljs-number">172.16</span>.<span class="hljs-number">50.204</span>   <span class="hljs-tag">&lt;none&gt;</span>        CentOS Linux <span class="hljs-number">7</span> (Core)   <span class="hljs-number">5.15</span>.<span class="hljs-number">6</span>-<span class="hljs-number">1</span>.el7.elrepo.x86_64   containerd://<span class="hljs-number">1.4</span>.<span class="hljs-number">12</span><br></code></pre></td></tr></table></figure><h4 id="修改Kubelet参数"><a href="#修改Kubelet参数" class="headerlink" title="修改Kubelet参数"></a>修改Kubelet参数</h4><p>修改<code>/var/lib/kubelet/kubeadm-flags.env</code>文件中参数，解决kubelet日志中的两个参数告警。</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">KUBELET_KUBEADM_ARGS</span>=<span class="hljs-string">&quot;--container-runtime=remote --container-runtime-endpoint=unix:///run/containerd/containerd.sock&quot;</span><br></code></pre></td></tr></table></figure><h4 id="验证集群可用性"><a href="#验证集群可用性" class="headerlink" title="验证集群可用性"></a>验证集群可用性</h4><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">kubectl -n kube-<span class="hljs-keyword">system</span> <span class="hljs-built_in">get</span> pod -o wide<br><br></code></pre></td></tr></table></figure><p>等待kube-system空间下的pod都是running后我们来测试下集群可用性</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">cat&lt;&lt;EOF</span> <span class="hljs-string">|</span> <span class="hljs-string">kubectl</span> <span class="hljs-string">apply</span> <span class="hljs-string">-f</span> <span class="hljs-bullet">-</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">apps/v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Deployment</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">nginx</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">matchLabels:</span><br>      <span class="hljs-attr">app:</span> <span class="hljs-string">nginx</span><br>  <span class="hljs-attr">template:</span><br>    <span class="hljs-attr">metadata:</span><br>      <span class="hljs-attr">labels:</span><br>        <span class="hljs-attr">app:</span> <span class="hljs-string">nginx</span><br>    <span class="hljs-attr">spec:</span><br>      <span class="hljs-attr">containers:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">image:</span> <span class="hljs-string">nginx:alpine</span><br>        <span class="hljs-attr">name:</span> <span class="hljs-string">nginx</span><br>        <span class="hljs-attr">ports:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">containerPort:</span> <span class="hljs-number">80</span><br><span class="hljs-meta">---</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Service</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">nginx</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">app:</span> <span class="hljs-string">nginx</span><br>  <span class="hljs-attr">ports:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">protocol:</span> <span class="hljs-string">TCP</span><br>      <span class="hljs-attr">port:</span> <span class="hljs-number">80</span><br>      <span class="hljs-attr">targetPort:</span> <span class="hljs-number">80</span><br><span class="hljs-meta">---</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Pod</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">busybox</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">default</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">containers:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">busybox</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">zhangguanzhang/centos</span><br>    <span class="hljs-attr">command:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">sleep</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;3600&quot;</span><br>    <span class="hljs-attr">imagePullPolicy:</span> <span class="hljs-string">IfNotPresent</span><br>  <span class="hljs-attr">restartPolicy:</span> <span class="hljs-string">Always</span><br><span class="hljs-string">EOF</span><br></code></pre></td></tr></table></figure><h4 id="验证集群dns"><a href="#验证集群dns" class="headerlink" title="验证集群dns"></a>验证集群dns</h4><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs avrasm">[root@k8s-master<span class="hljs-number">-01</span> ~]<span class="hljs-meta"># kubectl exec -ti busybox -- nslookup kubernetes</span><br><span class="hljs-symbol">Server:</span>         <span class="hljs-number">10.96</span><span class="hljs-number">.0</span><span class="hljs-number">.10</span><br><span class="hljs-symbol">Address:</span>        <span class="hljs-number">10.96</span><span class="hljs-number">.0</span><span class="hljs-number">.10</span><span class="hljs-meta">#53</span><br><br><span class="hljs-symbol">Name:</span>   kubernetes.default.svc.cluster.local<br><span class="hljs-symbol">Address:</span> <span class="hljs-number">10.96</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span><br></code></pre></td></tr></table></figure><p>在master上curl nginx的svc的ip出现nginx的index内容即集群正常，例如我的nginx svc ip是10.102.137.186</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs xml">[root@k8s-master-01 ~]# curl 10.102.137.186<br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Welcome to nginx!<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css"><span class="hljs-selector-tag">html</span> &#123; <span class="hljs-attribute">color</span>-scheme: light dark; &#125;</span><br><span class="language-css"><span class="hljs-selector-tag">body</span> &#123; <span class="hljs-attribute">width</span>: <span class="hljs-number">35em</span>; <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span> auto;</span><br><span class="language-css"><span class="hljs-attribute">font-family</span>: Tahoma, Verdana, Arial, sans-serif; &#125;</span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Welcome to nginx!<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>If you see this page, the nginx web server is successfully installed and<br>working. Further configuration is required.<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>For online documentation and support please refer to<br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;http://nginx.org/&quot;</span>&gt;</span>nginx.org<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span>.<span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br>Commercial support is available at<br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;http://nginx.com/&quot;</span>&gt;</span>nginx.com<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span>.<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">em</span>&gt;</span>Thank you for using nginx.<span class="hljs-tag">&lt;/<span class="hljs-name">em</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="Kubernetes集群容器引擎切换"><a href="#Kubernetes集群容器引擎切换" class="headerlink" title="Kubernetes集群容器引擎切换"></a>Kubernetes集群容器引擎切换</h2><h3 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h3><ul><li>OS: CentOS 7.6(当前最新版kernel)</li><li>Container runtime: Docker CE 20.10.11</li><li>Kubernetes: v1.22.4</li></ul><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">[root@k8s-<span class="hljs-literal">master</span>-<span class="hljs-number">01</span> ~]<span class="hljs-comment"># kubectl get nodes -o wide</span><br>NAME            STATUS   ROLES                  AGE   <span class="hljs-keyword">VERSION</span>   INTERNAL-IP     EXTERNAL-IP   OS-IMAGE                KERNEL-<span class="hljs-keyword">VERSION</span>                CONTAINER-RUNTIME<br>k8s-<span class="hljs-literal">master</span>-<span class="hljs-number">01</span>   Ready    control-plane,<span class="hljs-keyword">master</span>   <span class="hljs-title">11m</span>   v1.<span class="hljs-number">22.4</span>   <span class="hljs-number">172.16</span>.<span class="hljs-number">50.200</span>   <span class="hljs-tag">&lt;none&gt;</span>        CentOS Linux <span class="hljs-number">7</span> (Core)   <span class="hljs-number">5.4</span>.<span class="hljs-number">163</span>-<span class="hljs-number">1</span>.el7.elrepo.x86_64   docker://<span class="hljs-number">20.10</span>.<span class="hljs-number">11</span><br>k8s-<span class="hljs-keyword">node</span><span class="hljs-title">-01</span>     Ready    <span class="hljs-tag">&lt;none&gt;</span>                 <span class="hljs-number">10m</span>   v1.<span class="hljs-number">22.4</span>   <span class="hljs-number">172.16</span>.<span class="hljs-number">50.203</span>   <span class="hljs-tag">&lt;none&gt;</span>        CentOS Linux <span class="hljs-number">7</span> (Core)   <span class="hljs-number">5.4</span>.<span class="hljs-number">163</span>-<span class="hljs-number">1</span>.el7.elrepo.x86_64   docker://<span class="hljs-number">20.10</span>.<span class="hljs-number">11</span><br>k8s-<span class="hljs-keyword">node</span><span class="hljs-title">-02</span>     Ready    <span class="hljs-tag">&lt;none&gt;</span>                 <span class="hljs-number">10m</span>   v1.<span class="hljs-number">22.4</span>   <span class="hljs-number">172.16</span>.<span class="hljs-number">50.204</span>   <span class="hljs-tag">&lt;none&gt;</span>        CentOS Linux <span class="hljs-number">7</span> (Core)   <span class="hljs-number">5.4</span>.<span class="hljs-number">163</span>-<span class="hljs-number">1</span>.el7.elrepo.x86_64   docker://<span class="hljs-number">20.10</span>.<span class="hljs-number">11</span><br></code></pre></td></tr></table></figure><p>将该node标记为不可被调度，并且驱逐该node上的pod资源<br> <figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">[root@k8s-<span class="hljs-literal">master</span>-<span class="hljs-number">01</span> ~]<span class="hljs-comment"># kubectl get pods -o wide</span><br>NAME                     READY   STATUS    RESTARTS   AGE   IP           <span class="hljs-keyword">NODE</span>          <span class="hljs-title">NOMINATED</span> <span class="hljs-keyword">NODE</span>   <span class="hljs-title">READINESS</span> GATES<br>busybox                  <span class="hljs-number">1</span>/<span class="hljs-number">1</span>     Running   <span class="hljs-number">0</span>          <span class="hljs-number">14m</span>   <span class="hljs-number">10.244</span>.<span class="hljs-number">1.2</span>   k8s-<span class="hljs-keyword">node</span><span class="hljs-title">-01</span>   <span class="hljs-tag">&lt;none&gt;</span>           <span class="hljs-tag">&lt;none&gt;</span><br>nginx-<span class="hljs-number">7</span>fb7fd49b4-pzqm6   <span class="hljs-number">1</span>/<span class="hljs-number">1</span>     Running   <span class="hljs-number">0</span>          <span class="hljs-number">14m</span>   <span class="hljs-number">10.244</span>.<span class="hljs-number">2.2</span>   k8s-<span class="hljs-keyword">node</span><span class="hljs-title">-02</span>   <span class="hljs-tag">&lt;none&gt;</span>           <span class="hljs-tag">&lt;none&gt;</span><br></code></pre></td></tr></table></figure></p><p>驱逐该node节点上的pod资源到集群中的其它节点上去</p><figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs brainfuck"><span class="hljs-comment">kubectl drain k8s</span><span class="hljs-literal">-</span><span class="hljs-comment">node</span><span class="hljs-literal">-</span><span class="hljs-comment">02</span> <span class="hljs-literal">--</span><span class="hljs-comment">delete</span><span class="hljs-literal">-</span><span class="hljs-comment">local</span><span class="hljs-literal">-</span><span class="hljs-comment">data</span> <span class="hljs-literal">--</span><span class="hljs-comment">force</span> <span class="hljs-literal">--</span><span class="hljs-comment">ignore</span><span class="hljs-literal">-</span><span class="hljs-comment">daemonsets</span><br></code></pre></td></tr></table></figure><p>查看之前运行在该node上的pod被调度到了集群中的哪个节点</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">kubectl</span> get pods -o wide<br><span class="hljs-attribute">NAME</span>                     READY   STATUS    RESTARTS   AGE     IP           NODE          NOMINATED NODE   READINESS GATES<br><span class="hljs-attribute">busybox</span>                  <span class="hljs-number">1</span>/<span class="hljs-number">1</span>     Running   <span class="hljs-number">0</span>          <span class="hljs-number">23</span>m     <span class="hljs-number">10.244.1.2</span>   k8s-node-<span class="hljs-number">01</span>   &lt;none&gt;           &lt;none&gt;<br><span class="hljs-attribute">nginx</span>-<span class="hljs-number">7</span>fb7fd49b4-bg5pn   <span class="hljs-number">1</span>/<span class="hljs-number">1</span>     Running   <span class="hljs-number">0</span>          <span class="hljs-number">3</span>m18s   <span class="hljs-number">10.244.1.3</span>   k8s-node-<span class="hljs-number">01</span>   &lt;none&gt;           &lt;none&gt;<br></code></pre></td></tr></table></figure><p>查看Kubernetes集群中的node资源信息</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">[root@k8s-<span class="hljs-literal">master</span>-<span class="hljs-number">01</span> ~]<span class="hljs-comment"># kubectl get nodes</span><br>NAME            STATUS                     ROLES                  AGE   <span class="hljs-keyword">VERSION</span><br>k8s-<span class="hljs-literal">master</span>-<span class="hljs-number">01</span>   Ready                      control-plane,<span class="hljs-keyword">master</span>   <span class="hljs-title">33m</span>   v1.<span class="hljs-number">22.4</span><br>k8s-<span class="hljs-keyword">node</span><span class="hljs-title">-01</span>     Ready                      <span class="hljs-tag">&lt;none&gt;</span>                 <span class="hljs-number">32m</span>   v1.<span class="hljs-number">22.4</span><br>k8s-<span class="hljs-keyword">node</span><span class="hljs-title">-02</span>     Ready,SchedulingDisabled   <span class="hljs-tag">&lt;none&gt;</span>                 <span class="hljs-number">32m</span>   v1.<span class="hljs-number">22.4</span><br><br>如上信息，k8s-<span class="hljs-keyword">node</span><span class="hljs-title">-02</span>节点已经不可被调度了，接下来开始切换容器引擎<br></code></pre></td></tr></table></figure><p>卸载原有docker</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">rpm</span> -qa | grep docker<br><span class="hljs-attribute">rpm</span> -e docker-ce-<span class="hljs-number">20</span>.<span class="hljs-number">10</span>.<span class="hljs-number">11</span>-<span class="hljs-number">3</span>.el7.x86_64 docker-ce-cli-<span class="hljs-number">20</span>.<span class="hljs-number">10</span>.<span class="hljs-number">11</span>-<span class="hljs-number">3</span>.el7.x86_64 docker-ce-rootless-extras-<span class="hljs-number">20</span>.<span class="hljs-number">10</span>.<span class="hljs-number">11</span>-<span class="hljs-number">3</span>.el7.x86_64 docker-scan-plugin-<span class="hljs-number">0</span>.<span class="hljs-number">9</span>.<span class="hljs-number">0</span>-<span class="hljs-number">3</span>.el7.x86_64 <br></code></pre></td></tr></table></figure><p>安装containerd部分请参考本文章上面部分，这里我就不在写一遍了，安装方法都是一样的。<br>配置kubelet使用containerd</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">vim <span class="hljs-regexp">/var/</span>lib<span class="hljs-regexp">/kubelet/</span>kubeadm-flags.env <br>KUBELET_KUBEADM_ARGS=<span class="hljs-string">&quot;--container-runtime=remote --container-runtime-endpoint=unix:///run/containerd/containerd.sock&quot;</span><br></code></pre></td></tr></table></figure><p>重启kubelet</p><figure class="highlight nsis"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs nsis"><span class="hljs-params">system</span>ctl daemon-reload<br><span class="hljs-params">system</span>ctl restart kubelet<br></code></pre></td></tr></table></figure><p>验证容器引擎是否成功切换为containerd</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">[root@k8s-<span class="hljs-literal">master</span>-<span class="hljs-number">01</span> ~]<span class="hljs-comment"># kubectl get nodes -o wide</span><br>NAME            STATUS                     ROLES                  AGE   <span class="hljs-keyword">VERSION</span>   INTERNAL-IP     EXTERNAL-IP   OS-IMAGE                KERNEL-<span class="hljs-keyword">VERSION</span>                CONTAINER-RUNTIME<br>k8s-<span class="hljs-literal">master</span>-<span class="hljs-number">01</span>   Ready                      control-plane,<span class="hljs-keyword">master</span>   <span class="hljs-title">51m</span>   v1.<span class="hljs-number">22.4</span>   <span class="hljs-number">172.16</span>.<span class="hljs-number">50.200</span>   <span class="hljs-tag">&lt;none&gt;</span>        CentOS Linux <span class="hljs-number">7</span> (Core)   <span class="hljs-number">5.4</span>.<span class="hljs-number">163</span>-<span class="hljs-number">1</span>.el7.elrepo.x86_64   docker://<span class="hljs-number">20.10</span>.<span class="hljs-number">11</span><br>k8s-<span class="hljs-keyword">node</span><span class="hljs-title">-01</span>     Ready                      <span class="hljs-tag">&lt;none&gt;</span>                 <span class="hljs-number">51m</span>   v1.<span class="hljs-number">22.4</span>   <span class="hljs-number">172.16</span>.<span class="hljs-number">50.203</span>   <span class="hljs-tag">&lt;none&gt;</span>        CentOS Linux <span class="hljs-number">7</span> (Core)   <span class="hljs-number">5.4</span>.<span class="hljs-number">163</span>-<span class="hljs-number">1</span>.el7.elrepo.x86_64   docker://<span class="hljs-number">20.10</span>.<span class="hljs-number">11</span><br>k8s-<span class="hljs-keyword">node</span><span class="hljs-title">-02</span>     Ready,SchedulingDisabled   <span class="hljs-tag">&lt;none&gt;</span>                 <span class="hljs-number">51m</span>   v1.<span class="hljs-number">22.4</span>   <span class="hljs-number">172.16</span>.<span class="hljs-number">50.204</span>   <span class="hljs-tag">&lt;none&gt;</span>        CentOS Linux <span class="hljs-number">7</span> (Core)   <span class="hljs-number">5.4</span>.<span class="hljs-number">163</span>-<span class="hljs-number">1</span>.el7.elrepo.x86_64   containerd://<span class="hljs-number">1.4</span>.<span class="hljs-number">12</span><br></code></pre></td></tr></table></figure><p>通过将节点标记为可调度，让节点重新上线</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs applescript"><span class="hljs-comment"># 将 &lt;node-to-drain&gt; 替换为当前节点的名称</span><br>kubectl uncordon &lt;node-<span class="hljs-keyword">to</span>-drain&gt;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Prometheus高可用</title>
    <link href="/2021/07/23/Prometheus-Ha/"/>
    <url>/2021/07/23/Prometheus-Ha/</url>
    
    <content type="html"><![CDATA[<p>前面我们已经学习了 Prometheus 的使用，了解了基本的 PromQL 语句以及结合 Grafana 来进行监控图表展示，通过 AlertManager 来进行报警，这些工具结合起来已经可以帮助我们搭建一套比较完整的监控报警系统了，但是也仅仅局限于测试环境，对于生产环境来说则还有许多需要改进的地方，其中一个非常重要的就是 Prometheus 的高可用。</p><p>单台的 Prometheus 存在单点故障的风险，随着监控规模的扩大，Prometheus 产生的数据量也会非常大，性能和存储都会面临问题。毋庸置疑，我们需要一套高可用的 Prometheus 集群。这里我根据我们公司的Prometheus架构来讲一下我们是怎么用的。</p><h2 id="联邦集群"><a href="#联邦集群" class="headerlink" title="联邦集群"></a>联邦集群</h2><p>当单个 Promthues 实例无法处理大量的采集任务时，这个时候我们就可以使用基于 Prometheus 联邦集群的方式来将监控任务划分到不同的 Prometheus 实例中去。Prometheus 联邦允许一台 Prometheus Server 从另一台 Prometheus Server 抓取符合特定条件的数据。Prometheus 的联邦有不同的使用方式，分层联邦和跨服务联邦；</p><h3 id="分层联邦（Hierarchical-federation）"><a href="#分层联邦（Hierarchical-federation）" class="headerlink" title="分层联邦（Hierarchical federation）"></a>分层联邦（Hierarchical federation）</h3><p>一个联邦设置可能由多个机房 Prometheus Server 和一套全局 Prometheus Server组成。每个机房的Prometheus Server负责收集本区域内的数据，全局 Prometheus 服务器从这些下层 Prometheus Server中收集和汇聚数据，并存储聚合后的数据。这样就提供了一个聚合的全局视角和详细的本地视角。<br><img src="/images/Prometheus-HA-1.png" alt="Prometheus-HA-1"></p><h3 id="跨服务联邦（Cross-service-federation）"><a href="#跨服务联邦（Cross-service-federation）" class="headerlink" title="跨服务联邦（Cross-service federation）"></a>跨服务联邦（Cross-service federation）</h3><p>比如说有一个<code>Prometheus Server A</code>用来采集<code>node_exporter</code>的<code>Metrics</code>，而<code>Prometheus Server B</code>则用来采集<code>mysql_exporter</code>的<code>Metrics</code>，最后由全局Prometheus通过联邦的方式来汇总两个<code>Prometheus Server</code>的数据。（可以通过下图中的圆圈和正方形理解）<br><img src="/images/Prometheus-HA-2.png" alt="Prometheus-HA-2"></p><h3 id="Prometheus联邦配置"><a href="#Prometheus联邦配置" class="headerlink" title="Prometheus联邦配置"></a>Prometheus联邦配置</h3><p>source prometheus不用修改什么，prometheus配置如下：</p><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-attribute">global</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">scrape_interval</span><span class="hljs-punctuation">:</span> <span class="hljs-string">60s </span><br>  <span class="hljs-attribute">scrape_timeout</span><span class="hljs-punctuation">:</span> <span class="hljs-string">60s</span><br>  <span class="hljs-attribute">evaluation_interval</span><span class="hljs-punctuation">:</span> <span class="hljs-string">120s </span><br><span class="hljs-attribute">alerting</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">alertmanagers</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">static_configs:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">targets:</span><br>      <span class="hljs-comment"># - alertmanager:9093</span><br><span class="hljs-attribute">rule_files</span><span class="hljs-punctuation">:</span><br><span class="hljs-attribute">scrape_configs</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">job_name: &#x27;node-exporter&#x27;</span><br>    <span class="hljs-attribute">consul_sd_configs</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">server: &#x27;127.0.0.1:8500&#x27;</span><br>        <span class="hljs-attribute">datacenter</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&#x27;lzw&#x27;</span><br>        <span class="hljs-attribute">services</span><span class="hljs-punctuation">:</span> <span class="hljs-string">[]</span><br></code></pre></td></tr></table></figure><p>中心Prometheus从下层Prometheus中拉取数据配置如下(<code>match[]</code>参数是必须配置项):</p><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-attribute">global</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">scrape_interval</span><span class="hljs-punctuation">:</span> <span class="hljs-string">    15s </span><br>  <span class="hljs-attribute">evaluation_interval</span><span class="hljs-punctuation">:</span> <span class="hljs-string">30s </span><br><br><span class="hljs-attribute">alerting</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">alertmanagers</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">static_configs:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">targets:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">10.15.1.29:9093 </span><br><br><span class="hljs-attribute">rule_files</span><span class="hljs-punctuation">:</span><br>   <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;rules/recording_rules.yaml&quot;</span><br>   <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;rules/alerts.yml&quot;</span><br><br><span class="hljs-attribute">scrape_configs</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">job_name: grafana</span><br>    <span class="hljs-attribute">static_configs</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">targets:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&#x27;10.15.1.29:3000&#x27;</span><br><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">job_name: &#x27;cluster-a&#x27;</span><br>    <span class="hljs-attribute">scrape_interval</span><span class="hljs-punctuation">:</span> <span class="hljs-string">60s</span><br>    <span class="hljs-attribute">scrape_timeout</span><span class="hljs-punctuation">:</span> <span class="hljs-string">60s</span><br>    <span class="hljs-attribute">honor_labels</span><span class="hljs-punctuation">:</span> <span class="hljs-string">true</span><br>    <span class="hljs-attribute">metrics_path</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&#x27;/federate&#x27;</span><br>    <span class="hljs-attribute">params</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-attribute">&#x27;match[]&#x27;</span><span class="hljs-punctuation">:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">&#x27;&#123;job=~&quot;.+&quot;&#125;&#x27;</span><br>    <span class="hljs-attribute">static_configs</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">targets:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&#x27;10.15.1.30:9090&#x27;</span><br><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">job_name: &#x27;cluster-b&#x27;</span><br>    <span class="hljs-attribute">scrape_interval</span><span class="hljs-punctuation">:</span> <span class="hljs-string">60s</span><br>    <span class="hljs-attribute">scrape_timeout</span><span class="hljs-punctuation">:</span> <span class="hljs-string">60s</span><br>    <span class="hljs-attribute">honor_labels</span><span class="hljs-punctuation">:</span> <span class="hljs-string">true</span><br>    <span class="hljs-attribute">metrics_path</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&#x27;/federate&#x27;</span><br>    <span class="hljs-attribute">params</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-attribute">&#x27;match[]&#x27;</span><span class="hljs-punctuation">:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">&#x27;&#123;job=~&quot;.+&quot;&#125;&#x27;</span><br>    <span class="hljs-attribute">static_configs</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">targets:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&#x27;10.15.1.31:9090&#x27;</span><br></code></pre></td></tr></table></figure><table><thead><tr><th>主机</th><th>角色</th></tr></thead><tbody><tr><td>10.15.1.29</td><td>中心Prometheus</td></tr><tr><td>10.15.1.30</td><td>Prometheus Server</td></tr><tr><td>10.15.1.31</td><td>Prometheus Server</td></tr><tr><td>10.15.1.32</td><td>node_exporter被10.15.1.30采集</td></tr><tr><td>10.15.1.46</td><td>node_exporter被10.15.1.31采集</td></tr></tbody></table><h3 id="实际生产中用例"><a href="#实际生产中用例" class="headerlink" title="实际生产中用例"></a>实际生产中用例</h3><p>在生产中不建议使用<code>&#39;&#123;job=~&quot;.+&quot;&#125;&#39;</code> 匹配拉取所有数据，由于数据量大，可能会导致中心Prometheus拉取数据失败。所以在生产中最好是分组拉取。根据分中心不同的<code>job</code>或<code>namespaces</code>标签做区分。这里还需要注意<code>scrape_interval</code> 和 <code>scrape_timeout</code> 两个参数。如果分中心promethues设置的时间为<code>30s</code>，中心Prometheus可以设置为<code>35s</code>或<code>40s</code>时间大于分中心的抓取时间，但是不能大于他的倍数例如<code>60s</code>。不然绘图偶尔会出现断断续续的情况。</p><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-bullet">-</span> <span class="hljs-string">job_name: &#x27;cluster-a&#x27;</span><br>  <span class="hljs-attribute">scrape_interval</span><span class="hljs-punctuation">:</span> <span class="hljs-string">45s</span><br>  <span class="hljs-attribute">scrape_timeout</span><span class="hljs-punctuation">:</span> <span class="hljs-string">45s</span><br>  <span class="hljs-attribute">honor_labels</span><span class="hljs-punctuation">:</span> <span class="hljs-string">true</span><br>  <span class="hljs-attribute">metrics_path</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&#x27;/federate&#x27;</span><br>  <span class="hljs-attribute">params</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-attribute">&#x27;match[]&#x27;</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&#x27;&#123;job=~&quot;.+&quot;&#125;&#x27;</span><br>  <span class="hljs-attribute">static_configs</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">targets:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">&#x27;172.16.60.244:9090&#x27;</span><br><br><span class="hljs-bullet">-</span> <span class="hljs-string">job_name: &#x27;kube-apiserver&#x27;</span><br>  <span class="hljs-attribute">scrape_interval</span><span class="hljs-punctuation">:</span> <span class="hljs-string">45s</span><br>  <span class="hljs-attribute">scrape_timeout</span><span class="hljs-punctuation">:</span> <span class="hljs-string">45s</span><br>  <span class="hljs-attribute">honor_labels</span><span class="hljs-punctuation">:</span> <span class="hljs-string">true</span><br>  <span class="hljs-attribute">metrics_path</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&#x27;/federate&#x27;</span><br>  <span class="hljs-attribute">params</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-attribute">&#x27;match[]&#x27;</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&#x27;&#123;job=~&quot;kube-apiserver&quot;&#125;&#x27;</span><br>  <span class="hljs-attribute">static_configs</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">targets:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">&#x27;172.16.50.31:30080&#x27;</span><br><br><span class="hljs-bullet">-</span> <span class="hljs-string">job_name: &#x27;etcd&#x27;</span><br>  <span class="hljs-attribute">scrape_interval</span><span class="hljs-punctuation">:</span> <span class="hljs-string">45s</span><br>  <span class="hljs-attribute">scrape_timeout</span><span class="hljs-punctuation">:</span> <span class="hljs-string">45s</span><br>  <span class="hljs-attribute">honor_labels</span><span class="hljs-punctuation">:</span> <span class="hljs-string">true</span><br>  <span class="hljs-attribute">metrics_path</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&#x27;/federate&#x27;</span><br>  <span class="hljs-attribute">params</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-attribute">&#x27;match[]&#x27;</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&#x27;&#123;job=~&quot;etcd-k8s&quot;&#125;&#x27;</span><br>  <span class="hljs-attribute">static_configs</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">targets:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">&#x27;172.16.50.31:30080&#x27;</span><br><br><span class="hljs-bullet">-</span> <span class="hljs-string">job_name: &#x27;ingress-nginx-endpoints&#x27;</span><br>  <span class="hljs-attribute">scrape_interval</span><span class="hljs-punctuation">:</span> <span class="hljs-string">45s</span><br>  <span class="hljs-attribute">scrape_timeout</span><span class="hljs-punctuation">:</span> <span class="hljs-string">45s</span><br>  <span class="hljs-attribute">honor_labels</span><span class="hljs-punctuation">:</span> <span class="hljs-string">true</span><br>  <span class="hljs-attribute">metrics_path</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&#x27;/federate&#x27;</span><br>  <span class="hljs-attribute">params</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-attribute">&#x27;match[]&#x27;</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&#x27;&#123;job=~&quot;ingress-nginx-endpoints&quot;&#125;&#x27;</span><br>  <span class="hljs-attribute">static_configs</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">targets:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">&#x27;172.16.50.31:30080&#x27;</span><br><br><span class="hljs-bullet">-</span> <span class="hljs-string">job_name: &#x27;kube-state-metrics&#x27;</span><br>  <span class="hljs-attribute">scrape_interval</span><span class="hljs-punctuation">:</span> <span class="hljs-string">45s</span><br>  <span class="hljs-attribute">scrape_timeout</span><span class="hljs-punctuation">:</span> <span class="hljs-string">45s</span><br>  <span class="hljs-attribute">honor_labels</span><span class="hljs-punctuation">:</span> <span class="hljs-string">true</span><br>  <span class="hljs-attribute">metrics_path</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&#x27;/federate&#x27;</span><br>  <span class="hljs-attribute">params</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-attribute">&#x27;match[]&#x27;</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&#x27;&#123;job=~&quot;kube-state-metrics&quot;&#125;&#x27;</span><br>  <span class="hljs-attribute">static_configs</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">targets:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">&#x27;172.16.50.31:30080&#x27;</span><br><br><span class="hljs-bullet">-</span> <span class="hljs-string">job_name: &#x27;kubernetes&#x27;</span><br>  <span class="hljs-attribute">scrape_interval</span><span class="hljs-punctuation">:</span> <span class="hljs-string">45s</span><br>  <span class="hljs-attribute">scrape_timeout</span><span class="hljs-punctuation">:</span> <span class="hljs-string">45s</span><br>  <span class="hljs-attribute">honor_labels</span><span class="hljs-punctuation">:</span> <span class="hljs-string">true</span><br>  <span class="hljs-attribute">metrics_path</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&#x27;/federate&#x27;</span><br>  <span class="hljs-attribute">params</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-attribute">&#x27;match[]&#x27;</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&#x27;&#123;job=~&quot;kubernetes.*&quot;&#125;&#x27;</span><br>  <span class="hljs-attribute">static_configs</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">targets:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">&#x27;172.16.50.31:30080&#x27;</span><br><br><span class="hljs-bullet">-</span> <span class="hljs-string">job_name: &#x27;kubelet&#x27;</span><br>  <span class="hljs-attribute">scrape_interval</span><span class="hljs-punctuation">:</span> <span class="hljs-string">45s</span><br>  <span class="hljs-attribute">scrape_timeout</span><span class="hljs-punctuation">:</span> <span class="hljs-string">45s</span><br>  <span class="hljs-attribute">honor_labels</span><span class="hljs-punctuation">:</span> <span class="hljs-string">true</span><br>  <span class="hljs-attribute">metrics_path</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&#x27;/federate&#x27;</span><br>  <span class="hljs-attribute">params</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-attribute">&#x27;match[]&#x27;</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&#x27;&#123;job=~&quot;kubelet&quot;&#125;&#x27;</span><br>  <span class="hljs-attribute">static_configs</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">targets:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">&#x27;172.16.50.31:30080&#x27;</span><br><br><span class="hljs-bullet">-</span> <span class="hljs-string">job_name: &#x27;kube-system&#x27;</span><br>  <span class="hljs-attribute">scrape_interval</span><span class="hljs-punctuation">:</span> <span class="hljs-string">35s</span><br>  <span class="hljs-attribute">scrape_timeout</span><span class="hljs-punctuation">:</span> <span class="hljs-string">35s</span><br>  <span class="hljs-attribute">honor_labels</span><span class="hljs-punctuation">:</span> <span class="hljs-string">true</span><br>  <span class="hljs-attribute">metrics_path</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&#x27;/federate&#x27;</span><br>  <span class="hljs-attribute">params</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-attribute">&#x27;match[]&#x27;</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&#x27;&#123;namespace=&quot;kube-system&quot;,job=~&quot;metrics-server|kube-dns&quot;&#125;&#x27;    #以名称空间做抓取过滤</span><br>  <span class="hljs-attribute">static_configs</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">targets:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">&#x27;172.16.50.31:30080&#x27;</span><br><br><span class="hljs-bullet">-</span> <span class="hljs-string">job_name: &#x27;pmsp&#x27;                        </span><br>  <span class="hljs-attribute">scrape_interval</span><span class="hljs-punctuation">:</span> <span class="hljs-string">35s</span><br>  <span class="hljs-attribute">scrape_timeout</span><span class="hljs-punctuation">:</span> <span class="hljs-string">35s</span><br>  <span class="hljs-attribute">honor_labels</span><span class="hljs-punctuation">:</span> <span class="hljs-string">true</span><br>  <span class="hljs-attribute">metrics_path</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&#x27;/federate&#x27;</span><br>  <span class="hljs-attribute">params</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-attribute">&#x27;match[]&#x27;</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&#x27;&#123;job=&quot;svc-staffsit-java&quot;&#125;&#x27;</span><br>  <span class="hljs-attribute">static_configs</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">targets:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">&#x27;172.16.50.31:30080&#x27;</span><br></code></pre></td></tr></table></figure><h2 id="外部存储VictoriaMetrics"><a href="#外部存储VictoriaMetrics" class="headerlink" title="外部存储VictoriaMetrics"></a>外部存储VictoriaMetrics</h2><p>VictoriaMetrics是一个快速高效且可扩展的监控解决方案和时序数据库，可以作为Prometheus的长期远端存储。这里我们架构使用Prometheus联邦模式加VictoriaMetrics作为外部存储，将中心Prometheus数据使用<code>remote_write</code>的方式写入到VictoriaMetrics中，Prometheus将传入数据写入本地存储并并行复制到远程存储。这意味着即使远程存储不可用，数据在本地存储中仍可用 <code>--storage.tsdb.retention.time</code> 持续时间。实际上VictoriaMetrics自己也有一套监控方案可以用来替代现有的Prometheus，这里我仅使用VictoriaMetrics的存储功能。</p><h3 id="安装VictoriaMetrics"><a href="#安装VictoriaMetrics" class="headerlink" title="安装VictoriaMetrics"></a>安装VictoriaMetrics</h3><p>VictoriaMetrics分两个版本一个是单机版一个是集群版，我们使用单机版即可。</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs autoit"><span class="hljs-meta"># 下载victoriametrics</span><br>[root<span class="hljs-symbol">@devops010015001029</span> shallwe]<span class="hljs-meta"># wget https://github.com/VictoriaMetrics/VictoriaMetrics/releases/download/v1.63.0/victoria-metrics-amd64-v1.63.0.tar.gz</span><br>[root<span class="hljs-symbol">@devops010015001029</span> shallwe]<span class="hljs-meta"># tar -zxv -f victoria-metrics-amd64-v1.63.0.tar.gz </span><br>[root<span class="hljs-symbol">@devops010015001029</span> shallwe]<span class="hljs-meta"># mkdir -pv /usr/local/victoriametrics/&#123;bin,conf,data&#125;</span><br>[root<span class="hljs-symbol">@devops010015001029</span> shallwe]<span class="hljs-meta"># mv victoria-metrics-prod /usr/local/victoriametrics/bin/</span><br>[root<span class="hljs-symbol">@devops010015001029</span> shallwe]<span class="hljs-meta"># mkdir -pv /run/victoriametrics</span><br></code></pre></td></tr></table></figure><h3 id="配置victoriametrics启动参数"><a href="#配置victoriametrics启动参数" class="headerlink" title="配置victoriametrics启动参数"></a>配置victoriametrics启动参数</h3><p>注意：下面部分参数需要修改，根据自己的主机情况修改，以下参数并不适用所有主机。</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[root@devops010015001029 shallwe]</span><span class="hljs-comment"># vim /usr/local/victoriametrics/conf/victoriametrics</span><br><br><span class="hljs-attr">VICTORIAMETRICS_OPT</span>=-http.connTimeout=<span class="hljs-number">5</span>m \<br><span class="hljs-attr">-maxConcurrentInserts</span>=<span class="hljs-number">20000</span> \<br><span class="hljs-attr">-maxInsertRequestSize</span>=<span class="hljs-number">100</span>MB \<br><span class="hljs-attr">-maxLabelsPerTimeseries</span>=<span class="hljs-number">200</span> \<br><span class="hljs-attr">-insert.maxQueueDuration</span>=<span class="hljs-number">5</span>m \<br><span class="hljs-attr">-dedup.minScrapeInterval</span>=<span class="hljs-number">60</span>s \<br><span class="hljs-attr">-bigMergeConcurrency</span>=<span class="hljs-number">20</span> \<br><span class="hljs-attr">-retentionPeriod</span>=<span class="hljs-number">180</span>d \<br><span class="hljs-attr">-search.maxQueryDuration</span>=<span class="hljs-number">10</span>m \<br><span class="hljs-attr">-search.maxQueryLen</span>=<span class="hljs-number">30</span>MB \<br><span class="hljs-attr">-search.maxQueueDuration</span>=<span class="hljs-number">60</span>s \<br><span class="hljs-attr">-search.maxConcurrentRequests</span>=<span class="hljs-number">32</span> \<br><span class="hljs-attr">-storageDataPath</span>=/usr/local/victoriametrics/data \<br></code></pre></td></tr></table></figure><h3 id="设置开机启动"><a href="#设置开机启动" class="headerlink" title="设置开机启动"></a>设置开机启动</h3><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[root@devops010015001029 shallwe]</span><span class="hljs-comment"># vim /usr/lib/systemd/system/victoriametrics.service</span><br><br><span class="hljs-section">[Unit]</span><br><span class="hljs-attr">Description</span>=victoriametrics<br><span class="hljs-attr">After</span>=network.target<br><br><span class="hljs-section">[Service]</span><br><span class="hljs-attr">Type</span>=simple<br><span class="hljs-attr">LimitNOFILE</span>=<span class="hljs-number">1024000</span><br><span class="hljs-attr">LimitNPROC</span>=<span class="hljs-number">1024000</span><br><span class="hljs-attr">LimitCORE</span>=infinity<br><span class="hljs-attr">LimitMEMLOCK</span>=infinity<br><span class="hljs-attr">EnvironmentFile</span>=-/usr/local/victoriametrics/conf/victoriametrics<br><span class="hljs-attr">PIDFile</span>=/run/victoriametrics/victoriametrics.pid<br><span class="hljs-attr">ExecStart</span>=/usr/local/victoriametrics/bin/victoria-metrics-prod <span class="hljs-variable">$VICTORIAMETRICS_OPT</span><br><span class="hljs-attr">ExecStop</span>=/bin/kill -s SIGTERM <span class="hljs-variable">$MAINPID</span><br><span class="hljs-attr">Restart</span>=<span class="hljs-literal">on</span>-failure<br><span class="hljs-attr">RestartSec</span>=<span class="hljs-number">1</span><br><span class="hljs-attr">KillMode</span>=process<br><br><span class="hljs-section">[Install]</span><br><span class="hljs-attr">WantedBy</span>=multi-user.target<br><br><br><span class="hljs-section">[root@devops010015001029 shallwe]</span><span class="hljs-comment"># systemctl daemon-reload</span><br><span class="hljs-section">[root@devops010015001029 shallwe]</span><span class="hljs-comment"># systemctl start victoriametrics</span><br><span class="hljs-section">[root@devops010015001029 shallwe]</span><span class="hljs-comment"># systemctl status victoriametrics</span><br></code></pre></td></tr></table></figure><h3 id="Prometheus数据写入victoriametrics"><a href="#Prometheus数据写入victoriametrics" class="headerlink" title="Prometheus数据写入victoriametrics"></a>Prometheus数据写入victoriametrics</h3><p>将以下行添加到 Prometheus 配置文件（prometheus.yml）</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">remote_write:</span><br>- url: http:<span class="hljs-comment">//10.15.1.29:8428/api/v1/write</span><br><span class="hljs-symbol">  remote_timeout:</span> <span class="hljs-number">30</span>s<br><span class="hljs-symbol">  queue_config:</span><br><span class="hljs-symbol">    capacity:</span> <span class="hljs-number">20000</span><br><span class="hljs-symbol">    max_shards:</span> <span class="hljs-number">50</span><br><span class="hljs-symbol">    min_shards:</span> <span class="hljs-number">1</span><br><span class="hljs-symbol">    max_samples_per_send:</span> <span class="hljs-number">10000</span><br><span class="hljs-symbol">    batch_send_deadline:</span> <span class="hljs-number">60</span>s<br><span class="hljs-symbol">    min_backoff:</span> <span class="hljs-number">30</span>ms<br><span class="hljs-symbol">    max_backoff:</span> <span class="hljs-number">100</span>ms<br></code></pre></td></tr></table></figure><h3 id="prometheus的remote-write功能"><a href="#prometheus的remote-write功能" class="headerlink" title="prometheus的remote write功能"></a>prometheus的remote write功能</h3><p>prometheus配置了remote write的目标地址后，它会从WAL读取数据，然后把采样数据写入各分片的内存队列，最后发起向远程目标地址的请求。</p><p>数据流的逻辑大致如下：</p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs livescript">      |--&gt;  queue <span class="hljs-function"><span class="hljs-params">(shard_1)</span>   --&gt;</span> remote endpoint<br>WAL --|--&gt;  queue <span class="hljs-function"><span class="hljs-params">(shard_...)</span> --&gt;</span> remote endpoint<br>      |--&gt;  queue <span class="hljs-function"><span class="hljs-params">(shard_n)</span>   --&gt;</span> remote endpoint<br></code></pre></td></tr></table></figure><p>需要注意的是：WAL是每两小时压缩一次，如果远程写入的目标地址挂了超过两个小时，就会导致这段时间没被发送的数据丢失。如果远程写入的目标地址无响应时间较短（两小时以内），prometheus是会重试的，这种情况不会造成数据丢失。</p><p>当一个分片的队列被塞满时，promtheus将阻塞继续从WAL读取数据到任意分片。</p><p>在操作过程中，prometheus根据以下条件来持续计算要是用的最佳的分片数：</p><ul><li>摄入样本的速率（incoming sample rate）</li><li>还未发送的样本数量（number of outstanding samples not sent）</li><li>发送每个样本的时间（time taken to send each sample）</li></ul><h4 id="内存的使用"><a href="#内存的使用" class="headerlink" title="内存的使用"></a>内存的使用</h4><p>当开启remote write功能后，prometheus内存的消耗是会上涨的。大部分反馈会上涨约25%的内存消耗，但实际数据取决于数据的分片。</p><p>对于WAL中的每一个series，远程写功能会缓存一个series ID到标签值的映射，这会导致内存消耗的大量增加。</p><p>除此之外，每个分片和其队列也增加了内存的使用。分片内存与 <code>number of shards * (capacity + max_samples_per_send)</code>成正比。默认的<code>capacity</code>和<code>max_samples_per_send</code>将限制每个分片的内存使用小于100KB。</p><h4 id="相关参数"><a href="#相关参数" class="headerlink" title="相关参数"></a>相关参数</h4><p>remote write的相关参数在queue_config配置块:</p><figure class="highlight pf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs pf"><span class="hljs-comment"># Configures the queue used to write to remote storage.</span><br>queue_config:<br>  <span class="hljs-comment"># Number of samples to buffer per shard before we block reading of more</span><br>  <span class="hljs-comment"># samples from the WAL. It is recommended to have enough capacity in each</span><br>  <span class="hljs-comment"># shard to buffer several requests to keep throughput up while processing</span><br>  <span class="hljs-comment"># occasional slow remote requests.</span><br>  [ capacity: <span class="hljs-variable">&lt;int&gt;</span> | <span class="hljs-keyword">default</span> = <span class="hljs-number">500</span> ]<br>  <span class="hljs-comment"># Maximum number of shards, i.e. amount of concurrency.</span><br>  [ max_shards: <span class="hljs-variable">&lt;int&gt;</span> | <span class="hljs-keyword">default</span> = <span class="hljs-number">1000</span> ]<br>  <span class="hljs-comment"># Minimum number of shards, i.e. amount of concurrency.</span><br>  [ min_shards: <span class="hljs-variable">&lt;int&gt;</span> | <span class="hljs-keyword">default</span> = <span class="hljs-number">1</span> ]<br>  <span class="hljs-comment"># Maximum number of samples per send.</span><br>  [ max_samples_per_send: <span class="hljs-variable">&lt;int&gt;</span> | <span class="hljs-keyword">default</span> = <span class="hljs-number">100</span>]<br>  <span class="hljs-comment"># Maximum time a sample will wait in buffer.</span><br>  [ batch_send_deadline: <span class="hljs-variable">&lt;duration&gt;</span> | <span class="hljs-keyword">default</span> = <span class="hljs-number">5</span>s ]<br>  <span class="hljs-comment"># Initial retry delay. Gets doubled for every retry.</span><br>  [ min_backoff: <span class="hljs-variable">&lt;duration&gt;</span> | <span class="hljs-keyword">default</span> = <span class="hljs-number">30</span>ms ]<br>  <span class="hljs-comment"># Maximum retry delay.</span><br>  [ max_backoff: <span class="hljs-variable">&lt;duration&gt;</span> | <span class="hljs-keyword">default</span> = <span class="hljs-number">100</span>ms ]<br></code></pre></td></tr></table></figure><p>capacity<br>用来指定每个分片队列可容纳的样本数上限。当队列达到上限后，将停止从WAL读数据。</p><p>通过设大capacity可以避免分片的阻塞，但是会导致过多的内存消耗，以及resharing时清空队列所需要的时间。<br>推荐是将capacity设为max_samples_per_send的3到10倍。</p><p>max_shards<br>用来指定最大的分片数。当队列落后远程写组件，prometheus将增加分片数直到最大值，来增加吞吐量。</p><p>min_shards<br>用来指定最小的分片数。这个参数对于大多数使用者来说不需要调整，因为当远程写落后时，prometheus会自动增加分片数。</p><p>max_samples_per_send<br>用来指定每次批量发送给远程写目标地址的最大samples数。如果远程写地址的后端服务，处理能力有限，或对每次处理的samples数有上限，则可以考虑设小次参数。</p><p>batch_send_deadline<br>指定发送一个远程写请求的最大等待时间。简单的说，batch_send_deadline和max_samples_per_send这两个参数，有一个先达到，都会发起一个远程写请求。</p><p>min_backoff<br>指定当请求失败时，发起重试的最小时间间隔。增加这个值，可以使重试间隔时间更分散。每次重试后，下次重试的间隔时间将翻倍，直到达到max_backoff。</p><p>max_backoff<br>指定重试间隔的最大时间。</p><h3 id="Prometheus-设置开机启动"><a href="#Prometheus-设置开机启动" class="headerlink" title="Prometheus 设置开机启动"></a>Prometheus 设置开机启动</h3><p>systemd服务：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[root@devops010015001029 conf]</span><span class="hljs-comment"># vim /usr/lib/systemd/system/prometheus.service </span><br><br><span class="hljs-section">[Unit]</span><br><span class="hljs-attr">Description</span>=prometheus<br><span class="hljs-attr">Wants</span>=network-<span class="hljs-literal">on</span>line.target<br><br><span class="hljs-section">[Service]</span><br><span class="hljs-attr">LimitNOFILE</span>=<span class="hljs-number">1024000</span><br><span class="hljs-attr">LimitNPROC</span>=<span class="hljs-number">1024000</span><br><span class="hljs-attr">LimitCORE</span>=infinity<br><span class="hljs-attr">LimitMEMLOCK</span>=infinity<br><span class="hljs-attr">EnvironmentFile</span>=-/usr/local/prometheus/conf/prometheus<br><span class="hljs-attr">ExecStart</span>=/usr/local/prometheus/prometheus <span class="hljs-variable">$PROMETHEUS_OPTS</span><br><span class="hljs-attr">Restart</span>=<span class="hljs-literal">on</span>-failure<br><span class="hljs-attr">KillMode</span>=process<br><br><span class="hljs-section">[Install]</span><br><span class="hljs-attr">WantedBy</span>=multi-user.target<br></code></pre></td></tr></table></figure><p>参数配置：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs routeros">[root@devops010015001029 conf]# vim /usr/local/prometheus/conf/prometheus<br><br><span class="hljs-attribute">PROMETHEUS_OPTS</span>=--config.file=/usr/local/prometheus/prometheus.yml \<br>--web.<span class="hljs-attribute">listen-address</span>=:9090 \<br>--storage.tsdb.<span class="hljs-attribute">path</span>=/data/prometheus \<br>--storage.tsdb.retention.<span class="hljs-attribute">time</span>=2d \<br>--storage.tsdb.<span class="hljs-attribute">min-block-duration</span>=2h \<br>--storage.tsdb.<span class="hljs-attribute">max-block-duration</span>=2h \<br>--web.enable-lifecycle \<br></code></pre></td></tr></table></figure><p>可配置的参数（可参考）：</p><p><img src="/images/Prometheus-HA-12.png" alt="Prometheus-HA-12"></p><h3 id="Grafana设置"><a href="#Grafana设置" class="headerlink" title="Grafana设置"></a>Grafana设置</h3><p>使用以下 URL 在 Grafana 中创建 Prometheus 数据源：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">http:<span class="hljs-regexp">//</span>&lt;victoriametrics-addr&gt;:<span class="hljs-number">8428</span><br></code></pre></td></tr></table></figure><p>替换<code>&lt;victoriametrics-addr&gt;</code>为 VictoriaMetrics 的主机名或 IP 地址。</p><p><img src="/images/Prometheus-HA-3.png" alt="Prometheus-HA-3"></p><h3 id="Prometheus本地存储"><a href="#Prometheus本地存储" class="headerlink" title="Prometheus本地存储"></a>Prometheus本地存储</h3><p>Prometheus内置了TSDB时序数据库，内置的时序数据给Prometheus带来了简单高效的使用体验，Prometheus2.0 版本引入了全新的V3存储引擎，每秒可处理数百万个样本，可以在单节点的情况下满足大部分用户的监控需求。</p><h4 id="Prometheus-TSDB数据存储格式概览"><a href="#Prometheus-TSDB数据存储格式概览" class="headerlink" title="Prometheus TSDB数据存储格式概览"></a>Prometheus TSDB数据存储格式概览</h4><ul><li>以每2小时为一个时间窗口，并存储为一个单独的block;</li><li>block会压缩、合并历史数据块，随着压缩合并，其block数量会减少; </li><li>block的大小并不固定，但最小会保存两个小时的数据;（因为有些时候你添加了样本或者减少了样本数就会导致block大小不一样）</li></ul><p>下图为block文件<br><img src="/images/Prometheus-HA-8.png" alt="Prometheus-HA-8"></p><h4 id="TSDB-Block"><a href="#TSDB-Block" class="headerlink" title="TSDB Block"></a>TSDB Block</h4><p>每个block都有单独的目录，里面包含该时间窗口内所有的chunk、index、 tombstones、meta.json</p><ul><li>chunks: 用于保存时序数据，每个chunk的大小为512MB，超出该大小时则截断并创建为另一个Chunk;各Chunk以数字编号;</li><li>index: 索引文件，它是Prometheus TSDB实现高效查询的基础;我们甚至可以通过Metrics Name和Labels查找时间序列数据在chunk文件中的位置;索引文件会将指标名称和标签索 引到样本数据的时间序列中;</li><li>tombstones: 用于对数据进行软删除，即“标记删除”，以降低删除操作的成本;删除的记录并保存于tombstones文件中，而读取时间序列上的数据时，会基于tombstones进行过滤已经删除的部分;</li><li>meta.json: block的元数据信息，这些元数据信息是block的合并、删除等操作的基础依赖;</li></ul><p>下图为Block文件中的文件<br><img src="/images/Prometheus-HA-9.png" alt="Prometheus-HA-9"></p><h4 id="WAL"><a href="#WAL" class="headerlink" title="WAL"></a>WAL</h4><p><img src="/images/Prometheus-HA-7.jpeg" alt="Prometheus-HA-7"></p><p>在上图中，Head块是数据库的内存部分，灰色块是磁盘上不可更改的持久块。我们有一个预写日志（WAL）用于持久写入。传入的sample（粉红色的方框）首先进入Head块，并在内存中停留一段时间，然后刷新到磁盘并映射到内存（蓝色的方框）。当这些内存映射的块或内存中的块变旧到一定程度时，它们会作为持久性块被刷新到磁盘。随着它们变旧，将合并更多的块，并在超过保留期限后将其最终删除。</p><p>WAL是数据库中发生的事件的顺序日志。在写入&#x2F;修改&#x2F;删除数据库中的数据之前，首先将事件记录（附加）到WAL中，然后在数据库中执行必要的操作。</p><p>不管出于何种原因，如果机器或程序崩溃，都会在此WAL中记录事件，您可以按照相同的顺序重播这些事件以恢复数据。这对于内存数据库尤其有用，在内存数据库中，如果数据库崩溃，则如果不是WAL，则内存中的所有数据都会丢失。(这里相当于redis 的AOF恢复数据是一个道理他会把文件中的命令一个一个的执行完。以达到恢复到崩溃前)</p><p><img src="/images/Prometheus-HA-10.jpeg" alt="Prometheus-HA-10"><br>Sample存储在称为“chunk”的压缩单元中。收到sample后，它将被提取到“active chunk”（红色块）中。这是我们可以主动写入数据的唯一单元。</p><p><img src="/images/Prometheus-HA-11.jpeg" alt="Prometheus-HA-11"><br>在将sample提交到chunk中的同时，我们还将其记录在磁盘（棕色块）的预写日志（WAL）中以确保持久性（尽管这意味着即使机器突然崩溃也可以从中恢复内存中的数据）。</p><h4 id="Prometheus存储配置"><a href="#Prometheus存储配置" class="headerlink" title="Prometheus存储配置"></a>Prometheus存储配置</h4><p>配置参数</p><ul><li>–storage.tsdb.path: 数据存储路径，WAL日志亦会存储于该目录下，默认为data;</li><li>–storage.tsdb.retention.time: 样本数据在存储中保存的时长，超过该时长的数据就会被删除;默认为15d;</li><li>–storage.tsdb.retention.size: 每个Block的最大字节数(不包括WAL文件)，支持B、KB、 MB、GB、TB、PB和EB，例如512MB等(此参数是实验性的，在未来版本中可能会更改);</li><li>–storage.tsdb.wal-compression: 是否启用WAL的压缩机制，2.20及以后的版本中默认即为启用;</li></ul><h2 id="Alertmanager高可用"><a href="#Alertmanager高可用" class="headerlink" title="Alertmanager高可用"></a>Alertmanager高可用</h2><p>为了提升Promthues的服务可用性，通常用户会部署两个或者两个以上的Promthus Server。这样解决了Prometheus高可用的问题，但是我们的Alertmanager目前仍然纯在单点故障风险。当Alertmanager单点失效后，告警的后续所有业务全部失效。</p><p>如下所示，最直接的方式，就是尝试部署多套Alertmanager。但是由于Alertmanager之间不存在并不了解彼此的存在，因此则会出现告警通知被不同的Alertmanager重复发送多次的问题。<br><img src="/images/Prometheus-HA-4.png" alt="Prometheus-HA-4"></p><p>为了解决这一问题，如下所示。Alertmanager引入了Gossip机制。Gossip机制为多个Alertmanager之间提供了信息传递的机制。确保及时在多个Alertmanager分别接收到相同告警信息的情况下，也只有一个告警通知被发送给Receiver。<br><img src="/images/Prometheus-HA-5.png" alt="Prometheus-HA-5"></p><h3 id="创建Alertmanager集群"><a href="#创建Alertmanager集群" class="headerlink" title="创建Alertmanager集群"></a>创建Alertmanager集群</h3><p>为了能够让Alertmanager节点之间进行通讯，需要在Alertmanager启动时设置相应的参数。其中主要的参数包括：</p><figure class="highlight dsconfig"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs dsconfig"><span class="hljs-built_in">--cluster.listen-address</span> <span class="hljs-string">string</span>       <span class="hljs-comment"># 当前实例集群服务监听地址</span><br><span class="hljs-built_in">--cluster.peer</span> <span class="hljs-string">value</span>                  <span class="hljs-comment"># 初始化时关联的其它实例的集群服务地址</span><br></code></pre></td></tr></table></figure><h3 id="alertmanager-启动配置文件"><a href="#alertmanager-启动配置文件" class="headerlink" title="alertmanager 启动配置文件"></a>alertmanager 启动配置文件</h3><p>实例a1</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[root@devops010015001029 ~]</span><span class="hljs-comment"># vim /usr/local/alertmanager/conf/alertmanager</span><br><br><span class="hljs-attr">ALERTMANAGER_OPT</span>=--config.file=/usr/local/alertmanager/alertmanager.yml \<br><span class="hljs-attr">--storage.path</span>=/usr/local/alertmanager/data \<br><span class="hljs-attr">--data.retention</span>=<span class="hljs-number">120</span>h \<br><span class="hljs-attr">--web.listen-address</span>=:<span class="hljs-number">9093</span> \<br><span class="hljs-attr">--cluster.listen-address</span>=<span class="hljs-string">&#x27;0.0.0.0:9094&#x27;</span> \<br><span class="hljs-attr">--log.level</span>=debug \<br></code></pre></td></tr></table></figure><p>实例a2</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[root@devops010015001030 ~]</span><span class="hljs-comment"># vim /usr/local/alertmanager/conf/alertmanager</span><br><br><span class="hljs-attr">ALERTMANAGER_OPT</span>=--config.file=/usr/local/alertmanager/alertmanager.yml \<br><span class="hljs-attr">--storage.path</span>=/usr/local/alertmanager/data \<br><span class="hljs-attr">--data.retention</span>=<span class="hljs-number">120</span>h \<br><span class="hljs-attr">--web.listen-address</span>=:<span class="hljs-number">9093</span> \<br><span class="hljs-attr">--cluster.listen-address</span>=<span class="hljs-string">&#x27;0.0.0.0:9094&#x27;</span> \<br><span class="hljs-attr">--cluster.peer</span>=<span class="hljs-string">&#x27;10.15.1.29:9094&#x27;</span> \<br></code></pre></td></tr></table></figure><h3 id="配置alertmanager-启动脚本"><a href="#配置alertmanager-启动脚本" class="headerlink" title="配置alertmanager 启动脚本"></a>配置alertmanager 启动脚本</h3><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[root@devops010015001029 ~]</span><span class="hljs-comment"># vim /usr/lib/systemd/system/alertmanager.service</span><br><br><span class="hljs-section">[Unit]</span><br><span class="hljs-attr">Description</span>=alertmanager<br><br><br><span class="hljs-section">[Service]</span><br><span class="hljs-attr">LimitNOFILE</span>=<span class="hljs-number">1024000</span><br><span class="hljs-attr">LimitNPROC</span>=<span class="hljs-number">1024000</span><br><span class="hljs-attr">LimitCORE</span>=infinity<br><span class="hljs-attr">LimitMEMLOCK</span>=infinity<br><span class="hljs-attr">EnvironmentFile</span>=-/usr/local/alertmanager/conf/alertmanager<br><span class="hljs-attr">ExecStart</span>=/usr/local/alertmanager/alertmanager <span class="hljs-variable">$ALERTMANAGER_OPT</span><br><span class="hljs-attr">Restart</span>=<span class="hljs-literal">on</span>-failure<br><span class="hljs-attr">KillMode</span>=process<br><br><br><span class="hljs-section">[Install]</span><br><span class="hljs-attr">WantedBy</span>=multi-user.target<br><br><br><span class="hljs-section">[root@devops010015001029 conf]</span><span class="hljs-comment"># systemctl daemon-reload</span><br><span class="hljs-section">[root@devops010015001029 conf]</span><span class="hljs-comment"># systemctl start alertmanager.service </span><br><span class="hljs-section">[root@devops010015001029 conf]</span><span class="hljs-comment"># systemctl status alertmanager.service </span><br></code></pre></td></tr></table></figure><p>启动完成后访问任意Alertmanager节点<code>http://localhost:9093/#/status</code>可以查看当前Alertmanager集群的状态。<br><img src="/images/Prometheus-HA-6.png" alt="Prometheus-HA-6"></p><h3 id="多实例Prometheus与Alertmanager集群"><a href="#多实例Prometheus与Alertmanager集群" class="headerlink" title="多实例Prometheus与Alertmanager集群"></a>多实例Prometheus与Alertmanager集群</h3><p>由于Gossip机制的实现，在Promthues和Alertmanager实例之间不要使用任何的负载均衡，需要确保Promthues将告警发送到所有的Alertmanager实例中：</p><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-comment"># Alertmanager configuration</span><br><span class="hljs-attribute">alerting</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">alertmanagers</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">static_configs:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">targets:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">10.15.1.29:9093</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">10.15.1.30:9093</span><br></code></pre></td></tr></table></figure><p>注意：如果是多个Prometheus Server两边的告警规则一定要一样，不然当某天一台Prometheus宕机以后另外一台没有告警规则导致无法告警。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>AlertManager实现监控告警</title>
    <link href="/2021/07/12/Alertmanager/"/>
    <url>/2021/07/12/Alertmanager/</url>
    
    <content type="html"><![CDATA[<p>Prometheus自身不具备告警能力，因此需要结合第三方告警程序来实现监控指标告警。</p><p>AlertManager是一款不错的告警程序，首先由prometheus配置告警规则，当告警规则触发后，会把告警信息推送给Altermanager，AlertManager收到告警之后在根据配置的路由，根据报警级别不同分别发送给不同的receive（收件人），AlertManager可以实现email、企业微信等报警</p><p>Prometheus作为客户端Alertmanager负责处理由客户端发来的告警通知。对告警通知进行分组、去重后，根据路由规则将其路由到不同的receiver。<br><img src="/images/Prometheus-Alerts-1.png" alt="Prometheus-Alerts-1"></p><h2 id="Prometheus监控系统的告警逻辑"><a href="#Prometheus监控系统的告警逻辑" class="headerlink" title="Prometheus监控系统的告警逻辑"></a>Prometheus监控系统的告警逻辑</h2><p>首先要配置Prometheus成为Alertmanager的告警客户端；同时Alertmanager也是应用程序，它自身同样应该纳入prometheus的监控目标；Alertmanager也通过默认端口<code>9093</code>和<code>metrics</code>路径暴露自身的指标。</p><h3 id="部署AlertManager以及配置文件介绍"><a href="#部署AlertManager以及配置文件介绍" class="headerlink" title="部署AlertManager以及配置文件介绍"></a>部署AlertManager以及配置文件介绍</h3><p>Altermanager是一个独立的go二进制程序，需要独立部署及维护;<br>按需下载相应的程序包，展开至特定的目录下即可运行;例如:</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs autoit">[root<span class="hljs-symbol">@k8s</span>-m1 ~]<span class="hljs-meta"># wget https://github.com/prometheus/alertmanager/releases/download/v0.22.2/alertmanager-0.22.2.linux-amd64.tar.gz</span><br>[root<span class="hljs-symbol">@k8s</span>-m1 ~]<span class="hljs-meta"># tar -zxv -f alertmanager-0.22.2.linux-amd64.tar.gz </span><br></code></pre></td></tr></table></figure><h3 id="配置文件介绍"><a href="#配置文件介绍" class="headerlink" title="配置文件介绍"></a>配置文件介绍</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs awk">global:<br>​  resolve_timeout      <span class="hljs-regexp">//</span>解析超时时间，也就是报警恢复不是立马发送的，而是在一个时间范围内不在触发报警，才能发送恢复报警，默认为<span class="hljs-number">5</span>分钟<br>​  smtp_from            <span class="hljs-regexp">//</span>收件人的邮箱地址<br>​  smtp_smarthost       <span class="hljs-regexp">//</span>邮箱提供商的smtp地址<br>​  smtp_auth_username   <span class="hljs-regexp">//</span>收件人的邮箱账号<br>​  smtp_auth_password   <span class="hljs-regexp">//</span>邮箱授权码<br>​  smtp_require_tls     <span class="hljs-regexp">//</span>是否需要tls协议，默认是true<br>​  wechart_api_url      <span class="hljs-regexp">//</span>微信api地址<br>​  wbchart_api_secret   <span class="hljs-regexp">//</span>密码<br>​  wechat_api_corp_id   <span class="hljs-regexp">//</span>机器人应用的id<br>route：<br>​  group_by             <span class="hljs-regexp">//</span>采用哪个标签作为分组<br>​  group_wait           <span class="hljs-regexp">//</span>分组等待的时间，收到报警不是立马发送出去，而是等待一段时间，看看同一组中是否有其他报警，如果有一并发送<br>​  group_interval       <span class="hljs-regexp">//</span>告警时间间隔<br>​  repeat_interval      <span class="hljs-regexp">//</span>重复告警时间间隔，可以减少发送告警的频率<br>​  receiver             <span class="hljs-regexp">//</span>接收者是谁<br>  routes               <span class="hljs-regexp">//</span>子路由配置<br>    <br>receivers：<br>​  name                 <span class="hljs-regexp">//</span>接收者的名字，这里和route中的receiver对应<br>​  email_configs<br>​  - to                 <span class="hljs-regexp">//</span>接收者的邮箱地址<br></code></pre></td></tr></table></figure><h3 id="配置AlertManager邮箱告警"><a href="#配置AlertManager邮箱告警" class="headerlink" title="配置AlertManager邮箱告警"></a>配置AlertManager邮箱告警</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">global:</span><br>  <span class="hljs-attr">resolve_timeout:</span> <span class="hljs-string">5m</span>                               <br>  <span class="hljs-attr">smtp_smarthost:</span> <span class="hljs-string">&#x27;smtp.163.com:465&#x27;</span>        <br>  <span class="hljs-attr">smtp_from:</span> <span class="hljs-string">&#x27;system71@163.com&#x27;</span>       <br>  <span class="hljs-attr">smtp_auth_username:</span> <span class="hljs-string">&#x27;system71@163.com&#x27;</span>  <br>  <span class="hljs-attr">smtp_auth_password:</span> <span class="hljs-string">&#x27;Ye1111111&#x27;</span>     <br>  <span class="hljs-attr">smtp_require_tls:</span> <span class="hljs-literal">false</span><br>  <br><span class="hljs-attr">route:</span><br>  <span class="hljs-attr">group_by:</span> [<span class="hljs-string">&#x27;alertname&#x27;</span>]    <br>  <span class="hljs-attr">group_wait:</span> <span class="hljs-string">10s</span><br>  <span class="hljs-attr">group_interval:</span> <span class="hljs-string">10s</span><br>  <span class="hljs-attr">repeat_interval:</span> <span class="hljs-string">10m</span><br>  <span class="hljs-attr">receiver:</span> <span class="hljs-string">&#x27;mail&#x27;</span><br><span class="hljs-attr">receivers:</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">&#x27;mail&#x27;</span><br>  <span class="hljs-attr">email_configs:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">to:</span> <span class="hljs-string">&#x27;9146002@qq.com&#x27;</span><br></code></pre></td></tr></table></figure><h3 id="配置prometheus集成AlertManager"><a href="#配置prometheus集成AlertManager" class="headerlink" title="配置prometheus集成AlertManager"></a>配置prometheus集成AlertManager</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-number">1</span><span class="hljs-string">.修改配置文件</span><br>[<span class="hljs-string">root@prometheus-server</span> <span class="hljs-string">~</span>]<span class="hljs-comment"># vim /data/prometheus/prometheus.yml </span><br><span class="hljs-attr">alerting:</span><br>  <span class="hljs-attr">AlertManagers:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">static_configs:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">targets:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span><span class="hljs-string">:9093</span>                                  <span class="hljs-comment">#AlertManager地址</span><br><br><span class="hljs-attr">rule_files:</span>                                             <span class="hljs-comment">#告警规则路径</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;rules/alerts.yml&quot;</span><br><br><span class="hljs-number">2</span><span class="hljs-string">.创建rules告警规则目录</span><br>[<span class="hljs-string">root@prometheus-server</span> <span class="hljs-string">~</span>]<span class="hljs-comment"># mkdir /data/prometheus/rules</span><br><br><span class="hljs-number">3</span><span class="hljs-string">.加载配置</span><br>[<span class="hljs-string">root@prometheus-server</span> <span class="hljs-string">~</span>]<span class="hljs-comment"># curl -XPOST 127.0.0.1:9090/-/reload</span><br></code></pre></td></tr></table></figure><p>配置已更新，目前已经可以使用AlertManager报警了<br><img src="/images/Prometheus-Alerts-2.png" alt="Prometheus-Alerts-2"></p><h2 id="告警规则"><a href="#告警规则" class="headerlink" title="告警规则"></a>告警规则</h2><h3 id="告警规则语法"><a href="#告警规则语法" class="headerlink" title="告警规则语法"></a>告警规则语法</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs awk">groups:                                              <span class="hljs-regexp">//</span>定义一个告警规则组<br>- name: general.rules                                <span class="hljs-regexp">//</span>组名，可以将同一类型的报警放到一个分组中<br>  rules:                                             <span class="hljs-regexp">//</span>定义告警规则，可以有多个<br>  - alert: 主机宕机                                   <span class="hljs-regexp">//</span>告警名称，也就是告警信息的标题，一个alert代表一个告警规则<br>    expr: up == <span class="hljs-number">0</span>                                    <span class="hljs-regexp">//</span>表达式，根据表达式的值进行匹配<br>    <span class="hljs-keyword">for</span>: <span class="hljs-number">5</span>m                                          <span class="hljs-regexp">//</span>报警收到后多长时间后发送报警信息<br>    labels:                                          <span class="hljs-regexp">//</span>定义标签<br>      serverity: error                               <span class="hljs-regexp">//</span>告警级别，有warning、error等<br>    annotations:                                     <span class="hljs-regexp">//</span>定义告警内容<br>      summary: <span class="hljs-string">&quot;主机 &#123;&#123; $labels.instance &#125;&#125; 停止工作&quot;</span>       <span class="hljs-regexp">//</span>消息内容，<span class="hljs-variable">$labels</span>.instance就是监控项中的标签变量<br>      description: <span class="hljs-string">&quot;&#123;&#123; $labels.instance &#125;&#125; job &#123;&#123; $labels.job &#125;&#125; 已经宕机5分钟以上!&quot;</span>     <span class="hljs-regexp">//</span>详细描述<br><br></code></pre></td></tr></table></figure><h3 id="告警模板"><a href="#告警模板" class="headerlink" title="告警模板"></a>告警模板</h3><p>Prometheus支持在告警中使用模板;例如，我们上面的示例中就用到了模板。</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml">* 告警模板是指在告警中的标签和注解上引用时间序列的标签和样本值的方法;</span><br><span class="language-xml">* 它使用标准的Go模板语法，并暴露一些包含时间序列标签和值的变量;</span><br><span class="language-xml">  * 标签引用: </span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">$labels</span>.&lt;label_name&gt; &#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml">  * 指标样本值引用: </span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">$value</span> &#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml">* 若要在description注解中引用触发告警的时间序列上的instance和job标签的值，可分别使用</span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">$labels.instance</span> &#125;&#125;</span><span class="language-xml">和</span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">$labels.job</span> &#125;&#125;</span><span class="language-xml">; </span><br></code></pre></td></tr></table></figure><p>点击右上角的<code>Show annotations</code>可以显示模板被替换后的结果。注意下面Labels中的标签是从Target中完全复制过来的，而<code>Alertname</code>、<code>serverity</code>标签是我们在编写Alert规则时添加进去的。<br><img src="/images/Prometheus-Alerts-4.png" alt="Prometheus-Alerts-4"></p><h3 id="告警规则状态"><a href="#告警规则状态" class="headerlink" title="告警规则状态"></a>告警规则状态</h3><p>告警规则分为三种</p><ul><li>inactive：无任何报警，一切正常</li><li>pending：已触发阈值，但未满足告警持续时间，也就是在告警规则中写的for，在for规定的时间内触发都不会发送给AlertManager，当for持续时间一过会立即发送给AlertManager</li><li>firing：已触发阈值且满足告警持续时间，告警发送给接收者</li></ul><p><img src="/images/Prometheus-Alerts-3.png" alt="Prometheus-Alerts-3"></p><h3 id="编写主机宕机告警规则"><a href="#编写主机宕机告警规则" class="headerlink" title="编写主机宕机告警规则"></a>编写主机宕机告警规则</h3><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-number">1.</span>编写规则<br>[root@prometheus-server <span class="hljs-keyword">/data/</span>prometheus]<span class="hljs-meta"># vim rules/alerts.yml</span><br><span class="hljs-symbol">groups:</span><br>- name: general.rules<br><span class="hljs-symbol">  rules:</span><br>  - alert: 主机宕机<br><span class="hljs-symbol">    expr:</span> <span class="hljs-attr">up</span> <span class="hljs-operator">=</span>= <span class="hljs-number">0</span><br><span class="hljs-symbol">    for:</span> <span class="hljs-number">5</span>m<br><span class="hljs-symbol">    labels:</span><br><span class="hljs-symbol">      serverity:</span> error<br><span class="hljs-symbol">    annotations:</span><br><span class="hljs-symbol">      summary:</span> <span class="hljs-string">&quot;主机 &#123;&#123; $labels.instance &#125;&#125; 停止工作&quot;</span><br><span class="hljs-symbol">      description:</span> <span class="hljs-string">&quot;&#123;&#123; $labels.instance &#125;&#125; job &#123;&#123; $labels.job &#125;&#125; 已经宕机5分钟以上!&quot;</span><br><br><span class="hljs-number">2.</span>检查语法<br>[root@prometheus-server <span class="hljs-keyword">/data/</span>prometheus]<span class="hljs-meta"># promtool check config /data/prometheus/prometheus.yml </span><br>Checking <span class="hljs-keyword">/data/</span>prometheus/prometheus.yml<br><span class="hljs-symbol">  SUCCESS:</span> <span class="hljs-number">1</span> rule files found<br><br>Checking <span class="hljs-keyword">/data/</span>prometheus<span class="hljs-keyword">/rules/</span>alerts.yml<br><span class="hljs-symbol">  SUCCESS:</span> <span class="hljs-number">1</span> rules found<br><br><span class="hljs-number">3.</span>加载配置<br>[root@prometheus-server <span class="hljs-keyword">/data/</span>prometheus]<span class="hljs-meta"># curl -XPOST 127.0.0.1:49100/-/reload</span><br><br></code></pre></td></tr></table></figure><p>在页面的<code>Status</code>—<code>rules</code>下即可看到我们创建的告警规则<br><img src="/images/Prometheus-Alerts-5.png" alt="Prometheus-Alerts-5"></p><p>在alert也可以看到告警规则有没有触发，没有触发的情况下是绿色显示；红色firing表示已经发送了告警。<br><img src="/images/Prometheus-Alerts-6.png" alt="Prometheus-Alerts-6"></p><p>AlertManager页面也已经收到了主机宕机推送过来的告警信息<br><img src="/images/Prometheus-Alerts-7.png" alt="Prometheus-Alerts-7"></p><h3 id="查看是否收到邮件报警内容"><a href="#查看是否收到邮件报警内容" class="headerlink" title="查看是否收到邮件报警内容"></a>查看是否收到邮件报警内容</h3><p>已经收到，至此我们的流程已经跑通<br><img src="/images/Prometheus-Alerts-8.png" alt="Prometheus-Alerts-8"></p><h3 id="同类告警规则触发"><a href="#同类告警规则触发" class="headerlink" title="同类告警规则触发"></a>同类告警规则触发</h3><p>同类告警是指：prometheus的告警规则是对所有监控实例都生效的，也就是当同一种类型的告警触发后会显示在一起，并且发送一封邮件。<br><img src="/images/Prometheus-Alerts-9.png" alt="Prometheus-Alerts-9"></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">global:</span><br>  <span class="hljs-attr">smtp_smarthost:</span> <span class="hljs-string">&#x27;smtp.163.com:465&#x27;</span><br>  <span class="hljs-attr">smtp_from:</span> <span class="hljs-string">&#x27;system71@163.com&#x27;</span><br>  <span class="hljs-attr">smtp_auth_username:</span> <span class="hljs-string">&#x27;system71@163.com&#x27;</span><br>  <span class="hljs-attr">smtp_auth_password:</span> <span class="hljs-string">&#x27;Ye11111111&#x27;</span><br>  <span class="hljs-attr">smtp_require_tls:</span> <span class="hljs-literal">false</span><br><span class="hljs-attr">route:</span><br>  <span class="hljs-attr">group_by:</span> [<span class="hljs-string">&#x27;instance&#x27;</span>]<br>  <span class="hljs-attr">group_wait:</span> <span class="hljs-string">30s</span><br>  <span class="hljs-attr">group_interval:</span> <span class="hljs-string">5m</span><br>  <span class="hljs-attr">repeat_interval:</span> <span class="hljs-string">10m</span><br>  <span class="hljs-attr">receiver:</span> <span class="hljs-string">&#x27;mail&#x27;</span><br><span class="hljs-attr">receivers:</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">&#x27;mail&#x27;</span><br>  <span class="hljs-attr">email_configs:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">to:</span> <span class="hljs-string">&#x27;9146002@qq.com&#x27;</span><br></code></pre></td></tr></table></figure><p>例如上面我使用<code>instance</code>作为分组，然后就会有4个组，这样我会就收到4封告警邮件。</p><p><img src="/images/Prometheus-Alerts-10.png" alt="Prometheus-Alerts-10"></p><p><img src="/images/Prometheus-Alerts-11.png" alt="Prometheus-Alerts-11"></p><p>如果我使用<code>alertname</code>作为分组那么我只会收到一封邮件，他会把4个告警合并成一封邮件发送。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">global:</span><br>  <span class="hljs-attr">smtp_smarthost:</span> <span class="hljs-string">&#x27;smtp.163.com:465&#x27;</span><br>  <span class="hljs-attr">smtp_from:</span> <span class="hljs-string">&#x27;system71@163.com&#x27;</span><br>  <span class="hljs-attr">smtp_auth_username:</span> <span class="hljs-string">&#x27;system71@163.com&#x27;</span><br>  <span class="hljs-attr">smtp_auth_password:</span> <span class="hljs-string">&#x27;Ye11111111&#x27;</span><br>  <span class="hljs-attr">smtp_require_tls:</span> <span class="hljs-literal">false</span><br><span class="hljs-attr">route:</span><br>  <span class="hljs-attr">group_by:</span> [<span class="hljs-string">&#x27;alertname&#x27;</span>]<br>  <span class="hljs-attr">group_wait:</span> <span class="hljs-string">30s</span><br>  <span class="hljs-attr">group_interval:</span> <span class="hljs-string">5m</span><br>  <span class="hljs-attr">repeat_interval:</span> <span class="hljs-string">10m</span><br>  <span class="hljs-attr">receiver:</span> <span class="hljs-string">&#x27;mail&#x27;</span><br><span class="hljs-attr">receivers:</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">&#x27;mail&#x27;</span><br>  <span class="hljs-attr">email_configs:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">to:</span> <span class="hljs-string">&#x27;9146002@qq.com&#x27;</span><br></code></pre></td></tr></table></figure><p>只有一个组所以会合并同组的告警一起发送<br><img src="/images/Prometheus-Alerts-32.png" alt="Prometheus-Alerts-32"></p><p><img src="/images/Prometheus-Alerts-12.png" alt="Prometheus-Alerts-12"></p><h2 id="AlertManager告警路由配置"><a href="#AlertManager告警路由配置" class="headerlink" title="AlertManager告警路由配置"></a>AlertManager告警路由配置</h2><h3 id="路由配置介绍"><a href="#路由配置介绍" class="headerlink" title="路由配置介绍"></a>路由配置介绍</h3><p>alertmanager路由配置可以将不同的告警级别分别发送给不同的邮件接收人</p><p>Alertmanager的route配置段支持定义“树”状路由表，入口位置称为根节点，每个子节点可以基于匹配条件定义出一个独立的路由分支;</p><ul><li>所有告警都将进入路由根节点，而后进行子节点遍历;</li><li>若路由上的continue字段的值为false，则遇到第一个匹配的路由分支后即终止;否则，将继续匹配后续的子节点;</li></ul><p><img src="/images/Prometheus-Alerts-25.png" alt="Prometheus-Alerts-25"></p><h3 id="route路由配置文件介绍"><a href="#route路由配置文件介绍" class="headerlink" title="route路由配置文件介绍"></a>route路由配置文件介绍</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs awk">route:<br>  group_by: [<span class="hljs-string">&#x27;alertname&#x27;</span>]             <span class="hljs-regexp">//</span>定义分组,根据label标签进行分组<br>  group_wait: <span class="hljs-number">10</span>s                     <span class="hljs-regexp">//</span>分组等待时间，也就是说在<span class="hljs-number">10</span>秒内同一个组中有没有一起报警的，如果有则同时发出报警邮件，也就是有<span class="hljs-number">2</span>个报警同时发在一个邮件<br>  group_interval: <span class="hljs-number">10</span>s                 <span class="hljs-regexp">//</span>告警时间间隔<br>  repeat_interval: <span class="hljs-number">10</span>m                <span class="hljs-regexp">//</span>重复告警间隔，也就是触发的一个告警在<span class="hljs-number">10</span>分钟内没有处理则再次发一封邮件。<br>  <span class="hljs-keyword">continue</span>: false                     <span class="hljs-regexp">//</span>若路由上的<span class="hljs-keyword">continue</span>字段的值为false，则遇到第一个匹配的路由分支后即终止。否则，将继续匹配后续的子节点;<br>  receiver: <span class="hljs-string">&#x27;yunwei&#x27;</span>                  <span class="hljs-regexp">//</span>默认邮箱<br>  routes:                             <span class="hljs-regexp">//</span>启用一个子路由<br>  - receiver: <span class="hljs-string">&#x27;dba&#x27;</span>                   <span class="hljs-regexp">//</span>接收者为dba<br>    group_wait: <span class="hljs-number">10</span>s                   <span class="hljs-regexp">//</span>分组等待时间<br>    match_re:                       <span class="hljs-regexp">//</span>匹配一个正则<br>      service: mysql|db              <span class="hljs-regexp">//</span>service标签包含mysql和db的统一发送给dba的邮箱<br>    <span class="hljs-keyword">continue</span>: false                   <span class="hljs-regexp">//</span>若路由上的<span class="hljs-keyword">continue</span>字段的值为false，则遇到第一个匹配的路由分支后即终止。否则，将继续匹配后续的子节点;<br>  - receiver: <span class="hljs-string">&#x27;yunwei&#x27;</span>                <span class="hljs-regexp">//</span>接收者为yunwei<br>    group_wait: <span class="hljs-number">10</span>s                   <span class="hljs-regexp">//</span>分组时间<br>    match_re:         <br>      serverity: error                <span class="hljs-regexp">//</span>将serverity标签值包含error的发送给yunwei的邮箱<br>    <span class="hljs-keyword">continue</span>: false                   <span class="hljs-regexp">//</span>若路由上的<span class="hljs-keyword">continue</span>字段的值为false，则遇到第一个匹配的路由分支后即终止。否则，将继续匹配后续的子节点;<br><br>receivers:                            <span class="hljs-regexp">//</span>定义接收者的邮箱<br>- name: <span class="hljs-string">&#x27;yunwei&#x27;</span>                      <span class="hljs-regexp">//</span>接收者名字，要和routes中的receiver对应<br>  email_configs:<br>  - to: <span class="hljs-string">&#x27;9146002@qq.com&#x27;</span>              <span class="hljs-regexp">//yu</span>nwei的邮箱地址<br>- name: <span class="hljs-string">&#x27;dba&#x27;</span>                         <span class="hljs-regexp">//</span>接收者名字，要和routes中的receiver对应<br>  email_configs:<br>  - to: <span class="hljs-string">&#x27;system51@126.com&#x27;</span>            <span class="hljs-regexp">//</span>dba的邮箱地址<br></code></pre></td></tr></table></figure><blockquote><p>新的报警时间为上次报警之后的group_interval时间<br>重复报警时间为，group_interval+repeat_interval</p></blockquote><p>上面的<code>match_re</code>是匹配Alerts中的<code>Lables</code>，这里我为其中一个节点打个<code>service</code>标签后面测试用。<br><img src="/images/Prometheus-Alerts-13.png" alt="Prometheus-Alerts-13"></p><h3 id="需求描述"><a href="#需求描述" class="headerlink" title="需求描述"></a>需求描述</h3><p>需求：server标签包含db、mysql的发送给dba的邮箱，其他的都发送给运维的邮箱</p><p>最终效果：要求关于mysql等数据库的告警发送给dba、其他的信息发送给运维</p><h3 id="alertmanager实现不同的告警内容发送给不同的接收人"><a href="#alertmanager实现不同的告警内容发送给不同的接收人" class="headerlink" title="alertmanager实现不同的告警内容发送给不同的接收人"></a>alertmanager实现不同的告警内容发送给不同的接收人</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-number">1</span><span class="hljs-string">.修改配置文件</span><br>[<span class="hljs-string">root@prometheus-server</span> <span class="hljs-string">/data/AlertManager</span>]<span class="hljs-comment"># vim AlertManager.yml  </span><br><span class="hljs-attr">global:</span><br>  <span class="hljs-attr">smtp_smarthost:</span> <span class="hljs-string">&#x27;smtp.163.com:465&#x27;</span><br>  <span class="hljs-attr">smtp_from:</span> <span class="hljs-string">&#x27;system71@163.com&#x27;</span><br>  <span class="hljs-attr">smtp_auth_username:</span> <span class="hljs-string">&#x27;system71@163.com&#x27;</span><br>  <span class="hljs-attr">smtp_auth_password:</span> <span class="hljs-string">&#x27;Ye111111111&#x27;</span><br>  <span class="hljs-attr">smtp_require_tls:</span> <span class="hljs-literal">false</span><br><br><span class="hljs-attr">route:</span><br>  <span class="hljs-attr">group_by:</span> [<span class="hljs-string">&#x27;alertname&#x27;</span>]<br>  <span class="hljs-attr">group_wait:</span> <span class="hljs-string">10s</span><br>  <span class="hljs-attr">group_interval:</span> <span class="hljs-string">10s</span><br>  <span class="hljs-attr">repeat_interval:</span> <span class="hljs-string">10m</span><br>  <span class="hljs-attr">receiver:</span> <span class="hljs-string">&#x27;yunwei&#x27;</span><br>  <span class="hljs-attr">routes:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">receiver:</span> <span class="hljs-string">&#x27;dba&#x27;</span><br>    <span class="hljs-attr">group_wait:</span> <span class="hljs-string">10s</span><br>    <span class="hljs-attr">match_re:</span><br>      <span class="hljs-attr">service:</span> <span class="hljs-string">mysql|db</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">receiver:</span> <span class="hljs-string">&#x27;yunwei&#x27;</span><br>    <span class="hljs-attr">group_wait:</span> <span class="hljs-string">10s</span><br>    <span class="hljs-attr">match_re:</span><br>      <span class="hljs-attr">serverity:</span> <span class="hljs-string">error</span><br><br><span class="hljs-attr">receivers:</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">&#x27;yunwei&#x27;</span><br>  <span class="hljs-attr">email_configs:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">to:</span> <span class="hljs-string">&#x27;9146002@qq.com&#x27;</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">&#x27;dba&#x27;</span><br>  <span class="hljs-attr">email_configs:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">to:</span> <span class="hljs-string">&#x27;system51@126.com&#x27;</span><br><br><span class="hljs-number">2</span><span class="hljs-string">.重启生效</span><br>[<span class="hljs-string">root@prometheus-server</span> <span class="hljs-string">/data/AlertManager</span>]<span class="hljs-comment"># ps aux | grep alert | grep -v grep | awk &#x27;&#123;print $2&#125;&#x27; |xargs kill -HUP</span><br></code></pre></td></tr></table></figure><p>配置已生效<br><img src="/images/Prometheus-Alerts-14.png" alt="Prometheus-Alerts-14"></p><h3 id="编写告警规则"><a href="#编写告警规则" class="headerlink" title="编写告警规则"></a>编写告警规则</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-number">1</span><span class="hljs-string">.编写规则</span><br>[<span class="hljs-string">root@prometheus-server</span> <span class="hljs-string">/data/prometheus</span>]<span class="hljs-comment"># vim rules/alerts.yml </span><br><span class="hljs-attr">groups:</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">general.rules</span><br>  <span class="hljs-attr">rules:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">alert:</span> <span class="hljs-string">主机宕机</span>                        <br>    <span class="hljs-attr">expr:</span> <span class="hljs-string">up&#123;service!=&quot;mysql&quot;&#125;</span> <span class="hljs-string">==</span> <span class="hljs-number">0</span>              <span class="hljs-comment">#这里取反不然会获取到下面mysql的up</span><br>    <span class="hljs-attr">for:</span> <span class="hljs-string">1m</span><br>    <span class="hljs-attr">labels:</span><br>      <span class="hljs-attr">serverity:</span> <span class="hljs-string">error</span><br>    <span class="hljs-attr">annotations:</span><br>      <span class="hljs-attr">summary:</span> <span class="hljs-string">&quot;主机 <span class="hljs-template-variable">&#123;&#123; $labels.instance &#125;&#125;</span> 停止工作&quot;</span><br>      <span class="hljs-attr">description:</span> <span class="hljs-string">&quot;<span class="hljs-template-variable">&#123;&#123; $labels.instance &#125;&#125;</span> job <span class="hljs-template-variable">&#123;&#123; $labels.job &#125;&#125;</span> 已经宕机5分钟以上!&quot;</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">alert:</span> <span class="hljs-string">mysql宕机</span><br>    <span class="hljs-attr">expr:</span> <span class="hljs-string">up&#123;service=&quot;mysql&quot;&#125;</span> <span class="hljs-string">==</span> <span class="hljs-number">0</span><br>    <span class="hljs-attr">for:</span> <span class="hljs-string">1m</span><br>    <span class="hljs-attr">labels:</span><br>      <span class="hljs-attr">service:</span> <span class="hljs-string">mysql</span><br>    <span class="hljs-attr">annotations:</span><br>      <span class="hljs-attr">summary:</span> <span class="hljs-string">&quot;主机 <span class="hljs-template-variable">&#123;&#123; $labels.instance &#125;&#125;</span> 停止工作&quot;</span><br>      <span class="hljs-attr">description:</span> <span class="hljs-string">&quot;<span class="hljs-template-variable">&#123;&#123; $labels.instance &#125;&#125;</span> job <span class="hljs-template-variable">&#123;&#123; $labels.job &#125;&#125;</span> 已经宕机5分钟以上!&quot;</span><br><br><span class="hljs-number">2</span><span class="hljs-string">.加载配置</span><br>[<span class="hljs-string">root@prometheus-server</span> <span class="hljs-string">/data/prometheus</span>]<span class="hljs-comment"># curl -XPOST 127.0.0.1:9090/-/reload</span><br></code></pre></td></tr></table></figure><p><img src="/images/Prometheus-Alerts-15.png" alt="Prometheus-Alerts-15"></p><p>如果不设置 <code>expr: up&#123;service!=&quot;mysql&quot;&#125; == 0</code> 标签取反就会出现下面这种情况，dba邮箱会收到两封邮件。<br> <img src="/images/Prometheus-Alerts-18.png" alt="Prometheus-Alerts-18"></p><h3 id="error已经发送给运维邮箱"><a href="#error已经发送给运维邮箱" class="headerlink" title="error已经发送给运维邮箱"></a>error已经发送给运维邮箱</h3><p><img src="/images/Prometheus-Alerts-16.png" alt="Prometheus-Alerts-16"></p><h3 id="mysql已经发送给dba邮箱"><a href="#mysql已经发送给dba邮箱" class="headerlink" title="mysql已经发送给dba邮箱"></a>mysql已经发送给dba邮箱</h3><p><img src="/images/Prometheus-Alerts-17.png" alt="Prometheus-Alerts-17"></p><h3 id="AlertManager分组是两个分组"><a href="#AlertManager分组是两个分组" class="headerlink" title="AlertManager分组是两个分组"></a>AlertManager分组是两个分组</h3><p><img src="/images/Prometheus-Alerts-19.png" alt="Prometheus-Alerts-19"></p><h2 id="AlertManager告警收敛"><a href="#AlertManager告警收敛" class="headerlink" title="AlertManager告警收敛"></a>AlertManager告警收敛</h2><h3 id="告警分组"><a href="#告警分组" class="headerlink" title="告警分组"></a>告警分组</h3><p>分组就是将类似性质的警报分类为单个通知，比如服务器宕机、应用挂掉，这种类型的告警可以分到一个组中，分到一个组时，当同一时间内触发了多条告警，这时都会发送到同一封邮件中，可以避免因告警邮件太多而忽视了重要信息。</p><p>这封邮件就很好的说明了这个分组的意义</p><p>由于prometheus编写的规则是对所有服务器生效的，因此所有服务器仅需要创建一个类型的报警即可，当同一时间段多台主机触发了这个告警，则会同时向管理员发送一条报警邮件，同种类型告警主要是以<code>alertname</code>来区分的</p><p><img src="/images/Prometheus-Alerts-20.png" alt="Prometheus-Alerts-20"></p><p>AlertManager分组语法</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">route:</span><br><span class="hljs-symbol">  group_by:</span> [‘alertname’]         <span class="hljs-comment">//根据标签进行分组，alertname就是告警规则的名称，多个标签可以以逗号隔开</span><br><span class="hljs-symbol">  group_wait:</span> <span class="hljs-number">10</span>s                 <span class="hljs-comment">//发送告警等待时间，也就是一个时间范围内，如果同一组中有其他报警则一并发送 </span><br><span class="hljs-symbol">  group_interval:</span> <span class="hljs-number">10</span>s             <span class="hljs-comment">//当触发了一组告警后，下一组报警触发的间隔</span><br><span class="hljs-symbol">  repeat_interval:</span> <span class="hljs-number">10</span>m            <span class="hljs-comment">//重复报警的时间间隔，也就是当触发了instance down报警后，如果一直没有解决，那么再隔多长时间报警</span><br></code></pre></td></tr></table></figure><h3 id="告警抑制"><a href="#告警抑制" class="headerlink" title="告警抑制"></a>告警抑制</h3><p>抑制：当警报发出后，停止重复发送由此警报引发的其他警报</p><p>通过抑制可以避免运维收到大量的告警邮件，且都是同一个报警，只是级别不同，我们可以通过抑制限制当这个警报触发了严重级别的告警后，则不再触发警告级别的告警</p><p>例如：当集群中的某一个主机节点异常宕机导致告警<code>NodeDown</code>被触发，同时在告警规则中定义了告警级别<code>serverity=critical</code>。由于主机异常宕机，会导致该主机上部署的所有服务和中间件不可用并触发报警。根据抑制规则的定义，如果有新的告警级别为<code>serverity=warning</code>，并且告警中标签<code>&#39;alertname&#39;、&#39;dev&#39;、&#39;instance&#39;</code>的值与NodeDown告警的相同，则说明新的告警是由<code>NodeDown</code>导致的，则启动抑制机制停止向接收器发送通知。</p><p>注：也就是节点宕机设置标签为<code>serverity=critical</code>，而节点上的应用告警设置为<code>serverity=warning</code>，当节点宕机后可以使用抑制的方法，仅发送一条节点宕机的信息，而不是发送多条信息。例如：节点宕机信息和应用不可用信息。</p><p>配置语法：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs awk">inhibit_rules:<br>  - source_match:<br>      serverity: <span class="hljs-string">&#x27;critical&#x27;</span>                        <span class="hljs-regexp">//</span>源标签警报触发时抑制含有目标标签的警报，在当前警报匹配serverity=critical<br>    target_match:<br>      serverity: <span class="hljs-string">&#x27;warning&#x27;</span>                         <span class="hljs-regexp">//</span>抑制`serverity=warning`类型告警<br>    equal: [<span class="hljs-string">&#x27;alertname&#x27;</span>, <span class="hljs-string">&#x27;dev&#x27;</span>, <span class="hljs-string">&#x27;instance&#x27;</span>]       <span class="hljs-regexp">//</span>告警中包含的分组名称。标签内容相同才会抑制,也就是说警报中三个标签值相同才会被抑制。<br></code></pre></td></tr></table></figure><h3 id="告警静默"><a href="#告警静默" class="headerlink" title="告警静默"></a>告警静默</h3><p>静默就是值在一段时间内不再触发某一个报警，集进入维护阶段</p><p>创建一个静默规则</p><p>访问AlertManager的9093端口</p><p>1.点击右上角的new silence<br><img src="/images/Prometheus-Alerts-21.png" alt="Prometheus-Alerts-21"></p><p>2.添加静默配置信息<br><img src="/images/Prometheus-Alerts-22.png" alt="Prometheus-Alerts-22"></p><p>3.这时再由docker报警触发后就不会发送邮件了<br><img src="/images/Prometheus-Alerts-23.png" alt="Prometheus-Alerts-23"></p><p>4.prometheus触发一条告警实现的流程<br>首先由prometheus系统进行监控，当一个监控项的阈值到达一定指标时，再由告警规则中配置的for持续时间进行判断，当在一定时间内都超过了阈值，则将报警推送给AlertManager，AlertManager收到报警后进行分组、抑制、静默，最后在通过我们配置的接收器，将报警发送给邮箱、微信、钉钉<br><img src="/images/Prometheus-Alerts-24.png" alt="Prometheus-Alerts-24"></p><h2 id="AlertManager实现企业微信报警"><a href="#AlertManager实现企业微信报警" class="headerlink" title="AlertManager实现企业微信报警"></a>AlertManager实现企业微信报警</h2><h3 id="AlertManager对接企业微信"><a href="#AlertManager对接企业微信" class="headerlink" title="AlertManager对接企业微信"></a>AlertManager对接企业微信</h3><p>AlertManager支持的报警方式有邮件报警、钉钉报警、微信报警，本次将实现企业微信报警，首先你要具有企业微信管理员的权限，如果没有可以自己注册一个，进行测试，我这里有自行注册的企业微信。</p><p>第一步登录进入以后，在应用管理中新建应用<br><img src="/images/Prometheus-Alerts-26.png" alt="Prometheus-Alerts-26"></p><p>创建成功以后如下图<br><img src="/images/Prometheus-Alerts-27.png" alt="Prometheus-Alerts-27"></p><p>这时候需要把 AgentId 和 Secret 记录下来，对于你的这种Secret信息，最好管理好，我的用过就会删除，所以不用担心安全隐患。</p><p>注册完企业微信就会有一个部门，后面我又新增了一个test部门，每个部门的ID不一样。主要是警报需要分级，所以需要单独处理，在这里使用的的单独的配置。</p><p><img src="/images/Prometheus-Alerts-28.png" alt="Prometheus-Alerts-28"></p><p>在<code>我的企业</code>—最下面就会有<code>企业id</code></p><p><img src="/images/Prometheus-Alerts-29.png" alt="Prometheus-Alerts-29"></p><p>配置alertmanager支持微信报警</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">templates:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">&#x27;wechat/wechat.tmpl&#x27;</span>                                                  <span class="hljs-comment"># 自定义告警模板</span><br><br><span class="hljs-attr">route:</span><br>  <span class="hljs-attr">group_by:</span> [<span class="hljs-string">&#x27;alertname&#x27;</span>]<br>  <span class="hljs-attr">group_wait:</span> <span class="hljs-string">10s</span><br>  <span class="hljs-attr">group_interval:</span> <span class="hljs-string">1m</span><br>  <span class="hljs-attr">repeat_interval:</span> <span class="hljs-string">1m</span><br>  <span class="hljs-attr">receiver:</span> <span class="hljs-string">yunwei</span><br>  <span class="hljs-attr">routes:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">receiver:</span> <span class="hljs-string">&#x27;db&#x27;</span><br>    <span class="hljs-attr">group_wait:</span> <span class="hljs-string">10s</span><br>    <span class="hljs-attr">match_re:</span><br>      <span class="hljs-attr">service:</span> <span class="hljs-string">mysql|db</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">receiver:</span> <span class="hljs-string">&#x27;yunwei&#x27;</span><br>    <span class="hljs-attr">group_wait:</span> <span class="hljs-string">10s</span><br>    <span class="hljs-attr">match_re:</span><br>      <span class="hljs-attr">serverity:</span> <span class="hljs-string">critical</span><br><br><span class="hljs-attr">receivers:</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">&#x27;yunwei&#x27;</span>                                                           <span class="hljs-comment"># 定义接收者名称</span><br>  <span class="hljs-attr">wechat_configs:</span>                                                          <span class="hljs-comment"># 企业微信配置</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">corp_id:</span> <span class="hljs-string">&#x27;wwxxxxx&#x27;</span>                                                     <span class="hljs-comment"># 企业ID是唯一标识</span><br>    <span class="hljs-attr">send_resolved:</span> <span class="hljs-literal">true</span>                                                    <span class="hljs-comment"># 设置发送警报恢复信息</span><br>    <span class="hljs-attr">to_party:</span> <span class="hljs-string">&#x27;1&#x27;</span>                                                          <span class="hljs-comment"># 部门id，比如我的默认组，显示的是1，如果你DB组，就可能会是2，WEB组就是3，依次类推，另外需要接收警报的相关人员必须在这个部门里。</span><br>    <span class="hljs-attr">agent_id:</span> <span class="hljs-string">&#x27;1000002&#x27;</span>                                                    <span class="hljs-comment"># 新建应用的agent_id</span><br>    <span class="hljs-attr">api_secret:</span> <span class="hljs-string">&#x27;F-fzpgsxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx&#x27;</span>              <span class="hljs-comment"># 新建应用的Secret</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">&#x27;db&#x27;</span><br>  <span class="hljs-attr">email_configs:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">to:</span> <span class="hljs-string">&#x27;system51@126.com&#x27;</span><br></code></pre></td></tr></table></figure><h3 id="编写微信告警内容模板"><a href="#编写微信告警内容模板" class="headerlink" title="编写微信告警内容模板"></a>编写微信告警内容模板</h3><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml">[root@k8s-m1 alertmanager-0.22.2.linux-amd64]# mkdir wechat</span><br><span class="language-xml"></span><br><span class="language-xml">[root@k8s-m1 alertmanager-0.22.2.linux-amd64]# vim wechat/wechat.tmpl</span><br><span class="language-xml"></span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">define</span> <span class="hljs-string">&quot;wechat.default.message&quot;</span> &#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml"></span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name"><span class="hljs-built_in">if</span></span> gt (<span class="hljs-name">len</span> .Alerts.Firing) <span class="hljs-number">0</span> -&#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml">Alerts Firing:</span><br><span class="language-xml"></span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">range</span> .Alerts &#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml">告警状态: </span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">.Status</span> &#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml"></span><br><span class="language-xml">警报级别: </span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">.Labels.serverity</span> &#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml"></span><br><span class="language-xml">警报类型: </span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">.Labels.alertname</span> &#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml"></span><br><span class="language-xml">故障主机: </span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">.Labels.instance</span> &#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml"></span><br><span class="language-xml">警报主题: </span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">.Annotations.summary</span> &#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml"></span><br><span class="language-xml">警报详情: </span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">.Annotations.description</span> &#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml"></span><br><span class="language-xml">⏱ : </span><span class="hljs-template-variable">&#123;&#123; (<span class="hljs-name">.StartsAt.Local</span>).Format <span class="hljs-string">&quot;2006-01-02 15:04:05&quot;</span> &#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml"></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">-</span> end &#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml"></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">-</span> end &#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml"></span><br><span class="language-xml"></span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name"><span class="hljs-built_in">if</span></span> gt (<span class="hljs-name">len</span> .Alerts.Resolved) <span class="hljs-number">0</span> -&#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml">Alerts Resolved:</span><br><span class="language-xml"></span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">range</span> .Alerts &#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml">告警状态: </span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">.Status</span> &#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml"></span><br><span class="language-xml">警报级别: </span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">.Labels.serverity</span> &#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml"></span><br><span class="language-xml">警报类型: </span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">.Labels.alertname</span> &#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml"></span><br><span class="language-xml">故障主机: </span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">.Labels.instance</span> &#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml"></span><br><span class="language-xml">警报主题: </span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">.Annotations.summary</span> &#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml"></span><br><span class="language-xml">警报详情: </span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">.Annotations.description</span> &#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml"></span><br><span class="language-xml">⏱ : </span><span class="hljs-template-variable">&#123;&#123; (<span class="hljs-name">.StartsAt.Local</span>).Format <span class="hljs-string">&quot;2006-01-02 15:04:05&quot;</span> &#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml">⏲ : </span><span class="hljs-template-variable">&#123;&#123; (<span class="hljs-name">.EndsAt.Local</span>).Format <span class="hljs-string">&quot;2006-01-02 15:04:05&quot;</span> &#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml"></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">-</span> end &#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml"></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">-</span> end &#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml"></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">-</span> end &#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml"></span><br></code></pre></td></tr></table></figure><p><img src="/images/Prometheus-Alerts-30.png" alt="Prometheus-Alerts-30"></p><p>我们可以根据上图邮件告警中的类容能大概知道模板中需要写些什么<br>可以参考官方网站提供的参数设置更多内容：<a href="https://prometheus.io/docs/alerting/latest/notifications/">https://prometheus.io/docs/alerting/latest/notifications/</a></p><h3 id="最终效果"><a href="#最终效果" class="headerlink" title="最终效果"></a>最终效果</h3><p><img src="/images/Prometheus-Alerts-31.jpg" alt="Prometheus-Alerts-31"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>查询持久化及可视化</title>
    <link href="/2021/06/29/Query-persistence-and-visualization/"/>
    <url>/2021/06/29/Query-persistence-and-visualization/</url>
    
    <content type="html"><![CDATA[<p>我们在使用Prometheus过程中，随着时间的推移，存储在 Prometheus 中的监控指标数据越来越多，查询的频率也在不断的增加，当我们用 Grafana 添加更多的 Dashboard 的时候，可能慢慢地会体验到 Grafana 已经无法按时渲染图表，并且偶尔还会出现超时的情况，特别是当我们在长时间汇总大量的指标数据的时候，Prometheus 查询超时的情况可能更多了，这时就需要用到Prometheus的记录规则(Recording rule)功能，它能够于以类似批处理任务的方式在后台周期性的执行并记录查询结果;（预先运行频繁被用到的或表达式较为复杂计算消耗较大的时候，他可以周期性的运行这个表达式，并将其结果保存为一组新的时间序列; 当需要查询的时候直接会返回已经计算好的结果，这样会比直接查询快，同时也减轻了PromQL的计算压力，同时对可视化查询的时候也很有用，可视化展示每次只需要刷新重复查询相同的表达式即可。）</p><h2 id="实现metrics持久化查询"><a href="#实现metrics持久化查询" class="headerlink" title="实现metrics持久化查询"></a>实现metrics持久化查询</h2><p>注意：写表达式的时候先在prometheus页面执行一下避免有错误<br><img src="/images/Prometheus-Query-1.png" alt="Prometheus-Query-1"></p><h2 id="配置prometheus持久化查询配置文件路径"><a href="#配置prometheus持久化查询配置文件路径" class="headerlink" title="配置prometheus持久化查询配置文件路径"></a>配置prometheus持久化查询配置文件路径</h2><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs routeros">1.修改配置文件<br>[root@prometheus-server ~]# vim /etc/prometheus/prometheus.yml <br>rule_files:<br>   - <span class="hljs-string">&quot;rules/node_rules.yml&quot;</span>#指定持久化文件所在路径即可<br><br>2.刷新配置文件<br>[root@prometheus-server ~]# curl -XPOST 127.0.0.1:9090/-/reload<br><span class="hljs-attribute">level</span>=info <span class="hljs-attribute">ts</span>=2020-12-25T03:27:28.995Z <span class="hljs-attribute">caller</span>=main.go:871 <span class="hljs-attribute">msg</span>=<span class="hljs-string">&quot;Loading configuration file&quot;</span> <span class="hljs-attribute">filename</span>=/etc/prometheus/prometheus.yml<br><span class="hljs-attribute">level</span>=info <span class="hljs-attribute">ts</span>=2020-12-25T03:27:31.031Z <span class="hljs-attribute">caller</span>=main.go:902 <span class="hljs-attribute">msg</span>=<span class="hljs-string">&quot;Completed loading of configuration file&quot;</span> <span class="hljs-attribute">filename</span>=/etc/prometheus/prometheus.yml <span class="hljs-attribute">totalDuration</span>=2.035652721s <span class="hljs-attribute">remote_storage</span>=3.749µs <span class="hljs-attribute">web_handler</span>=461ns <span class="hljs-attribute">query_engine</span>=999ns <span class="hljs-attribute">scrape</span>=2.033827361s <span class="hljs-attribute">scrape_sd</span>=291.259µs <span class="hljs-attribute">notify</span>=102.034µs <span class="hljs-attribute">notify_sd</span>=67.854µs <span class="hljs-attribute">rules</span>=195.703µs<br><br></code></pre></td></tr></table></figure><h2 id="实现CPU使用率持久化查询"><a href="#实现CPU使用率持久化查询" class="headerlink" title="实现CPU使用率持久化查询"></a>实现CPU使用率持久化查询</h2><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs axapta"><span class="hljs-number">1.</span>创建持久化文件<br>[root@prometheus-<span class="hljs-keyword">server</span> ~]<span class="hljs-meta"># cd /etc/prometheus/</span><br>[root@prometheus-<span class="hljs-keyword">server</span> prometheus]<span class="hljs-meta"># mkdir rules</span><br><br><span class="hljs-number">2.</span>编写CPU使用率持久化文件<br>[root@prometheus-<span class="hljs-keyword">server</span> prometheus]<span class="hljs-meta"># vim rules/node_rules.yml </span><br>groups:<br>- name: node_rules<br>  interval: <span class="hljs-number">10</span>s<br>  rules:<br>  - record: instance:node_cpu:avg_rate5m<br>    expr: <span class="hljs-number">100</span> - <span class="hljs-keyword">avg</span> (irate(node_cpu_seconds_total&#123;job=<span class="hljs-string">&quot;centos7-node&quot;</span>,mode=<span class="hljs-string">&quot;idle&quot;</span>&#125;[<span class="hljs-number">5</span>m])) <span class="hljs-keyword">by</span> (instance) * <span class="hljs-number">100</span><br>    labels:<br>      metric_type: aggregation<br><br><span class="hljs-number">3.</span>加载配置文件<br>[root@prometheus-<span class="hljs-keyword">server</span> prometheus]<span class="hljs-meta"># curl -XPOST 127.0.0.1:9090/-/reload</span><br></code></pre></td></tr></table></figure><p>解释：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs awk">groups:<br>- name: node_rules                                    <span class="hljs-regexp">//</span>持久化查询的名称<br>  interval: <span class="hljs-number">10</span>s                                       <span class="hljs-regexp">//</span><span class="hljs-number">10</span>s刷新一次，如果不设置就是就是全局中的 evaluation_interval 时间<br>  rules:                                              <span class="hljs-regexp">//</span>记录规则清单，一个rules下面可以写多个记录规则<br>  - record: instance:node_cpu:avg_rate5m              <span class="hljs-regexp">//</span>持久化记录查询名称<br>    expr:                                             <span class="hljs-regexp">//</span>取值表达式<br>    labels:                                           <span class="hljs-regexp">//</span>定义一个标签<br></code></pre></td></tr></table></figure><p>上面的规则其实就是根据 <code>record</code> 规则中的定义，<code>Prometheus</code> 会在后台完成 <code>expr</code> 中定义的 <code>PromQL</code> 表达式周期性运算（每隔10s一次），以 <code>instance</code> 为维度使用 <code>avg</code> 聚合运算符，计算函数 <code>irate</code> 对 <code>node_cpu_seconds_total</code> 指标区间 <code>5m</code> 内的CPU使用率，并且将计算结果保存到新的时间序列 <code>instance:node_cpu:avg_rate5m</code> 中， 同时还可以通过 <code>labels</code> 为样本数据添加额外的自定义标签，但是要注意的是这个 <code>Lables</code> 一定存在当前表达式 <code>Metrics</code> 中。</p><p>页面查看 <code>rules</code> 可以看到我们刚刚配置rule规则</p><p><img src="/images/Prometheus-Query-2.png" alt="Prometheus-Query-2"></p><p><img src="/images/Prometheus-Query-3.png" alt="Prometheus-Query-3"></p><p>点击图上的record名称即可跳转到查询页面</p><p><img src="/images/Prometheus-Query-4.png" alt="Prometheus-Query-4"></p><h2 id="实现内存使用率持久化查询"><a href="#实现内存使用率持久化查询" class="headerlink" title="实现内存使用率持久化查询"></a>实现内存使用率持久化查询</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-number">1</span><span class="hljs-string">.增加内存持久化配置</span><br>[<span class="hljs-string">root@prometheus-server</span> <span class="hljs-string">prometheus</span>]<span class="hljs-comment"># vim rules/node_rules.yml </span><br><span class="hljs-attr">groups:</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">node_rules</span><br>  <span class="hljs-attr">interval:</span> <span class="hljs-string">10s</span><br>  <span class="hljs-attr">rules:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">record:</span> <span class="hljs-string">instance:node_cpu:avg_rate5m</span><br>    <span class="hljs-attr">expr:</span> <span class="hljs-number">100</span> <span class="hljs-bullet">-</span> <span class="hljs-string">avg(irate(node_cpu_seconds_total&#123;job=&quot;centos7-node&quot;&#125;[5m]))</span> <span class="hljs-string">by</span> <span class="hljs-string">(instance)</span> <span class="hljs-string">*</span> <span class="hljs-number">100</span><br>    <span class="hljs-attr">labels:</span><br>      <span class="hljs-attr">metric_type:</span> <span class="hljs-string">aggregation</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">record:</span> <span class="hljs-string">instance:node_mem:avg_rate5m</span><br>    <span class="hljs-attr">expr:</span> <span class="hljs-string">(node_memory_MemTotal_bytes-(node_memory_MemFree_bytes+node_memory_Buffers_bytes+node_memory_Cached_bytes))/node_memory_MemTotal_bytes</span> <span class="hljs-string">*</span> <span class="hljs-number">100</span><br>    <span class="hljs-attr">labels:</span><br>      <span class="hljs-attr">metric_type:</span> <span class="hljs-string">aggregation</span><br><br><span class="hljs-number">2</span><span class="hljs-string">.加载配置</span><br>[<span class="hljs-string">root@prometheus-server</span> <span class="hljs-string">prometheus</span>]<span class="hljs-comment"># curl -XPOST 127.0.0.1:9090/-/reload</span><br><br></code></pre></td></tr></table></figure><p>查询界面 <code>rules</code> 可以看到我们刚刚配置rule规则</p><p><img src="/images/Prometheus-Query-5.png" alt="Prometheus-Query-5"></p><p>点击图上的record名称即可跳转到查询页面</p><p><img src="/images/Prometheus-Query-6.png" alt="Prometheus-Query-6"></p><h2 id="实现磁盘使用率持久化"><a href="#实现磁盘使用率持久化" class="headerlink" title="实现磁盘使用率持久化"></a>实现磁盘使用率持久化</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-number">1</span><span class="hljs-string">.增加内存持久化配置</span><br>[<span class="hljs-string">root@prometheus-server</span> <span class="hljs-string">prometheus</span>]<span class="hljs-comment"># vim rules/node_rules.yml </span><br><span class="hljs-attr">groups:</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">node_rules</span><br>  <span class="hljs-attr">interval:</span> <span class="hljs-string">10s</span><br>  <span class="hljs-attr">rules:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">record:</span> <span class="hljs-string">instance:node_cpu:avg_rate5m</span><br>    <span class="hljs-attr">expr:</span> <span class="hljs-number">100</span> <span class="hljs-bullet">-</span> <span class="hljs-string">avg(irate(node_cpu_seconds_total&#123;job=&quot;centos7-node&quot;&#125;[5m]))</span> <span class="hljs-string">by</span> <span class="hljs-string">(instance)</span> <span class="hljs-string">*</span> <span class="hljs-number">100</span><br>    <span class="hljs-attr">labels:</span><br>      <span class="hljs-attr">metric_type:</span> <span class="hljs-string">aggregation</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">record:</span> <span class="hljs-string">instance:node_mem:avg_rate5m</span><br>    <span class="hljs-attr">expr:</span> <span class="hljs-string">(node_memory_MemTotal_bytes-(node_memory_MemFree_bytes+node_memory_Buffers_bytes+node_memory_Cached_bytes))/node_memory_MemTotal_bytes</span> <span class="hljs-string">*</span> <span class="hljs-number">100</span><br>    <span class="hljs-attr">labels:</span><br>      <span class="hljs-attr">metric_type:</span> <span class="hljs-string">aggregation</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">record:</span> <span class="hljs-string">instance:node_disk:avg_rate5m</span><br>    <span class="hljs-attr">expr:</span> <span class="hljs-string">(node_filesystem_size_bytes-node_filesystem_free_bytes)/node_filesystem_size_bytes*100</span><br>    <span class="hljs-attr">labels:</span><br>      <span class="hljs-attr">metric_type:</span> <span class="hljs-string">aggregation</span><br>      <br><span class="hljs-number">2</span><span class="hljs-string">.加载配置</span><br>[<span class="hljs-string">root@prometheus-server</span> <span class="hljs-string">prometheus</span>]<span class="hljs-comment"># curl -XPOST 127.0.0.1:9090/-/reload</span><br><br></code></pre></td></tr></table></figure><p>查询界面 <code>rules</code> 可以看到我们刚刚配置rule规则</p><p><img src="/images/Prometheus-Query-7.png" alt="Prometheus-Query-7"></p><p>点击图上的record名称即可跳转到查询页面<br><img src="/images/Prometheus-Query-8.png" alt="Prometheus-Query-8"></p><h2 id="细节"><a href="#细节" class="headerlink" title="细节"></a>细节</h2><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">global:</span><br><span class="hljs-symbol">  scrape_interval:</span> <span class="hljs-number">2</span>m<br><span class="hljs-symbol">  scrape_timeout:</span> <span class="hljs-number">10</span>s<br><span class="hljs-symbol">  evaluation_interval:</span> <span class="hljs-number">4</span>m<br></code></pre></td></tr></table></figure><p><code>scrape_interval</code> 这个时间和 <code>evaluation_interval</code> 时间不冲突。<code>scrape_interval</code> 这个是采集时间，<code>evaluation_interval</code> 这时间是在记录规则的时候多久执行一次promql的时间。用户在点 <code>Grafana</code> 中的 <code>Dashboard</code> 的时候他会去执行后面的<code>Promql</code>。如果你点的时候在去计算对于一些运算复杂度高的可能耗时会很久，如果你在grafana中promql的语句写的是记录规则中的record名字，那么他获取到的数据就是已经计算好的结果。这个结果可能是几分钟以前的。</p><p><img src="/images/Prometheus-Query-9.png" alt="Prometheus-Query-9"></p><p><code>sum(node_namespace_pod_container:container_cpu_usage_seconds_total:sum_rate&#123;cluster=&quot;$cluster&quot;, node=&quot;$node&quot;&#125;) by (pod)</code> 也可以对他做运算也是可以的。</p><h2 id="Grafana安装及配置"><a href="#Grafana安装及配置" class="headerlink" title="Grafana安装及配置"></a>Grafana安装及配置</h2><p>Grafana是一款基于go语言开发的通用可视化工具，默认监听于TCP协议的3000端口，支持集成其他认证服务，且自身也通过<code>3000</code>端口<code>/metrics</code>URL输出内建指标；支持从多种不同的数据源加载并展示数据，可作为其数据源的部分存储系统如下所示</p><ul><li>TSDB:Prometheus、IfluxDB、OpenTSDB和Graphit</li><li>日志和文档存储:Loki和ElasitchSearch</li><li>分布式请求跟踪:Zipkin、Jaeger和Tempo</li><li>SQL DB: MySQL、PostgreSQL和Microsoft SQL Server</li></ul><h3 id="部署Grafana"><a href="#部署Grafana" class="headerlink" title="部署Grafana"></a>部署Grafana</h3><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs autoit">[root<span class="hljs-symbol">@k8s</span>-m1 ~]<span class="hljs-meta"># wget https://repo.huaweicloud.com/grafana/8.0.3/grafana-8.0.3-1.x86_64.rpm</span><br>[root<span class="hljs-symbol">@k8s</span>-m1 ~]<span class="hljs-meta"># yum -y localinstall grafana-8.0.3-1.x86_64.rpm</span><br></code></pre></td></tr></table></figure><h3 id="启动服务器"><a href="#启动服务器" class="headerlink" title="启动服务器"></a>启动服务器</h3><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs crystal"><span class="hljs-comment"># 启动服务并验证服务是否已启动：</span><br>[root<span class="hljs-variable">@k8s</span>-m1 ~]<span class="hljs-comment"># systemctl start grafana-server</span><br>[root<span class="hljs-variable">@k8s</span>-m1 ~]<span class="hljs-comment"># systemctl status grafana-server</span><br><br><br><span class="hljs-comment"># 将Grafana服务器配置为在引导时启动：</span><br>[root<span class="hljs-variable">@k8s</span>-m1 ~]<span class="hljs-comment"># systemctl enable grafana-server</span><br><br><br><span class="hljs-comment"># Grafana配置文件路径</span><br><span class="hljs-regexp">/etc/grafana</span><span class="hljs-regexp">/grafana.ini</span><br><span class="hljs-regexp"></span><br></code></pre></td></tr></table></figure><h3 id="Grafana的数据源"><a href="#Grafana的数据源" class="headerlink" title="Grafana的数据源"></a>Grafana的数据源</h3><p><img src="/images/Prometheus-Query-10.png" alt="Prometheus-Query-10"></p><h3 id="导入内建的Dashboard"><a href="#导入内建的Dashboard" class="headerlink" title="导入内建的Dashboard"></a>导入内建的Dashboard</h3><p><img src="/images/Prometheus-Query-11.png" alt="Prometheus-Query-11"></p><h3 id="Grafana-Dashboard示例"><a href="#Grafana-Dashboard示例" class="headerlink" title="Grafana Dashboard示例"></a>Grafana Dashboard示例</h3><p><img src="/images/Prometheus-Query-12.png" alt="Prometheus-Query-12"></p><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><p>在导入Dashboard后可能有一些显示无数据,我们需要单独创建两个job，一般是因为模板中PromQL里面用到的标签原因，例如：<code>sum(prometheus_tsdb_head_active_appenders&#123;job=&quot;prometheus&quot;&#125;)</code></p><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-bullet">-</span> <span class="hljs-string">job_name: &#x27;grafana&#x27;</span><br>  <span class="hljs-attribute">consul_sd_configs</span><span class="hljs-punctuation">:</span><br>   <span class="hljs-bullet">-</span> <span class="hljs-string">server: &quot;192.168.28.10:8500&quot;</span><br>   <span class="hljs-bullet">-</span> <span class="hljs-string">server: &quot;192.168.28.11:8500&quot;</span><br>   <span class="hljs-bullet">-</span> <span class="hljs-string">server: &quot;192.168.28.12:8500&quot;</span><br>     <span class="hljs-attribute">datacenter</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&#x27;dc1&#x27;</span><br>     <span class="hljs-attribute">services</span><span class="hljs-punctuation">:</span> <span class="hljs-string">[]</span><br>  <span class="hljs-attribute">relabel_configs</span><span class="hljs-punctuation">:</span><br>   <span class="hljs-bullet">-</span> <span class="hljs-string">source_labels: [__meta_consul_service_id]</span><br>     <span class="hljs-attribute">regex</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;.*grafana.*&quot;</span><br>     <span class="hljs-attribute">action</span><span class="hljs-punctuation">:</span> <span class="hljs-string">keep</span><br><br><span class="hljs-bullet">-</span> <span class="hljs-string">job_name: &#x27;prometheus&#x27;</span><br>  <span class="hljs-attribute">consul_sd_configs</span><span class="hljs-punctuation">:</span><br>   <span class="hljs-bullet">-</span> <span class="hljs-string">server: &quot;192.168.28.10:8500&quot;</span><br>   <span class="hljs-bullet">-</span> <span class="hljs-string">server: &quot;192.168.28.11:8500&quot;</span><br>   <span class="hljs-bullet">-</span> <span class="hljs-string">server: &quot;192.168.28.12:8500&quot;</span><br>     <span class="hljs-attribute">datacenter</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&#x27;dc1&#x27;</span><br>     <span class="hljs-attribute">services</span><span class="hljs-punctuation">:</span> <span class="hljs-string">[]</span><br>  <span class="hljs-attribute">relabel_configs</span><span class="hljs-punctuation">:</span><br>   <span class="hljs-bullet">-</span> <span class="hljs-string">source_labels: [__meta_consul_service_id]</span><br>     <span class="hljs-attribute">regex</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;.*prometheus.*&quot;</span><br>     <span class="hljs-attribute">action</span><span class="hljs-punctuation">:</span> <span class="hljs-string">keep</span><br></code></pre></td></tr></table></figure><p>在Consul注册后如果发现Prometheus中没有发现Target，那么可以点一下<code>Service Discovery</code>，然后随便点一个看看是不是被<code>Dropped</code>掉了，如果是那么要看<code>Prometheus.yaml</code>中的<code>relabel_configs</code>是怎么写的。</p><p><img src="/images/Prometheus-Query-13.png" alt="Prometheus-Query-13"></p><h3 id="Grafana变量设置"><a href="#Grafana变量设置" class="headerlink" title="Grafana变量设置"></a>Grafana变量设置</h3><p><img src="/images/Prometheus-Query-14.png" alt="Prometheus-Query-14"></p><p><img src="/images/Prometheus-Query-15.png" alt="Prometheus-Query-15"></p><p><img src="/images/Prometheus-Query-16.png" alt="Prometheus-Query-16"></p><ul><li>Name: 变量的名称 （查询时需要使用）</li><li>Type: 变量类型(7种类型，最常用的是Query类型)</li><li>Label: 显示的标签 （ 没有实质作用，就是一个Label）</li><li>Query: 如何找到这个变量的值，怎么获取 （重要，后面写个例子）</li><li>Regex: 这里的正则表达式是对Query的结果在一次处理，然后在赋值给env变量</li><li>Sort: 如何对变量的值进行排序</li><li>Refresh: 什么时候刷新这个变量的值<ul><li>On Dashboard Load：面板加载的时候，刷新一次</li><li>On Time Range Change：跟随面板刷新时间刷新该变量，面板的刷新设置在面板的右上角</li></ul></li></ul><h3 id="grafana里prometheus查询语法"><a href="#grafana里prometheus查询语法" class="headerlink" title="grafana里prometheus查询语法"></a>grafana里prometheus查询语法</h3><table><thead><tr><th>名称</th><th>描述</th></tr></thead><tbody><tr><td>label_values(label)</td><td>返回Promthues中标签名为label的值</td></tr><tr><td>label_values(metric, label)</td><td>返回Promthues中metric指标，标签名为label的值</td></tr><tr><td>metrics(metric)</td><td>返回所有指标名称满足metric定义正则表达式的指标名称</td></tr><tr><td>query_result(query)</td><td>返回prometheus查询语句的查询结果</td></tr></tbody></table><h3 id="示例1"><a href="#示例1" class="headerlink" title="示例1"></a>示例1</h3><p><img src="/images/Prometheus-Query-17.png" alt="Prometheus-Query-17"><br>如上图所示，我们设置<code>label_values(instance)</code> 这样只要Prometheus中包含<code>instance</code>这个标签的值都会赋值给env这个变量。如果<code>instance</code>标签中的值有相同的则显示一个。</p><p><img src="/images/Prometheus-Query-18.png" alt="Prometheus-Query-18"></p><p><img src="/images/Prometheus-Query-19.png" alt="Prometheus-Query-19"></p><h3 id="示例2"><a href="#示例2" class="headerlink" title="示例2"></a>示例2</h3><p><img src="/images/Prometheus-Query-20.png" alt="Prometheus-Query-20"><br>如上图所示，我们设置<code>label_values(node_boot_time_seconds&#123;&#125;,instance)</code> 这样设置是将<code>node_boot_time_seconds</code>这个指标名中的标签为<code>instance</code>的值赋值给env变量，如果<code>instance</code>标签中的值有相同的则显示一个。</p><p><img src="/images/Prometheus-Query-21.png" alt="Prometheus-Query-21"></p><p><img src="/images/Prometheus-Query-22.png" alt="Prometheus-Query-22"></p><p><img src="/images/Prometheus-Query-23.png" alt="Prometheus-Query-23"><br>我们也可以设置标签的过滤条件例如上图。<code>label_values(node_boot_time_seconds&#123;job=&quot;node-exporter&quot;&#125;,instance)</code> 这样就是先过滤出来<code>node_boot_time_seconds</code>这个指标中标签是<code>&#123;job=&quot;node-exporter&quot;&#125;</code>的<code>Target</code>然后在取<code>instance</code>的值赋值给<code>env</code>变量。</p><p><img src="/images/Prometheus-Query-24.png" alt="Prometheus-Query-24"></p><p><img src="/images/Prometheus-Query-25.png" alt="Prometheus-Query-25"></p><p><img src="/images/Prometheus-Query-26.png" alt="Prometheus-Query-26"><br>看起来和上面没什么变化，因为4个<code>node_exporter</code>都有<code>job=&quot;node-exporter&quot;</code>这个标签，如果某一个主机没有这个标签将在env这里少显示一个。</p><p><img src="/images/Prometheus-Query-27.png" alt="Prometheus-Query-27"></p><h3 id="Grafana变量使用"><a href="#Grafana变量使用" class="headerlink" title="Grafana变量使用"></a>Grafana变量使用</h3><p><img src="/images/Prometheus-Query-28.png" alt="Prometheus-Query-28"><br>在每个指标名后面加上标签名，其中标签值就是变量名<code>env</code>。</p><h3 id="正则表达式使用"><a href="#正则表达式使用" class="headerlink" title="正则表达式使用"></a>正则表达式使用</h3><p><img src="/images/Prometheus-Query-29.png" alt="Prometheus-Query-29"><br>如上图所示我们在没有加正则表达时候的时候我们获取到的<code>instance</code>的结果是<code>IP+Port</code>的形式。</p><p><img src="/images/Prometheus-Query-30.png" alt="Prometheus-Query-30"><br>我们加了正则表达式后可以对<code>Query</code>的结果进行二次处理。也就是用正则表达在匹配一次，匹配出我们需要的结果，这次我们去掉了端口。</p><h3 id="Grafana刷新时间"><a href="#Grafana刷新时间" class="headerlink" title="Grafana刷新时间"></a>Grafana刷新时间</h3><p><img src="/images/Prometheus-Query-31.png" alt="Prometheus-Query-31"></p><p>这里可以设置多久刷新一次Dashboard时间，也就是多久执行一次面板后面的PromQL。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>PromQL进阶</title>
    <link href="/2021/06/15/Use-advanced-PromQL/"/>
    <url>/2021/06/15/Use-advanced-PromQL/</url>
    
    <content type="html"><![CDATA[<h2 id="Prometheus-聚合函数"><a href="#Prometheus-聚合函数" class="headerlink" title="Prometheus 聚合函数"></a>Prometheus 聚合函数</h2><p>一般说来，单个指标的价值不大，监控场景中往往需要将一些具有相同指标名的指标值进行聚合计算（这些指标名很有可能来自不同target只是拥有同样的指标名，也有可能是某一个target上某一个指标的多个维度，例如：有的一个指标名有多个时间序列）。例如计数、求和、平均值、分位数、标准 差及方差等。</p><p>什么是聚合计算：对查询结果事先按照某种分类机制进行分组(group by)并将查询结果按组进行计算，例如分组统计、分组求平均值、分组求和等;</p><p>下图我们首先通过PromQL过滤出来具有指标名为<code>node_disk_free</code>的所有节点，然后可以看到有很多target都有这个指标名，这也就跟上面提到的<code>有可能来自不同target只是拥有同样的指标名</code>，也可以看到其中每个target有两个时间序列就例如<code>10.191.184.164</code>这个IP。这也就符合了我们上面说的<code>也有可能是某一个target上某一个指标的多个维度</code><br><img src="/images/Prometheus-PromQL-18.png" alt="Prometheus-PromQL-18"></p><p>下图是用<code>instance</code>作为分组，且做了标签匹配仅符合条件的才会被过滤出来。然后在进行求和运算。以IP<code>10.191.184.164</code>为例计算方式如下：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">0</span>.<span class="hljs-number">9446315040088761</span>+<span class="hljs-number">0</span>.<span class="hljs-number">738403637258654</span>=<span class="hljs-number">1</span>.<span class="hljs-number">6830351413</span><br></code></pre></td></tr></table></figure><p><img src="/images/Prometheus-PromQL-19.png" alt="Prometheus-PromQL-19"></p><p><img src="/images/Prometheus-PromQL-20.jpg" alt="Prometheus-PromQL-20"></p><p>聚合操作由聚合函数针对一组值进行计算并返回单个值或少量几值作为结果（聚合是越聚越少，不会越聚越多）：</p><ul><li>Prometheus内置提供的11个聚合函数也称为聚合运算符</li><li>这些运算符仅支持应用于单个<code>即时向量</code>的元素，其返回值也是具有少量元素的新向量或标量</li><li>这些聚合运行符既可以基于向量表达式返回结果中的时间序列的所有标签维度进行分组聚合，也可以仅基于指定的标签维度分组后再进行分组聚合</li></ul><h3 id="聚合表达式"><a href="#聚合表达式" class="headerlink" title="聚合表达式"></a>聚合表达式</h3><p>PromQL中的聚合操作语法格式可采用如下面两种格式之一：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">aggr-op</span>&gt;</span>([parameter,] <span class="hljs-tag">&lt;<span class="hljs-name">vector</span> <span class="hljs-attr">expression</span>&gt;</span>) [without|by (<span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">list</span>&gt;</span>)] <br><span class="hljs-tag">&lt;<span class="hljs-name">aggr-op</span>&gt;</span> [without|by (<span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">list</span>&gt;</span>)] ([parameter,] <span class="hljs-tag">&lt;<span class="hljs-name">vector</span> <span class="hljs-attr">expression</span>&gt;</span>)<br></code></pre></td></tr></table></figure><p>分组聚合:先分组、后聚合</p><ul><li>without:从结果向量中删除由without子句指定的标签，未指定的那部分标签则用作分组标准;</li><li>by:功能与without刚好相反，它仅使用by子句中指定的标签进行聚合，结果向量中出现但未被by子句指定的标签则会被忽略;<ul><li>为了保留上下文信息，使用by子句时需要显式指定其结果中原本出现的job、instance等一类的标签</li></ul></li></ul><h3 id="11个聚合函数"><a href="#11个聚合函数" class="headerlink" title="11个聚合函数"></a>11个聚合函数</h3><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs scss"><span class="hljs-built_in">sum</span>():对样本值求和;<br><span class="hljs-built_in">avg</span>():对样本值求平均值，这是进行指标数据分析的标准方法;<br><span class="hljs-built_in">count</span>():对分组内的时间序列进行数量统计;<br><span class="hljs-built_in">stddev</span>():对样本值求标准差，以帮助用户了解数据的波动大小(或称之为波动程度);<br><span class="hljs-built_in">stdvar</span>():对样本值求方差，它是求取标准差过程中的中间状态;<br><span class="hljs-built_in">min</span>():求取样本值中的最小者;<br><span class="hljs-built_in">max</span>():求取样本值中的最大者;<br><span class="hljs-built_in">topk</span>():逆序返回分组内的样本值最大的前k个时间序列及其值;<br><span class="hljs-built_in">bottomk</span>():顺序返回分组内的样本值最小的前k个时间序列及其值;<br><span class="hljs-built_in">quantile</span>():分位数用于评估数据的分布状态，该函数会返回分组内指定的分位数的值，即 数值落在小于等于指定的分位区间的比例;<br><span class="hljs-built_in">count_values</span>():对分组内的时间序列的样本值进行数量统计;<br></code></pre></td></tr></table></figure><blockquote><p>注意：其中只有<code>count_values</code>, <code>quantile</code>, <code>topk</code>, <code>bottomk</code>支持参数(parameter)。事实上，各函数工作机制的不同之处也仅在于计算操作本身，PromQL对于它们的执行逻辑相似;</p></blockquote><h3 id="示例讲解"><a href="#示例讲解" class="headerlink" title="示例讲解"></a>示例讲解</h3><p><img src="/images/Prometheus-PromQL-11.png" alt="Prometheus-PromQL-11"></p><p>通过上面的语句过滤出来所有节点上指标名 <code>node_filesystem_avail_bytes</code> 的值，我们可以用聚合函数进行直接聚合。</p><h4 id="sum-求和"><a href="#sum-求和" class="headerlink" title="sum() 求和"></a>sum() 求和</h4><p>他会把所有节点的<code>node_filesystem_avail_bytes</code>的值全部相加<br><img src="/images/Prometheus-PromQL-12.png" alt="Prometheus-PromQL-12"></p><p>我们也可以指定标签进行聚合，指定<code>instance</code>则是以<code>instance</code>进行分组聚合，这样就计算出每台主机可用空间。<br><img src="/images/Prometheus-PromQL-13.png" alt="Prometheus-PromQL-13"></p><p>我们可以看到有一些<code>device=&quot;rootfs&quot;</code> 和 <code>device=&quot;tmpfs&quot;</code> 这样的标签。这种标签如果我们不想统计应该怎么写呢？<br><img src="/images/Prometheus-PromQL-14.png" alt="Prometheus-PromQL-14"></p><p>过滤掉我们不想统计的标签后在做分组聚合<br><img src="/images/Prometheus-PromQL-15.png" alt="Prometheus-PromQL-15"></p><h4 id="avg-求平均值"><a href="#avg-求平均值" class="headerlink" title="avg() 求平均值"></a>avg() 求平均值</h4><p>首先我们先找一个值少一些的等会好手动计算，我们注意看下面有这些标签。我们使用service标签做分组聚合。<br><img src="/images/Prometheus-PromQL-16.png" alt="Prometheus-PromQL-16"></p><p>分组集合后的结果<br><img src="/images/Prometheus-PromQL-17.png" alt="Prometheus-PromQL-17"></p><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dns">计算方式：(<span class="hljs-number">9661+17171</span>+<span class="hljs-number">15679</span>)/<span class="hljs-number">3=14,170</span>.<span class="hljs-number">3333333333</span><br></code></pre></td></tr></table></figure><h2 id="PromQL运算符"><a href="#PromQL运算符" class="headerlink" title="PromQL运算符"></a>PromQL运算符</h2><p>当用户需要使用不同的监控指标进行更多操作时，PromQL聚合操作会出现无法满足使用的情况。这时Prometheus提供了多种运算符。这些运算符不仅允许对即时向量进行简单的算术运算，还可以将运算符应用于两个基于标签分组的即时向量。下面我们对Prometheus查询语言提供的算术运算符、关系运算符、向量匹配模式和逻辑运算符进行介绍。</p><h2 id="算术运算符"><a href="#算术运算符" class="headerlink" title="算术运算符"></a>算术运算符</h2><p>Prometheus提供的所有算术运算的工作原理都是类似的，有编程基础的读者可以看到其语义与其他编程语言的语义也相同。Prometheus的6种算术运算符如下：</p><table><thead><tr><th>运算符</th><th>描述</th></tr></thead><tbody><tr><td>+</td><td>加</td></tr><tr><td>-</td><td>减</td></tr><tr><td>*</td><td>乘</td></tr><tr><td>&#x2F;</td><td>除</td></tr><tr><td>%</td><td>取模</td></tr><tr><td>^</td><td>幂运算</td></tr></tbody></table><h3 id="运算操作符支持三类操作："><a href="#运算操作符支持三类操作：" class="headerlink" title="运算操作符支持三类操作："></a>运算操作符支持三类操作：</h3><ul><li>scalar&#x2F;scalar（标量&#x2F;标量）之间的操作；</li><li>vector&#x2F;scalar（即时向量&#x2F;标量）之间的操作；</li><li>vector&#x2F;vector（即时向量&#x2F;即时向量）之间的操作；</li></ul><p>下面我们分别对表达式进行调试，通过Prometheus Web UI上直观的输出信息观察三类操作。</p><h3 id="两个标量之间"><a href="#两个标量之间" class="headerlink" title="两个标量之间"></a>两个标量之间</h3><p>在两个标量之间进行算术运算，得到的结果还是标量<br><img src="/images/Prometheus-PromQL-21.png" alt="Prometheus-PromQL-21"></p><h3 id="即时向量与标量之间"><a href="#即时向量与标量之间" class="headerlink" title="即时向量与标量之间"></a>即时向量与标量之间</h3><p>当即时向量与标量之间进行算术运算时，算术运算符会依次作用于即时向量中的每一个样本值，从而得到一组新的时间序列。</p><p>例如，我们可以通过监控指标<code>node_memory_MemTotal_bytes</code>获取主机内存总空间的大小，其样本单位为byte。现在把样本单位换算为MB时，表达式为 <code>node_memory_MemTotal_bytes/(1024*1024)</code>，如下图：<br><img src="/images/Prometheus-PromQL-22.png" alt="Prometheus-PromQL-22"></p><h3 id="即时向量与即时向量之间"><a href="#即时向量与即时向量之间" class="headerlink" title="即时向量与即时向量之间"></a>即时向量与即时向量之间</h3><p>即时向量与即时向量进行算术运算的过程相对复杂一些。</p><p>例如，<code>node_disk_read_time_ms</code> 和 <code>node_disk_write_time_ms</code> 获取磁盘读写时间使用表达式：<code>node_disk_write_time_ms + node_disk_read_time_ms</code> 如下图所示：</p><p><img src="/images/Prometheus-PromQL-23.png" alt="Prometheus-PromQL-23"></p><p>该表达式工作过程是依次找到与左边向量元素匹配（标签完全一致）的右边向量元素进行运算，如果没找到匹配元素，则直接丢弃，同时，计算后新的时间序列将不会包含指标名称。</p><p><img src="/images/Prometheus-PromQL-24.png" alt="Prometheus-PromQL-24"></p><p><img src="/images/Prometheus-PromQL-25.png" alt="Prometheus-PromQL-25"></p><h2 id="关系运算符"><a href="#关系运算符" class="headerlink" title="关系运算符"></a>关系运算符</h2><p>Prometheus同样提供了关系运算符，也称为比较运算符，其语义很容易理解。Prometheus的6种关系运算符如下所示：</p><table><thead><tr><th>运算符</th><th>描述</th></tr></thead><tbody><tr><td>&#x3D;&#x3D;</td><td>等值比较</td></tr><tr><td>!&#x3D;</td><td>不等</td></tr><tr><td>&gt;</td><td>大于</td></tr><tr><td>&lt;</td><td>小于</td></tr><tr><td>&gt;&#x3D;</td><td>大于等于</td></tr><tr><td>&lt;&#x3D;</td><td>小于等于</td></tr></tbody></table><p>关系运算符同样被应用于scalar&#x2F;scalar（标量&#x2F;标量）、vector&#x2F;scalar（即时向量&#x2F;标量），和vector&#x2F;vector（即时向量&#x2F;即时向量）之间。默认情况下，运算符用于对时序数据进行过滤。但是在有些情况下，可以通过在运算符之后使用bool修饰符，从而不对时间序列进行过滤，直接返回0（false）或者1（true）。</p><p>下面我们使用Prometheus Web UI分别对表达式进行调试后，通过直观的输出信息观察三类操作</p><h3 id="两个标量之间-1"><a href="#两个标量之间-1" class="headerlink" title="两个标量之间"></a>两个标量之间</h3><p>在两个标量之间进行关系运算，必须使用bool修饰符，并且这些运算符会产生另一个标量，即0（false）或者1（true），如图</p><p><img src="/images/Prometheus-PromQL-26.png" alt="Prometheus-PromQL-26"></p><h3 id="即时向量与标量之间-1"><a href="#即时向量与标量之间-1" class="headerlink" title="即时向量与标量之间"></a>即时向量与标量之间</h3><p>当即时向量与标量之间进行关系运算时，这个运算符会应用到某个当前时刻的每个时间序列数据上，如果一个时间序列数据值与这个标量的比较结果是false，则这个时间序列数据被丢弃，如果是true，则这个时间序列数据被保留在结果中。</p><p>例如，通过监控指标<code>node_netstat_Tcp_CurrEstab</code>获取主机网络状态为<code>ESTABLISHED</code>，数量大于30的表达式为：<code>node_netstat_Tcp_CurrEstab ≥ 30</code><br><img src="/images/Prometheus-PromQL-27.png" alt="Prometheus-PromQL-27"></p><p>还有我们经常使用的被监控主机告警表达式，例如，<code>up&#123;job=&quot;node_exporter&quot;&#125;==0</code></p><h3 id="即时向量与即时向量之间-1"><a href="#即时向量与即时向量之间-1" class="headerlink" title="即时向量与即时向量之间"></a>即时向量与即时向量之间</h3><p>在即时向量与即时向量之间进行关系运算时，运算符默认情况下是过滤的，用于匹配条目。表达式不是true或在表达式的另一侧找不到匹配项的向量元素将被从结果中删除，不在结果中显示；否则将保留左侧的度量指标和标签的样本数据写入即时向量。如果提供了bool修饰符，则删除的向量元素的值为0，而保留的向量元素的值为1，左侧标签值为1。</p><h2 id="向量匹配"><a href="#向量匹配" class="headerlink" title="向量匹配"></a>向量匹配</h2><p>在标量和即时向量之间使用运算符可以满足很多需求，但是在两个即时向量之间使用运算符时PromQL会为左侧向量中的每个元素找到匹配的元素，如果没找到匹配元素则直接丢弃，其匹配行为有两种基本类型：</p><ul><li>一对一 (One-to-One)</li><li>一对多或多对一 (Many-to-One, One-to-Many)</li></ul><h3 id="one-to-one（一对一）"><a href="#one-to-one（一对一）" class="headerlink" title="one-to-one（一对一）"></a>one-to-one（一对一）</h3><p>即一对一向量匹配模式，它从运算符的两侧表达式中获取即时向量，依次比较并找到唯一匹配(标签完全一致)的样本值，如果两个条目具有完全相同的标签和对应的值，则它们匹配。一般默认表达式格式为 <code>vector1 &lt;运算符&gt; vector2</code></p><p>如：</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs clean">process_open_fds&#123;<span class="hljs-keyword">instance</span>=<span class="hljs-string">&quot;192.168.3.21:9100&quot;</span>,job=<span class="hljs-string">&quot;centos8&quot;</span>&#125;    <br>/<br>process_max_fds&#123;<span class="hljs-keyword">instance</span>=<span class="hljs-string">&quot;192.168.3.21:9100&quot;</span>,job=<span class="hljs-string">&quot;centos8&quot;</span>&#125;    <br></code></pre></td></tr></table></figure><p><img src="/images/Prometheus-PromQL-28.png" alt="Prometheus-PromQL-28"></p><p>从上图看到，除了标签<code>__name__</code>中的指标名称之外，他们具有完全相同标签名和标签值，这样他们就被匹配到了一起。也就是说，该示例中都有标签{instance&#x3D;”192.168.3.21:9100”,job&#x3D;”centos8”}将匹配在一起。</p><p>如果运算符两侧表达式标签不一致，可以使用关键字on或ignoring修改标签间的匹配行为。其中，on用于在指定标签上进行匹配，ignoring可以忽略指定标签进行匹配。表达格式分别为：</p><figure class="highlight pf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs pf"><span class="hljs-variable">&lt;vector expr&gt;</span> <span class="hljs-variable">&lt;bin-op&gt;</span> ignoring(<span class="hljs-variable">&lt;label list&gt;</span>) <span class="hljs-variable">&lt;vector expr&gt;</span><br><span class="hljs-variable">&lt;vector expr&gt;</span> <span class="hljs-variable">&lt;bin-op&gt;</span> <span class="hljs-keyword">on</span>(<span class="hljs-variable">&lt;label list&gt;</span>) <span class="hljs-variable">&lt;vector expr&gt;</span><br><br>ignore:定义匹配检测时要忽略的标签;<br><span class="hljs-keyword">on</span>:定义匹配检测时只使用的标签;<br></code></pre></td></tr></table></figure><h4 id="这里我们列举一个表达式："><a href="#这里我们列举一个表达式：" class="headerlink" title="这里我们列举一个表达式："></a>这里我们列举一个表达式：</h4><p>我们希望下面两个<code>node_disk_read_time_ms</code>相加，但显然是不行的。因为他们两个标签不完全匹配一个<code>device=sda</code>一个标签是<code>device=sdb</code>，除此别的标签可以完全一致。</p><p><img src="/images/Prometheus-PromQL-29.png" alt="Prometheus-PromQL-29"></p><p>计算<code>node_disk_read_time_ms&#123;device=&quot;sda&quot;&#125; + node_disk_read_time_ms&#123;device=&quot;sdb&quot;&#125;</code> 可以看到无数据，这是因为他们两个的标签不能匹配。<br><img src="/images/Prometheus-PromQL-30.png" alt="Prometheus-PromQL-30"></p><p>我们使用<code>ignoring</code>忽略掉他们不一样的标签后他们就能完全匹配了，这样就能计算了。（总之记住一句话两个向量之间做运算必须两边的标签名和标签值必须匹配才能做计算）<br><img src="/images/Prometheus-PromQL-31.png" alt="Prometheus-PromQL-31"></p><h4 id="在来一个稍微复杂一点的表达式："><a href="#在来一个稍微复杂一点的表达式：" class="headerlink" title="在来一个稍微复杂一点的表达式："></a>在来一个稍微复杂一点的表达式：</h4><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs excel">#表达式中使用到了<span class="hljs-built_in">rate</span>()函数，即计算某个时间序列范围内的平均增长率<br><br><span class="hljs-built_in">sum</span> (<span class="hljs-built_in">rate</span>(node_cpu_seconds_total&#123;<span class="hljs-built_in">mode</span>=<span class="hljs-string">&quot;idle&quot;</span>&#125;[<span class="hljs-number">5</span>m])) by (instance) / <span class="hljs-built_in">sum</span> (<span class="hljs-built_in">rate</span>(node_cpu_seconds_total[<span class="hljs-number">5</span>m])) by (instance)<br></code></pre></td></tr></table></figure><p>以下表达式是过滤出来标签<code>mode=&quot;idle&quot;</code>的并计算出他们5分钟的一个平均值<br><img src="/images/Prometheus-PromQL-34.png" alt="Prometheus-PromQL-34"></p><p>然后可以看到一个节点有多个核心，那在把他们几个核心的值相加，所以我们需要用到 sum()函数做聚合运算，而且必须基于主机做聚合所以用<code>instance</code>标签<br><img src="/images/Prometheus-PromQL-32.png" alt="Prometheus-PromQL-32"></p><p>这里我们计算整个CPU 5分钟的一个平均值<br><img src="/images/Prometheus-PromQL-35.png" alt="Prometheus-PromQL-35"></p><p>可以看到下面有很多<code>mode</code>标签不一样的，所以我们也需要聚合一下<br><img src="/images/Prometheus-PromQL-33.png" alt="Prometheus-PromQL-33"></p><p>最终计算结果<br><img src="/images/Prometheus-PromQL-36.png" alt="Prometheus-PromQL-36"></p><p>但是我们注意到左边表达式和右边表达式中标签完全一致，所以能计算，如果稍微修改一下呢，多一个Job标签</p><p><img src="/images/Prometheus-PromQL-37.png" alt="Prometheus-PromQL-37"></p><p>此时我们需要使用<code>on</code>关键字 仅使用某一个或多个标签做匹配<br><img src="/images/Prometheus-PromQL-38.png" alt="Prometheus-PromQL-38"></p><h3 id="many-to-one-（多对一）and-one-to-many（一对多）"><a href="#many-to-one-（多对一）and-one-to-many（一对多）" class="headerlink" title="many-to-one （多对一）and one-to-many（一对多）"></a>many-to-one （多对一）and one-to-many（一对多）</h3><p>多对一和一对多的匹配模式，可以理解为如果两个瞬时向量数量不一致时可通过<code>group_left</code>、<code>group_right</code>指定以那一侧为准：</p><p>完整的语法形式：</p><figure class="highlight pf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs pf"><span class="hljs-variable">&lt;vector expr&gt;</span> <span class="hljs-variable">&lt;bin-op&gt;</span> ignoring(<span class="hljs-variable">&lt;label list&gt;</span>) group_left(<span class="hljs-variable">&lt;label list&gt;</span>) <span class="hljs-variable">&lt;vector expr&gt;</span><br><span class="hljs-variable">&lt;vector expr&gt;</span> <span class="hljs-variable">&lt;bin-op&gt;</span> ignoring(<span class="hljs-variable">&lt;label list&gt;</span>) group_right(<span class="hljs-variable">&lt;label list&gt;</span>) <span class="hljs-variable">&lt;vector expr&gt;</span><br><span class="hljs-variable">&lt;vector expr&gt;</span> <span class="hljs-variable">&lt;bin-op&gt;</span> <span class="hljs-keyword">on</span>(<span class="hljs-variable">&lt;label list&gt;</span>) group_left(<span class="hljs-variable">&lt;label list&gt;</span>) <span class="hljs-variable">&lt;vector expr&gt;</span><br><span class="hljs-variable">&lt;vector expr&gt;</span> <span class="hljs-variable">&lt;bin-op&gt;</span> <span class="hljs-keyword">on</span>(<span class="hljs-variable">&lt;label list&gt;</span>) group_right(<span class="hljs-variable">&lt;label list&gt;</span>) <span class="hljs-variable">&lt;vector expr&gt;</span><br></code></pre></td></tr></table></figure><p>输入示例：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs routeros">method_code:http_errors:rate5m&#123;<span class="hljs-attribute">method</span>=<span class="hljs-string">&quot;get&quot;</span>, <span class="hljs-attribute">code</span>=<span class="hljs-string">&quot;500&quot;</span>&#125;  24<br>method_code:http_errors:rate5m&#123;<span class="hljs-attribute">method</span>=<span class="hljs-string">&quot;get&quot;</span>, <span class="hljs-attribute">code</span>=<span class="hljs-string">&quot;404&quot;</span>&#125;  30<br>method_code:http_errors:rate5m&#123;<span class="hljs-attribute">method</span>=<span class="hljs-string">&quot;put&quot;</span>, <span class="hljs-attribute">code</span>=<span class="hljs-string">&quot;501&quot;</span>&#125;  3<br>method_code:http_errors:rate5m&#123;<span class="hljs-attribute">method</span>=<span class="hljs-string">&quot;post&quot;</span>, <span class="hljs-attribute">code</span>=<span class="hljs-string">&quot;500&quot;</span>&#125; 6<br>method_code:http_errors:rate5m&#123;<span class="hljs-attribute">method</span>=<span class="hljs-string">&quot;post&quot;</span>, <span class="hljs-attribute">code</span>=<span class="hljs-string">&quot;404&quot;</span>&#125; 21<br>​<br>method:http_requests:rate5m&#123;<span class="hljs-attribute">method</span>=<span class="hljs-string">&quot;get&quot;</span>&#125;  600<br>method:http_requests:rate5m&#123;<span class="hljs-attribute">method</span>=<span class="hljs-string">&quot;del&quot;</span>&#125;  34<br>method:http_requests:rate5m&#123;<span class="hljs-attribute">method</span>=<span class="hljs-string">&quot;post&quot;</span>&#125; 120<br></code></pre></td></tr></table></figure><p>查询示例：</p><p><code>group_left</code>以左侧为准</p><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs oxygene">method_code:http_errors:rate5m / ignoring(code) group_left <span class="hljs-keyword">method</span>:http_requests:rate5m<br></code></pre></td></tr></table></figure><p>结果示例：</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs armasm">&#123;method=<span class="hljs-string">&quot;get&quot;</span>, <span class="hljs-meta">code</span>=<span class="hljs-string">&quot;500&quot;</span>&#125;  <span class="hljs-number">0</span>.<span class="hljs-number">04</span>            <span class="hljs-comment">//  24 / 600</span><br>&#123;method=<span class="hljs-string">&quot;get&quot;</span>, <span class="hljs-meta">code</span>=<span class="hljs-string">&quot;404&quot;</span>&#125;  <span class="hljs-number">0</span>.<span class="hljs-number">05</span>            <span class="hljs-comment">//  30 / 600</span><br>&#123;method=<span class="hljs-string">&quot;post&quot;</span>, <span class="hljs-meta">code</span>=<span class="hljs-string">&quot;500&quot;</span>&#125; <span class="hljs-number">0</span>.<span class="hljs-number">05</span>            <span class="hljs-comment">//   6 / 120</span><br>&#123;method=<span class="hljs-string">&quot;post&quot;</span>, <span class="hljs-meta">code</span>=<span class="hljs-string">&quot;404&quot;</span>&#125; <span class="hljs-number">0</span>.<span class="hljs-number">175</span>           <span class="hljs-comment">//  21 / 120</span><br></code></pre></td></tr></table></figure><p>表达式分析：</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">sum by (<span class="hljs-keyword">node</span><span class="hljs-title">) ((kube_pod_status_phase</span>&#123;<span class="hljs-attr">phase=</span><span class="hljs-string">&quot;Running&quot;</span>&#125; == <span class="hljs-number">1</span>) + on(pod) group_left(<span class="hljs-keyword">node</span><span class="hljs-title">) (0</span> * kube_pod_<span class="hljs-literal">inf</span>o&#123;<span class="hljs-attr">pod_template_hash=</span><span class="hljs-string">&quot;&quot;</span>&#125;)) / sum by (<span class="hljs-keyword">node</span><span class="hljs-title">) (kube_node_status_allocatable</span>&#123;<span class="hljs-attr">resource=</span><span class="hljs-string">&quot;pods&quot;</span>&#125;) * <span class="hljs-number">100</span> &gt; <span class="hljs-number">90</span><br></code></pre></td></tr></table></figure><p>expr1表达式：</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf">(kube_pod_status_phase&#123;phase<span class="hljs-operator">=</span><span class="hljs-string">&quot;Running&quot;</span>&#125; <span class="hljs-operator">=</span><span class="hljs-operator">=</span> <span class="hljs-number">1</span>)<br></code></pre></td></tr></table></figure><p>执行结果：<br><img src="/images/Prometheus-PromQL-48.png" alt="Prometheus-PromQL-48"></p><p>expr2表达式：</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf">(<span class="hljs-number">0</span> * kube_pod_info&#123;pod_template_hash<span class="hljs-operator">=</span><span class="hljs-string">&quot;&quot;</span>&#125;)<br></code></pre></td></tr></table></figure><p>执行结果：<br><img src="/images/Prometheus-PromQL-46.png" alt="Prometheus-PromQL-46"></p><p>group_left(node)结果：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs scss">(kube_pod_status_phase&#123;phase=&quot;Running&quot;&#125; == <span class="hljs-number">1</span>) + <span class="hljs-built_in">on</span>(pod) <span class="hljs-built_in">group_left</span>(node) (<span class="hljs-number">0</span> * kube_pod_info&#123;pod_template_hash=&quot;&quot;&#125;)<br></code></pre></td></tr></table></figure><p><img src="/images/Prometheus-PromQL-47.png" alt="Prometheus-PromQL-47"></p><p>group_left(node) 的参数是右侧向量的标签名，其会将此标签值传递给左侧，也就是出现在运算的结果中出现的<code>node</code>的label。原来expr1中并没有<code>node</code>的标签。</p><p>如group_left()参数中的标签两边都存在则覆盖左侧同名标签。比如此例中如果 group_left(job)，那么最终结果的标签集中将会存在 <code>job=&quot;node&quot;</code> 而不是 <code>job=&quot;process&quot;</code>。</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs armasm"><span class="hljs-symbol">node_process_namegroup_memory_bytes</span>&#123;job=<span class="hljs-string">&quot;process&quot;</span>,<span class="hljs-built_in">ip</span>=<span class="hljs-string">&quot;10.1.1.1&quot;</span>,memtype=<span class="hljs-string">&quot;resident&quot;</span>&#125;<br><br><span class="hljs-symbol">node_memory_MemTotal_bytes</span>&#123;job=<span class="hljs-string">&quot;node&quot;</span>,<span class="hljs-built_in">ip</span>=<span class="hljs-string">&quot;10.1.1.1&quot;</span>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs armasm"><span class="hljs-symbol">node_process_namegroup_memory_bytes</span>&#123;job=<span class="hljs-string">&quot;process&quot;</span>,<span class="hljs-built_in">ip</span>=<span class="hljs-string">&quot;10.1.1.1&quot;</span>,memtype=<span class="hljs-string">&quot;resident&quot;</span>&#125; / on(<span class="hljs-built_in">ip</span>) group_left(job) node_memory_MemTotal_bytes&#123;job=<span class="hljs-string">&quot;node&quot;</span>,<span class="hljs-built_in">ip</span>=<span class="hljs-string">&quot;10.1.1.1&quot;</span>&#125;<br></code></pre></td></tr></table></figure><p>group_left()结果：<br><img src="/images/Prometheus-PromQL-39.png" alt="Prometheus-PromQL-39"></p><p>没有<code>node</code>标签</p><h2 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h2><p>Prometheus提供了三种逻辑运算符：and、or和unless。逻辑运算符仅用于瞬时向量之间。所有逻辑运算符都以多对多的方式工作，它们是唯一能工作于多对多方式的运算符。不同于算术运算符和比较运算符，因为没有执行任何数学计算，所以重点是描述一个组是否包含样本。下面我们根据官方提供的内容分别对三种逻辑运算进行介绍。</p><h3 id="vector1-and-vector2"><a href="#vector1-and-vector2" class="headerlink" title="vector1 and vector2"></a>vector1 and vector2</h3><p>and逻辑运算会产生一个由vector1的元素组成的新的向量。该向量包含vector1中完全匹配vector2中的元素。表达式示例如下：</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs abnf">node_cpu_seconds_total&#123;job<span class="hljs-operator">=</span><span class="hljs-string">&quot;centos8&quot;</span>&#125; <br>and <br>node_cpu_seconds_total&#123;mode<span class="hljs-operator">=</span><span class="hljs-string">&quot;idle&quot;</span>&#125;<br></code></pre></td></tr></table></figure><p><img src="/images/Prometheus-PromQL-40.png" alt="Prometheus-PromQL-40"></p><h3 id="vector1-or-vector2"><a href="#vector1-or-vector2" class="headerlink" title="vector1 or vector2"></a>vector1 or vector2</h3><p>or逻辑运算会产生一个新的向量，该向量包含vector1的所有原始元素（标签集+值）的向量，以及vector2中没有与vector1匹配标签集的所有元素。假设判断node_test_metric指标是否存在，如果指标不存在则返回0。在这种情况下，我们可以使用与每个目标关联的up指标进行表达式操作：</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs abnf">node_test_metric<br>or<br>(up&#123;job<span class="hljs-operator">=</span><span class="hljs-string">&quot;centos8&quot;</span>&#125; <span class="hljs-operator">=</span><span class="hljs-operator">=</span> <span class="hljs-number">1</span>) * <span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><p><img src="/images/Prometheus-PromQL-41.png" alt="Prometheus-PromQL-41"></p><h3 id="vector1-unless-vector2"><a href="#vector1-unless-vector2" class="headerlink" title="vector1 unless vector2"></a>vector1 unless vector2</h3><p>unless逻辑运算会产生一个由vector1的元素组成的向量，而这些元素在vector2中没有与标签集完全匹配的元素，两个向量中的所有匹配元素都被删除。表达式示例如下：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs routeros">node_cpu_seconds_total&#123;<span class="hljs-attribute">job</span>=<span class="hljs-string">&quot;centos8&quot;</span>&#125; <br><span class="hljs-keyword">and</span> <br>node_cpu_seconds_total&#123;<span class="hljs-attribute">mode</span>=<span class="hljs-string">&quot;idle&quot;</span>&#125;<br><span class="hljs-comment">#把master节点去掉</span><br>unless<br>node_cpu_seconds_total&#123;<span class="hljs-attribute">instance</span>=<span class="hljs-string">&quot;192.168.3.82:9100&quot;</span>&#125;<br></code></pre></td></tr></table></figure><p><img src="/images/Prometheus-PromQL-42.png" alt="Prometheus-PromQL-42"></p><h2 id="运算符优先级"><a href="#运算符优先级" class="headerlink" title="运算符优先级"></a>运算符优先级</h2><table><thead><tr><th>编号</th><th>运算符</th></tr></thead><tbody><tr><td>1</td><td>^</td></tr><tr><td>2</td><td>*，&#x2F;，%</td></tr><tr><td>3</td><td>+，-</td></tr><tr><td>4</td><td>&#x3D;&#x3D;，!&#x3D;，&lt;&#x3D;，&lt;，&gt;&#x3D;，&gt;</td></tr><tr><td>5</td><td>and，unless</td></tr><tr><td>6</td><td>or</td></tr></tbody></table><h2 id="PromQL内置函数"><a href="#PromQL内置函数" class="headerlink" title="PromQL内置函数"></a>PromQL内置函数</h2><p>下面的函数列表允许传入一个范围向量，它们会聚合每个时间序列的范围，并返回一个即时向量：</p><ul><li>avg_over_time(range-vector) : 范围向量内每个度量指标的平均值。</li><li>min_over_time(range-vector) : 范围向量内每个度量指标的最小值。</li><li>max_over_time(range-vector) : 范围向量内每个度量指标的最大值。</li><li>sum_over_time(range-vector) : 范围向量内每个度量指标的求和。</li><li>count_over_time(range-vector) : 范围向量内每个度量指标的样本数据个数。</li><li>quantile_over_time(scalar, range-vector) : 范围向量内每个度量指标的样本数据值分位数，<code>φ-quantile (0 ≤ φ ≤ 1)</code>。</li><li>stddev_over_time(range-vector) : 范围向量内每个度量指标的总体标准差。</li><li>stdvar_over_time(range-vector) : 范围向量内每个度量指标的总体标准方差。</li></ul><p>下面的示例中我们看到另外一种写法<code>[15m:1m]</code>，这表示取15分钟的一个范围数据，并按每分钟分为一段，最后分为15段。在15段中取一个最小值。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-bullet">-</span> <span class="hljs-attr">alert:</span> <span class="hljs-string">KubernetesPodNotHealthy</span><br>  <span class="hljs-attr">expr:</span> <span class="hljs-string">min_over_time(sum</span> <span class="hljs-string">by</span> <span class="hljs-string">(namespace,</span> <span class="hljs-string">pod)</span> <span class="hljs-string">(kube_pod_status_phase&#123;phase=~&quot;Pending|Unknown|Failed&quot;&#125;)[15m:1m])</span> <span class="hljs-string">&gt;</span> <span class="hljs-number">0</span><br>  <span class="hljs-attr">for:</span> <span class="hljs-string">0m</span><br>  <span class="hljs-attr">labels:</span><br>    <span class="hljs-attr">severity:</span> <span class="hljs-string">critical</span><br>  <span class="hljs-attr">annotations:</span><br>    <span class="hljs-attr">summary:</span> <span class="hljs-string">Kubernetes</span> <span class="hljs-string">Pod</span> <span class="hljs-string">not</span> <span class="hljs-string">healthy</span> <span class="hljs-string">(instance</span> &#123;&#123; <span class="hljs-string">$labels.instance</span> &#125;&#125;<span class="hljs-string">)</span><br>    <span class="hljs-attr">description:</span> <span class="hljs-string">&quot;Pod has been in a non-ready state for longer than 15 minutes.\n  VALUE = <span class="hljs-template-variable">&#123;&#123; $value &#125;&#125;</span>\n  LABELS = <span class="hljs-template-variable">&#123;&#123; $labels &#125;&#125;</span>&quot;</span><br></code></pre></td></tr></table></figure><h3 id="演示"><a href="#演示" class="headerlink" title="演示"></a>演示</h3><p>首先使用范围向量获取过去一段时间内的数据<br><img src="/images/Prometheus-PromQL-43.png" alt="Prometheus-PromQL-43"></p><p>按每2分钟为一段切割<code>6/2=3</code><br><img src="/images/Prometheus-PromQL-44.png" alt="Prometheus-PromQL-44"></p><p>使用<code>min_over_time</code>函数计算出3个数据中最小的一个<br><img src="/images/Prometheus-PromQL-45.png" alt="Prometheus-PromQL-45"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>探索PromQL</title>
    <link href="/2021/05/27/PromQL/"/>
    <url>/2021/05/27/PromQL/</url>
    
    <content type="html"><![CDATA[<h2 id="PromQL基础"><a href="#PromQL基础" class="headerlink" title="PromQL基础"></a>PromQL基础</h2><p>Prometheus会将所有采集到的样本数据以时间序列（time-series）的方式保存在内存数据库中，并且定时保存到硬盘上，每个数据称为一个样本。时间序列（time-series）是按照时间戳和值的序列顺序存放的，我们称之为向量(vector). 每条时间序列（time-series）通过指标名称(metrics name)和一组标签集(labelset)命名。如下所示，可以将时间序列（time-series）理解为将多个时间序列（time-series）放在同一个坐标系内(以时间为横轴，以序列为纵轴)，将形成一个由数据点组成的矩阵;</p><p>可以把以下图想象成Promethus存储</p><ul><li>每一行代表一个时间序列（time-series）我们也称为一个向量(Vector)</li><li>每一列代表时间的流逝时间点</li></ul><p><img src="/images/Prometheus-PromQL-1.png" alt="Prometheus-PromQL-1"></p><p>在时间序列（time-series）中的每一个点称为一个样本（sample），样本由以下三部分组成：</p><ul><li>指标名(metric name)：指标名（metric name）和描述当前样本特征的标签（labels）;</li><li>时间戳(timestamp)：一个精确到毫秒的时间戳;</li><li>样本值(value)： 一个float64的浮点型数据表示当前样本的值。</li></ul><p><img src="/images/Prometheus-PromQL-2.png" alt="Prometheus-PromQL-2"></p><h3 id="Prometheus数据模型"><a href="#Prometheus数据模型" class="headerlink" title="Prometheus数据模型"></a>Prometheus数据模型</h3><p>Prometheus中，每个时间序列都由指标名称(Metric Name)和标签(Label)来唯一标识（注意：指标名称相同，但标签不同的组合分别代表着不同的时间序列。不同的指标名称自然更是代表着不同的时间序列。），格式为:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">metric</span> <span class="hljs-attr">name</span>&gt;</span>&#123;<span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">name</span>&gt;</span>=<span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">value</span>&gt;</span>, ...&#125;<br></code></pre></td></tr></table></figure><p>指标名称(metric name)可以反映被监控样本的含义（比如，<code>http_request_total</code> - 表示当前系统接收到的HTTP请求总量）支持使用字母、数字、下划线和冒号，且必须能匹配RE2规范的正则表达式;<br>标签(label)键值型数据，附加在指标名称之后，反映了当前样本的特征维度。通过这些维度Prometheus可以对样本数据进行过滤，聚合等。例如，http_requests_total{method&#x3D;GET}和http_requests_total{method&#x3D;POST}代表着两个不同的时间序列;标签名称可使用字母、数字和下划线，且必须能匹配RE2规范的正则表达式; 以<code>__</code>为前缀的名称为Prometheus系统预留使用;</p><p>在Prometheus的底层实现中指标名称实际上是以<code>__name__=&lt;metric name&gt;</code>的形式保存在数据库中的，因此以下两种方式均表示的同一条时间序列（time-series）：</p><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs accesslog">api_http_requests_total&#123;method=<span class="hljs-string">&quot;<span class="hljs-keyword">POST</span>&quot;</span>, handler=<span class="hljs-string">&quot;/messages&quot;</span>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs accesslog">&#123;__name__=<span class="hljs-string">&quot;api_http_requests_total&quot;</span>，method=<span class="hljs-string">&quot;<span class="hljs-keyword">POST</span>&quot;</span>, handler=<span class="hljs-string">&quot;/messages&quot;</span>&#125;<br></code></pre></td></tr></table></figure><h2 id="初识PromQL"><a href="#初识PromQL" class="headerlink" title="初识PromQL"></a>初识PromQL</h2><p>Prometheus通过指标名称（metrics name）以及对应的一组标签（labels）唯一定义一条时间序列。</p><ul><li>指标名称反映了监控样本的基本标识</li><li>而label则在这个基本特征上为采集到的数据提供了多种特征维度。</li></ul><p>基于PromQL表达式，用户可以针对指定的特征（指标名）及其细分的纬度（标签）进行过滤、聚合、 统计等运算从而产生期望的计算结果。</p><h3 id="PromQL的数据类型"><a href="#PromQL的数据类型" class="headerlink" title="PromQL的数据类型"></a>PromQL的数据类型</h3><p>PromQL的表达式中支持4种数据类型</p><ul><li>即时向量(Instant Vector):特定或全部的时间序列集合上，具有相同时间戳的一组样本值称为即时向量;</li><li>范围向量(Range Vector):特定或全部的时间序列集合上，在指定的同一时间范围内的 所有样本值;</li><li>标量(Scalar):一个浮点型的数据值;</li><li>字符串(String):支持使用单引号、双引号或反引号进行引用，但反引号中不会对转义 字符进行转义;</li></ul><h3 id="时间序列选择器"><a href="#时间序列选择器" class="headerlink" title="时间序列选择器"></a>时间序列选择器</h3><p>用户可使用向量表达式来查询某个指标名称下的所有时间序列或部分时间序列（根据标签判断不同的标签标示不同的时间序列）的即时（当前）样本值或过去某个时间范围内的样本值，前者称为即时向量选择器，后者称为范围向量选择器</p><ul><li>即时向量选择器(Instant Vector Selectors):返回值中只会包含该时间序列中的最新的一个样本值，这样的返回结果我们称之为即时向量（瞬时向量）</li><li>范围向量选择器(Range Vector Selectors) :返回值中只会包含该时间序列中的最新的一组样本值;范围选择器 <code>[]</code> 进行定义。</li></ul><p><img src="/images/Prometheus-PromQL-3.png" alt="Prometheus-PromQL-3"></p><h4 id="即时向量"><a href="#即时向量" class="headerlink" title="即时向量"></a>即时向量</h4><p>当我们直接使用监控指标名称查询时，可以查询该指标下的所有时间序列。如：</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">http_requests_total</span><br></code></pre></td></tr></table></figure><p>等同于：</p><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="language-xml">http_requests_total</span><span class="hljs-template-variable">&#123;&#125;</span><br></code></pre></td></tr></table></figure><p>该表达式会返回指标名称为http_requests_total的所有时间序列：(以下是两个不同的时间序列，因为他们的标签不同)</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">http_requests_total</span>&#123;code=<span class="hljs-string">&quot;200&quot;</span>,handler=<span class="hljs-string">&quot;alerts&quot;</span>,instance=<span class="hljs-string">&quot;localhost:9090&quot;</span>,job=<span class="hljs-string">&quot;prometheus&quot;</span>,method=<span class="hljs-string">&quot;get&quot;</span>&#125;=(<span class="hljs-number">20889</span>@<span class="hljs-number">1518096812</span>.<span class="hljs-number">326</span>)<br><span class="hljs-attribute">http_requests_total</span>&#123;code=<span class="hljs-string">&quot;200&quot;</span>,handler=<span class="hljs-string">&quot;graph&quot;</span>,instance=<span class="hljs-string">&quot;localhost:9090&quot;</span>,job=<span class="hljs-string">&quot;prometheus&quot;</span>,method=<span class="hljs-string">&quot;get&quot;</span>&#125;=(<span class="hljs-number">21287</span>@<span class="hljs-number">1518096812</span>.<span class="hljs-number">326</span>)<br></code></pre></td></tr></table></figure><p>直接通过类似于PromQL表达式<code>http_requests_total</code>查询时间序列时，返回值中只会包含该时间序列中的最新的一个样本值，这样的返回结果我们称之为瞬时向量。而相应的这样的表达式称之为瞬时向量表达式。</p><h4 id="范围向量"><a href="#范围向量" class="headerlink" title="范围向量"></a>范围向量</h4><p>如果我们想过去一段时间范围内的样本数据时，我们则需要使用范围向量表达式。范围向量表达式和瞬时向量表达式之间的差异在于在范围向量表达式中我们需要定义时间选择的范围，时间范围通过时间范围选择器 <code>[]</code> 进行定义。例如，通过以下表达式可以选择最近5分钟内的所有样本数据:</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">http_requests_total</span>&#123;&#125;[<span class="hljs-number">5</span>m]<br></code></pre></td></tr></table></figure><p>该表达式将会返回查询到的时间序列中最近5分钟的所有样本数据：</p><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs mel">http_requests_total&#123;code=<span class="hljs-string">&quot;200&quot;</span>,handler=<span class="hljs-string">&quot;alerts&quot;</span>,<span class="hljs-keyword">instance</span>=<span class="hljs-string">&quot;localhost:9090&quot;</span>,job=<span class="hljs-string">&quot;prometheus&quot;</span>,method=<span class="hljs-string">&quot;get&quot;</span>&#125;=[<br>    <span class="hljs-number">1</span>@1518096812<span class="hljs-number">.326</span><br>    <span class="hljs-number">1</span>@1518096817<span class="hljs-number">.326</span><br>    <span class="hljs-number">1</span>@1518096822<span class="hljs-number">.326</span><br>    <span class="hljs-number">1</span>@1518096827<span class="hljs-number">.326</span><br>    <span class="hljs-number">1</span>@1518096832<span class="hljs-number">.326</span><br>    <span class="hljs-number">1</span>@1518096837<span class="hljs-number">.325</span><br>]<br>http_requests_total&#123;code=<span class="hljs-string">&quot;200&quot;</span>,handler=<span class="hljs-string">&quot;graph&quot;</span>,<span class="hljs-keyword">instance</span>=<span class="hljs-string">&quot;localhost:9090&quot;</span>,job=<span class="hljs-string">&quot;prometheus&quot;</span>,method=<span class="hljs-string">&quot;get&quot;</span>&#125;=[<br>    <span class="hljs-number">4</span> @1518096812<span class="hljs-number">.326</span><br>    <span class="hljs-number">4</span>@1518096817<span class="hljs-number">.326</span><br>    <span class="hljs-number">4</span>@1518096822<span class="hljs-number">.326</span><br>    <span class="hljs-number">4</span>@1518096827<span class="hljs-number">.326</span><br>    <span class="hljs-number">4</span>@1518096832<span class="hljs-number">.326</span><br>    <span class="hljs-number">4</span>@1518096837<span class="hljs-number">.325</span><br>]<br></code></pre></td></tr></table></figure><p>通过范围向量表达式查询到的结果我们称为范围向量。</p><p>除了使用m表示分钟以外，PromQL的时间范围选择器支持其它时间单位：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">s</span> - 秒<br>m - 分钟<br>h - 小时<br>d - 天<br>w - 周<br>y - 年<br></code></pre></td></tr></table></figure><h4 id="标量（Scalar）：一个浮点型的数字值"><a href="#标量（Scalar）：一个浮点型的数字值" class="headerlink" title="标量（Scalar）：一个浮点型的数字值"></a>标量（Scalar）：一个浮点型的数字值</h4><p>标量只有一个数字，没有时序。<br>例如：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">10<br></code></pre></td></tr></table></figure><p>需要注意的是，当使用表达式<code>count(http_requests_total)</code>，返回的数据类型，依然是瞬时向量。用户可以通过内置函数<code>scalar()</code>将单个瞬时向量转换为标量。</p><h4 id="字符串（String）：一个简单的字符串值"><a href="#字符串（String）：一个简单的字符串值" class="headerlink" title="字符串（String）：一个简单的字符串值"></a>字符串（String）：一个简单的字符串值</h4><p>直接使用字符串，作为PromQL表达式，则会直接返回字符串。</p><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs taggerscript">&quot;this is a string&quot;<br>&#x27;these are unescaped: <span class="hljs-symbol">\n</span> <span class="hljs-symbol">\\</span> <span class="hljs-symbol">\t</span>&#x27;<br>`these are not unescaped: <span class="hljs-symbol">\n</span> &#x27; &quot; <span class="hljs-symbol">\t</span>`<br></code></pre></td></tr></table></figure><h4 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h4><p>需要将返回值绘制成图形时，仅支持即时向量类型和标量类型的数据;由于范围向量选择器的返回的是范围向量型数据，它不能用于表达式浏览器中图形绘制功能，否则，表达式浏览器会返回<code>Error executing query: invalid expression type &quot;range vector&quot; for range query, must be Scalar or instant Vector</code>一类的错误，但事实上，范围向量选择几乎总是结合速率类的函数 <code>rate</code> 或 <code>irate</code> 一同使用。</p><p><img src="/images/Prometheus-PromQL-4.png" alt="Prometheus-PromQL-4"></p><p>Prometheus 中有四种指标类型其中一种 Counters（计数型），其值只增不减，除非监控系统发生了重置。你可以使用 counter 指标类型来表示服务的请求数、已完成的任务数、错误发生的次数等。需要使用counter绘图或做任何事之前，通常要借助rate(), irate()或 increase() 函数来查看它的rate（速率）。以下先介绍两个函数：</p><h4 id="rate"><a href="#rate" class="headerlink" title="rate()"></a>rate()</h4><p>此函数计算整个采样周期内每秒的增长率。</p><p>例如：rate(http_requests_total[5m]) 得出的是HTTP在5分钟窗口内，平均每秒的请求率。作为最常见的函数，它以可预测的每秒输出单位产生平滑的rate。</p><h4 id="手动计算rate"><a href="#手动计算rate" class="headerlink" title="手动计算rate"></a>手动计算rate</h4><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs dns">$ node_time_seconds[<span class="hljs-number">1m</span>]<br>node_time_seconds&#123;instance=&quot;exporter:<span class="hljs-number">9100</span>&quot;,job=&quot;node-resources&quot;&#125;<br><span class="hljs-number">1596077182</span>.<span class="hljs-number">3093214</span> @<span class="hljs-number">1596077182</span>.<span class="hljs-number">307</span> // 第一个点<br><span class="hljs-number">1596077192</span>.<span class="hljs-number">3132203</span> @<span class="hljs-number">1596077192</span>.<span class="hljs-number">307</span><br><span class="hljs-number">1596077202</span>.<span class="hljs-number">311446</span> @<span class="hljs-number">1596077202</span>.<span class="hljs-number">307</span><br><span class="hljs-number">1596077212</span>.<span class="hljs-number">309673</span> @<span class="hljs-number">1596077212</span>.<span class="hljs-number">307</span><br><span class="hljs-number">1596077222</span>.<span class="hljs-number">316771</span> @<span class="hljs-number">1596077222</span>.<span class="hljs-number">307</span><br><span class="hljs-number">1596077232</span>.<span class="hljs-number">3151288</span> @<span class="hljs-number">1596077232</span>.<span class="hljs-number">307</span> // 最后一个点<br>node_time_seconds&#123;instance=&quot;<span class="hljs-number">10.0.23.29</span>:<span class="hljs-number">9100</span>&quot;,job=&quot;node-resources&quot;&#125;<br><span class="hljs-number">1596077178</span>.<span class="hljs-number">6314309</span> @<span class="hljs-number">1596077178</span>.<span class="hljs-number">633</span>  // 第一个点<br><span class="hljs-number">1596077188</span>.<span class="hljs-number">6312084</span> @<span class="hljs-number">1596077188</span>.<span class="hljs-number">633</span><br><span class="hljs-number">1596077198</span>.<span class="hljs-number">633293</span> @<span class="hljs-number">1596077198</span>.<span class="hljs-number">634</span><br><span class="hljs-number">1596077208</span>.<span class="hljs-number">6332283</span> @<span class="hljs-number">1596077208</span>.<span class="hljs-number">634</span><br><span class="hljs-number">1596077218</span>.<span class="hljs-number">6320524</span> @<span class="hljs-number">1596077218</span>.<span class="hljs-number">633</span><br><span class="hljs-number">1596077228</span>.<span class="hljs-number">635078</span> @<span class="hljs-number">1596077228</span>.<span class="hljs-number">633</span>  // 最后一个点<br><br>$ rate(node_time_seconds[<span class="hljs-number">1m</span>])<br>&#123;instance=&quot;exporter:<span class="hljs-number">9100</span>&quot;,job=&quot;node-resources&quot;&#125;    <span class="hljs-number">1</span>.<span class="hljs-number">0001161479949952</span><br>&#123;instance=&quot;<span class="hljs-number">10.0.23.29</span>:<span class="hljs-number">9100</span>&quot;,job=&quot;node-resources&quot;&#125;  <span class="hljs-number">1</span>.<span class="hljs-number">0000729417800902</span><br></code></pre></td></tr></table></figure><p>计算公式</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs abnf">最后一个点  -  第一个点  <span class="hljs-operator">=</span> vulue<br>最后一个时间戳  -  第一个时间戳 <span class="hljs-operator">=</span> time<br><br><span class="hljs-attribute">resultValue</span> <span class="hljs-operator">=</span> value / time<br></code></pre></td></tr></table></figure><p>先用<code>10.0.23.29</code>这个 instance 算</p><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs dns">(<span class="hljs-number">1596077228</span>.<span class="hljs-number">635078</span> - <span class="hljs-number">1596077178</span>.<span class="hljs-number">6314309</span>) / (<span class="hljs-number">1596077228</span>.<span class="hljs-number">633</span> - <span class="hljs-number">1596077178</span>.<span class="hljs-number">633</span>)<br>// web上的时间是秒数的，go的time是多了三个单位，所以代码里/<span class="hljs-number">1000</span>转换成秒这里不需要除以<span class="hljs-number">1000</span><br>上面式子左边和右边算是下面结果:<br><span class="hljs-number">50</span>.<span class="hljs-number">003647089</span>  / <span class="hljs-number">50</span>  =  <span class="hljs-number">1</span>.<span class="hljs-number">00007294178</span><br></code></pre></td></tr></table></figure><p>谷歌搜的在线计算器算的(比windows的calc精度高一些)，由于是float64，所以精度丢失了一些。结果一样。再算下另一个 instance</p><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs dns">(<span class="hljs-number">1596077232</span>.<span class="hljs-number">3151288</span> - <span class="hljs-number">1596077182</span>.<span class="hljs-number">3093214</span>) / (<span class="hljs-number">1596077232</span>.<span class="hljs-number">307</span> - <span class="hljs-number">1596077182</span>.<span class="hljs-number">307</span>)<br> <span class="hljs-number">50</span>.<span class="hljs-number">0058073997</span>  /  <span class="hljs-number">50</span> = <span class="hljs-number">1</span>.<span class="hljs-number">00011614799</span><br></code></pre></td></tr></table></figure><h4 id="irate"><a href="#irate" class="headerlink" title="irate()"></a>irate()</h4><p>即 “瞬时rate”，此函数和rate()一样，计算每秒的增长率，但只对规定采样周期内的最后两个样本进行计算，而忽略前面所有样本。</p><p>例如：irate(http_requests_total[5m]) 选取规定5分钟窗口内的最后两个样本，并计算两者之间每秒的增长率。如果想让一个放大的图形显示出对rate变化的快速响应，那这个函数就很有用，它呈现的结果会比rate()的有更多的峰值。</p><h4 id="手动计算irate"><a href="#手动计算irate" class="headerlink" title="手动计算irate"></a>手动计算irate</h4><p>流程图<br><img src="/images/Prometheus-PromQL-5.png" alt="Prometheus-PromQL-5"></p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs routeros">$ process_cpu_seconds_total[1m]<br>process_cpu_seconds_total&#123;<span class="hljs-attribute">app</span>=<span class="hljs-string">&quot;spring-boot&quot;</span>, <span class="hljs-attribute">instance</span>=<span class="hljs-string">&quot;192.168.28.13:9100&quot;</span>, <span class="hljs-attribute">job</span>=<span class="hljs-string">&quot;consul-node-exporter&quot;</span>, <span class="hljs-attribute">project</span>=<span class="hljs-string">&quot;bigdata&quot;</span>, <span class="hljs-attribute">team</span>=<span class="hljs-string">&quot;appgroup&quot;</span>&#125;<br>46.26 @1622430320.268<br>46.42 @1622430335.267<br>46.53 @1622430350.268   # end1  time1<br>46.65 @1622430365.266   # end2  time2<br><br>$ irate(process_cpu_seconds_total[1m])<br>&#123;<span class="hljs-attribute">app</span>=<span class="hljs-string">&quot;spring-boot&quot;</span>, <span class="hljs-attribute">instance</span>=<span class="hljs-string">&quot;192.168.28.13:9100&quot;</span>, <span class="hljs-attribute">job</span>=<span class="hljs-string">&quot;consul-node-exporter&quot;</span>, <span class="hljs-attribute">project</span>=<span class="hljs-string">&quot;bigdata&quot;</span>, <span class="hljs-attribute">team</span>=<span class="hljs-string">&quot;appgroup&quot;</span>&#125;  0.008001066808907685<br></code></pre></td></tr></table></figure><p>计算公式：选取时间范围内最后两个点：end1,end2</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs abnf"><span class="hljs-attribute">value</span> <span class="hljs-operator">=</span> end2 - end1<br><span class="hljs-attribute">time</span> <span class="hljs-operator">=</span> time2 - time1<br><span class="hljs-attribute">resultValue</span> <span class="hljs-operator">=</span> value / time<br></code></pre></td></tr></table></figure><p>计算结果如下</p><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs dns">(<span class="hljs-number">46</span>.<span class="hljs-number">65</span>  - <span class="hljs-number">46</span>.<span class="hljs-number">53</span> ) / (<span class="hljs-number">1622430365</span>.<span class="hljs-number">266</span> - <span class="hljs-number">1622430350</span>.<span class="hljs-number">268</span>)<br><span class="hljs-number">0</span>.<span class="hljs-number">12</span> / <span class="hljs-number">14</span>.<span class="hljs-number">998</span>  =  <span class="hljs-number">0</span>.<span class="hljs-number">008001066808907855</span><br></code></pre></td></tr></table></figure><h4 id="即时向量选择器"><a href="#即时向量选择器" class="headerlink" title="即时向量选择器"></a>即时向量选择器</h4><p>即时向量选择器由两部分组成;</p><ul><li>指标名称:用于限定特定指标下的时间序列，即负责过滤指标;可选;</li><li>匹配器(Matcher):或称为标签选择器，用于过滤时间序列上的标签;定义在{}之中; 可选;</li></ul><p>显然，定义即时向量选择器时，以上两个部分应该至少给出一个;于是，这将存在以下三种组合;</p><ul><li>仅给定指标名称，或在标签名称上使用了空值的匹配器:返回给定的指标下的所有时间 序列各自的即时样本;<ul><li>例如，<code>http_requests_total</code>和<code>http_requests_total&#123;&#125;</code>的功能相同，都是用于返回<code>http_requests_total</code>指标下 各时间序列的即时样本;</li></ul></li><li>仅给定匹配器:返回所有符合给定的匹配器的所有时间序列上的即时样本; <ul><li>注意:这些时间序列可能会有着不同的指标名称;</li><li>例如， <code>&#123;team=~&quot;.*&quot;,project=&quot;docker-service&quot;&#125;</code></li></ul></li><li>指标名称和匹配器的组合:返回给定的指标下的，且符合给定的标签过滤器的所有时间序列上的即时样本;<ul><li>例如， <code>http_requests_total&#123;method=&quot;get&quot;&#125;</code></li></ul></li></ul><p>合法的PromQL表达式</p><figure class="highlight nim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs nim">http_request_total        <span class="hljs-comment"># 合法</span><br>http_request_total&#123;&#125;      <span class="hljs-comment"># 合法</span><br>&#123;<span class="hljs-keyword">method</span>=<span class="hljs-string">&quot;get&quot;</span>&#125;            <span class="hljs-comment"># 合法</span><br>&#123;job=~<span class="hljs-string">&quot;.+&quot;</span>&#125;               <span class="hljs-comment"># 合法  因为它们都有一个不匹配空标签值的选择器</span><br>&#123;job=~<span class="hljs-string">&quot;.*&quot;</span>,<span class="hljs-keyword">method</span>=<span class="hljs-string">&quot;get&quot;</span>&#125;  <span class="hljs-comment"># 合法  因为它们都有一个不匹配空标签值的选择器</span><br></code></pre></td></tr></table></figure><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript">&#123;job=~<span class="hljs-string">&quot;.*&quot;</span>&#125;               <span class="hljs-comment"># 不合法</span><br></code></pre></td></tr></table></figure><p>标签匹配器也可以通过与内部<code>__name__</code>标签匹配来应用于指标名称 。例如，表达式<code>http_requests_total</code>等效于 <code>&#123;__name__=&quot;http_requests_total&quot;&#125;</code>。除了 <code> =、!=、=~、!~</code> 也可以使用以下表达式选择名称以job开头的所有指标：</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs 1c">&#123;__name__=<span class="hljs-symbol">~&quot;job</span>:.*<span class="hljs-string">&quot;&#125;</span><br></code></pre></td></tr></table></figure><p>指标名称不能是关键字bool, on, ignored, group_left和group_right中的一个。以下表达式是非法的:</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs applescript"><span class="hljs-keyword">on</span>&#123;&#125;               <span class="hljs-comment"># 不合法</span><br>&#123;__name__=<span class="hljs-string">&quot;on&quot;</span>&#125;    <span class="hljs-comment"># 合法</span><br></code></pre></td></tr></table></figure><h4 id="匹配器-Matcher"><a href="#匹配器-Matcher" class="headerlink" title="匹配器(Matcher)"></a>匹配器(Matcher)</h4><p>匹配器用于定义标签过滤条件，目前支持如下4种匹配操作符; </p><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs excel">=<span class="hljs-symbol">:</span> 精确地匹配标签给定的值<br>!=<span class="hljs-symbol">:</span> 不等于给定的标签值<br>=~<span class="hljs-symbol">:</span> 正则表达匹配给定的标签值（注意是完全匹配）<br>!~<span class="hljs-symbol">:</span> 给定的标签值不符合正则表达式<br></code></pre></td></tr></table></figure><p>注意事项</p><ul><li>匹配到空标签值的匹配器时，所有未定义该标签的时间序列同样符合条件;<ul><li>例如，我们并没有给某个时间序列设置 <code>env</code> 标签但是我们使用 <code>http_requests_total&#123;env=&quot;&quot;&#125;</code> 去匹配，则表示未使用该标签(env)的时间序列也符合条件，比如时间序列 <code>http_requests_total&#123;method=&quot;get&quot;&#125;</code> 也会被匹配到;</li></ul></li><li>正则表达式将执行完全锚定机制，它需要匹配指定的标签的整个值;<ul><li>例如，时间序列 <code>prom_http&#123;job=node_exporter&#125;</code> 使用表达式 <code>prom_http&#123;job=~&quot;node&quot;&#125;</code> 无法匹配，必须使用<code>&#123;job=~node.*&#125;</code> 才能匹配到。</li></ul></li><li>向量选择器至少要包含一个指标名称，或者至少有一个不会匹配到空字符串的匹配器; <ul><li>例如，<code>&#123;job=~&quot;&quot;&#125;</code>为非法的选择器;</li></ul></li><li>使用<code>__name__</code>做为标签名称，还能够对指标名称进行过滤;<ul><li>例如，<code>&#123;__name__=~&quot;http_requests_.*&quot;&#125;</code>能够匹配所有以 <code>http_requests_</code> 为前缀的所有指标</li></ul></li></ul><h4 id="范围向量选择器"><a href="#范围向量选择器" class="headerlink" title="范围向量选择器"></a>范围向量选择器</h4><p>同即时向量选择器的唯一不同之处在于，范围向量选择器需要在表达式后紧跟一个方括号<code>[ ]</code>来表达需在时间时序上返回的样本所处的时间范围;</p><ul><li>时间范围:以当前时间为基准时间点，指向过去一个特定的时间长度;例如[5m]便是指过去5分钟之内;</li></ul><p>时间格式:一个整数后紧跟一个时间单位，例如“5m”中的“m”即是时间单位 ;</p><ul><li>可用的时间单位有ms(毫秒)、s(秒)、m(分钟)、h(小时)、d(天)、w(周) 和y(年);</li><li>必须使用整数时间，且能够将多个不同级别的单位进行串联组合，以时间单位由大到小为顺序，例如1h30m，但不能使用1.5h;</li></ul><p>需要注意的是，范围向量选择器返回的是一定时间范围内的数据样本，虽然不同时间序列的数据抓取时间点相同，但它们的时间戳并不会严格对齐;</p><ul><li>多个Target上的数据抓取需要分散在抓取时间点前后一定的时间范围内(不会同时对所有target进行数据抓取，会分散开抓取数据)，以均衡 Prometheus Server的负载;</li><li>因而，Prometheus在趋势上准确，但并非绝对精准;</li></ul><h4 id="偏移量修改器"><a href="#偏移量修改器" class="headerlink" title="偏移量修改器"></a>偏移量修改器</h4><ul><li>默认情况下，即时向量选择器和范围向量选择器都以当前时间为基准时间点，而偏移量修改器能够修改该基准;</li><li>偏移量修改器的使用方法是紧跟在选择器表达式之后使用 <code>offset</code> 关键字指定 <ul><li><p><code>http_requests_total offset 5m</code>，表示获取以http_requests_total为指标名称的所有时间序列在过去5分钟之时的即时样本;<br><img src="/images/Prometheus-PromQL-6.png" alt="Prometheus-PromQL-6"></p></li><li><p><code>http_requests_total[5m] offset 30m</code>，表示获取距此刻30分钟之前的5分钟之内的所有样本;</p></li></ul></li></ul><p><img src="/images/Prometheus-PromQL-7.png" alt="Prometheus-PromQL-7"></p><h3 id="PromQL的指标类型"><a href="#PromQL的指标类型" class="headerlink" title="PromQL的指标类型"></a>PromQL的指标类型</h3><p>PromQL有四个指标类型，它们主要由Prometheus的客户端库使用</p><ul><li>Counter:计数器，单调递增，除非重置(例如服务器或进程重启);</li><li>Gauge:仪表盘，可增可减的数据;</li><li>Histogram:直方图，将时间范围内的数据划分成不同的时间段，并各自评估其样本个数及样本值之和，因而可计算出分位数;<ul><li>可用于分析因异常值而引起的平均值过大的问题;</li><li>分位数计算要使用专用的histogram_quantile函数;</li></ul></li><li>Summary:类似于Histogram，但客户端会直接计算并上报分位数;</li></ul><p>Prometheus Server并不使用类型信息，而是将所有数据展平为时间序列</p><p><img src="/images/Prometheus-PromQL-8.png" alt="Prometheus-PromQL-8"></p><h4 id="Counter和Gauge"><a href="#Counter和Gauge" class="headerlink" title="Counter和Gauge"></a>Counter和Gauge</h4><p>通常，Counter的总数并没有直接作用，而是需要借助于rate、topk、increase和irate 等函数来生成样本数据的变化状况(增长率);</p><ul><li>rate(http_requests_total[2h])，获取2小内，该指标下各时间序列上的http总请求数的增长速 率;</li><li>topk(3, http_requests_total)，获取该指标下http请求总数排名前3的时间序列; </li><li>irate(http_requests_total[2h])，高灵敏度函数，用于计算指标的瞬时速率;<ul><li>基于样本范围内的最后两个样本进行计算，相较于rate函数来说，irate更适用于短期时间范围内的 变化速率分析;</li></ul></li></ul><p>Gauge用于存储其值可增可减的指标的样本数据，常用于进行求和、取平均值、最小值、最大值等聚合计算;也会经常结合PromQL的predict_linear和delta函数使用;</p><ul><li>predict_linear(v range-vector, t, scalar)函数可以预测时间序列v在t秒后的值，它通过线性回归 的方式来预测样本数据的Gauge变化趋势;</li><li>delta(v range-vector)函数计算范围向量中每个时间序列元素的第一个值与最后一个值之差，从而展示不同时间点上的样本值的差值;<ul><li>delta(cpu_temp_celsius{host&#x3D;”web01.magedu.com”}[2h])，返回该服务器上的CPU温度与2小时之前的差异;</li></ul></li></ul><h4 id="Histogram和Summary"><a href="#Histogram和Summary" class="headerlink" title="Histogram和Summary"></a>Histogram和Summary</h4><p>对于Prometheus来说，Histogram会在一段时间范围内对数据进行采样(通常是请 求持续时长或响应大小等)，并将其计入可配置的bucket(存储桶)中<br>Histogram事先将特定测度可能的取值范围分隔为多个bucket，并通过对落入bucket内的观测值进行计数以及求和操作<br>与常规方式略有不同的是，Prometheus取值间隔的划分采用的是累积(Cumulative)区间间隔机制，即每个bucket中的样本均包含了其前面所有bucket中的样本，因而也称为累积直方图</p><ul><li>可降低Histogram的维护成本</li><li>支持粗略计算样本值的分位数</li><li>单独提供了_sum和_count指标，从而支持计算平均值</li></ul><p><img src="/images/Prometheus-PromQL-9.png" alt="Prometheus-PromQL-9"></p><p>根据上图假设我们想监控某个应用在一段时间内的响应时间，最后监控到的样本的响应时间范围为 0s~10s。现在我们将样本的值域划分为不同的区间，即不同的 bucket，每个 bucket 的宽度是 0.2s。那么第一个 bucket 表示响应时间小于等于 0.2s 的请求数量，第二个 bucket 表示响应时间小于等于 0.4s 的请求数量，以此类推。也就是说，每一个 bucket 的样本包含了之前所有 bucket 的样本，所以叫累积直方图。</p><h5 id="histogram例子"><a href="#histogram例子" class="headerlink" title="histogram例子"></a>histogram例子</h5><p><img src="/images/Prometheus-PromQL-10.png" alt="Prometheus-PromQL-10"></p><p>如上表，设置bucket&#x3D;[1,5,10]，当实际采样数据如是采样点所示, Observe表示采样点落在该bucket中的数量，即落在[-,1]的样本数为2，即落在[1,5]的样本数为3，即落在[5,10]的杨样本数为1，write是得到的最终结果（histogram的最终结果bucket计数是向下包含的）：</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs abnf">[basename]_bucket&#123;le<span class="hljs-operator">=</span>“<span class="hljs-number">1</span>”&#125; <span class="hljs-operator">=</span> <span class="hljs-number">2</span><br>[basename]_bucket&#123;le<span class="hljs-operator">=</span>“<span class="hljs-number">5</span>”&#125; <span class="hljs-operator">=</span> <span class="hljs-number">5</span><br>[basename]_bucket&#123;le<span class="hljs-operator">=</span>“<span class="hljs-number">10</span>”&#125; <span class="hljs-operator">=</span> <span class="hljs-number">6</span><br>[basename]_bucket&#123;le<span class="hljs-operator">=</span><span class="hljs-string">&quot;+Inf&quot;</span>&#125; <span class="hljs-operator">=</span> <span class="hljs-number">6</span><br>[basename]_count <span class="hljs-operator">=</span> <span class="hljs-number">6</span><br>[basename]_sum <span class="hljs-operator">=</span> <span class="hljs-number">18.8378745</span><br></code></pre></td></tr></table></figure><blockquote><p>histogram并不会保存数据采样点值，每个bucket只有个记录样本数的counter（float64），即histogram存储的是区间的样本数统计值，因此客户端性能开销相比 Counter 和 Gauge 而言没有明显改变，适合高并发的数据收集。</p></blockquote><p>Histogram 类型的样本会提供三种指标（假设指标名称为 <basename>）每个指标有一个基础指标名称<basename>，它会提供多个时间序列：</p><ul><li>样本的值分布在 bucket 中的数量，命名为 <code>&lt;basename&gt;_bucket&#123;le=&quot;&lt;上边界&gt;&quot;&#125;</code>。解释得更通俗易懂一点，这个值表示指标值小于等于上边界的所有样本数量。最大的上边界名称为 <code>&lt;basename&gt;_bucket&#123;le=&quot;+Inf&quot;&#125;</code>表示无穷大;</li></ul><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs accesslog">// 在总共<span class="hljs-number">2</span>次请求当中。http 请求响应时间 &lt;=<span class="hljs-number">0</span>.<span class="hljs-number">005</span> 秒 的请求次数为<span class="hljs-number">0</span><br> io_namespace_http_requests_latency_seconds_histogram_bucket&#123;path=<span class="hljs-string">&quot;/&quot;</span>,method=<span class="hljs-string">&quot;<span class="hljs-keyword">GET</span>&quot;</span>,code=<span class="hljs-string">&quot;200&quot;</span>,le=<span class="hljs-string">&quot;0.005&quot;</span>,&#125; <span class="hljs-number">0</span>.<span class="hljs-number">0</span><br> // 在总共<span class="hljs-number">2</span>次请求当中。http 请求响应时间 &lt;=<span class="hljs-number">0</span>.<span class="hljs-number">01</span> 秒 的请求次数为<span class="hljs-number">0</span><br> io_namespace_http_requests_latency_seconds_histogram_bucket&#123;path=<span class="hljs-string">&quot;/&quot;</span>,method=<span class="hljs-string">&quot;<span class="hljs-keyword">GET</span>&quot;</span>,code=<span class="hljs-string">&quot;200&quot;</span>,le=<span class="hljs-string">&quot;0.01&quot;</span>,&#125; <span class="hljs-number">0</span>.<span class="hljs-number">0</span><br> // 在总共<span class="hljs-number">2</span>次请求当中。http 请求响应时间 &lt;=<span class="hljs-number">0</span>.<span class="hljs-number">025</span> 秒 的请求次数为<span class="hljs-number">0</span><br> io_namespace_http_requests_latency_seconds_histogram_bucket&#123;path=<span class="hljs-string">&quot;/&quot;</span>,method=<span class="hljs-string">&quot;<span class="hljs-keyword">GET</span>&quot;</span>,code=<span class="hljs-string">&quot;200&quot;</span>,le=<span class="hljs-string">&quot;0.025&quot;</span>,&#125; <span class="hljs-number">0</span>.<span class="hljs-number">0</span><br> io_namespace_http_requests_latency_seconds_histogram_bucket&#123;path=<span class="hljs-string">&quot;/&quot;</span>,method=<span class="hljs-string">&quot;<span class="hljs-keyword">GET</span>&quot;</span>,code=<span class="hljs-string">&quot;200&quot;</span>,le=<span class="hljs-string">&quot;0.05&quot;</span>,&#125; <span class="hljs-number">0</span>.<span class="hljs-number">0</span><br> io_namespace_http_requests_latency_seconds_histogram_bucket&#123;path=<span class="hljs-string">&quot;/&quot;</span>,method=<span class="hljs-string">&quot;<span class="hljs-keyword">GET</span>&quot;</span>,code=<span class="hljs-string">&quot;200&quot;</span>,le=<span class="hljs-string">&quot;0.075&quot;</span>,&#125; <span class="hljs-number">0</span>.<span class="hljs-number">0</span><br> io_namespace_http_requests_latency_seconds_histogram_bucket&#123;path=<span class="hljs-string">&quot;/&quot;</span>,method=<span class="hljs-string">&quot;<span class="hljs-keyword">GET</span>&quot;</span>,code=<span class="hljs-string">&quot;200&quot;</span>,le=<span class="hljs-string">&quot;0.1&quot;</span>,&#125; <span class="hljs-number">0</span>.<span class="hljs-number">0</span><br> io_namespace_http_requests_latency_seconds_histogram_bucket&#123;path=<span class="hljs-string">&quot;/&quot;</span>,method=<span class="hljs-string">&quot;<span class="hljs-keyword">GET</span>&quot;</span>,code=<span class="hljs-string">&quot;200&quot;</span>,le=<span class="hljs-string">&quot;0.25&quot;</span>,&#125; <span class="hljs-number">0</span>.<span class="hljs-number">0</span><br> io_namespace_http_requests_latency_seconds_histogram_bucket&#123;path=<span class="hljs-string">&quot;/&quot;</span>,method=<span class="hljs-string">&quot;<span class="hljs-keyword">GET</span>&quot;</span>,code=<span class="hljs-string">&quot;200&quot;</span>,le=<span class="hljs-string">&quot;0.5&quot;</span>,&#125; <span class="hljs-number">0</span>.<span class="hljs-number">0</span><br> io_namespace_http_requests_latency_seconds_histogram_bucket&#123;path=<span class="hljs-string">&quot;/&quot;</span>,method=<span class="hljs-string">&quot;<span class="hljs-keyword">GET</span>&quot;</span>,code=<span class="hljs-string">&quot;200&quot;</span>,le=<span class="hljs-string">&quot;0.75&quot;</span>,&#125; <span class="hljs-number">0</span>.<span class="hljs-number">0</span><br> io_namespace_http_requests_latency_seconds_histogram_bucket&#123;path=<span class="hljs-string">&quot;/&quot;</span>,method=<span class="hljs-string">&quot;<span class="hljs-keyword">GET</span>&quot;</span>,code=<span class="hljs-string">&quot;200&quot;</span>,le=<span class="hljs-string">&quot;1.0&quot;</span>,&#125; <span class="hljs-number">0</span>.<span class="hljs-number">0</span><br> io_namespace_http_requests_latency_seconds_histogram_bucket&#123;path=<span class="hljs-string">&quot;/&quot;</span>,method=<span class="hljs-string">&quot;<span class="hljs-keyword">GET</span>&quot;</span>,code=<span class="hljs-string">&quot;200&quot;</span>,le=<span class="hljs-string">&quot;2.5&quot;</span>,&#125; <span class="hljs-number">0</span>.<span class="hljs-number">0</span><br> io_namespace_http_requests_latency_seconds_histogram_bucket&#123;path=<span class="hljs-string">&quot;/&quot;</span>,method=<span class="hljs-string">&quot;<span class="hljs-keyword">GET</span>&quot;</span>,code=<span class="hljs-string">&quot;200&quot;</span>,le=<span class="hljs-string">&quot;5.0&quot;</span>,&#125; <span class="hljs-number">0</span>.<span class="hljs-number">0</span><br> io_namespace_http_requests_latency_seconds_histogram_bucket&#123;path=<span class="hljs-string">&quot;/&quot;</span>,method=<span class="hljs-string">&quot;<span class="hljs-keyword">GET</span>&quot;</span>,code=<span class="hljs-string">&quot;200&quot;</span>,le=<span class="hljs-string">&quot;7.5&quot;</span>,&#125; <span class="hljs-number">2</span>.<span class="hljs-number">0</span><br> // 在总共<span class="hljs-number">2</span>次请求当中。http 请求响应时间 &lt;=<span class="hljs-number">10</span> 秒 的请求次数为 <span class="hljs-number">2</span><br> io_namespace_http_requests_latency_seconds_histogram_bucket&#123;path=<span class="hljs-string">&quot;/&quot;</span>,method=<span class="hljs-string">&quot;<span class="hljs-keyword">GET</span>&quot;</span>,code=<span class="hljs-string">&quot;200&quot;</span>,le=<span class="hljs-string">&quot;10.0&quot;</span>,&#125; <span class="hljs-number">2</span>.<span class="hljs-number">0</span><br> io_namespace_http_requests_latency_seconds_histogram_bucket&#123;path=<span class="hljs-string">&quot;/&quot;</span>,method=<span class="hljs-string">&quot;<span class="hljs-keyword">GET</span>&quot;</span>,code=<span class="hljs-string">&quot;200&quot;</span>,le=<span class="hljs-string">&quot;+Inf&quot;</span>,&#125; <span class="hljs-number">2</span>.<span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><ul><li>所有样本值的大小总和，命名为<code>&lt;basename&gt;_sum</code>。</li></ul><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs accesslog">// 实际含义：发生的<span class="hljs-number">2</span>次 http 请求总的响应时间为 <span class="hljs-number">13</span>.<span class="hljs-number">107670803000001</span> 秒<br>io_namespace_http_requests_latency_seconds_histogram_sum&#123;path=<span class="hljs-string">&quot;/&quot;</span>,method=<span class="hljs-string">&quot;<span class="hljs-keyword">GET</span>&quot;</span>,code=<span class="hljs-string">&quot;200&quot;</span>,&#125; <span class="hljs-number">13</span>.<span class="hljs-number">107670803000001</span><br></code></pre></td></tr></table></figure><ul><li>总的观测次数，命名为<code>&lt;basename&gt;_count</code>。值和 <code>&lt;basename&gt;_bucket&#123;le=&quot;+Inf&quot;&#125;</code>相同。</li></ul><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs accesslog">// 实际含义：当前一共发生了 <span class="hljs-number">2</span> 次 http 请求<br>io_namespace_http_requests_latency_seconds_histogram_count&#123;path=<span class="hljs-string">&quot;/&quot;</span>,method=<span class="hljs-string">&quot;<span class="hljs-keyword">GET</span>&quot;</span>,code=<span class="hljs-string">&quot;200&quot;</span>,&#125; <span class="hljs-number">2</span>.<span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><p>累积间隔机制生成的样本数据需要额外使用内置的<code>histogram_quantile()</code>函数即可根据Histogram指标来计算相应的分位数(quantile)，即某个bucket的样本数在所有样本数中占据的比例。分位数可能不太好理解，我举个例子，假设你要计算样本的 9 分位数（quantile&#x3D;0.9），即表示 90% 的样本的值。</p><ul><li>histogram_quantile()函数在计算分位数时会假定每个区间内的样本满足线性分布状态，因而它的结果仅是一个预估值，并不完全准确;</li><li>预估的准确度取决于bucket区间划分的粒度;粒度越大，准确度越低;</li></ul><h5 id="histogram计算方式"><a href="#histogram计算方式" class="headerlink" title="histogram计算方式"></a>histogram计算方式</h5><ul><li>其中 <code>bucket</code> 代表事先定义好的<code>bucket</code></li><li><code>upperBound</code>代表这个<code>bucket</code>的上限值</li><li><code>count</code> 代表这个小于等于这个<code>upperBound</code>的个数&#x2F;次数</li><li><code>workqueue_work_duration_seconds_bucket&#123;name=&quot;crd_openapi_controller&quot;,le=&quot;10&quot;&#125;</code> 65246</li><li>所以上述表达式含义为 <code>workqueue_work_duration_seconds</code> 小于10秒的有65246个</li></ul><p>我们现在有这些数据，然后求75分位值</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">a</span> <span class="hljs-string">:=</span> []<span class="hljs-string">bucket&#123;</span><br>    &#123;<span class="hljs-attr">upperBound:</span> <span class="hljs-number">0.05</span>, <span class="hljs-attr">count:</span> <span class="hljs-number">199881</span>&#125;<span class="hljs-string">,</span><br>    &#123;<span class="hljs-attr">upperBound:</span> <span class="hljs-number">0.1</span>, <span class="hljs-attr">count:</span> <span class="hljs-number">212210</span>&#125;<span class="hljs-string">,</span><br>    &#123;<span class="hljs-attr">upperBound:</span> <span class="hljs-number">0.2</span>, <span class="hljs-attr">count:</span> <span class="hljs-number">215395</span>&#125;<span class="hljs-string">,</span><br>    &#123;<span class="hljs-attr">upperBound:</span> <span class="hljs-number">0.4</span>, <span class="hljs-attr">count:</span> <span class="hljs-number">319435</span>&#125;<span class="hljs-string">,</span><br>    &#123;<span class="hljs-attr">upperBound:</span> <span class="hljs-number">0.8</span>, <span class="hljs-attr">count:</span> <span class="hljs-number">419576</span>&#125;<span class="hljs-string">,</span><br>    &#123;<span class="hljs-attr">upperBound:</span> <span class="hljs-number">1.6</span>, <span class="hljs-attr">count:</span> <span class="hljs-number">469593</span>&#125;<span class="hljs-string">,</span><br>    &#123;<span class="hljs-attr">upperBound:</span> <span class="hljs-string">math.Inf(1)</span>, <span class="hljs-attr">count:</span> <span class="hljs-number">519593</span>&#125;<span class="hljs-string">,</span><br><span class="hljs-string">&#125;</span><br><br><span class="hljs-string">q75</span> <span class="hljs-string">:=</span> <span class="hljs-string">bucketQuantile(0.75,</span> <span class="hljs-string">a)</span><br><br></code></pre></td></tr></table></figure><ul><li>其计算逻辑为：根据记录总数和分位值求目标落在第几个bucket段b</li><li>根据b得到起始bucket大小bucketStart,终止bucket大小bucketStart ，本bucket宽度 ，本bucket记录数。</li><li>根据本段记录数和分位值算出目标分位数在本bucket排行rank</li><li>最终的计算方式为分位值&#x3D;起始bucket大小+(本bucket宽度)*(目标分位数在本bucket排行&#x2F;本bucket记录数)</li><li>换成本例中： q75&#x3D;0.4+(0.8-0.4)*(70259.75&#x2F;100141) &#x3D; 0.6806432929569308</li></ul><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript"><span class="hljs-built_in">return</span> bucketStart + (bucketEnd-bucketStart)*(rank/<span class="hljs-built_in">count</span>)   最终的计算公式<br></code></pre></td></tr></table></figure><p>1、根据记录总数和分位值求目标落在第几个bucket段<br>519593 * 0.75 &#x3D; 389,694.75  (根据这个值我们可以判断他是在0.4和0.8之间的一个值，也就是落到了第四个bucket中)</p><p>2、根据本段记录数和分位值算出目标分位数在本bucket排行rank<br>389,694.75 - 319435 &#x3D; 70,259.75   (根据这个值可以算出75%他在第四个bucket中属于哪个位置)</p><p>3、最终的计算公式<br>0.4+(0.8-0.4)*(70259.75&#x2F;100141) &#x3D; 0.6806432929569308  (计算出来的最终结果就是75%的请求小于0.6806432929569308s)</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">2021</span>/<span class="hljs-number">02</span>/<span class="hljs-number">02</span> <span class="hljs-number">19</span>:<span class="hljs-number">08</span>:<span class="hljs-number">55</span> 记录总数 = <span class="hljs-number">519593</span><br><span class="hljs-attribute">2021</span>/<span class="hljs-number">02</span>/<span class="hljs-number">02</span> <span class="hljs-number">19</span>:<span class="hljs-number">08</span>:<span class="hljs-number">55</span> 目标落在第几个bucket段= <span class="hljs-number">4</span><br><span class="hljs-attribute">2021</span>/<span class="hljs-number">02</span>/<span class="hljs-number">02</span> <span class="hljs-number">19</span>:<span class="hljs-number">08</span>:<span class="hljs-number">55</span> 起始bucket大小= <span class="hljs-number">0</span>.<span class="hljs-number">4</span><br><span class="hljs-attribute">2021</span>/<span class="hljs-number">02</span>/<span class="hljs-number">02</span> <span class="hljs-number">19</span>:<span class="hljs-number">08</span>:<span class="hljs-number">55</span> 终止bucket大小= <span class="hljs-number">0</span>.<span class="hljs-number">8</span><br><span class="hljs-attribute">2021</span>/<span class="hljs-number">02</span>/<span class="hljs-number">02</span> <span class="hljs-number">19</span>:<span class="hljs-number">08</span>:<span class="hljs-number">55</span> 本bucket宽度= <span class="hljs-number">0</span>.<span class="hljs-number">4</span><br><span class="hljs-attribute">2021</span>/<span class="hljs-number">02</span>/<span class="hljs-number">02</span> <span class="hljs-number">19</span>:<span class="hljs-number">08</span>:<span class="hljs-number">55</span> 本bucket记录数= <span class="hljs-number">100141</span><br><span class="hljs-attribute">2021</span>/<span class="hljs-number">02</span>/<span class="hljs-number">02</span> <span class="hljs-number">19</span>:<span class="hljs-number">08</span>:<span class="hljs-number">55</span> 目标分位数在本bucket排行= <span class="hljs-number">70259</span>.<span class="hljs-number">75</span><br><span class="hljs-attribute">2021</span>/<span class="hljs-number">02</span>/<span class="hljs-number">02</span> <span class="hljs-number">19</span>:<span class="hljs-number">08</span>:<span class="hljs-number">55</span> 分位值=起始bucket大小+(本bucket宽度)*(目标分位数在本bucket排行/本bucket记录数)<br><span class="hljs-attribute">2021</span>/<span class="hljs-number">02</span>/<span class="hljs-number">02</span> <span class="hljs-number">19</span>:<span class="hljs-number">08</span>:<span class="hljs-number">55</span> <span class="hljs-number">0</span>.<span class="hljs-number">4</span>+(<span class="hljs-number">0</span>.<span class="hljs-number">8</span>-<span class="hljs-number">0</span>.<span class="hljs-number">4</span>)*(<span class="hljs-number">70259</span>.<span class="hljs-number">75</span>/<span class="hljs-number">100141</span>) = <span class="hljs-number">0</span>.<span class="hljs-number">6806432929569308</span><br></code></pre></td></tr></table></figure><h5 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h5><p>与 Histogram 类型类似，用于表示一段时间内的数据采样结果（通常是请求持续时间或响应大小等），但它直接存储了分位数（通过客户端计算，然后展示出来），而不是通过区间来计算。其中<code>φ</code>是分位点，其取值范围是<code>(0 ≤φ≤ 1)</code>;计数器类型指标;如下是几种典型的常用分位点;</p><ul><li>0、0.25、0.5、0.75和1几个分位点;</li><li>0.5、0.9和0.99几个分位点;</li><li>0.01、0.05、0.5、0.9和0.99几个分位点;</li></ul><p>Summary 类型的样本也会提供三种指标（假设指标名称为 ）：</p><ul><li>样本值的分位数分布情况，命名为 <code>&lt;basename&gt;&#123;quantile=&quot;&lt;φ&gt;&quot;&#125;</code>。</li></ul><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs accesslog">// 含义：这 <span class="hljs-number">12</span> 次 http 请求中有 <span class="hljs-number">50</span>% 的请求响应时间是 <span class="hljs-number">3</span>.052404983s<br>io_namespace_http_requests_latency_seconds_summary&#123;path=<span class="hljs-string">&quot;/&quot;</span>,method=<span class="hljs-string">&quot;<span class="hljs-keyword">GET</span>&quot;</span>,code=<span class="hljs-string">&quot;200&quot;</span>,quantile=<span class="hljs-string">&quot;0.5&quot;</span>,&#125; <span class="hljs-number">3</span>.<span class="hljs-number">052404983</span><br>// 含义：这 <span class="hljs-number">12</span> 次 http 请求中有 <span class="hljs-number">90</span>% 的请求响应时间是 <span class="hljs-number">8</span>.003261666s<br>io_namespace_http_requests_latency_seconds_summary&#123;path=<span class="hljs-string">&quot;/&quot;</span>,method=<span class="hljs-string">&quot;<span class="hljs-keyword">GET</span>&quot;</span>,code=<span class="hljs-string">&quot;200&quot;</span>,quantile=<span class="hljs-string">&quot;0.9&quot;</span>,&#125; <span class="hljs-number">8</span>.<span class="hljs-number">003261666</span><br></code></pre></td></tr></table></figure><ul><li>所有样本值的大小总和，命名为 <code>&lt;basename&gt;_sum</code>。</li></ul><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs accesslog">// 含义：这<span class="hljs-number">12</span>次 http 请求的总响应时间为 <span class="hljs-number">51</span>.029495508s<br>io_namespace_http_requests_latency_seconds_summary_sum&#123;path=<span class="hljs-string">&quot;/&quot;</span>,method=<span class="hljs-string">&quot;<span class="hljs-keyword">GET</span>&quot;</span>,code=<span class="hljs-string">&quot;200&quot;</span>,&#125; <span class="hljs-number">51</span>.<span class="hljs-number">029495508</span><br></code></pre></td></tr></table></figure><ul><li>样本总数，命名为 <code>&lt;basename&gt;_count</code>。</li></ul><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs accesslog">// 含义：当前一共发生了 <span class="hljs-number">12</span> 次 http 请求<br>io_namespace_http_requests_latency_seconds_summary_count&#123;path=<span class="hljs-string">&quot;/&quot;</span>,method=<span class="hljs-string">&quot;<span class="hljs-keyword">GET</span>&quot;</span>,code=<span class="hljs-string">&quot;200&quot;</span>,&#125; <span class="hljs-number">12</span>.<span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><p>根据前面分别对Summary和Histogram的描述，很显然Summary和Histogram计算quantile有很大的差别。另外，它们之间一个重要的区别在于，Summary对quantile的计算是在client端完成的，而Histogram对quantile的计算是在server端完成的</p><p>如果需要了解某个时间段内的请求的响应时间，则通常使用平均响应时间，但这样做无法体现数据的长尾效应。如，一个HTTP服务器的正常响应时间是30ms，但是有很少几次请求耗时3s，通过平均响应时间很难甄别长尾效应。这时候可以通过Histogram或者Summary展现。Histogram和Summary这两种指标类型在本质上是可以相互转化的。<br>在Summary中使用到了分位数，<code>φ</code>代表分位数，<code>0≤φ≤1</code>。例如，0.9分为数代表第90%位置上的数，0.95分位代表95%位置上的数。如Promethues_tsdb_wal_fsync_duration_seconds 指标为Promthues Server中WAL写入磁盘的同步时间：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-comment"># HELP prometheus_tsdb_wal_fsync_duration_seconds Duration of WAL fsync.</span><br><span class="hljs-comment"># TYPE prometheus_tsdb_wal_fsync_duration_seconds summary</span><br><span class="hljs-attribute">prometheus_tsdb_wal_fsync_duration_seconds</span>&#123;quantile=<span class="hljs-string">&quot;0.5&quot;</span>&#125; <span class="hljs-number">0</span>.<span class="hljs-number">012352463</span><br><span class="hljs-attribute">prometheus_tsdb_wal_fsync_duration_seconds</span>&#123;quantile=<span class="hljs-string">&quot;0.9&quot;</span>&#125; <span class="hljs-number">0</span>.<span class="hljs-number">014458005</span><br><span class="hljs-attribute">prometheus_tsdb_wal_fsync_duration_seconds</span>&#123;quantile=<span class="hljs-string">&quot;0.99&quot;</span>&#125; <span class="hljs-number">0</span>.<span class="hljs-number">017316173</span><br><span class="hljs-attribute">prometheus_tsdb_wal_fsync_duration_seconds_sum</span> <span class="hljs-number">2</span>.<span class="hljs-number">888716127000002</span><br><span class="hljs-attribute">prometheus_tsdb_wal_fsync_duration_seconds_count</span> <span class="hljs-number">216</span><br></code></pre></td></tr></table></figure><p>从而得出，当前Prometheus Server进行wal_fsync操作的总次数为216次，总共耗时2.888716127000002s。有50%的同步时间低于0.012352463s，有90%的同步时间低于0.014458005s。</p><p>现在可以总结一下 Histogram 与 Summary 的异同：</p><ul><li>它们都包含了 <code>&lt;basename&gt;_sum</code> 和 <code>&lt;basename&gt;_count</code> 指标</li><li>Histogram 需要通过 <code>&lt;basename&gt;_bucket</code> 来计算分位数，而 Summary 则直接存储了分位数的值。</li><li>Summary不支持sum或avg一类的聚合运算，而且其分位数由客户端计算并生成， Server端无法获取客户端未定义的分位数，而Histogram可通过PromQL任意定义，有着较好的灵活性;</li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Prometheus服务发现和重新打标</title>
    <link href="/2021/05/18/Prometheus-service-discovery-and-relabel-configs/"/>
    <url>/2021/05/18/Prometheus-service-discovery-and-relabel-configs/</url>
    
    <content type="html"><![CDATA[<h2 id="Prometheus为何要进行服务发现"><a href="#Prometheus为何要进行服务发现" class="headerlink" title="Prometheus为何要进行服务发现"></a>Prometheus为何要进行服务发现</h2><p>&amp;emsp;&amp;emsp;Prometheus Server的数据抓取工作于Pull模型，因而，它必需要事先知道各Target的位置，然后才能从相应的Exporter中抓取数据。对于小型的系统环境来说，通过static_configs指定各Target便能解决问题，这也是最简单的配置方法；对于中大型的系统环境或具有较强动态性的容器环境来说，每个容器都有可能是一个抓取端点他随时可能创建或删除，静态配置显然难以适用。因此，Prometheus为此专门设计了一组服务发现机制，以便于能够基于服务注册中心自动发现、检测、分类可被监控的各Target，以及更新发生了变动的Target。</p><h2 id="配置Prometheus实现自动服务发现"><a href="#配置Prometheus实现自动服务发现" class="headerlink" title="配置Prometheus实现自动服务发现"></a>配置Prometheus实现自动服务发现</h2><p>&amp;emsp;&amp;emsp;Prometheus支持多种服务发现机制，具体自己需要使用哪种发现机制请查看官方网站，本文将根据本公司业务来讲解Prometheus结合consul来做服务发现和注册，这也是目前比较流行的一种做法。接下来，我们需要配置 Prometheus 来使用 Consul 自动服务发现。至于怎么安装consul请参考 <a href="https://system51.github.io/2020/12/25/consul-tls/">高可用的SSL consul cluster实践</a> 这里我就不在赘述了。注意：在注册到 Consul 时 <code>name</code> 字段可以相同，但是<code>id</code> 字段一定不能相同。</p><p><code>prometheus.yml</code> 配置如下：</p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs axapta">...<br>scrape_configs:<br>  - job_name: <span class="hljs-string">&#x27;prometheus&#x27;</span><br>    consul_sd_configs:<br>     - <span class="hljs-keyword">server</span>: <span class="hljs-string">&quot;192.168.28.10:8500&quot;</span><br>     - <span class="hljs-keyword">server</span>: <span class="hljs-string">&quot;192.168.28.11:8500&quot;</span><br>     - <span class="hljs-keyword">server</span>: <span class="hljs-string">&quot;192.168.28.12:8500&quot;</span><br>       datacenter: <span class="hljs-string">&#x27;dc1&#x27;</span><br>       services: []<br></code></pre></td></tr></table></figure><p>说明一下：这里需要使用 <code>consul_sd_configs</code> 来配置使用 Consul 服务发现类型，<code>server</code> 为 Consul 的服务地址, 配置完毕后重启 Prometheus 服务，此时可以通过 Prometheus UI 页面的 Targets 下查看是否配置成功。</p><p><img src="/images/Prometheus-config-2.png" alt="Prometheus-config-2"></p><p>通过consul的其中一个节点查看注册服务<br><img src="/images/Prometheus-config-3.png" alt="Prometheus-config-3"></p><p>可以看到，在 Targets 中能够成功的自动发现 Consul 中的 Services 信息，后期需要添加新的 Targets 时，只需要通过 API或JSON格式文件往 Consul 中注册服务即可，Prometheus 就能自动发现该服务，是不是很方便。</p><p>不过，我们会发现有如下几个问题：</p><ul><li>会发现 Prometheus 同时加载出来了默认服务 consul，这个是不需要的。</li><li>默认只显示 job 及 instance 两个标签，其他标签都默认属于 <code>before relabeling</code> 下，有些必要的服务信息，也想要在标签中展示，该如何操作呢？</li><li>如果需要自定义一些标签，例如 team、group、project 等关键分组信息，方便后边 <code>alertmanager</code> 进行告警规则匹配，该如何处理呢？</li><li>所有 Consul 中注册的 Service 都会默认加载到 Prometheus 下配置的 prometheus 组，如果有多种类型的 exporter，如何在 Prometheus 中配置分配给指定类型的组，方便直观的区别它们？</li></ul><p>以上问题，我们可以通过 Prometheus 配置中的 relabel_configs 参数来解决。</p><h2 id="配置-relabel-configs-实现自定义标签及分类"><a href="#配置-relabel-configs-实现自定义标签及分类" class="headerlink" title="配置 relabel_configs 实现自定义标签及分类"></a>配置 relabel_configs 实现自定义标签及分类</h2><p>&amp;emsp;&amp;emsp;Prometheus 加载 Targets 后，这些 Targets 会自动包含一些默认的标签，这里的标签分两类；如果使用consul做服务发现则Target包含如下标签：不同的服务发现机制为其target添加的元标签会有所不同; Prometheus 允许用户在指标抓取前，通过 <code>relabel_configs</code> 来对 Target 标签进行重新标记(relabel) 。 常用于实现两个功能，一、将来自服务发现的元数据标签中的信息附加到指标的标签上； 二、过滤目标，可以针对标签的某个值进行过滤(处理问题一将使用这个功能)</p><p>Consul元标签：</p><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs autohotkey">__met<span class="hljs-built_in">a_consul</span>_address<br>__met<span class="hljs-built_in">a_consul</span>_dc<br>__met<span class="hljs-built_in">a_consul</span>_health<br>__met<span class="hljs-built_in">a_consul</span>_metadata_&lt;key&gt;<br>__met<span class="hljs-built_in">a_consul</span>_node<br>__met<span class="hljs-built_in">a_consul</span>_service_address<br>__met<span class="hljs-built_in">a_consul</span>_service_id<br>__met<span class="hljs-built_in">a_consul</span>_service_metadata_&lt;key&gt;<br>__met<span class="hljs-built_in">a_consul</span>_service_port<br>__met<span class="hljs-built_in">a_consul</span>_service<br>__met<span class="hljs-built_in">a_consul</span>_tagged_address_&lt;key&gt;<br>__met<span class="hljs-built_in">a_consul</span>_tags<br></code></pre></td></tr></table></figure><p>Prometheus内置标签：</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc"><span class="hljs-emphasis">__address__</span><br><span class="hljs-emphasis">__metrics_path__</span><br><span class="hljs-emphasis">__scheme__</span><br></code></pre></td></tr></table></figure><p><img src="/images/Prometheus-config-4.png" alt="Prometheus-config-4"></p><p>在上图我们我可以看到 <code>Before relabeling</code> 是重新标记以前的，而 <code>Labels</code> 中是重新标记以后的。</p><p>默认<code>target</code>的<code>job</code>标签设置为配置文件里的<code>job_name</code>的值;<br><code>__address__</code>设置为配置里的targets的值;<br>而<code>instance</code>标签的值,是重定义标签操作之后<code>__address__</code>的值<br><code>__scheme__</code>和<code>__metrics_path__</code>标签的值,也是从配置里取值的;<br><code>__param_&lt;name&gt;</code>标签的值,是传给URL的查询参数<code>&lt;name&gt;</code>的值;</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">scrape_configs:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">job_name:</span> <span class="hljs-string">&#x27;job&#x27;</span>                           <span class="hljs-comment">#实例名称</span><br>    <span class="hljs-attr">static_configs:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">targets:</span> [<span class="hljs-string">&#x27;prometheus-server:9090&#x27;</span>]     <span class="hljs-comment">#监控主机ip</span><br>    <span class="hljs-attr">relabel_configs:</span>                          <span class="hljs-comment">#重新标记标签</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">source_labels:</span> [<span class="hljs-string">&#x27;job&#x27;</span>]                  <span class="hljs-comment">#源标签的名字</span><br>      <span class="hljs-attr">separator:</span> <span class="hljs-string">;</span>                            <span class="hljs-comment">#源标签的分隔符，当有多个源标签的值的时候默认使用`;`连接</span><br>      <span class="hljs-attr">regex:</span> <span class="hljs-string">(.*)</span>                             <span class="hljs-comment">#使用正则匹配元标签的值，.*表示匹配所有</span><br>      <span class="hljs-attr">action:</span> <span class="hljs-string">replace</span>                         <span class="hljs-comment">#动作，replace动作就是将原来标签的值传给新标签</span><br>      <span class="hljs-attr">replacement:</span> <span class="hljs-string">$1</span>                         <span class="hljs-comment">#将正则表达式匹配到的结果值引用给新标签</span><br>      <span class="hljs-attr">target_label:</span> <span class="hljs-string">idc</span>                       <span class="hljs-comment">#新标签的名称</span><br></code></pre></td></tr></table></figure><p>对 Target 重新打标是在数据抓取之前动态重写 Target 标签的强大工具，在配置中可以定义多个relabel步骤，它们将按照定义的顺序依次执行;重新标记完成后，该 Target 上以“__”开头的所有标签都会被移除;<br>详细 <code>relabel_configs</code> 配置及说明可以参考 <code>relabel_config</code> 官网说明，这里我简单列举一下里面每个 <code>relabel_action</code> 的作用，方便下边演示。</p><ul><li>replace: 根据 regex 的配置匹配 <code>source_labels</code> 标签的值（注意：source_label 中有多个元标签时，则他们的值会按照 <code>separator</code> 进行拼接），并且将匹配到的值写入到 <code>target_label</code> 当中，如果有多个匹配组，则可以使用 <code>$&#123;1&#125;</code>, <code>$&#123;2&#125;</code> 确定写入的内容。如果没匹配到任何内容则不对   <code>target_label</code> 进行重写， 默认为 <code>replace</code>。</li><li>keep: 丢弃 <code>source_labels</code> 的值中没有匹配到 <code>regex</code> 正则表达式内容的 Target 实例</li><li>drop: 丢弃 <code>source_labels</code> 的值中匹配到 <code>regex</code> 正则表达式内容的 Target 实例</li><li>hashmod: 将 <code>target_label</code> 设置为关联的 <code>source_label</code> 的哈希模块</li><li>labelmap: 根据 <code>regex</code> 去匹配 Target 实例所有标签的名称（注意是名称），并且将捕获到的内容作为为新的标签名称，<code>regex</code> 匹配到标签的的值作为新标签的值</li><li>labeldrop: 将 <code>regex</code> 对所有的标签名进行匹配判定，能够匹配到的标签将从该 Target 的标签集中删除;</li><li>labelkeep: 将 <code>regex</code> 对所有的标签名进行匹配判定，不能匹配到的标签将从该 Target 的标签集中删除;</li></ul><h3 id="示例："><a href="#示例：" class="headerlink" title="示例："></a>示例：</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-bullet">-</span> <span class="hljs-attr">job_name:</span> <span class="hljs-string">&#x27;node-exporter&#x27;</span><br>  <span class="hljs-attr">consul_sd_configs:</span><br>   <span class="hljs-bullet">-</span> <span class="hljs-attr">server:</span> <span class="hljs-string">&quot;192.168.28.10:8500&quot;</span><br>   <span class="hljs-bullet">-</span> <span class="hljs-attr">server:</span> <span class="hljs-string">&quot;192.168.28.11:8500&quot;</span><br>   <span class="hljs-bullet">-</span> <span class="hljs-attr">server:</span> <span class="hljs-string">&quot;192.168.28.12:8500&quot;</span><br>     <span class="hljs-attr">datacenter:</span> <span class="hljs-string">&#x27;dc1&#x27;</span><br>     <span class="hljs-attr">services:</span> []<br>  <span class="hljs-attr">relabel_configs:</span><br>   <span class="hljs-bullet">-</span> <span class="hljs-attr">source_labels:</span> [<span class="hljs-string">__meta_consul_service</span>]<br>     <span class="hljs-attr">regex:</span> <span class="hljs-string">&quot;.*node-exporter.*&quot;</span><br>     <span class="hljs-attr">action:</span> <span class="hljs-string">keep</span><br>   <span class="hljs-bullet">-</span> <span class="hljs-attr">source_labels:</span> [<span class="hljs-string">__scheme__</span>, <span class="hljs-string">__address__</span>, <span class="hljs-string">__metrics_path__</span>]<br>     <span class="hljs-attr">regex:</span> <span class="hljs-string">&quot;(http|https)(.*)&quot;</span>    <span class="hljs-comment"># 两个分组</span><br>     <span class="hljs-attr">separator:</span> <span class="hljs-string">&quot;&quot;</span><br>     <span class="hljs-attr">target_label:</span> <span class="hljs-string">&quot;endpoint&quot;</span><br>     <span class="hljs-attr">replacement:</span> <span class="hljs-string">&quot;$&#123;1&#125;://$&#123;2&#125;&quot;</span>   <span class="hljs-comment"># 引用两个分组</span><br>     <span class="hljs-attr">action:</span> <span class="hljs-string">replace</span><br></code></pre></td></tr></table></figure><p><img src="/images/Prometheus-config-20.png" alt="Prometheus-config-20"></p><p>当有多个源标签的值时如果不设置<code>separator</code>为空则每个源标签的值将使用<code>;</code>做连接<br><img src="/images/Prometheus-config-21.png" alt="Prometheus-config-21"></p><h2 id="处理上述问题"><a href="#处理上述问题" class="headerlink" title="处理上述问题"></a>处理上述问题</h2><p>问题一，首先我们鼠标指向labels下的某一个target的元标签时可以看到，使用consul做服务发现时会自动添加的元标签。细心的我们在查看consul注册进来的服务发现<code>__meta_consul_service</code>标签的值都是<code>consul</code>。那么我们可以配置 <code>relabel_configs</code> 来实现标签过滤，只加载符合规则的服务。<br><img src="/images/Prometheus-config-5.png" alt="Prometheus-config-5"></p><p>修改 prometheus.yml 配置如下：</p><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-attribute">scrape_configs</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">job_name: &#x27;prometheus&#x27;</span><br>    <span class="hljs-attribute">consul_sd_configs</span><span class="hljs-punctuation">:</span><br>     <span class="hljs-bullet">-</span> <span class="hljs-string">server: &quot;192.168.28.10:8500&quot;</span><br>     <span class="hljs-bullet">-</span> <span class="hljs-string">server: &quot;192.168.28.11:8500&quot;</span><br>     <span class="hljs-bullet">-</span> <span class="hljs-string">server: &quot;192.168.28.12:8500&quot;</span><br>       <span class="hljs-attribute">datacenter</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&#x27;dc1&#x27;</span><br>       <span class="hljs-attribute">services</span><span class="hljs-punctuation">:</span> <span class="hljs-string">[]</span><br>    <span class="hljs-attribute">relabel_configs</span><span class="hljs-punctuation">:</span><br>     <span class="hljs-bullet">-</span> <span class="hljs-string">source_labels: [__meta_consul_service]</span><br>       <span class="hljs-attribute">regex</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;consul&quot;</span><br>       <span class="hljs-attribute">action</span><span class="hljs-punctuation">:</span> <span class="hljs-string">drop</span><br></code></pre></td></tr></table></figure><p>解释下，这里的 <code>relabel_configs</code> 配置作用为如果元标签 <code>__meta_consul_service</code> 的值是 <code>consul</code> 的服务则丢弃，<code>__meta_consul_service</code> 的值对应到 <code>Consul</code> 服务中的值为<code>&quot;name&quot;:</code>字段,重启 Prometheus 可以看到现在只获取了 node-exporter-192.168.28.13 这个服务了。</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs 1c">&#123;<br>  <span class="hljs-string">&quot;service&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;id&quot;</span>: <span class="hljs-string">&quot;node-01&quot;</span>,<br>    <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;node-1&quot;</span>,           <span class="hljs-meta"># 注意：此值是可以在别的service中重复出现的</span><br>    <span class="hljs-string">&quot;tags&quot;</span>: [<span class="hljs-string">&quot;ngx_exporter&quot;</span>,<span class="hljs-string">&quot;prod&quot;</span>,<span class="hljs-string">&quot;xcws&quot;</span>,<span class="hljs-string">&quot;monitor&quot;</span>],<br>    <span class="hljs-string">&quot;address&quot;</span>: <span class="hljs-string">&quot;192.168.28.13&quot;</span>,<br>    <span class="hljs-string">&quot;port&quot;</span>: <span class="hljs-number">9100</span>,<br>    <span class="hljs-string">&quot;Meta&quot;</span>: &#123;<br>      <span class="hljs-string">&quot;app&quot;</span>: <span class="hljs-string">&quot;spring-boot&quot;</span>,<br>      <span class="hljs-string">&quot;team&quot;</span>: <span class="hljs-string">&quot;appgroup&quot;</span>,<br>      <span class="hljs-string">&quot;project&quot;</span>: <span class="hljs-string">&quot;bigdata&quot;</span><br>    &#125;,<br>    <span class="hljs-string">&quot;check&quot;</span>: &#123;<br>       <span class="hljs-string">&quot;id&quot;</span>: <span class="hljs-string">&quot;node-01&quot;</span>,<br>       <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;node-1&quot;</span>, <br>       <span class="hljs-string">&quot;http&quot;</span>: <span class="hljs-string">&quot;http://192.168.28.13:9100/metrics&quot;</span>,<br>       <span class="hljs-string">&quot;interval&quot;</span>: <span class="hljs-string">&quot;10s&quot;</span>,<br>       <span class="hljs-string">&quot;timeout&quot;</span>: <span class="hljs-string">&quot;1s&quot;</span><br>  &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/images/Prometheus-config-6.png" alt="Prometheus-config-6"></p><p>问题二和问题三可以归为一类，就是将系统默认标签或者用户自定义标签转换成可视化标签，方便查看及后续 <code>Alertmanager</code> 进行告警规则匹配分组。不过要实现给服务添加自定义标签，我们还得做一下修改，就是在注册服务时，将自定义标签信息添加到 <code>Meta Data</code> 数据中，下边来演示一下如何操作。</p><p>新建 <code>consul-0.json</code> 如下：</p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs prolog">&#123;<br>  <span class="hljs-string">&quot;service&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;id&quot;</span>: <span class="hljs-string">&quot;node-01&quot;</span>,<br>    <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;node-1&quot;</span>,<br>    <span class="hljs-string">&quot;tags&quot;</span>: [<span class="hljs-string">&quot;ngx_exporter&quot;</span>,<span class="hljs-string">&quot;prod&quot;</span>,<span class="hljs-string">&quot;xcws&quot;</span>,<span class="hljs-string">&quot;monitor&quot;</span>],<br>    <span class="hljs-string">&quot;address&quot;</span>: <span class="hljs-string">&quot;192.168.28.13&quot;</span>,<br>    <span class="hljs-string">&quot;port&quot;</span>: <span class="hljs-number">9100</span>,<br>    <span class="hljs-string">&quot;Meta&quot;</span>: &#123;<br>      <span class="hljs-string">&quot;app&quot;</span>: <span class="hljs-string">&quot;spring-boot&quot;</span>,<br>      <span class="hljs-string">&quot;team&quot;</span>: <span class="hljs-string">&quot;appgroup&quot;</span>,<br>      <span class="hljs-string">&quot;project&quot;</span>: <span class="hljs-string">&quot;bigdata&quot;</span><br>    &#125;,<br>    <span class="hljs-string">&quot;check&quot;</span>: &#123;<br>       <span class="hljs-string">&quot;id&quot;</span>: <span class="hljs-string">&quot;node-01&quot;</span>,<br>       <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;node-1&quot;</span>, <br>       <span class="hljs-string">&quot;http&quot;</span>: <span class="hljs-string">&quot;http://192.168.28.13:9100/metrics&quot;</span>,<br>       <span class="hljs-string">&quot;interval&quot;</span>: <span class="hljs-string">&quot;10s&quot;</span>,<br>       <span class="hljs-string">&quot;timeout&quot;</span>: <span class="hljs-string">&quot;1s&quot;</span><br>  &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>说明一下：该 Json 文件为要注册的服务信息，同时往 Meta 信息中添加了 <code>app=spring-boot</code>，<code>team=appgroup</code>，<code>project=bigdata</code> 三组标签，目的就是为了方便告警分组使用。</p><p>重启 Consul 服务后注册完毕，通过 Consul Web 管理页面可以查看到已注册成功，并且包含了 Meta 信息。</p><p><img src="/images/Prometheus-config-7.png" alt="Prometheus-config-7"></p><p>然后修改 <code>prometheus.yml</code> 配置如下：</p><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-attribute">scrape_configs</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">job_name: &#x27;prometheus&#x27;</span><br>    <span class="hljs-attribute">consul_sd_configs</span><span class="hljs-punctuation">:</span><br>     <span class="hljs-bullet">-</span> <span class="hljs-string">server: &quot;192.168.28.10:8500&quot;</span><br>     <span class="hljs-bullet">-</span> <span class="hljs-string">server: &quot;192.168.28.11:8500&quot;</span><br>     <span class="hljs-bullet">-</span> <span class="hljs-string">server: &quot;192.168.28.12:8500&quot;</span><br>       <span class="hljs-attribute">datacenter</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&#x27;dc1&#x27;</span><br>       <span class="hljs-attribute">services</span><span class="hljs-punctuation">:</span> <span class="hljs-string">[]</span><br>    <span class="hljs-attribute">relabel_configs</span><span class="hljs-punctuation">:</span><br>     <span class="hljs-bullet">-</span> <span class="hljs-string">source_labels: [__meta_consul_service]</span><br>       <span class="hljs-attribute">regex</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;consul&quot;</span><br>       <span class="hljs-attribute">action</span><span class="hljs-punctuation">:</span> <span class="hljs-string">drop</span><br>     <span class="hljs-bullet">-</span> <span class="hljs-string">regex: __meta_consul_service_metadata_(.+)</span><br>       <span class="hljs-attribute">replacement</span><span class="hljs-punctuation">:</span> <span class="hljs-string">$&#123;1&#125;</span><br>       <span class="hljs-attribute">action</span><span class="hljs-punctuation">:</span> <span class="hljs-string">labelmap</span><br></code></pre></td></tr></table></figure><p>解释一下，增加的配置作用为匹配 <code>__meta_consul_service_metadata_</code> 开头的标签，将捕获到的内容作为新的标签名称，匹配到标签的值作为新标签的值，而我们刚添加的三个自定义标签，系统会自动添加 <code>__meta_consul_service_metadata_app=spring-boot</code> 、<code>__meta_consul_service_metadata_team=appgroup</code>、<code>__meta_consul_service_metadata_project=bigdata</code> 三个标签，经过 relabel 后，Prometheus 将会新增 <code>app=spring-boot</code>、<code>team=appgroup</code>、<code>project=bigdata</code> 三个标签。重启 Prometheus 服务，可以看到新增了对应了三个自定义标签。</p><p><img src="/images/Prometheus-config-8.png" alt="Prometheus-config-8"></p><p>relabel示例之labelmap最简单示例</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-bullet">-</span> <span class="hljs-attr">job_name:</span> <span class="hljs-string">&#x27;nodes&#x27;</span> <span class="hljs-attr">file_sd_configs:</span><br>  <span class="hljs-attr">file_sd_configs:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">files:</span><br>    <span class="hljs-string">targets/prometheus/node*.yaml</span><br>  <span class="hljs-attr">relabel_configs:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">regex:</span> <span class="hljs-string">&quot;(job|app)&quot;</span><br>    <span class="hljs-attr">replacement:</span> <span class="hljs-string">$&#123;1&#125;_name</span><br>    <span class="hljs-attr">action:</span> <span class="hljs-string">labelmap</span><br></code></pre></td></tr></table></figure><p>生成的结果如下图所示(注意这里是配了的是标签名称<code>job</code>和<code>app</code>都是存在的)</p><p><img src="/images/Prometheus-config-10.png" alt="Prometheus-config-10"></p><p>relabel示例之labeldrop最简单示例</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-bullet">-</span> <span class="hljs-attr">job_name:</span> <span class="hljs-string">&#x27;nodes&#x27;</span> <span class="hljs-attr">file_sd_configs:</span><br>  <span class="hljs-attr">file_sd_configs:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">files:</span><br>    <span class="hljs-string">targets/prometheus/node*.yaml</span><br>  <span class="hljs-attr">relabel_configs:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">regex:</span> <span class="hljs-string">&quot;(job|app)&quot;</span><br>    <span class="hljs-attr">replacement:</span> <span class="hljs-string">$&#123;1&#125;_name</span><br>    <span class="hljs-attr">action:</span> <span class="hljs-string">labelmap</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">regex:</span> <span class="hljs-string">&quot;(app)&quot;</span><br>    <span class="hljs-attr">action:</span> <span class="hljs-string">labeldrop</span>  <br></code></pre></td></tr></table></figure><p>生成的结果如下图所示(删除标签为<code>app</code>的标签)<br><img src="/images/Prometheus-config-17.png" alt="Prometheus-config-17"></p><p>另外一种处理方式，可以看到上面的 <code>consul-0.json</code> 文件中定义了 <code>tags</code> 这个字段。我们也可以使用这里的 <code>tags</code> 的值来自定义标签。</p><p><img src="/images/Prometheus-config-9.png" alt="Prometheus-config-9"></p><p>修改 <code>prometheus.yml</code> 配置如下：</p><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-attribute">scrape_configs</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">job_name: &#x27;prometheus&#x27;</span><br>    <span class="hljs-attribute">consul_sd_configs</span><span class="hljs-punctuation">:</span><br>     <span class="hljs-bullet">-</span> <span class="hljs-string">server: &quot;192.168.28.10:8500&quot;</span><br>     <span class="hljs-bullet">-</span> <span class="hljs-string">server: &quot;192.168.28.11:8500&quot;</span><br>     <span class="hljs-bullet">-</span> <span class="hljs-string">server: &quot;192.168.28.12:8500&quot;</span><br>       <span class="hljs-attribute">datacenter</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&#x27;dc1&#x27;</span><br>       <span class="hljs-attribute">services</span><span class="hljs-punctuation">:</span> <span class="hljs-string">[]</span><br>    <span class="hljs-attribute">relabel_configs</span><span class="hljs-punctuation">:</span><br>     <span class="hljs-bullet">-</span> <span class="hljs-string">source_labels: [__meta_consul_service]</span><br>       <span class="hljs-attribute">regex</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;consul&quot;</span><br>       <span class="hljs-attribute">action</span><span class="hljs-punctuation">:</span> <span class="hljs-string">drop</span><br>     <span class="hljs-bullet">-</span> <span class="hljs-string">regex: __meta_consul_service_metadata_(.+)</span><br>       <span class="hljs-attribute">replacement</span><span class="hljs-punctuation">:</span> <span class="hljs-string">$&#123;1&#125;</span><br>       <span class="hljs-attribute">action</span><span class="hljs-punctuation">:</span> <span class="hljs-string">labelmap</span><br>     <span class="hljs-bullet">-</span> <span class="hljs-string">source_labels: [&quot;__meta_consul_tags&quot;]</span><br>       <span class="hljs-attribute">regex</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;,(.+),(.+),(.+),(.+),&quot;</span><br>       <span class="hljs-attribute">replacement</span><span class="hljs-punctuation">:</span> <span class="hljs-string">$1</span><br>       <span class="hljs-attribute">action</span><span class="hljs-punctuation">:</span> <span class="hljs-string">replace</span><br>       <span class="hljs-attribute">target_label</span><span class="hljs-punctuation">:</span> <span class="hljs-string">exporter_type</span><br>     <span class="hljs-bullet">-</span> <span class="hljs-string">source_labels: [&quot;__meta_consul_tags&quot;]</span><br>       <span class="hljs-attribute">regex</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;,(.+),(.+),(.+),(.+),&quot;</span><br>       <span class="hljs-attribute">replacement</span><span class="hljs-punctuation">:</span> <span class="hljs-string">$2</span><br>       <span class="hljs-attribute">action</span><span class="hljs-punctuation">:</span> <span class="hljs-string">replace</span><br>       <span class="hljs-attribute">target_label</span><span class="hljs-punctuation">:</span> <span class="hljs-string">env</span><br>     <span class="hljs-bullet">-</span> <span class="hljs-string">source_labels: [&quot;__meta_consul_tags&quot;]</span><br>       <span class="hljs-attribute">regex</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;,(.+),(.+),(.+),(.+),&quot;</span><br>       <span class="hljs-attribute">replacement</span><span class="hljs-punctuation">:</span> <span class="hljs-string">$3</span><br>       <span class="hljs-attribute">action</span><span class="hljs-punctuation">:</span> <span class="hljs-string">replace</span><br>       <span class="hljs-attribute">target_label</span><span class="hljs-punctuation">:</span> <span class="hljs-string">job</span><br>     <span class="hljs-bullet">-</span> <span class="hljs-string">source_labels: [&quot;__meta_consul_tags&quot;]</span><br>       <span class="hljs-attribute">regex</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;,(.+),(.+),(.+),(.+),&quot;</span><br>       <span class="hljs-attribute">replacement</span><span class="hljs-punctuation">:</span> <span class="hljs-string">$4</span><br>       <span class="hljs-attribute">action</span><span class="hljs-punctuation">:</span> <span class="hljs-string">replace</span><br>       <span class="hljs-attribute">target_label</span><span class="hljs-punctuation">:</span> <span class="hljs-string">platform</span><br></code></pre></td></tr></table></figure><p>解释一下，这里配置的 <code>__meta_consul_tags</code> 对应到 Consul 注册服务的 <code>Tags</code> 字段,使用 regex 去匹配将匹配到的结果分为4组，然后replacement可按需引用 regex 中的某个“分组”匹配到的值，并赋值给 <code>target_label</code> 标签。形成一个 <code>k=v</code> 格式。</p><p>问题四，将自动发现的服务进行分类，本质上跟上边的处理方式一致，可以通过服务 Tag 来进行匹配创建不同的类型 exporter 分组。通过给每个服务标记不同的 Tag，然后通过 <code>relabel_configs</code> 来进行匹配区分。我们来更新一下原有的<code>consul-0.json</code> 文件修改服务标签，同时注册一个其他类型 exporter 的服务如下：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs awk">&#123;<br>  <span class="hljs-string">&quot;service&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;id&quot;</span>: <span class="hljs-string">&quot;node-01&quot;</span>,<br>    <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;node-1&quot;</span>,<br>    <span class="hljs-string">&quot;tags&quot;</span>: [<span class="hljs-string">&quot;node-exporter&quot;</span>],         <span class="hljs-regexp">//</span>修改<br>    <span class="hljs-string">&quot;address&quot;</span>: <span class="hljs-string">&quot;192.168.28.13&quot;</span>,<br>    <span class="hljs-string">&quot;port&quot;</span>: <span class="hljs-number">9100</span>,<br>    <span class="hljs-string">&quot;Meta&quot;</span>: &#123;<br>      <span class="hljs-string">&quot;app&quot;</span>: <span class="hljs-string">&quot;spring-boot&quot;</span>,<br>      <span class="hljs-string">&quot;team&quot;</span>: <span class="hljs-string">&quot;appgroup&quot;</span>,<br>      <span class="hljs-string">&quot;project&quot;</span>: <span class="hljs-string">&quot;bigdata&quot;</span><br>    &#125;,<br>    <span class="hljs-string">&quot;check&quot;</span>: &#123;<br>       <span class="hljs-string">&quot;id&quot;</span>: <span class="hljs-string">&quot;node-01&quot;</span>,<br>       <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;node-1&quot;</span>, <br>       <span class="hljs-string">&quot;http&quot;</span>: <span class="hljs-string">&quot;http://192.168.28.13:9100/metrics&quot;</span>,<br>       <span class="hljs-string">&quot;interval&quot;</span>: <span class="hljs-string">&quot;10s&quot;</span>,<br>       <span class="hljs-string">&quot;timeout&quot;</span>: <span class="hljs-string">&quot;1s&quot;</span><br>  &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs awk">&#123;<br>  <span class="hljs-string">&quot;service&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;id&quot;</span>: <span class="hljs-string">&quot;cadvisor-exporter&quot;</span>,     <br>    <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;node-1&quot;</span>,<br>    <span class="hljs-string">&quot;tags&quot;</span>: [<span class="hljs-string">&quot;cadvisor-exporter&quot;</span>],      <span class="hljs-regexp">//</span>修改<br>    <span class="hljs-string">&quot;address&quot;</span>: <span class="hljs-string">&quot;192.168.28.13&quot;</span>,<br>    <span class="hljs-string">&quot;port&quot;</span>: <span class="hljs-number">8080</span>,<br>    <span class="hljs-string">&quot;Meta&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;app&quot;</span>: <span class="hljs-string">&quot;docker&quot;</span>,<br>    <span class="hljs-string">&quot;team&quot;</span>: <span class="hljs-string">&quot;cloudgroup&quot;</span>,<br>    <span class="hljs-string">&quot;project&quot;</span>: <span class="hljs-string">&quot;docker-service&quot;</span><br>    &#125;,<br>    <span class="hljs-string">&quot;check&quot;</span>: &#123;<br>       <span class="hljs-string">&quot;http&quot;</span>: <span class="hljs-string">&quot;http://192.168.28.13:8080/metrics&quot;</span>,<br>       <span class="hljs-string">&quot;interval&quot;</span>: <span class="hljs-string">&quot;10s&quot;</span>,<br>       <span class="hljs-string">&quot;timeout&quot;</span>: <span class="hljs-string">&quot;1s&quot;</span><br>  &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>说明一下，我们更新了原有 <code>consul-0.json</code> 文件中服务的标签为 node-exporter，同时注册一个新类型 cadvisor-exporter 服务，并设置标签为 <code>cadvisor-exporter</code>，以示区别。注册完毕，通过 <code>Consul Web</code> 控制台可以看到成功注册了这两个服务。这里需要说明一下，在上面的两个JSON文件中我们都使用的是同一个 <code>Name</code> 名字所以我们需要点进 <code>node-1</code> 这个 service 名字下才能看到两个服务</p><p><img src="/images/Prometheus-config-11.png" alt="Prometheus-config-11"></p><p>最后，我们修改 <code>prometheus.yml</code> 配置如下：</p><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-attribute">scrape_configs</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">job_name: &#x27;consul-node-exporter&#x27;</span><br>    <span class="hljs-attribute">consul_sd_configs</span><span class="hljs-punctuation">:</span><br>     <span class="hljs-bullet">-</span> <span class="hljs-string">server: &quot;192.168.28.10:8500&quot;</span><br>     <span class="hljs-bullet">-</span> <span class="hljs-string">server: &quot;192.168.28.11:8500&quot;</span><br>     <span class="hljs-bullet">-</span> <span class="hljs-string">server: &quot;192.168.28.12:8500&quot;</span><br>       <span class="hljs-attribute">datacenter</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&#x27;dc1&#x27;</span><br>       <span class="hljs-attribute">services</span><span class="hljs-punctuation">:</span> <span class="hljs-string">[]</span><br>    <span class="hljs-attribute">relabel_configs</span><span class="hljs-punctuation">:</span><br>     <span class="hljs-bullet">-</span> <span class="hljs-string">source_labels: [__meta_consul_tags]</span><br>       <span class="hljs-attribute">regex</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;.*node-exporter.*&quot;</span><br>       <span class="hljs-attribute">action</span><span class="hljs-punctuation">:</span> <span class="hljs-string">keep</span><br>     <span class="hljs-bullet">-</span> <span class="hljs-string">regex: __meta_consul_service_metadata_(.+)</span><br>       <span class="hljs-attribute">replacement</span><span class="hljs-punctuation">:</span> <span class="hljs-string">$&#123;1&#125;</span><br>       <span class="hljs-attribute">action</span><span class="hljs-punctuation">:</span> <span class="hljs-string">labelmap</span><br><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">job_name: &#x27;consul-cadvisor-exproter&#x27;</span><br>    <span class="hljs-attribute">consul_sd_configs</span><span class="hljs-punctuation">:</span><br>     <span class="hljs-bullet">-</span> <span class="hljs-string">server: &quot;192.168.28.10:8500&quot;</span><br>     <span class="hljs-bullet">-</span> <span class="hljs-string">server: &quot;192.168.28.11:8500&quot;</span><br>     <span class="hljs-bullet">-</span> <span class="hljs-string">server: &quot;192.168.28.12:8500&quot;</span><br>       <span class="hljs-attribute">datacenter</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&#x27;dc1&#x27;</span><br>       <span class="hljs-attribute">services</span><span class="hljs-punctuation">:</span> <span class="hljs-string">[]</span><br>    <span class="hljs-attribute">relabel_configs</span><span class="hljs-punctuation">:</span><br>     <span class="hljs-bullet">-</span> <span class="hljs-string">source_labels: [__meta_consul_tags]</span><br>       <span class="hljs-attribute">regex</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;.*cadvisor-exporter.*&quot;</span><br>       <span class="hljs-attribute">action</span><span class="hljs-punctuation">:</span> <span class="hljs-string">keep</span><br>     <span class="hljs-bullet">-</span> <span class="hljs-string">regex: __meta_consul_service_metadata_(.+)</span><br>       <span class="hljs-attribute">replacement</span><span class="hljs-punctuation">:</span> <span class="hljs-string">$&#123;1&#125;</span><br>       <span class="hljs-attribute">action</span><span class="hljs-punctuation">:</span> <span class="hljs-string">labelmap</span><br><br></code></pre></td></tr></table></figure><p>这里需要根据每种类型的 exporter 新增一个关联 job，同时 <code>relabel_configs</code> 中配置 <code>__meta_consul_tags</code> 以 Tag 来做匹配区分。这里的 <code>relabel_configs</code> 配置作用为丢弃元标签中 <code>__meta_consul_tags</code> 的值不包含 <code>node-exporter</code> 或 <code>cadvisor-exporter</code> 标签的服务，从上面的配置来看两个Job实现了互斥，从而实现过滤。重启 Prometheus 服务，可以看到服务已经按照类型分类了，方便查看。</p><p><img src="/images/Prometheus-config-12.png" alt="Prometheus-config-12"></p><h2 id="Prometheus黑盒监控"><a href="#Prometheus黑盒监控" class="headerlink" title="Prometheus黑盒监控"></a>Prometheus黑盒监控</h2><p>&amp;emsp;&amp;emsp;常规的各种exporter都是和需要监控的机器一起安装的,如果需要监控一些tcp端口和七层应用层的状态呢,这个时候就需要黑盒监控了,不需要安装在目标机器上即可从外部去监控。（如果想做到A访问B则需要在A机器上安装blackbox让A去请求B，而不是从某一个固定的机器去访问。这样做点对点监控） blackbox默认的http监听端口是9115，blackbox.yml的配置文件里有基础的https、http、dns、tcp、icmp配置，prober 定制配置出各种监测模块(module)，在prometheus server的配置文件里声明用哪个模块去探测哪个targets。</p><h3 id="安装配置blackbox-exporter"><a href="#安装配置blackbox-exporter" class="headerlink" title="安装配置blackbox_exporter"></a>安装配置blackbox_exporter</h3><p>下载blackbox_exporter</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">wget</span> https://github.com/prometheus/blackbox_exporter/releases/download/v0.<span class="hljs-number">19</span>.<span class="hljs-number">0</span>/blackbox_exporter-<span class="hljs-number">0</span>.<span class="hljs-number">19</span>.<span class="hljs-number">0</span>.linux-amd64.tar.gz<br><br><span class="hljs-attribute">tar</span> -zxv -f blackbox_exporter-<span class="hljs-number">0</span>.<span class="hljs-number">19</span>.<span class="hljs-number">0</span>.linux-amd64.tar.gz <br></code></pre></td></tr></table></figure><p>修改 <code>blackbox.yml</code> 配置文件：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">modules:</span><br>  <span class="hljs-attr">http_2xx:</span>           <span class="hljs-comment"># 模块名字,符合规则随便命名即可</span><br>    <span class="hljs-attr">prober:</span> <span class="hljs-string">http</span>      <span class="hljs-comment"># 探针类型</span><br>    <span class="hljs-attr">http:</span><br>      <span class="hljs-attr">valid_status_codes:</span> [<span class="hljs-number">200</span>,<span class="hljs-number">201</span>,<span class="hljs-number">202</span>,<span class="hljs-number">203</span>,<span class="hljs-number">204</span>,<span class="hljs-number">205</span>,<span class="hljs-number">206</span>,<span class="hljs-number">207</span>,<span class="hljs-number">300</span>,<span class="hljs-number">301</span>,<span class="hljs-number">302</span>,<span class="hljs-number">303</span>,<span class="hljs-number">304</span>,<span class="hljs-number">305</span>,<span class="hljs-number">306</span>,<span class="hljs-number">307</span>,<span class="hljs-number">405</span>]<br>  <span class="hljs-attr">http_post_2xx:</span><br>    <span class="hljs-attr">prober:</span> <span class="hljs-string">http</span><br>    <span class="hljs-attr">http:</span><br>      <span class="hljs-attr">method:</span> <span class="hljs-string">POST</span><br>  <span class="hljs-attr">tcp_connect:</span><br>    <span class="hljs-attr">prober:</span> <span class="hljs-string">tcp</span><br>  <span class="hljs-attr">pop3s_banner:</span><br>    <span class="hljs-attr">prober:</span> <span class="hljs-string">tcp</span><br>    <span class="hljs-attr">tcp:</span><br>      <span class="hljs-attr">query_response:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">expect:</span> <span class="hljs-string">&quot;^+OK&quot;</span><br>      <span class="hljs-attr">tls:</span> <span class="hljs-literal">true</span><br>      <span class="hljs-attr">tls_config:</span><br>        <span class="hljs-attr">insecure_skip_verify:</span> <span class="hljs-literal">false</span><br>  <span class="hljs-attr">ssh_banner:</span><br>    <span class="hljs-attr">prober:</span> <span class="hljs-string">tcp</span><br>    <span class="hljs-attr">tcp:</span><br>      <span class="hljs-attr">query_response:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">expect:</span> <span class="hljs-string">&quot;^SSH-2.0-&quot;</span><br>  <span class="hljs-attr">irc_banner:</span><br>    <span class="hljs-attr">prober:</span> <span class="hljs-string">tcp</span><br>    <span class="hljs-attr">tcp:</span><br>      <span class="hljs-attr">query_response:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">send:</span> <span class="hljs-string">&quot;NICK prober&quot;</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">send:</span> <span class="hljs-string">&quot;USER prober prober prober :prober&quot;</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">expect:</span> <span class="hljs-string">&quot;PING :([^ ]+)&quot;</span><br>        <span class="hljs-attr">send:</span> <span class="hljs-string">&quot;PONG $&#123;1&#125;&quot;</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">expect:</span> <span class="hljs-string">&quot;^:[^ ]+ 001&quot;</span><br>  <span class="hljs-attr">icmp:</span><br>    <span class="hljs-attr">prober:</span> <span class="hljs-string">icmp</span><br></code></pre></td></tr></table></figure><p>修改 <code>Prometheus.yml</code> 配置文件文件：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-bullet">-</span> <span class="hljs-attr">job_name:</span> <span class="hljs-string">&#x27;http_2xx&#x27;</span><br>  <span class="hljs-attr">consul_sd_configs:</span><br>   <span class="hljs-bullet">-</span> <span class="hljs-attr">server:</span> <span class="hljs-string">&quot;192.168.28.10:8500&quot;</span><br>   <span class="hljs-bullet">-</span> <span class="hljs-attr">server:</span> <span class="hljs-string">&quot;192.168.28.11:8500&quot;</span><br>   <span class="hljs-bullet">-</span> <span class="hljs-attr">server:</span> <span class="hljs-string">&quot;192.168.28.12:8500&quot;</span><br>     <span class="hljs-attr">datacenter:</span> <span class="hljs-string">&#x27;dc1&#x27;</span><br>     <span class="hljs-attr">services:</span> []<br>  <span class="hljs-attr">metrics_path:</span> <span class="hljs-string">/probe</span><br>  <span class="hljs-attr">params:</span><br>     <span class="hljs-attr">module:</span> [<span class="hljs-string">http_2xx</span>]        <span class="hljs-comment"># HTTP URL参数</span><br>  <span class="hljs-attr">relabel_configs:</span><br>   <span class="hljs-bullet">-</span> <span class="hljs-attr">source_labels:</span> [<span class="hljs-string">__meta_consul_service</span>]<br>     <span class="hljs-attr">regex:</span> <span class="hljs-string">&quot;http_2xx&quot;</span><br>     <span class="hljs-attr">action:</span> <span class="hljs-string">keep</span>       <br>   <span class="hljs-bullet">-</span> <span class="hljs-attr">source_labels:</span> [<span class="hljs-string">__meta_consul_service_address</span>]<br>     <span class="hljs-attr">target_label:</span> <span class="hljs-string">__param_target</span><br>   <span class="hljs-bullet">-</span> <span class="hljs-attr">source_labels:</span> [<span class="hljs-string">__param_target</span>]<br>     <span class="hljs-attr">target_label:</span> <span class="hljs-string">instance</span><br>   <span class="hljs-bullet">-</span> <span class="hljs-attr">target_label:</span> <span class="hljs-string">__address__</span><br>     <span class="hljs-attr">replacement:</span> <span class="hljs-number">192.168</span><span class="hljs-number">.28</span><span class="hljs-number">.10</span><span class="hljs-string">:9115</span><br></code></pre></td></tr></table></figure><p>解释：新创建一个Job名为 <code>http_2xx</code> 并设置仅抓取 <code>__meta_consul_service</code> 元标签中值为 <code>http_2xx</code> 的target，然后将元标签<code>__meta_consul_service_address</code>的值赋值给一个新的标签<code>__param_target</code> 其中最后变成<code>target=xxx.xxx.xxx.xxx</code>的格式（xxx为IP地址），然后在将<code>__param_target</code>的值重新写入给instance这个标签，这个标签原先已经有值了，所以这里会instance原来的值会被替换为<code>__param_target</code>的值。在然后<code>__address__</code>的值会被修改为<code>192.168.28.10:9115</code>这个IP。<code>我们需要注意的是标签存在则覆盖，标签不存在则创建</code></p><p><img src="/images/Prometheus-config-13.png" alt="Prometheus-config-13"></p><p>从下图可以看到实际在请求的是的是带入了一些参数<code>module=http_2xx&amp;target=www.baidu.com</code> 其中 <code>module=http_2xx</code> 是 <code>prometheus.yaml</code> 中配置的，而<code>target=www.baidu.com</code> 是<code>__param_target</code> 传入的。<br><img src="/images/Prometheus-config-16.png" alt="Prometheus-config-16"></p><p>注册服务到 Consul</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs autoit">[root<span class="hljs-symbol">@k8s</span>-n1 client]<span class="hljs-meta"># cat http_p2p.json </span><br>&#123;<br>  <span class="hljs-string">&quot;service&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;id&quot;</span>: <span class="hljs-string">&quot;test-http&quot;</span>,<br>    <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;http_2xx&quot;</span>,<br>    <span class="hljs-string">&quot;tags&quot;</span>: [<span class="hljs-string">&quot;blackbox_export&quot;</span>,<span class="hljs-string">&quot;prod&quot;</span>,<span class="hljs-string">&quot;xcws&quot;</span>,<span class="hljs-string">&quot;192.168.28.13:9115&quot;</span>,<span class="hljs-string">&quot;httpp2p&quot;</span>],<br>    <span class="hljs-string">&quot;address&quot;</span>: <span class="hljs-string">&quot;www.baidu.com&quot;</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/images/Prometheus-config-14.png" alt="Prometheus-config-14"></p><p>从上面的方式我们可以做到tcp端口和七层应用层监控，但是有一个问题。所有的请求都是从<code>192.168.28.10</code>这台安装了 <code>blackbox_exporter</code>主机发起的，如果我们想做点对点监控呢？那么我们需要在发起请求的主机上安装 <code>blackbox_exporter</code>。下面将讲解如何配置点对点监控，这里用到tag的方式来进行点对点监控，需要多注意看配置文件。</p><p>Consul注册文件：</p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs prolog">&#123;<br>  <span class="hljs-string">&quot;service&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;id&quot;</span>: <span class="hljs-string">&quot;test-http&quot;</span>,<br>    <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;http_2xx&quot;</span>,<br>    <span class="hljs-string">&quot;tags&quot;</span>: [<span class="hljs-string">&quot;blackbox_export&quot;</span>,<span class="hljs-string">&quot;prod&quot;</span>,<span class="hljs-string">&quot;xcws&quot;</span>,<span class="hljs-string">&quot;192.168.28.13:9115&quot;</span>,<span class="hljs-string">&quot;httpp2p&quot;</span>],<br>    <span class="hljs-string">&quot;address&quot;</span>: <span class="hljs-string">&quot;www.baidu.com&quot;</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>Prometheus配置文件：</p><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-bullet">-</span> <span class="hljs-string">job_name: &#x27;http_2xx&#x27;</span><br>  <span class="hljs-attribute">consul_sd_configs</span><span class="hljs-punctuation">:</span><br>   <span class="hljs-bullet">-</span> <span class="hljs-string">server: &quot;192.168.28.10:8500&quot;</span><br>   <span class="hljs-bullet">-</span> <span class="hljs-string">server: &quot;192.168.28.11:8500&quot;</span><br>   <span class="hljs-bullet">-</span> <span class="hljs-string">server: &quot;192.168.28.12:8500&quot;</span><br>     <span class="hljs-attribute">datacenter</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&#x27;dc1&#x27;</span><br>     <span class="hljs-attribute">services</span><span class="hljs-punctuation">:</span> <span class="hljs-string">[]</span><br>  <span class="hljs-attribute">metrics_path</span><span class="hljs-punctuation">:</span> <span class="hljs-string">/probe</span><br>  <span class="hljs-attribute">params</span><span class="hljs-punctuation">:</span><br>     <span class="hljs-attribute">module</span><span class="hljs-punctuation">:</span> <span class="hljs-string">[http_2xx]</span><br>  <span class="hljs-attribute">relabel_configs</span><span class="hljs-punctuation">:</span><br>   <span class="hljs-bullet">-</span> <span class="hljs-string">source_labels: [__meta_consul_service]</span><br>     <span class="hljs-attribute">regex</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;http_2xx&quot;</span><br>     <span class="hljs-attribute">action</span><span class="hljs-punctuation">:</span> <span class="hljs-string">keep</span><br>   <span class="hljs-bullet">-</span> <span class="hljs-string">source_labels: [__meta_consul_service_address]</span><br>     <span class="hljs-attribute">target_label</span><span class="hljs-punctuation">:</span> <span class="hljs-string">__param_target</span><br>   <span class="hljs-bullet">-</span> <span class="hljs-string">source_labels: [__param_target]</span><br>     <span class="hljs-attribute">target_label</span><span class="hljs-punctuation">:</span> <span class="hljs-string">instance</span><br>   <span class="hljs-bullet">-</span> <span class="hljs-string">source_labels: [__meta_consul_tags]</span><br>     <span class="hljs-attribute">regex</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;,(.+),(.+),(.+),(.+),(.+),&quot;</span><br>     <span class="hljs-attribute">action</span><span class="hljs-punctuation">:</span> <span class="hljs-string">replace</span><br>     <span class="hljs-attribute">replacement</span><span class="hljs-punctuation">:</span> <span class="hljs-string">$4</span><br>     <span class="hljs-attribute">target_label</span><span class="hljs-punctuation">:</span> <span class="hljs-string">__address__</span><br></code></pre></td></tr></table></figure><p>解释一下我们做了些什么工作，首先我们先在 <code>192.168.28.13</code> 上安装 <code>blackbox_exporter</code> 并修改 <code>blackbox.yml</code> 配置文件。从上面注册到 Consul 中的信息可以看到我们在 Tags 中添加了一个IP，然后我们在下面的Prometheus中去分组匹配，上面的tags中有5段，这里我们在Prometheus中也使用5个分组去匹配。我们可以看到 <code>192.168.28.13:9115</code> 属于第四段，所以我们在<code>replacement</code>中引用第四个分组。然后将结果赋值给新的标签<code>__address__</code>。</p><p><img src="/images/Prometheus-config-15.png" alt="Prometheus-config-15"></p><p>这样配置我们可以看到发送请求的地址是 <code>192.168.28.13</code> 这个IP，而不是像最上面那样从某一个固定的IP（192.168.28.10）发起的请求。如果我们需要在多个机器上实现这种点对点监控。请在所有的机器上都安装 <code>blackbox_exporter</code> 。</p><h2 id="对抓取到的metric重新打标"><a href="#对抓取到的metric重新打标" class="headerlink" title="对抓取到的metric重新打标"></a>对抓取到的metric重新打标</h2><p>对metric重新打标是在数据抓取之后动态重写metric标签的工具，在每个数据抓取配置中，可以定义多个metric relabel的步骤，它们将按照定义的顺序依次执；<code>metric_relabel_configs</code> 模块和 <code>relabel_config</code> 模块很相似。<code>metric_relabel_configs</code> 一个很常用的用途：将监控不需要的数据，直接丢掉，不在Prometheus 中保存。</p><h3 id="重新标记操作一般常见的情况"><a href="#重新标记操作一般常见的情况" class="headerlink" title="重新标记操作一般常见的情况"></a>重新标记操作一般常见的情况</h3><ul><li>删除不必要的指标。</li><li>从指标中删除敏感或不需要的标签。</li><li>添加、编辑或者修改指标的标签值或者标签格式。</li></ul><h3 id="一、删除不需要的指标-metric"><a href="#一、删除不需要的指标-metric" class="headerlink" title="一、删除不需要的指标(metric)"></a>一、删除不需要的指标(metric)</h3><p>Prometheus 默认会将所有拉取到的 metrics 都写入自己的存储中。如果某些 metrics 对我们并没有太多意义，可以设置直接丢掉，减少磁盘空间的浪费。例如删除 <code>go_info</code> 的指标数据。通过指标上元标签 <code>__name__</code> 引用指标名称，而后由 regex 进行匹配判定，可使用drop action删除匹配的指标，或使用keep action仅保留匹配的指标;</p><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-attribute">scrape_configs</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">job_name: &#x27;consul-node-exporter&#x27;</span><br>    <span class="hljs-attribute">consul_sd_configs</span><span class="hljs-punctuation">:</span><br>     <span class="hljs-bullet">-</span> <span class="hljs-string">server: &quot;192.168.28.10:8500&quot;</span><br>     <span class="hljs-bullet">-</span> <span class="hljs-string">server: &quot;192.168.28.11:8500&quot;</span><br>     <span class="hljs-bullet">-</span> <span class="hljs-string">server: &quot;192.168.28.12:8500&quot;</span><br>       <span class="hljs-attribute">datacenter</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&#x27;dc1&#x27;</span><br>       <span class="hljs-attribute">services</span><span class="hljs-punctuation">:</span> <span class="hljs-string">[]</span><br>    <span class="hljs-attribute">relabel_configs</span><span class="hljs-punctuation">:</span><br>     <span class="hljs-bullet">-</span> <span class="hljs-string">source_labels: [__meta_consul_tags]</span><br>       <span class="hljs-attribute">regex</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;.*node-exporter.*&quot;</span><br>       <span class="hljs-attribute">action</span><span class="hljs-punctuation">:</span> <span class="hljs-string">keep</span><br>    <span class="hljs-attribute">metric_relabel_configs</span><span class="hljs-punctuation">:</span><br>     <span class="hljs-bullet">-</span> <span class="hljs-string">source_labels: [ __name__ ]</span><br>       <span class="hljs-attribute">regex</span><span class="hljs-punctuation">:</span> <span class="hljs-string"> &quot;go_info&quot;</span><br>       <span class="hljs-attribute">action</span><span class="hljs-punctuation">:</span> <span class="hljs-string">drop</span><br><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">job_name: &#x27;consul-cadvisor-exproter&#x27;</span><br>    <span class="hljs-attribute">consul_sd_configs</span><span class="hljs-punctuation">:</span><br>     <span class="hljs-bullet">-</span> <span class="hljs-string">server: &quot;192.168.28.10:8500&quot;</span><br>     <span class="hljs-bullet">-</span> <span class="hljs-string">server: &quot;192.168.28.11:8500&quot;</span><br>     <span class="hljs-bullet">-</span> <span class="hljs-string">server: &quot;192.168.28.12:8500&quot;</span><br>       <span class="hljs-attribute">datacenter</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&#x27;dc1&#x27;</span><br>       <span class="hljs-attribute">services</span><span class="hljs-punctuation">:</span> <span class="hljs-string">[]</span><br>    <span class="hljs-attribute">relabel_configs</span><span class="hljs-punctuation">:</span><br>     <span class="hljs-bullet">-</span> <span class="hljs-string">source_labels: [__meta_consul_tags]</span><br>       <span class="hljs-attribute">regex</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;.*cadvisor-exporter.*&quot;</span><br>       <span class="hljs-attribute">action</span><span class="hljs-punctuation">:</span> <span class="hljs-string">keep</span><br>    <span class="hljs-attribute">metric_relabel_configs</span><span class="hljs-punctuation">:</span><br>     <span class="hljs-bullet">-</span> <span class="hljs-string">source_labels: [ __name__ ]</span><br>       <span class="hljs-attribute">regex</span><span class="hljs-punctuation">:</span> <span class="hljs-string"> &quot;go_info&quot;</span><br>       <span class="hljs-attribute">action</span><span class="hljs-punctuation">:</span> <span class="hljs-string">drop</span><br></code></pre></td></tr></table></figure><h4 id="metric-relabel示例之删除指标"><a href="#metric-relabel示例之删除指标" class="headerlink" title="metric relabel示例之删除指标"></a>metric relabel示例之删除指标</h4><p>下面的第一个图为执行go_info为前缀的指标删除之前的查询结果，而第二个图则是删除相关指标之后的查询结果;</p><ul><li>提示:若删除的指标此前曾由Prometheus抓取并存储过相关的样本数据，则删除操作的 需要经过一定的时长后才会反映至查询结果中;</li></ul><p><img src="/images/Prometheus-config-18.png" alt="Prometheus-config-18"></p><p><img src="/images/Prometheus-config-19.png" alt="Prometheus-config-19"></p><h3 id="二、修改指标-metric-中的标签-label"><a href="#二、修改指标-metric-中的标签-label" class="headerlink" title="二、修改指标(metric) 中的标签(label)"></a>二、修改指标(metric) 中的标签(label)</h3><p>如果我们使用 Prometheus 监控 Kubernetes 运行状态；应该会遇到，在一个 <code>query</code> 中结合一个以上的<code>job_name(metric_source)</code>的情况。 不同的<code> job_name</code> 中<code>metric</code>的<code>label</code>命名可能不相同。比如：pod的名称可以使用<code>pod</code>或者 <code>pod_name</code> 这两个 <code>label</code> 记录。如果相同含义的<code>label</code>，名称却不相同；对query的编写就很困难了。至少我没有在 <code>PromQL</code> 中找到类似 <code>SQL 语句中的 as 的功能的关键词和方法</code>。 这样的话，正确的解决思路应该是在 Prometheus 拉取数据后，保存数据前；将 label 的名称进行重写；保证相同含义的 label 有相同的名称。</p><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-attribute">metric_relabel_configs</span><span class="hljs-punctuation">:</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">source_labels: [pod]</span><br>  <span class="hljs-attribute">separator</span><span class="hljs-punctuation">:</span> <span class="hljs-string">;</span><br>  <span class="hljs-attribute">regex</span><span class="hljs-punctuation">:</span> <span class="hljs-string">(.+)</span><br>  <span class="hljs-attribute">target_label</span><span class="hljs-punctuation">:</span> <span class="hljs-string">pod_name</span><br>  <span class="hljs-attribute">replacement</span><span class="hljs-punctuation">:</span> <span class="hljs-string">$1</span><br>  <span class="hljs-attribute">action</span><span class="hljs-punctuation">:</span> <span class="hljs-string">replace</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">source_labels: [container]</span><br>  <span class="hljs-attribute">separator</span><span class="hljs-punctuation">:</span> <span class="hljs-string">;</span><br>  <span class="hljs-attribute">regex</span><span class="hljs-punctuation">:</span> <span class="hljs-string">(.+)</span><br>  <span class="hljs-attribute">target_label</span><span class="hljs-punctuation">:</span> <span class="hljs-string">container_name</span><br>  <span class="hljs-attribute">replacement</span><span class="hljs-punctuation">:</span> <span class="hljs-string">$1</span><br>  <span class="hljs-attribute">action</span><span class="hljs-punctuation">:</span> <span class="hljs-string">replace</span><br></code></pre></td></tr></table></figure><p>如上，将指定<code>job_name</code>中，所有的<code>metrics</code>中含有名为<code>pod</code>和<code>container</code>名称的<code>label</code>分别拷贝到名为<code>pod_name</code>，<code>container_name</code>的<code>label</code>中。 注意：如果<code>metric</code> 的 <code>label</code> 的名称包含了<code>pod</code>和<code>container</code>关键词，但是不等于；则不会处理此<code>label</code>。</p><h3 id="三、删除标签"><a href="#三、删除标签" class="headerlink" title="三、删除标签"></a>三、删除标签</h3><p>删除标签通常用于隐藏敏感信息或者简化时间序列。</p><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-attribute">metric_relabel_configs</span><span class="hljs-punctuation">:</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">regex: &#x27;kernelVersion&#x27;</span><br>  <span class="hljs-attribute">action</span><span class="hljs-punctuation">:</span> <span class="hljs-string">labeldrop</span><br></code></pre></td></tr></table></figure><p>为了删除标签，我们指定了一个正则表达式，然后指定删除标签的操作labeldrop。 这将删除与正在表达式匹配的所有标签。</p><h2 id="relabel-configs在Kubernetes中的一些用法"><a href="#relabel-configs在Kubernetes中的一些用法" class="headerlink" title="relabel_configs在Kubernetes中的一些用法"></a>relabel_configs在Kubernetes中的一些用法</h2><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-bullet">-</span> <span class="hljs-string">source_labels: [__meta_kubernetes_endpoint_address_target_kind, __meta_kubernetes_endpoint_address_target_name]</span><br>  <span class="hljs-attribute">separator</span><span class="hljs-punctuation">:</span> <span class="hljs-string">;</span><br>  <span class="hljs-attribute">regex</span><span class="hljs-punctuation">:</span> <span class="hljs-string">Node;(.*)</span><br>  <span class="hljs-attribute">target_label</span><span class="hljs-punctuation">:</span> <span class="hljs-string">node</span><br>  <span class="hljs-attribute">replacement</span><span class="hljs-punctuation">:</span> <span class="hljs-string">$&#123;1&#125;</span><br>  <span class="hljs-attribute">action</span><span class="hljs-punctuation">:</span> <span class="hljs-string">replace</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">source_labels: [__meta_kubernetes_endpoint_address_target_kind, __meta_kubernetes_endpoint_address_target_name]</span><br>  <span class="hljs-attribute">separator</span><span class="hljs-punctuation">:</span> <span class="hljs-string">;</span><br>  <span class="hljs-attribute">regex</span><span class="hljs-punctuation">:</span> <span class="hljs-string">Pod;(.*)</span><br>  <span class="hljs-attribute">target_label</span><span class="hljs-punctuation">:</span> <span class="hljs-string">pod</span><br>  <span class="hljs-attribute">replacement</span><span class="hljs-punctuation">:</span> <span class="hljs-string">$&#123;1&#125;</span><br>  <span class="hljs-attribute">action</span><span class="hljs-punctuation">:</span> <span class="hljs-string">replace</span><br></code></pre></td></tr></table></figure><p>当<code>__meta_kubernetes_endpoint_address_target_kind</code>值是Node的时候那么他将匹配到一个<code>relabel</code>，因为正则表达式里面已经写明了一个源标签的值是Node不然匹配不到</p><p><img src="/images/Prometheus-config-22.png" alt="Prometheus-config-22"></p><p>当<code>__meta_kubernetes_endpoint_address_target_kind</code>值是Pod的时候那么他将匹配到二个<code>relabel</code>，因为正则表达式里面已经写明了一个源标签的值是Pod不然匹配不到</p><p><img src="/images/Prometheus-config-23.png" alt="Prometheus-config-23"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>高可用的SSL consul cluster实践</title>
    <link href="/2020/12/25/consul-tls/"/>
    <url>/2020/12/25/consul-tls/</url>
    
    <content type="html"><![CDATA[<h2 id="Consul架构图"><a href="#Consul架构图" class="headerlink" title="Consul架构图"></a>Consul架构图</h2><p><img src="/images/consul-1.png" alt="consul-1"></p><p>首先Consul支持多数据中心，在上图中有两个DataCenter，他们通过Internet互联，同时请注意为了提高通信效率，只有Server节点才加入跨数据中心的通信。</p><p>在单个数据中心中，Consul分为Client和Server两种节点（所有的节点也被称为Agent），Server节点保存数据，Client负责健康检查及转发数据请求到Server；Server节点有一个Leader和多个Follower，Leader节点会将数据同步到Follower，Server的数量推荐是3个或者5个，在Leader挂掉的时候会启动选举机制产生一个新的Leader。</p><p>集群内的Consul节点通过gossip协议（流言协议）维护成员关系，也就是说某个节点了解集群内现在还有哪些节点，这些节点是Client还是Server。单个数据中心的流言协议同时使用TCP和UDP通信，并且都使用8301端口。跨数据中心的流言协议也同时使用TCP和UDP通信，端口使用8302。</p><p>集群内数据的读写请求既可以直接发到Server，也可以通过Client使用RPC转发到Server，请求最终会到达Leader节点，在允许数据轻微陈旧的情况下，读请求也可以在普通的Server节点完成，集群内数据的读写和复制都是通过TCP的8300端口完成。</p><h2 id="Consul服务发现原理"><a href="#Consul服务发现原理" class="headerlink" title="Consul服务发现原理"></a>Consul服务发现原理</h2><p>下面这张图是自己画的，基本描述了服务发现的完整流程，先大致看一下。</p><p><img src="/images/consul-2.png" alt="consul-2"></p><p>首先需要有一个正常的Consul集群，有Server，有Leader。这里在服务器Server1、Server2、Server3上分别部署了Consul Server，假设他们选举了Server2上的Consul Server节点为Leader。这些服务器上最好只部署Consul程序，以尽量维护Consul Server的稳定。</p><p>然后在服务器Server4和Server5上通过Consul Client分别注册Service A、B、C，这里每个Service分别部署在了两个服务器上，这样可以避免Service的单点问题。服务注册到Consul可以通过HTTP API（8500端口）的方式，也可以通过Consul配置文件的方式。Consul Client可以认为是无状态的，它将注册信息通过RPC转发到Consul Server，服务信息保存在Server的各个节点中，并且通过Raft实现了强一致性。</p><p>最后在服务器Server6中Program D需要访问Service B，这时候Program D首先访问本机Consul Client提供的HTTP API，本机Client会将请求转发到Consul Server，Consul Server查询到Service B当前的信息返回，最终Program D拿到了Service B的所有部署的IP和端口，然后就可以选择Service B的其中一个部署并向其发起请求了。如果服务发现采用的是DNS方式，则Program D中直接使用Service B的服务发现域名，域名解析请求首先到达本机DNS代理，然后转发到本机Consul Client，本机Client会将请求转发到Consul Server，Consul Server查询到Service B当前的信息返回，最终Program D拿到了Service B的某个部署的IP和端口。</p><h3 id="相关端口"><a href="#相关端口" class="headerlink" title="相关端口"></a>相关端口</h3><p>8300 – TCP agent server 使用的，用于处理其他agent发来的请求<br>8301 – TCP &amp; UDP agent使用此端口处理LAN中的gossip<br>8302 – TCP &amp; UDP agent server使用此端口处理WAN中的与其他server的gossip (-1 表示禁用)<br>8500 – TCP http API端口  (-1 表示禁用)<br>8501 – TCP https API端口  (-1 表示禁用)<br>8600 – TCP &amp; UDP dns解析  (-1 表示禁用)</p><h2 id="部署前准备"><a href="#部署前准备" class="headerlink" title="部署前准备"></a>部署前准备</h2><table><thead><tr><th align="center">IP</th><th align="center">nodeName</th><th align="center">CPU</th><th align="center">Memory</th><th align="center">role</th></tr></thead><tbody><tr><td align="center">10.15.1.46</td><td align="center">consul-server-1</td><td align="center">4</td><td align="center">8G</td><td align="center">server</td></tr><tr><td align="center">10.15.1.48</td><td align="center">consul-server-1</td><td align="center">4</td><td align="center">8G</td><td align="center">server</td></tr><tr><td align="center">10.15.1.49</td><td align="center">consul-server-1</td><td align="center">4</td><td align="center">8G</td><td align="center">server</td></tr><tr><td align="center">10.15.1.7</td><td align="center">consul-client-1</td><td align="center">4</td><td align="center">8G</td><td align="center">client</td></tr></tbody></table><h3 id="修改hosts文件"><a href="#修改hosts文件" class="headerlink" title="修改hosts文件"></a>修改hosts文件</h3><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs accesslog"><span class="hljs-number">10.15.1.46</span> consul-server-<span class="hljs-number">1</span><br><span class="hljs-number">10.15.1.48</span> consul-server-<span class="hljs-number">2</span><br><span class="hljs-number">10.15.1.49</span> consul-server-<span class="hljs-number">3</span><br><span class="hljs-number">10.15.1.7</span> consul-client-<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><h2 id="部署安装"><a href="#部署安装" class="headerlink" title="部署安装"></a>部署安装</h2><p>下载最新版本并解压</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">wget</span> https://releases.hashicorp.com/consul/<span class="hljs-number">1</span>.<span class="hljs-number">9</span>.<span class="hljs-number">0</span>/consul_1.<span class="hljs-number">9</span>.<span class="hljs-number">0</span>_linux_amd64.zip<br><span class="hljs-attribute">unzip</span> consul_1.<span class="hljs-number">9</span>.<span class="hljs-number">0</span>_linux_amd64.zip<br><span class="hljs-attribute">chown</span> root:root consul<br><span class="hljs-attribute">mv</span> consul /usr/bin/<br><span class="hljs-attribute">consul</span> --version<br></code></pre></td></tr></table></figure><p>设置tab自动补全</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">consul -autocomplete-install<br>complete -C <span class="hljs-regexp">/usr/</span>bin/consul consul<br></code></pre></td></tr></table></figure><p>创建一个无特权的系统用户来运行Consul并创建其数据目录。</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs gradle">useradd --system --home <span class="hljs-regexp">/etc/</span>consul.d --shell <span class="hljs-regexp">/bin/</span><span class="hljs-keyword">false</span> consul<br>mkdir -p <span class="hljs-regexp">/var/</span>lib/consul<br>chown -R consul:consul <span class="hljs-regexp">/var/</span>lib/consul<br></code></pre></td></tr></table></figure><h2 id="创建TLS证书"><a href="#创建TLS证书" class="headerlink" title="创建TLS证书"></a>创建TLS证书</h2><h3 id="step-1-创建ca"><a href="#step-1-创建ca" class="headerlink" title="step 1: 创建ca"></a>step 1: 创建ca</h3><p>为了简单起见，这里我使用Consul的内置TLS助手来创建基本的CA。您只需为数据中心创建一个CA。您应该在用于创建CA的同一服务器上生成所有证书。<br>ca默认五年，其他的证书默认1年，这里需要带参数-days&#x3D;设置长点的日期</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs abnf">consul tls ca create -days<span class="hljs-operator">=</span><span class="hljs-number">36500</span><br><span class="hljs-operator">=</span><span class="hljs-operator">=</span>&gt; Saved consul-agent-ca.pem<br><span class="hljs-operator">=</span><span class="hljs-operator">=</span>&gt; Saved consul-agent-ca-key.pem<br></code></pre></td></tr></table></figure><blockquote><ul><li>CA证书consul-agent-ca.pem包含验证Consul证书所需的公钥，因此必须分发给运行consul代理的每个节点。</li></ul></blockquote><ul><li>CA密钥，consul-agent-ca-key.pem将用于为Consul节点签署证书，并且必须保持私有。拥有此密钥，任何人都可以将Consul作为受信任的服务器运行，并访问所有Consul数据，包括ACL令牌。</li></ul><h3 id="step2-创建server角色的证书"><a href="#step2-创建server角色的证书" class="headerlink" title="step2: 创建server角色的证书"></a>step2: 创建server角色的证书</h3><p>这里数据中心默认名字为dc1，其他的自行选项赋值。在创建CA的同一台服务器上重复此过程，直到每台服务器都有一个单独的证书。该命令可以反复调用，它将自动增加证书和密钥号。您将需要将证书分发到服务器。<br>因为我有三个consul server，所以执行三次</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">$ consul tls cert <span class="hljs-keyword">create</span> -<span class="hljs-keyword">server</span> -dc=dc1 -days=<span class="hljs-number">36500</span><br>==&gt; <span class="hljs-built_in">WARNING</span>: <span class="hljs-keyword">Server</span> Certificates grants authority <span class="hljs-keyword">to</span> become a<br>    <span class="hljs-keyword">server</span> <span class="hljs-keyword">and</span> <span class="hljs-keyword">access</span> <span class="hljs-keyword">all</span> state <span class="hljs-keyword">in</span> the <span class="hljs-keyword">cluster</span> including root keys<br>    <span class="hljs-keyword">and</span> <span class="hljs-keyword">all</span> ACL tokens. <span class="hljs-keyword">Do</span> <span class="hljs-keyword">not</span> distribute them <span class="hljs-keyword">to</span> production hosts<br>    that are <span class="hljs-keyword">not</span> <span class="hljs-keyword">server</span> nodes. Store them <span class="hljs-keyword">as</span> securely <span class="hljs-keyword">as</span> CA keys.<br>==&gt; <span class="hljs-keyword">Using</span> consul-agent-ca.pem <span class="hljs-keyword">and</span> consul-agent-ca-key.pem<br>==&gt; Saved dc1-<span class="hljs-keyword">server</span>-consul<span class="hljs-number">-0.</span>pem<br>==&gt; Saved dc1-<span class="hljs-keyword">server</span>-consul<span class="hljs-number">-0</span>-key.pem<br>$ consul tls cert <span class="hljs-keyword">create</span> -<span class="hljs-keyword">server</span> -dc=dc1 -days=<span class="hljs-number">36500</span><br>==&gt; <span class="hljs-built_in">WARNING</span>: <span class="hljs-keyword">Server</span> Certificates grants authority <span class="hljs-keyword">to</span> become a<br>    <span class="hljs-keyword">server</span> <span class="hljs-keyword">and</span> <span class="hljs-keyword">access</span> <span class="hljs-keyword">all</span> state <span class="hljs-keyword">in</span> the <span class="hljs-keyword">cluster</span> including root keys<br>    <span class="hljs-keyword">and</span> <span class="hljs-keyword">all</span> ACL tokens. <span class="hljs-keyword">Do</span> <span class="hljs-keyword">not</span> distribute them <span class="hljs-keyword">to</span> production hosts<br>    that are <span class="hljs-keyword">not</span> <span class="hljs-keyword">server</span> nodes. Store them <span class="hljs-keyword">as</span> securely <span class="hljs-keyword">as</span> CA keys.<br>==&gt; <span class="hljs-keyword">Using</span> consul-agent-ca.pem <span class="hljs-keyword">and</span> consul-agent-ca-key.pem<br>==&gt; Saved dc1-<span class="hljs-keyword">server</span>-consul<span class="hljs-number">-1.</span>pem<br>==&gt; Saved dc1-<span class="hljs-keyword">server</span>-consul<span class="hljs-number">-1</span>-key.pem<br>$ consul tls cert <span class="hljs-keyword">create</span> -<span class="hljs-keyword">server</span> -dc=dc1 -days=<span class="hljs-number">36500</span><br>==&gt; <span class="hljs-built_in">WARNING</span>: <span class="hljs-keyword">Server</span> Certificates grants authority <span class="hljs-keyword">to</span> become a<br>    <span class="hljs-keyword">server</span> <span class="hljs-keyword">and</span> <span class="hljs-keyword">access</span> <span class="hljs-keyword">all</span> state <span class="hljs-keyword">in</span> the <span class="hljs-keyword">cluster</span> including root keys<br>    <span class="hljs-keyword">and</span> <span class="hljs-keyword">all</span> ACL tokens. <span class="hljs-keyword">Do</span> <span class="hljs-keyword">not</span> distribute them <span class="hljs-keyword">to</span> production hosts<br>    that are <span class="hljs-keyword">not</span> <span class="hljs-keyword">server</span> nodes. Store them <span class="hljs-keyword">as</span> securely <span class="hljs-keyword">as</span> CA keys.<br>==&gt; <span class="hljs-keyword">Using</span> consul-agent-ca.pem <span class="hljs-keyword">and</span> consul-agent-ca-key.pem<br>==&gt; Saved dc1-<span class="hljs-keyword">server</span>-consul<span class="hljs-number">-2.</span>pem<br>==&gt; Saved dc1-<span class="hljs-keyword">server</span>-consul<span class="hljs-number">-2</span>-key.pem<br></code></pre></td></tr></table></figure><blockquote><ul><li>为了对Consul服务器进行身份验证，服务器会提供一种特殊的证书-包含server.dc1.consul在中Subject Alternative Name。如果启用verify_server_hostname，则仅允许提供此类证书的代理作为服务器引导。没有verify_server_hostname &#x3D; true攻击者，可能会破坏Consul客户端代理，并以server身份重新启动该agent，以便访问您数据中心中的所有数据！这就是服务器证书很特殊的原因。</li></ul></blockquote><h3 id="step3-创建client角色的证书"><a href="#step3-创建client角色的证书" class="headerlink" title="step3: 创建client角色的证书"></a>step3: 创建client角色的证书</h3><p>Consul 1.5.2中引入的自动加密方法减轻了运维生成和分发client证书步骤。这里我是高于1.5.2的，不需要为每个客户端创建证书，客户端只需要拥有consul-agent-ca.pem这个ca下，会自动从server获取client证书存在内存中，并不会持久化到本地。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-attr">&quot;verify_incoming&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;verify_outgoing&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;verify_server_hostname&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;ca_file&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;/etc/consul.d/consul-agent-ca.pem&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;auto_encrypt&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>   <span class="hljs-attr">&quot;tls&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><br> <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br></code></pre></td></tr></table></figure><h3 id="step4-创建cli的证书"><a href="#step4-创建cli的证书" class="headerlink" title="step4: 创建cli的证书"></a>step4: 创建cli的证书</h3><p>用于连接管理consul server</p><figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs haml">$ consul tls cert create -cli -dc=dc1 -days=36500<br>=<span class="language-ruby">=&gt; <span class="hljs-title class_">Using</span> consul-agent-ca.pem and consul-agent-ca-key.pem</span><br>=<span class="language-ruby">=&gt; <span class="hljs-title class_">Saved</span> dc1-cli-consul-<span class="hljs-number">0</span>.pem</span><br>=<span class="language-ruby">=&gt; <span class="hljs-title class_">Saved</span> dc1-cli-consul-<span class="hljs-number">0</span>-key.pem</span><br></code></pre></td></tr></table></figure><p>文件列表</p><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs tap">$ ll<br>-rw-r--r--<span class="hljs-number"> 1 </span>root root     <span class="hljs-number"> 227 </span>Oct<span class="hljs-number"> 11 </span>10:36 consul-agent-ca-key.pem<br>-rw-r--r--<span class="hljs-number"> 1 </span>root root    <span class="hljs-number"> 1249 </span>Oct<span class="hljs-number"> 11 </span>10:36 consul-agent-ca.pem<br>-rw-r--r--<span class="hljs-number"> 1 </span>root root     <span class="hljs-number"> 227 </span>Oct<span class="hljs-number"> 11 </span>11:47 dc1-cli-consul-0-key.pem<br>-rw-r--r--<span class="hljs-number"> 1 </span>root root    <span class="hljs-number"> 1082 </span>Oct<span class="hljs-number"> 11 </span>11:47 dc1-cli-consul-0.pem<br>-rw-r--r--<span class="hljs-number"> 1 </span>root root     <span class="hljs-number"> 227 </span>Oct<span class="hljs-number"> 11 </span>10:42 dc1-server-consul-0-key.pem<br>-rw-r--r--<span class="hljs-number"> 1 </span>root root    <span class="hljs-number"> 1139 </span>Oct<span class="hljs-number"> 11 </span>10:42 dc1-server-consul-0.pem<br>-rw-r--r--<span class="hljs-number"> 1 </span>root root     <span class="hljs-number"> 227 </span>Oct<span class="hljs-number"> 11 </span>10:43 dc1-server-consul-1-key.pem<br>-rw-r--r--<span class="hljs-number"> 1 </span>root root    <span class="hljs-number"> 1139 </span>Oct<span class="hljs-number"> 11 </span>10:43 dc1-server-consul-1.pem<br>-rw-r--r--<span class="hljs-number"> 1 </span>root root     <span class="hljs-number"> 227 </span>Oct<span class="hljs-number"> 11 </span>10:43 dc1-server-consul-2-key.pem<br>-rw-r--r--<span class="hljs-number"> 1 </span>root root    <span class="hljs-number"> 1139 </span>Oct<span class="hljs-number"> 11 </span>10:43 dc1-server-consul-2.pem<br></code></pre></td></tr></table></figure><h2 id="server和client以及cli的配置"><a href="#server和client以及cli的配置" class="headerlink" title="server和client以及cli的配置"></a>server和client以及cli的配置</h2><p>consul配置可以采用HCL或JSON格式。HCL支持在Consul 1.0和更高版本中可用，现在需要在所有配置文件上使用.hcl或 .json扩展名以指定其格式。<br>consul默认从路径<code>/consul/config</code>读取配置信息，为了规范，配置文件我路径定义为<code>/etc/consul.d/</code>，数据目录定义为<code>/var/lib/consul/</code><br>consul的参数可以命令行指定，也可以写json文件里，为了规范，命令行参数尽量少写，大体的配置信息都写json文件里。总体目录结构为下面。<br>server:</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs awk">$ tree <span class="hljs-regexp">/etc/</span>consul.d/<br><span class="hljs-regexp">/etc/</span>consul.d/<br>├── cli<br>│   └── ssl<br>│       ├── dc1-cli-consul-<span class="hljs-number">0</span>-key.pem<br>│       └── dc1-cli-consul-<span class="hljs-number">0</span>.pem<br>├── consul-agent-ca.pem<br>└── server<br>    ├── conf.json<br>    └── ssl<br>        ├── dc1-server-consul-<span class="hljs-number">0</span>-key.pem <span class="hljs-regexp">//</span>第一台server对应<span class="hljs-number">0</span>的证书,第二个就是<span class="hljs-number">1</span><br>        └── dc1-server-consul-<span class="hljs-number">0</span>.pem     <span class="hljs-regexp">//</span>同上，下面的配置文件里指定的文件名也要一致<br></code></pre></td></tr></table></figure><p>client:</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs awk">$ tree <span class="hljs-regexp">/etc/</span>consul.d<br><span class="hljs-regexp">/etc/</span>consul.d/<br>├── client<br>│   └── conf.json<br>└── consul-agent-ca.pem<br></code></pre></td></tr></table></figure><h3 id="server"><a href="#server" class="headerlink" title="server"></a>server</h3><p><code>node_name</code> 注意按照文章最开始的标题写，每个不一样<br><code>/etc/consul.d/server/conf.json</code> 配置内容为，缺省<code>client_addr</code>为<code>127.0.0.1</code>，如果是专门的机器跑 consul 这里需要修改为 <code>bind</code> 住<code>0.0.0.0</code>或者多网卡下专门指定的ip</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;data_dir&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;/var/lib/consul&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;node_name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;consul-server-1&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;bootstrap_expect&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">3</span><span class="hljs-punctuation">,</span> <br>    <span class="hljs-attr">&quot;bind_addr&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;10.15.1.46&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;client_addr&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;0.0.0.0&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;datacenter&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;dc1&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;domain&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;consul&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;log_level&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;INFO&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;start_join&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>        <span class="hljs-string">&quot;10.15.1.46&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-string">&quot;10.15.1.48&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-string">&quot;10.15.1.49&quot;</span><br>    <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;retry_interval&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;2s&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;verify_incoming&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;verify_outgoing&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;verify_server_hostname&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;ca_file&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;/etc/consul.d/consul-agent-ca.pem&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;cert_file&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;/etc/consul.d/server/ssl/dc1-server-consul-0.pem&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;key_file&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;/etc/consul.d/server/ssl/dc1-server-consul-0-key.pem&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;auto_encrypt&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;allow_tls&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;ports&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;http&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">8500</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;dns&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">8600</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;https&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">8501</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;server&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><blockquote><p>请注意：如果需要自动颁发client端证书需要设置<code>&quot;allow_tls&quot;: true</code></p></blockquote><h3 id="client"><a href="#client" class="headerlink" title="client"></a>client</h3><p><code>node_name</code> 注意按照文章最开始的标题写，每个不一样</p><p>client的配置 <code>/etc/consul.d/client/conf.json</code></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br> <span class="hljs-attr">&quot;data_dir&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;/var/lib/consul/client&quot;</span><span class="hljs-punctuation">,</span><br> <span class="hljs-attr">&quot;node_name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;consul-client-1&quot;</span><span class="hljs-punctuation">,</span><br> <span class="hljs-attr">&quot;datacenter&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;dc1&quot;</span><span class="hljs-punctuation">,</span><br> <span class="hljs-attr">&quot;bind_addr&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;10.15.1.7&quot;</span><span class="hljs-punctuation">,</span><br> <span class="hljs-attr">&quot;client_addr&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;0.0.0.0&quot;</span><span class="hljs-punctuation">,</span><br> <span class="hljs-attr">&quot;retry_join&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>        <span class="hljs-string">&quot;10.15.1.46&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-string">&quot;10.15.1.48&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-string">&quot;10.15.1.49&quot;</span><br> <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br> <span class="hljs-attr">&quot;retry_interval&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;3s&quot;</span><span class="hljs-punctuation">,</span><br> <span class="hljs-attr">&quot;verify_incoming&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><span class="hljs-punctuation">,</span><br> <span class="hljs-attr">&quot;verify_outgoing&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br> <span class="hljs-attr">&quot;verify_server_hostname&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br> <span class="hljs-attr">&quot;ca_file&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;/etc/consul.d/consul-agent-ca.pem&quot;</span><span class="hljs-punctuation">,</span><br> <span class="hljs-attr">&quot;auto_encrypt&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;tls&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;ports&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;http&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">8500</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;dns&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">8600</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;https&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">8501</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><blockquote><p>请注意：要使用自动加密功能，您将需要配置client以自动从server获取证书，必须配置 <code>&quot;tls&quot;: true</code> 。</p></blockquote><h3 id="cli"><a href="#cli" class="headerlink" title="cli"></a>cli</h3><p>consul当作cli使用的时候也得走tls,不然会下面报错</p><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs subunit">$ consul members<br><span class="hljs-keyword">Error </span>retrieving members: Get http://127.0.0.1:8500/v1/agent/members?segment=_all: dial tcp 127.0.0.1:8500: connect: connection refused<br></code></pre></td></tr></table></figure><p>路径根据实际来，证书最好是绝对路径，cli默认操作localhost上运行的consul，例如能够使用consul leave会让当前的consul退出集群，环境变量我们写子配置文件<code>/etc/profile.d/consul-cli.sh</code></p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-built_in">export</span> <span class="hljs-attribute">CONSUL_HTTP_ADDR</span>=https://localhost:8501<br><span class="hljs-built_in">export</span> <span class="hljs-attribute">CONSUL_CACERT</span>=/etc/consul.d/consul-agent-ca.pem<br><span class="hljs-built_in">export</span> <span class="hljs-attribute">CONSUL_CLIENT_CERT</span>=/etc/consul.d/cli/ssl/dc1-cli-consul-0.pem<br><span class="hljs-built_in">export</span> <span class="hljs-attribute">CONSUL_CLIENT_KEY</span>=/etc/consul.d/cli/ssl/dc1-cli-consul-0-key.pem<br></code></pre></td></tr></table></figure><ul><li>CONSUL_HTTP_ADDR是Consul代理的URL，并设置的默认值 -http-addr。</li><li>CONSUL_CACERT是CA证书的位置，并将设置为默认值-ca-file。</li><li>CONSUL_CLIENT_CERT是CLI证书的位置，并将设置为默认值-client-cert。</li><li>CONSUL_CLIENT_KEY是CLI键的位置，并将设置为默认值 -client-key。</li></ul><h2 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h2><p>编辑 <code>/usr/lib/systemd/system/consul.service</code></p><h3 id="server启动参数"><a href="#server启动参数" class="headerlink" title="server启动参数"></a>server启动参数</h3><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[Unit]</span><br><span class="hljs-attr">Description</span>=<span class="hljs-string">&quot;Consul Startup process for server&quot;</span><br><span class="hljs-attr">Documentation</span>=https://www.consul.io/<br><span class="hljs-attr">Requires</span>=network-<span class="hljs-literal">on</span>line.target<br><span class="hljs-attr">After</span>=network-<span class="hljs-literal">on</span>line.target<br><span class="hljs-attr">ConditionDirectoryNotEmpty</span>=/etc/consul.d/server/conf.json<br><br><span class="hljs-section">[Service]</span><br><span class="hljs-attr">User</span>=consul<br><span class="hljs-attr">Group</span>=consul<br><span class="hljs-attr">EnvironmentFile</span>=-/etc/sysconfig/consul<br><span class="hljs-attr">PIDFile</span>=/var/run/consul/consul.pid<br><span class="hljs-attr">PermissionsStartOnly</span>=<span class="hljs-literal">true</span><br><span class="hljs-attr">ExecStartPre</span>=/usr/bin/consul validate /etc/consul.d/server<br><span class="hljs-attr">ExecStart</span>=/usr/bin/consul agent -config-dir=/etc/consul.d/server<br><span class="hljs-attr">ExecReload</span>=/bin/kill --signal HUP <span class="hljs-variable">$MAINPID</span><br><span class="hljs-attr">KillMode</span>=process<br><span class="hljs-attr">KillSignal</span>=SIGTERM<br><span class="hljs-attr">RestartSec</span>=<span class="hljs-number">15</span>s<br><span class="hljs-attr">Restart</span>=<span class="hljs-literal">on</span>-failure<br><span class="hljs-attr">LimitNOFILE</span>=<span class="hljs-number">65536</span><br><br><span class="hljs-section">[Install]</span><br><span class="hljs-attr">WantedBy</span>=multi-user.target<br></code></pre></td></tr></table></figure><h3 id="client启动参数"><a href="#client启动参数" class="headerlink" title="client启动参数"></a>client启动参数</h3><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[Unit]</span><br><span class="hljs-attr">Description</span>=<span class="hljs-string">&quot;Consul Startup process for client&quot;</span><br><span class="hljs-attr">Documentation</span>=https://www.consul.io/<br><span class="hljs-attr">Requires</span>=network-<span class="hljs-literal">on</span>line.target<br><span class="hljs-attr">After</span>=network-<span class="hljs-literal">on</span>line.target<br><span class="hljs-attr">ConditionDirectoryNotEmpty</span>=/etc/consul.d/client/conf.json<br><br><span class="hljs-section">[Service]</span><br><span class="hljs-attr">Type</span>=notify<br><span class="hljs-attr">User</span>=consul<br><span class="hljs-attr">Group</span>=consul<br><span class="hljs-attr">EnvironmentFile</span>=-/etc/sysconfig/consul<br><span class="hljs-attr">PIDFile</span>=/var/run/consul/consul.pid<br><span class="hljs-attr">PermissionsStartOnly</span>=<span class="hljs-literal">true</span><br><span class="hljs-attr">ExecStartPre</span>=/usr/bin/consul validate /etc/consul.d/client<br><span class="hljs-attr">ExecStart</span>=/usr/bin/consul agent -config-dir=/etc/consul.d/client<br><span class="hljs-attr">ExecReload</span>=/bin/kill --signal HUP <span class="hljs-variable">$MAINPID</span><br><span class="hljs-attr">KillMode</span>=process<br><span class="hljs-attr">KillSignal</span>=SIGTERM<br><span class="hljs-attr">RestartSec</span>=<span class="hljs-number">15</span>s<br><span class="hljs-attr">Restart</span>=<span class="hljs-literal">on</span>-failure<br><span class="hljs-attr">LimitNOFILE</span>=<span class="hljs-number">65536</span><br><br><span class="hljs-section">[Install]</span><br><span class="hljs-attr">WantedBy</span>=multi-user.target<br></code></pre></td></tr></table></figure><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">$ consul members<br>Node             Address          Status  <span class="hljs-keyword">Type</span>    Build  Protocol  DC   Segment<br>consul-<span class="hljs-keyword">server</span><span class="hljs-number">-1</span>  <span class="hljs-number">10.15</span><span class="hljs-number">.1</span><span class="hljs-number">.46</span>:<span class="hljs-number">8301</span>  alive   <span class="hljs-keyword">server</span>  <span class="hljs-number">1.9</span><span class="hljs-number">.0</span>  <span class="hljs-number">2</span>         dc1  &lt;<span class="hljs-keyword">all</span>&gt;<br>consul-<span class="hljs-keyword">server</span><span class="hljs-number">-2</span>  <span class="hljs-number">10.15</span><span class="hljs-number">.1</span><span class="hljs-number">.48</span>:<span class="hljs-number">8301</span>  alive   <span class="hljs-keyword">server</span>  <span class="hljs-number">1.9</span><span class="hljs-number">.0</span>  <span class="hljs-number">2</span>         dc1  &lt;<span class="hljs-keyword">all</span>&gt;<br>consul-<span class="hljs-keyword">server</span><span class="hljs-number">-3</span>  <span class="hljs-number">10.15</span><span class="hljs-number">.1</span><span class="hljs-number">.49</span>:<span class="hljs-number">8301</span>  alive   <span class="hljs-keyword">server</span>  <span class="hljs-number">1.9</span><span class="hljs-number">.0</span>  <span class="hljs-number">2</span>         dc1  &lt;<span class="hljs-keyword">all</span>&gt;<br>consul-client<span class="hljs-number">-1</span>  <span class="hljs-number">10.15</span><span class="hljs-number">.1</span><span class="hljs-number">.7</span>:<span class="hljs-number">8301</span>   alive   client  <span class="hljs-number">1.9</span><span class="hljs-number">.0</span>  <span class="hljs-number">2</span>         dc1  &lt;<span class="hljs-keyword">default</span>&gt;<br></code></pre></td></tr></table></figure><p>日志中有显示是否启用加密</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">Dec</span> <span class="hljs-number">25</span> <span class="hljs-number">16</span>:<span class="hljs-number">56</span>:<span class="hljs-number">38</span> k8s-n2 consul[<span class="hljs-number">27090</span>]: ==&gt; Starting Consul agent...<br><span class="hljs-attribute">Dec</span> <span class="hljs-number">25</span> <span class="hljs-number">16</span>:<span class="hljs-number">56</span>:<span class="hljs-number">38</span> k8s-n2 consul[<span class="hljs-number">27090</span>]:           Version: &#x27;<span class="hljs-number">1</span>.<span class="hljs-number">9</span>.<span class="hljs-number">0</span>&#x27;<br><span class="hljs-attribute">Dec</span> <span class="hljs-number">25</span> <span class="hljs-number">16</span>:<span class="hljs-number">56</span>:<span class="hljs-number">38</span> k8s-n2 consul[<span class="hljs-number">27090</span>]:           Node ID: &#x27;<span class="hljs-number">780</span>b3ba9-f466-<span class="hljs-number">8</span>d43-dc55-b52a686118bf&#x27;<br><span class="hljs-attribute">Dec</span> <span class="hljs-number">25</span> <span class="hljs-number">16</span>:<span class="hljs-number">56</span>:<span class="hljs-number">38</span> k8s-n2 consul[<span class="hljs-number">27090</span>]:         Node name: &#x27;consul-client-<span class="hljs-number">1</span>&#x27;<br><span class="hljs-attribute">Dec</span> <span class="hljs-number">25</span> <span class="hljs-number">16</span>:<span class="hljs-number">56</span>:<span class="hljs-number">38</span> k8s-n2 consul[<span class="hljs-number">27090</span>]:        Datacenter: &#x27;dc1&#x27; (Segment: &#x27;&#x27;)<br><span class="hljs-attribute">Dec</span> <span class="hljs-number">25</span> <span class="hljs-number">16</span>:<span class="hljs-number">56</span>:<span class="hljs-number">38</span> k8s-n2 consul[<span class="hljs-number">27090</span>]:            Server: false (Bootstrap: false)<br><span class="hljs-attribute">Dec</span> <span class="hljs-number">25</span> <span class="hljs-number">16</span>:<span class="hljs-number">56</span>:<span class="hljs-number">38</span> k8s-n2 consul[<span class="hljs-number">27090</span>]:       Client Addr:<span class="hljs-meta"> [0.0.0.0] (HTTP: 8500, HTTPS: 8501, gRPC: -1, DNS: 8600)</span><br><span class="hljs-meta">Dec 25 16:56:38 k8s-n2 consul[27090]:      Cluster Addr: 10.15.1.7 (LAN: 8301, WAN: 8302)</span><br><span class="hljs-meta">Dec 25 16:56:38 k8s-n2 consul[27090]:           Encrypt: Gossip: false, TLS-Outgoing: true, TLS-Incoming: false, Auto-Encrypt-TLS: true</span><br></code></pre></td></tr></table></figure><h2 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h2><p>在consul中有个参数 <code>leave</code> 你可以把他设置到systemd中 <code>ExecStop=/usr/bin/consul leave</code> 如果未设置此选项，那么当此服务被停止时，该服务的所有进程都将会根据 <code>KillSignal=</code> 的设置被立即全部杀死，至于<code>systemd</code>如何设置可以去百度一下<code>systemd</code>的配置。执行 <code>consul leave</code> 时它将向集群的其余agent发送一条Leave消息，然后优雅地离开。默认情况下，Consul将leave视为一个永久离开，并且在启动时不会再次尝试加入集群。在client模式的agent上，这默认为true，对于server模式的agent上，这默认为false。可以使用 <code>&quot;leave_on_terminate&quot;: true</code> 和 <code>&quot;rejoin_after_leave&quot;: true</code> 配合使用。不建议使用，除非你是真的要退出consul集群。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>你确定你会写 Dockerfile 吗？</title>
    <link href="/2020/11/12/intro-guide-to-dockerfile-best-practices/"/>
    <url>/2020/11/12/intro-guide-to-dockerfile-best-practices/</url>
    
    <content type="html"><![CDATA[<p>如今 GitHub 仓库中已经包含了成千上万的 <code>Dockerfile</code> ，但并不是所有的 <code>Dockerfile</code> 都是高效的。很多新手一上来就是FROM centos然后RUN 一堆yum install的，这样还停留在虚拟机的角度。可以FROM alpine或者干脆拿官方的改，alpine初期的时候问题蛮多的，很多人建议使用alpine做基础镜像最好是测试好再上线，现在alpine的快速发展，这种现象很少了。本文将从四个方面来介绍 <code>Dockerfile</code> 的最佳实践，以此来帮助大家编写更优雅的 <code>Dockerfile</code>。</p><blockquote><p>本文使用一个基于 Maven 的 Java 项目作为示例，然后不断改进 <code>Dockerfile</code> 的写法，直到最后写出一个最优雅的 <code>Dockerfile</code>。中间的所有步骤都是为了说明某一方面的最佳实践。</p></blockquote><h2 id="减少构建时间"><a href="#减少构建时间" class="headerlink" title="减少构建时间"></a>减少构建时间</h2><p>一个开发周期包括构建 Docker 镜像，更改代码，然后重新构建 Docker 镜像。在构建镜像的过程中，如果能够利用缓存，可以减少不必要的重复构建步骤。</p><h4 id="构建顺序影响缓存的利用率"><a href="#构建顺序影响缓存的利用率" class="headerlink" title="构建顺序影响缓存的利用率"></a>构建顺序影响缓存的利用率</h4><p><img src="/images/dockerfile-1.jpg" alt="dockerfile-1"></p><p>镜像的构建顺序很重要，当你向 <code>Dockerfile</code> 中添加文件，或者修改其中的某一行时，那一部分的缓存就会失效，该缓存的后续步骤都会中断，需要重新构建。所以优化缓存的最佳方法是把不需要经常更改的行放到最前面，更改最频繁的行放到最后面。</p><h4 id="只拷贝需要的文件，防止缓存溢出"><a href="#只拷贝需要的文件，防止缓存溢出" class="headerlink" title="只拷贝需要的文件，防止缓存溢出"></a>只拷贝需要的文件，防止缓存溢出</h4><p><img src="/images/dockerfile-2.jpg" alt="dockerfile-2"></p><p>当拷贝文件到镜像中时，尽量只拷贝需要的文件，切忌使用 <code>COPY .</code> 指令拷贝整个目录。如果被拷贝的文件内容发生了更改，缓存就会被破坏。在上面的示例中，镜像中只需要构建好的 jar 包，因此只需要拷贝这个文件就行了，这样即使其他不相关的文件发生了更改也不会影响缓存。</p><h4 id="最小化可缓存的执行层"><a href="#最小化可缓存的执行层" class="headerlink" title="最小化可缓存的执行层"></a>最小化可缓存的执行层</h4><p><img src="/images/dockerfile-3.jpg" alt="dockerfile-3"></p><p>每一个 <code>RUN</code> 指令都会被看作是可缓存的执行单元。太多的 <code>RUN</code> 指令会增加镜像的层数，增大镜像体积，而将所有的命令都放到同一个 <code>RUN</code> 指令中又会破坏缓存，从而延缓开发周期。当使用包管理器安装软件时，一般都会先更新软件索引信息，然后再安装软件。推荐将更新索引和安装软件放在同一个 <code>RUN</code> 指令中，这样可以形成一个可缓存的执行单元，否则你可能会安装旧的软件包。</p><h2 id="减小镜像体积"><a href="#减小镜像体积" class="headerlink" title="减小镜像体积"></a>减小镜像体积</h2><p>镜像的体积很重要，因为镜像越小，部署的速度更快，攻击范围越小。</p><h4 id="删除不必要依赖"><a href="#删除不必要依赖" class="headerlink" title="删除不必要依赖"></a>删除不必要依赖</h4><p><img src="/images/dockerfile-4.jpg" alt="dockerfile-4"></p><p>删除不必要的依赖，不要安装调试工具。如果实在需要调试工具，可以在容器运行之后再安装。某些包管理工具（如 <code>apt</code>）除了安装用户指定的包之外，还会安装推荐的包，这会无缘无故增加镜像的体积。<code>apt</code> 可以通过添加参数 <code>-–no-install-recommends</code> 来确保不会安装不需要的依赖项。如果确实需要某些依赖项，请在后面手动添加。</p><h4 id="删除包管理工具的缓存"><a href="#删除包管理工具的缓存" class="headerlink" title="删除包管理工具的缓存"></a>删除包管理工具的缓存</h4><p><img src="/images/dockerfile-5.jpg" alt="dockerfile-5"></p><p>包管理工具会维护自己的缓存，这些缓存会保留在镜像文件中，推荐的处理方法是在每一个 <code>RUN</code> 指令的末尾删除缓存。如果你在下一条指令中删除缓存，不会减小镜像的体积。</p><p>当然了，还有其他更高级的方法可以用来减小镜像体积，如下文将会介绍的多阶段构建。接下来我们将探讨如何优化 <code>Dockerfile</code> 的可维护性、安全性和可重复性。</p><h2 id="可维护性"><a href="#可维护性" class="headerlink" title="可维护性"></a>可维护性</h2><h4 id="尽量使用官方镜像"><a href="#尽量使用官方镜像" class="headerlink" title="尽量使用官方镜像"></a>尽量使用官方镜像</h4><p><img src="/images/dockerfile-6.jpg" alt="dockerfile-6"><br>使用官方镜像可以节省大量的维护时间，因为官方镜像的所有安装步骤都使用了最佳实践。如果你有多个项目，可以共享这些镜像层，因为他们都可以使用相同的基础镜像。</p><h4 id="使用更具体的标签"><a href="#使用更具体的标签" class="headerlink" title="使用更具体的标签"></a>使用更具体的标签</h4><p><img src="/images/dockerfile-7.jpg" alt="dockerfile-7"><br>基础镜像尽量不要使用 <code>latest</code> 标签。虽然这很方便，但随着时间的推移，<code>latest</code> 镜像可能会发生重大变化。因此在 <code>Dockerfile</code> 中最好指定基础镜像的具体标签。我们使用 <code>openjdk</code> 作为示例，指定标签为 <code>8</code>。其他更多标签请查看官方仓库。</p><h4 id="使用体积最小的基础镜像"><a href="#使用体积最小的基础镜像" class="headerlink" title="使用体积最小的基础镜像"></a>使用体积最小的基础镜像</h4><p><img src="/images/dockerfile-8.jpg" alt="dockerfile-8"></p><p>基础镜像的标签风格不同，镜像体积就会不同。<code>slim</code> 风格的镜像是基于 Debian 发行版制作的，而 <code>alpine</code> 风格的镜像是基于体积更小的 Alpine Linux 发行版制作的。其中一个明显的区别是：Debian 使用的是 GNU 项目所实现的 C 语言标准库，而 Alpine 使用的是 Musl C 标准库，它被设计用来替代 GNU C 标准库（glibc）的替代品，用于嵌入式操作系统和移动设备。因此使用 Alpine 在某些情况下会遇到兼容性问题。 以 openjdk 为例，<code>jre</code> 风格的镜像只包含 Java 运行时，不包含 <code>SDK</code>，这么做也可以大大减少镜像体积。</p><h2 id="重复利用"><a href="#重复利用" class="headerlink" title="重复利用"></a>重复利用</h2><p>到目前为止，我们一直都在假设你的 jar 包是在主机上构建的，这还不是理想方案，因为没有充分利用容器提供的一致性环境。例如，如果你的 Java 应用依赖于某一个特定的操作系统的库，就可能会出现问题，因为环境不一致（具体取决于构建 jar 包的机器）。</p><h4 id="在一致的环境中从源代码构建"><a href="#在一致的环境中从源代码构建" class="headerlink" title="在一致的环境中从源代码构建"></a>在一致的环境中从源代码构建</h4><p>源代码是你构建 Docker 镜像的最终来源，Dockerfile 里面只提供了构建步骤。<br><img src="/images/dockerfile-9.jpg" alt="dockerfile-9"></p><p>首先应该确定构建应用所需的所有依赖，本文的示例 Java 应用很简单，只需要 <code>Maven</code> 和 <code>JDK</code>，所以基础镜像应该选择官方的体积最小的 <code>maven</code> 镜像，该镜像也包含了 <code>JDK</code>。如果你需要安装更多依赖，可以在 <code>RUN</code> 指令中添加。<code>pom.xml</code>文件和 <code>src</code> 文件夹需要被复制到镜像中，因为最后执行 <code>mvn package</code> 命令（-e 参数用来显示错误，-B 参数表示以非交互式的“批处理”模式运行）打包的时候会用到这些依赖文件。</p><p>虽然现在我们解决了环境不一致的问题，但还有另外一个问题：每次代码更改之后，都要重新获取一遍 pom.xml 中描述的所有依赖项。下面我们来解决这个问题。</p><h4 id="在单独的步骤中获取依赖项"><a href="#在单独的步骤中获取依赖项" class="headerlink" title="在单独的步骤中获取依赖项"></a>在单独的步骤中获取依赖项</h4><p><img src="/images/dockerfile-10.jpg" alt="dockerfile-10"></p><p>结合前面提到的缓存机制，我们可以让获取依赖项这一步变成可缓存单元，只要 pom.xml 文件的内容没有变化，无论代码如何更改，都不会破坏这一层的缓存。上图中两个 COPY 指令中间的 RUN 指令用来告诉 Maven 只获取依赖项。</p><p>现在又遇到了一个新问题：跟之前直接拷贝 jar 包相比，镜像体积变得更大了，因为它包含了很多运行应用时不需要的构建依赖项。</p><h4 id="使用多阶段构建来删除构建时的依赖项"><a href="#使用多阶段构建来删除构建时的依赖项" class="headerlink" title="使用多阶段构建来删除构建时的依赖项"></a>使用多阶段构建来删除构建时的依赖项</h4><p><img src="/images/dockerfile-11.jpg" alt="dockerfile-11"></p><p>多阶段构建可以由多个 FROM 指令识别，每一个 FROM 语句表示一个新的构建阶段，阶段名称可以用 <code>AS</code> 参数指定。本例中指定第一阶段的名称为 <code>builder</code>，它可以被第二阶段直接引用。两个阶段环境一致，并且第一阶段包含所有构建依赖项。</p><p>第二阶段是构建最终镜像的最后阶段，它将包括应用运行时的所有必要条件，本例是基于 Alpine 的最小 JRE 镜像。上一个构建阶段虽然会有大量的缓存，但不会出现在第二阶段中。为了将构建好的 jar 包添加到最终的镜像中，可以使用 <code>COPY --from=STAGE_NAME</code> 指令，其中 STAGE_NAME 是上一构建阶段的名称。</p><p><img src="/images/dockerfile-12.jpg" alt="dockerfile-12"></p><p>多阶段构建是删除构建依赖的首选方案。<br>本文从在非一致性环境中构建体积较大的镜像开始优化，一直优化到在一致性环境中构建最小镜像，同时充分利用了缓存机制。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Docker容器你需要知道的</title>
    <link href="/2020/09/17/docker-need-to-know/"/>
    <url>/2020/09/17/docker-need-to-know/</url>
    
    <content type="html"><![CDATA[<h2 id="Docker容器的存活周期"><a href="#Docker容器的存活周期" class="headerlink" title="Docker容器的存活周期"></a>Docker容器的存活周期</h2><p>&amp;emsp;今天和大家聊聊容器的存活周期，但在聊存活周期以前我们得先了解一下init进程，在Linux操作系统中，当内核初始化完毕之后，会启动一个init进程，这个进程是整个操作系统的第一个用户进程，所以它的进程ID为1，也就是我们常说的PID1进程。在这之后，所有的用户态进程都是该进程的后代进程，由此我们可以看出，整个系统的用户进程，是一棵由init进程作为根的进程树。<br>&amp;emsp;init进程有一个非常厉害的地方，就是SIGKILL信号对它无效。很显然，如果我们将一棵树的树根砍了，那么这棵树就会分解成很多棵子树，这样的最终结果是导致整个操作系统进程杂乱无章，无法管理。所以为了防止用户误操作init进程是无法kill掉的。<br>&amp;emsp;PID 1进程的发展也是一段非常有趣的过程，从最早的sysvinit,到upstart,再到systemd。我们可以用 <code>pstree -p</code>查看PID 1的 进程是谁。<br>&amp;emsp;PID 1的作用是负责清理那些被抛弃的进程（孤儿和僵尸进程）所留下来的痕迹，有效的回收的系统资源，保证系统长时间稳定的运行，可谓是功不可没。在理解了它的重要性之后，我们今天主要探讨一下在容器中的PID 1是怎么回事。</p><h3 id="僵尸进程"><a href="#僵尸进程" class="headerlink" title="僵尸进程"></a>僵尸进程</h3><p>僵尸进程指的是：进程退出后，到其父进程还未对其调用wait&#x2F;waitpid之间的这段时间所处的状态。一般来说，这种状态持续的时间很短，所以我们一般很难在系统中捕捉到。但是，一些粗心的程序员可能会忘记调用wait&#x2F;waitpid，或者由于某种原因未执行该调用等等，那么这个时候就会出现长期驻留的僵尸进程了。如果大量的产生僵尸进程，其进程号就会一直被占用，可能导致系统不能产生新的进程。（子进程挂了，如果父进程不给子进程“收尸”（调用 wait&#x2F;waitpid），那这个子进程小可怜就变成了僵尸进程。）</p><h3 id="孤儿进程"><a href="#孤儿进程" class="headerlink" title="孤儿进程"></a>孤儿进程</h3><p>父进程先于子进程退出，那么子进程将成为孤儿进程。孤儿进程将被init进程(进程号为1)接管，并由init进程对它完成状态收集(wait&#x2F;waitpid)工作。</p><h3 id="容器中的PID-1"><a href="#容器中的PID-1" class="headerlink" title="容器中的PID 1"></a>容器中的PID 1</h3><p>熟悉Docker同学可能知道，容器并不是一个完整的操作系统，它也没有什么内核初始化过程，更没有像init(1)这样的初始化过程。在容器中被标志为PID 1的进程实际上就是一个普普通通的用户进程，也就是我们制作镜像时在Dockerfile中指定的ENTRYPOINT的那个进程。而这个进程在宿主机上有一个普普通通的进程ID，而在容器中之所以变成PID 1，是因为linux内核提供的PID namespaces功能，如果宿主机的所有用户进程构成了一个完整的树型结构，那么PID namespaces实际上就是将这个ENTRYPOINT进程（包括它的后代进程）从这棵大树剪下来，很显然，剪下来的这部分东西本身也是一个树型结构，它完全可以自己长成一棵苍天大树（不断地fork）,当然子namespaces里面是看不到整棵树的原貌的，但是父级的namespaces确可以看到完整的子树。</p><h4 id="创建一个docker-image"><a href="#创建一个docker-image" class="headerlink" title="创建一个docker image"></a>创建一个docker image</h4><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs tap">[root@k8s-m1 shallwe]<span class="hljs-comment"># cat dockerfile </span><br>FROM ubuntu<br>CMD sleep 3600<br><br><br>[root@k8s-m1 shallwe]<span class="hljs-comment"># docker build -t test1 .</span><br>Sending build context to Docker daemon  117.2kB<br>Step 1/2 : FROM ubuntu<br> ---&gt; bb0eaf4eee00<br>Step 2/2 : CMD sleep 3600<br> ---&gt; Running in 1d8cc7425f0a<br>Removing intermediate container 1d8cc7425f0a<br> ---&gt; 54d1c4970147<br>Successfully built 54d1c4970147<br>Successfully tagged test1:latest<br><br><br>[root@k8s-m1 shallwe]<span class="hljs-comment"># docker run -itd test1</span><br>c1559a36232de647ccce2d760dc1ebdc0541632d8626dfc785d352f10d052900<br><br><br>[root@k8s-m1 shallwe]<span class="hljs-comment"># docker ps</span><br>CONTAINER ID        IMAGE                                    COMMAND                  CREATED             STATUS              PORTS               NAMES<br>c1559a36232d        test1                                    &quot;/bin/sh -c &#x27;sleep 3…&quot;  <span class="hljs-number"> 5 </span>seconds ago       Up<span class="hljs-number"> 3 </span>seconds                            affectionate_shtern<br><br><br>[root@k8s-m1 shallwe]<span class="hljs-comment"># docker exec -it c1559a36232d /bin/sh</span><br><span class="hljs-comment"># ps aux</span><br>USER        PID %CPU %MEM    VSZ   RSS TTY      STAT START   TIME COMMAND<br>root         <span class="hljs-number"> 1 </span> 0.7  0.0  <span class="hljs-number"> 2612 </span> <span class="hljs-number"> 604 </span>pts/0    Ss+  06:40   0:00 /bin/sh -c sleep 3600<br>root         <span class="hljs-number"> 6 </span> 0.0  0.0  <span class="hljs-number"> 2512 </span> <span class="hljs-number"> 580 </span>pts/0    S+   06:40   0:00 sleep 3600<br>root         <span class="hljs-number"> 7 </span> 4.0  0.0  <span class="hljs-number"> 2612 </span> <span class="hljs-number"> 604 </span>pts/1    Ss   06:40   0:00 /bin/sh<br>root        <span class="hljs-number"> 12 </span> 0.0  0.0  <span class="hljs-number"> 5892 </span><span class="hljs-number"> 2856 </span>pts/1    R+   06:40   0:00 ps aux<br></code></pre></td></tr></table></figure><p>我们发现pid为1的是一个&#x2F;bin&#x2F;sh的进程，容器是单独一个pid namespaces的。通过下图可以更方便理解。由于子namespaces无法看到父级的namespaces，所以容器里第一个进程(也就是cmd)认为自己是pid为1，容器里其余进程都是它的子进程。</p><p><img src="/images/init-1.png" alt="init-1"></p><p>在Linux中init进程是不处理SIGKILL信号的，这可以防止init进程被误杀掉，即使是superuser。所以 <code>kill -9 init</code> 不会kill掉init进程。但是容器的进程是在容器的ns里是init级别，我们可以在宿主机上杀掉它</p><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs tap">[root@k8s-n2 shallwe]<span class="hljs-comment"># docker ps</span><br>CONTAINER ID        IMAGE                                    COMMAND                  CREATED             STATUS              PORTS               NAMES<br>366672a12386        6f715d38cfe0                             &quot;/docker-entrypoint.…&quot;  <span class="hljs-number"> 2 </span>minutes ago       Up<span class="hljs-number"> 2 </span>minutes                            k8s_nginx_nginx-97499b967-rfcvf_default_077ea5b9-746d-4687-9652-42af09bdc129_0<br><br><br><br>[root@k8s-n2 shallwe]<span class="hljs-comment"># docker exec -it 366672a12386 ps aux</span><br>PID   USER     TIME  COMMAND<br>   <span class="hljs-number"> 1 </span>root      0:00 nginx: master process nginx -g daemon off;<br>  <span class="hljs-number"> 29 </span>nginx     0:00 nginx: worker process<br>  <span class="hljs-number"> 30 </span>nginx     0:00 nginx: worker process<br>  <span class="hljs-number"> 31 </span>nginx     0:00 nginx: worker process<br>  <span class="hljs-number"> 32 </span>nginx     0:00 nginx: worker process<br>  <span class="hljs-number"> 39 </span>root      0:00 ps aux<br><br><br>[root@k8s-n2 shallwe]<span class="hljs-comment"># docker exec -it 366672a12386 kill -9 1</span><br><br><br>[root@k8s-n2 shallwe]<span class="hljs-comment"># docker exec -it 366672a12386 ps aux</span><br>PID   USER     TIME  COMMAND<br>   <span class="hljs-number"> 1 </span>root      0:00 nginx: master process nginx -g daemon off;<br>  <span class="hljs-number"> 29 </span>nginx     0:00 nginx: worker process<br>  <span class="hljs-number"> 30 </span>nginx     0:00 nginx: worker process<br>  <span class="hljs-number"> 31 </span>nginx     0:00 nginx: worker process<br>  <span class="hljs-number"> 32 </span>nginx     0:00 nginx: worker process<br>  <span class="hljs-number"> 49 </span>root      0:00 ps aux<br><br>[root@k8s-n2 shallwe]<span class="hljs-comment"># docker top 366672a12386</span><br>UID                 PID                 PPID                C                   STIME               TTY                 TIME                CMD<br>root               <span class="hljs-number"> 46176 </span>             <span class="hljs-number"> 46157 </span>             <span class="hljs-number"> 0 </span>                  15:14               ?                   00:00:00            nginx: master process nginx -g daemon off;<br>101                <span class="hljs-number"> 46223 </span>             <span class="hljs-number"> 46176 </span>             <span class="hljs-number"> 0 </span>                  15:14               ?                   00:00:00            nginx: worker process<br>101                <span class="hljs-number"> 46224 </span>             <span class="hljs-number"> 46176 </span>             <span class="hljs-number"> 0 </span>                  15:14               ?                   00:00:00            nginx: worker process<br>101                <span class="hljs-number"> 46225 </span>             <span class="hljs-number"> 46176 </span>             <span class="hljs-number"> 0 </span>                  15:14               ?                   00:00:00            nginx: worker process<br>101                <span class="hljs-number"> 46226 </span>             <span class="hljs-number"> 46176 </span>             <span class="hljs-number"> 0 </span>                  15:14               ?                   00:00:00            nginx: worker process<br><br>[root@k8s-n2 shallwe]<span class="hljs-comment"># ps aux | grep 46157</span><br>root     <span class="hljs-number"> 46157 </span> 0.0  0.1<span class="hljs-number"> 108760 </span><span class="hljs-number"> 8460 </span>?        Sl   15:14   0:00 containerd-shim -namespace moby -workdir /var/lib/containerd/io.containerd.runtime.v1.linux/moby/366672a1238655735e4dfd180bdd459109115d45caf904b16df792ad547c461b -address /run/containerd/containerd.sock -containerd-binary /usr/bin/containerd -runtime-root /var/run/docker/runtime-runc -systemd-cgroup<br>root     <span class="hljs-number"> 47549 </span> 0.0  0.0 <span class="hljs-number"> 12108 </span><span class="hljs-number"> 1048 </span>pts/0    S+   15:16   0:00 grep --color=auto 46157<br><br><br>[root@k8s-n2 shallwe]<span class="hljs-comment"># kill -9 46176</span><br><br>[root@k8s-n2 shallwe]<span class="hljs-comment"># docker top 366672a12386</span><br>Error response from daemon: Container 366672a1238655735e4dfd180bdd459109115d45caf904b16df792ad547c461b is not running<br><br></code></pre></td></tr></table></figure><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs llvm">[root<span class="hljs-title">@guan</span> ~]# docker run -d centos ls<br><span class="hljs-number">24</span>b<span class="hljs-number">2195731</span>fef<span class="hljs-number">5</span>b<span class="hljs-number">3e52898</span>bcb<span class="hljs-number">7e2</span><span class="hljs-keyword">c</span><span class="hljs-number">6</span>cebdb<span class="hljs-number">9</span>afb<span class="hljs-number">8</span>cfc<span class="hljs-number">929</span><span class="hljs-keyword">c</span><span class="hljs-number">1e69</span>ed<span class="hljs-number">7126e967699</span><br>[root<span class="hljs-title">@guan</span> ~]# docker run -d centos sleep <span class="hljs-number">10</span><br><span class="hljs-number">8</span><span class="hljs-keyword">c</span><span class="hljs-number">0</span>a<span class="hljs-number">7</span>cba<span class="hljs-number">4</span>af<span class="hljs-number">9</span>a<span class="hljs-number">847e0092</span>e<span class="hljs-number">1855426149</span>cf<span class="hljs-number">093</span>ef<span class="hljs-number">90</span>fd<span class="hljs-number">4</span>b<span class="hljs-number">91</span>b<span class="hljs-number">1</span>cbf<span class="hljs-number">452001176</span>a<span class="hljs-number">38</span><br>[root<span class="hljs-title">@guan</span> ~]# docker ps -a<br>CONTAINER ID        IMAGE         COMMAND           CREATED             STATUS                     PORTS                                      NAMES<br><span class="hljs-number">8</span><span class="hljs-keyword">c</span><span class="hljs-number">0</span>a<span class="hljs-number">7</span>cba<span class="hljs-number">4</span>af<span class="hljs-number">9</span>        centos        <span class="hljs-string">&quot;sleep 10&quot;</span>        <span class="hljs-number">4</span> seconds ago       Up <span class="hljs-number">3</span> seconds                                                     cocky_visvesvaraya<br><span class="hljs-number">24</span>b<span class="hljs-number">2195731</span>fe        centos        <span class="hljs-string">&quot;ls&quot;</span>              <span class="hljs-number">10</span> seconds ago      Exited (<span class="hljs-number">0</span>) <span class="hljs-number">9</span> seconds ago                                         friendly_mirzakhani<br>[root<span class="hljs-title">@guan</span> ~]# docker ps -a<br>CONTAINER ID        IMAGE         COMMAND           CREATED              STATUS                          PORTS                                      NAMES<br><span class="hljs-number">8</span><span class="hljs-keyword">c</span><span class="hljs-number">0</span>a<span class="hljs-number">7</span>cba<span class="hljs-number">4</span>af<span class="hljs-number">9</span>        centos        <span class="hljs-string">&quot;sleep 10&quot;</span>        About a minute ago   Exited (<span class="hljs-number">0</span>) <span class="hljs-number">15</span> seconds ago                                       cocky_visvesvaraya<br><span class="hljs-number">24</span>b<span class="hljs-number">2195731</span>fe        centos        <span class="hljs-string">&quot;ls&quot;</span>              About a minute ago   Exited (<span class="hljs-number">0</span>) <span class="hljs-number">29</span> seconds ago                                       friendly_mirzakhani<br></code></pre></td></tr></table></figure><p>docker run 后面镜像后面的command和arg会覆盖掉镜像的CMD。上面我那个例子覆盖掉centos镜像默认的CMD bash。我们可以看到ls的容器直接退出了，但是sleep 10的容器运行了10秒后就退出了。以上也说明了容器不是虚拟机，容器是个隔离的进程</p><p>这说明了容器的存活是容器里pid为1的进程运行时长决定的。所以nginx的官方镜像里就是用的exec格式让nginx充当pid为1的角色</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">CMD <span class="hljs-selector-attr">[<span class="hljs-string">&quot;nginx&quot;</span>, <span class="hljs-string">&quot;-g&quot;</span>, <span class="hljs-string">&quot;daemon off;&quot;</span>]</span><br></code></pre></td></tr></table></figure><h3 id="pid-为1-真的好吗"><a href="#pid-为1-真的好吗" class="headerlink" title="pid 为1 真的好吗"></a>pid 为1 真的好吗</h3><p>第一种情况实际上php和java的容器在长期运行后经常会频繁oom，主要是代码里涉及到fork等原因（fork程序子进程）。传统Linux上，pid为1的角色承担了孤儿和僵尸进程的回收，但是目前我们的业务进程都是pid为1的角色，没有处理掉孤儿进程，这里我们主进程用bash模仿个僵尸进程看看会不会被回收。</p><p>起一个容器exec运行sleep</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs autoit">docker <span class="hljs-built_in">run</span> -d --name test centos:<span class="hljs-number">7</span> bash -c <span class="hljs-string">&#x27;sleep 1000&#x27;</span><br>docker exec -ti test bash   <span class="hljs-meta"># 运行一个bash操作容器</span><br>[root<span class="hljs-symbol">@134b96f29c73</span> /]<span class="hljs-meta"># bash -c <span class="hljs-string">&#x27;sleep 2000&#x27;</span></span><br></code></pre></td></tr></table></figure><p>再开一个终端操作按照如下图操作</p><p><img src="/images/init-2.png" alt="init-2"></p><p>得到一个僵尸进程。解决这个的办法就是pid为1的跑一个支持信号转发且支持回收孤儿僵尸进程的进程就行了，为此有人开发出了tini项目，感兴趣可以github上搜下下，现在tini已经内置在docker里了。</p><p>使用tini可以在docker run的时候添加选项–init即可，底层我猜测是复制docker-init到容器的&#x2F;dev&#x2F;init路径里然后启动entrypoint cmd，大家可以在run的时候测试下上面的步骤会发现根本不会有僵尸进程遗留。</p><p>这里不多说，如果是想默认使用tini可以把tini构建到镜像里(例如k8s目前不支持docker run 的<code>--init</code>，所以需要把tini做到镜像里)，参照jenkins官方镜像dockerfile和tini的github地址文档 <a href="https://github.com/krallin/tini">https://github.com/krallin/tini</a></p><p>如果是基于alpine，tini是依赖glibc的可能还会command not found，可以尝试它的静态版本</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs awk">ENV TINI_VERSION=v0.<span class="hljs-number">18.0</span> \<br>    TINI_DOWNLOAD_URL https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/krallin/</span>tini<span class="hljs-regexp">/releases/</span>download<span class="hljs-regexp">/$&#123;TINI_VERSION&#125;/</span>tini-static<br>RUN curl -sSL <span class="hljs-variable">$&#123;TINI_DOWNLOAD_URL&#125;</span> &gt; <span class="hljs-regexp">/usr/</span>bin/tini \<br>    &amp;&amp; chmod +x <span class="hljs-regexp">/usr/</span>bin/tini <br>...<br>ENTRYPOINT [<span class="hljs-string">&quot;tini&quot;</span>,<span class="hljs-string">&quot;--&quot;</span>]<br>CMD [<span class="hljs-string">&quot;/your/program&quot;</span>,<span class="hljs-string">&quot;-and&quot;</span>,<span class="hljs-string">&quot;-its&quot;</span>,<span class="hljs-string">&quot;args&quot;</span>]<br></code></pre></td></tr></table></figure><p>类似tini的还有dumb-init，例如后续的k8s的ingress nginx镜像就是<br><img src="/images/init-3.png" alt="init-3"></p><h2 id="JDK无法识别cgroup限制"><a href="#JDK无法识别cgroup限制" class="headerlink" title="JDK无法识别cgroup限制"></a>JDK无法识别cgroup限制</h2><p>首先Docker容器本质是宿主机上的一个进程，它与宿主机共享一个&#x2F;proc目录，也就是说我们在容器内看到的<code>/proc/meminfo</code>，<code>/proc/cpuinfo</code>与直接在宿主机上看到的一致。</p><p>如下:</p><figure class="highlight tcl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs tcl">[root@k8s-n1 shallwe]# head -n3 /<span class="hljs-keyword">proc</span>/meminfo<span class="hljs-title"> </span><br><span class="hljs-title">MemTotal:</span>        7976536<span class="hljs-title"> kB</span><br>MemFree:         2325284<span class="hljs-title"> kB</span><br>MemAvailable:    6672952<span class="hljs-title"> kB</span><br>[root@k8s-n1<span class="hljs-title"> shallwe]#</span> docker<span class="hljs-title"> run</span> -m 500m --rm<span class="hljs-title"> alpine</span> head -n3 /<span class="hljs-keyword">proc</span>/meminfo   # 带上内存限制选项无法识别<span class="hljs-title"></span><br><span class="hljs-title">MemTotal:</span>        7976536<span class="hljs-title"> kB</span><br>MemFree:         2277308<span class="hljs-title"> kB</span><br>MemAvailable:    6626188<span class="hljs-title"> kB</span><br></code></pre></td></tr></table></figure><p>jvm也是读取&#x2F;proc目录，会导致无法识别cgroup限制。默认情况下，JVM的Max Heap Size是系统内存的1&#x2F;4，假如我们系统是8G，那么JVM将的默认Heap≈2G。</p><p>Docker通过CGroups完成的是对内存的限制，而&#x2F;proc目录是已只读形式挂载到容器中的，由于默认情况下Java压根就看不见CGroups的限制的内存大小，而默认使用&#x2F;proc&#x2F;meminfo中的信息作为内存信息进行启动，这种不兼容情况会导致，如果容器分配的内存小于JVM的内存，JVM进程申请超过限制的内存会被docker认为oom杀掉。</p><h3 id="测试用例-OPENJDK"><a href="#测试用例-OPENJDK" class="headerlink" title="测试用例(OPENJDK)"></a>测试用例(OPENJDK)</h3><p>在JDK8u212版本之前，JVM在容器里面识别到的是宿主机的内存。如果没有手动调整堆大小的话JVM默认会使用1&#x2F;4的宿主机内存。这样会远远大于容器规格限制的内存，导致内存爆了之后容器自动重启。这里我用我们生产用的openjdk8做演示，jdk8也是一个长期维护版本。测试机器为8G内存，给容器限制内存为4G，看JDK默认参数下的最大堆为多少。</p><p>测试命令为如下: （jdk包含jre）</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stata">docker <span class="hljs-keyword">run</span> -<span class="hljs-keyword">m</span> 4GB --<span class="hljs-keyword">rm</span>  openjdk:8-jdk java -XshowSettings:vm  -<span class="hljs-keyword">version</span><br>docker <span class="hljs-keyword">run</span> -<span class="hljs-keyword">m</span> 4GB --<span class="hljs-keyword">rm</span>  openjdk:8u181 java -XshowSettings:vm  -<span class="hljs-keyword">version</span><br></code></pre></td></tr></table></figure><ul><li><p>OpenJDK8新版本（正确的识别容器限制，910.50M）安全</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">[root@k8s-n1 <span class="hljs-keyword">shallwe]# </span>docker run -m <span class="hljs-number">4</span>GB --rm  openjdk:<span class="hljs-number">8</span>-<span class="hljs-keyword">jdk </span><span class="hljs-keyword">java </span>-XshowSettings:vm  -version<br>VM settings:<br>    Max. Heap Size (Estimated): <span class="hljs-number">910</span>.<span class="hljs-number">50</span>M<br>    Ergonomics Machine Class: server<br>    Using VM: OpenJDK <span class="hljs-number">64</span>-<span class="hljs-keyword">Bit </span>Server VM<br><br>openjdk version <span class="hljs-string">&quot;1.8.0_265&quot;</span><br>OpenJDK Runtime Environment (<span class="hljs-keyword">build </span><span class="hljs-number">1</span>.<span class="hljs-number">8</span>.<span class="hljs-number">0</span>_265-<span class="hljs-keyword">b01)</span><br><span class="hljs-keyword"></span>OpenJDK <span class="hljs-number">64</span>-<span class="hljs-keyword">Bit </span>Server VM (<span class="hljs-keyword">build </span><span class="hljs-number">25</span>.<span class="hljs-number">265</span>-<span class="hljs-keyword">b01, </span>mixed mode)<br></code></pre></td></tr></table></figure></li><li><p>OpenJDK8老版本（并没有识别容器限制，1.69G） 危险</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">[root@k8s-n1 <span class="hljs-keyword">shallwe]# </span>docker run -m <span class="hljs-number">4</span>GB --rm  openjdk:<span class="hljs-number">8</span>u181 <span class="hljs-keyword">java </span>-XshowSettings:vm  -version<br>VM settings:<br>    Max. Heap Size (Estimated): <span class="hljs-number">1</span>.<span class="hljs-number">69</span>G<br>    Ergonomics Machine Class: server<br>    Using VM: OpenJDK <span class="hljs-number">64</span>-<span class="hljs-keyword">Bit </span>Server VM<br><br>openjdk version <span class="hljs-string">&quot;1.8.0_181&quot;</span><br>OpenJDK Runtime Environment (<span class="hljs-keyword">build </span><span class="hljs-number">1</span>.<span class="hljs-number">8</span>.<span class="hljs-number">0</span>_181<span class="hljs-number">-8</span>u181-<span class="hljs-keyword">b13-2~deb9u1-b13)</span><br><span class="hljs-keyword"></span>OpenJDK <span class="hljs-number">64</span>-<span class="hljs-keyword">Bit </span>Server VM (<span class="hljs-keyword">build </span><span class="hljs-number">25</span>.<span class="hljs-number">181</span>-<span class="hljs-keyword">b13, </span>mixed mode)<br></code></pre></td></tr></table></figure></li></ul><h3 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h3><p>OpenJDK8老版本无法识别容器限制，至于其他版本或者其他发行版的jdk我就不测了，我们在选jdk的时候可以选<code>OpenJDK8</code>或<code>adoptopenjdk</code>。如果你想要的是，不显示的指定-Xmx，让Java进程自动的发现容器限制，那么请选择JDK8u212之后的版本。如果你想要的是手动挡的体验，更加进一步的利用内存资源，那么你可能需要回到手动配置-Xmx时代，那么你选什么版本都无所谓了。</p><h2 id="CMD和ENTRYPOINT指令的作用和区别"><a href="#CMD和ENTRYPOINT指令的作用和区别" class="headerlink" title="CMD和ENTRYPOINT指令的作用和区别"></a>CMD和ENTRYPOINT指令的作用和区别</h2><p>首先先来说说他们两的相同点，他们都有两种写法EXEC和SHELL写法。前者是exec格式也是推荐格式，后者是SHELL格式。当一个dockerfile文件中有多个CMD和ENTRYPOINT时只有最后一个生效。</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile"><span class="hljs-keyword">CMD</span><span class="language-bash"> [<span class="hljs-string">&quot;executable&quot;</span>, <span class="hljs-string">&quot;param1&quot;</span>, <span class="hljs-string">&quot;param2&quot;</span>] </span><br><span class="hljs-keyword">CMD</span><span class="language-bash"> <span class="hljs-built_in">command</span> param1 param2 </span><br></code></pre></td></tr></table></figure><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile"><span class="hljs-keyword">ENTRYPOINT</span><span class="language-bash"> [<span class="hljs-string">&quot;executable&quot;</span>, <span class="hljs-string">&quot;param1&quot;</span>, <span class="hljs-string">&quot;param2&quot;</span>]</span><br><span class="hljs-keyword">ENTRYPOINT</span><span class="language-bash"> <span class="hljs-built_in">command</span> param1 param2 </span><br></code></pre></td></tr></table></figure><h3 id="以SHELL风格示例"><a href="#以SHELL风格示例" class="headerlink" title="以SHELL风格示例"></a>以SHELL风格示例</h3><p><img src="/images/init-4.png" alt="init-4"><br><img src="/images/init-5.png" alt="init-5"><br><img src="/images/init-6.png" alt="init-6"></p><p>此时的可执行体&#x2F;bin&#x2F;sleep是由&#x2F;bin&#x2F;sh启动的，我们发现pid为1的是一个&#x2F;bin&#x2F;sh的进程。当我们用docker stop命令来停掉容器的时候会先向容器中PID为1的进程发送系统信号SIGTERM,docker默认会允许容器中的应用程序有10秒的时间用以终止运行。如果等待时间超过10秒会继续发送SIGKILL的系统信号强行kill掉进程。一般业务进程都是pid为1，所有官方的进程都会处理收到的SIGTERM信号进行优雅收尾退出。如果是&#x2F;bin&#x2F;sh格式的话，主进程是一个sh -c的进程，shell不用trap做信号捕捉、信号处理的话是无法转发信号的。最终只能强制Kill掉。</p><h3 id="以EXEC风格示例"><a href="#以EXEC风格示例" class="headerlink" title="以EXEC风格示例"></a>以EXEC风格示例</h3><p><img src="/images/init-7.png" alt="init-7"><br><img src="/images/init-8.png" alt="init-8"><br><img src="/images/init-9.png" alt="init-9"></p><p>这样不会独立启动一个shell进程，应用的可执行程序(&#x2F;bin&#x2F;sleep)成为容器的PID 1进程，可以接收Unix信号。</p><h3 id="ENTRYPOINT与CMD指令"><a href="#ENTRYPOINT与CMD指令" class="headerlink" title="ENTRYPOINT与CMD指令"></a>ENTRYPOINT与CMD指令</h3><ul><li>CMD: 指定容器启动时默认执行的命令。</li><li>ENTRYPOINT: 指定容器启动时所运行的可执行程序与参数。</li></ul><p>上面提到CMD是设置容器启动时的默认命令，既然是默认命令那么就是可以被替换的。当我们执行 <code>docker run [OPTIONS] IMAGE [COMMAND] [ARG...]</code> 镜像后面的<code>command</code>和<code>arg</code>会覆盖掉镜像的CMD。如果ENTRYPOINT和CMD指令同时存在一个dockerfile中，则ENTRYPOINT优先级高于CMD，CMD指令将被作为参数传递给ENTRYPOINT。最终运行的是 <code>&lt;ENTRYPOINT&gt; &lt;CMD&gt;</code>。</p><p><img src="/images/init-10.png" alt="init-10"></p><p>1、首先<code>docker run</code>的时候我们替换掉了CMD里面的<code>&#39;-l&#39;</code>指令。变成了 <code>ls /root</code> 但是alpine的root目录是没有文件，所以<code>ls /root</code>没有输出。<br>2、我们用选项去覆盖住entrypoint可以看到输出了date。注意一点是覆盖entrypoint的时候镜像的CMD会被忽略。</p><h2 id="Docker容器优雅终止方案"><a href="#Docker容器优雅终止方案" class="headerlink" title="Docker容器优雅终止方案"></a>Docker容器优雅终止方案</h2><p>作为一名系统重启工程师（SRE），你可能经常需要重启容器，毕竟 Kubernetes 的优势就是快速弹性伸缩和故障恢复，遇到问题先重启容器再说，几秒钟即可恢复，实在不行再重启系统，这就是系统重启工程师的杀手锏。然而现实并没有理论上那么美好，某些容器需要花费 10s 左右才能停止，这是为啥？有以下几种可能性：</p><ol><li>容器中的进程没有收到 SIGTERM 信号。</li><li>容器中的进程收到了信号，但忽略了。</li><li>容器中应用的关闭时间确实就是这么长。</li></ol><p>对于第 3 种可能性我们无能为力，本文主要解决 1 和 2。</p><p>如果要构建一个新的 Docker 镜像，肯定希望镜像越小越好，这样它的下载和启动速度都很快，一般我们都会选择一个瘦了身的操作系统（例如 <code>Alpine</code>，<code>Busybox</code> 等）作为基础镜像。</p><p><img src="/images/init-11.png" alt="init-11"></p><p>问题就在这里，这些基础镜像的 <code>init 系统</code> 也被抹掉了，这就是问题的根源！</p><p>init 系统有以下几个特点：</p><ul><li>它是系统的第一个进程，负责产生其他所有用户进程。</li><li>init 以守护进程方式存在，是所有其他进程的祖先。</li><li>它主要负责：<ul><li>启动守护进程</li><li>回收孤儿进程</li><li>将操作系统信号转发给子进程</li></ul></li></ul><h3 id="Docker-容器停止过程"><a href="#Docker-容器停止过程" class="headerlink" title="Docker 容器停止过程"></a>Docker 容器停止过程</h3><p>对于容器来说，init 系统不是必须的，当你通过命令 <code>docker stop mycontainer</code> 来停止容器时，docker CLI 会将 <code>TERM</code> 信号发送给 <code>mycontainer</code> 的 <code>PID</code> 为 1 的进程。</p><ul><li>如果 PID 1 是 init 进程 - 那么 PID 1 会将 TERM 信号转发给子进程，然后子进程开始关闭，最后容器终止。</li><li>如果没有 init 进程 - 那么容器中的应用进程（Dockerfile 中的 ENTRYPOINT 或 CMD 指定的应用）就是 PID 1，应用进程直接负责响应 TERM 信号。这时又分为三种情况：<ol><li>应用不处理 SIGTERM - 如果应用没有监听 SIGTERM 信号，或者应用中没有实现处理 SIGTERM 信号的逻辑，应用就不会停止，容器也不会终止。</li><li>应用收不到 SIGTERM 信号 - 在写dockerfile时ENTRYPOINT 或 CMD使用 <code>shell模式</code> 会导致应用无法收到SIGTERM信号，因为shell不会转发信号到子进程</li><li>应用收到 SIGTERM 信号并处理信号</li></ol></li></ul><p>第一种和第二种会导致容器停止时间很长 运行命令 docker stop mycontainer 之后，Docker 会等待 10s，如果 10s 后容器还没有终止，Docker 就会绕过容器应用直接向内核发送 SIGKILL，内核会强行杀死应用，从而终止容器。</p><h3 id="容器进程收不到-SIGTERM-信号？"><a href="#容器进程收不到-SIGTERM-信号？" class="headerlink" title="容器进程收不到 SIGTERM 信号？"></a>容器进程收不到 SIGTERM 信号？</h3><p>如果容器中的进程没有收到 SIGTERM 信号，很有可能是因为应用进程不是 PID 1，PID 1 是 shell，而应用进程只是 shell 的子进程。而 shell 不具备 init 系统的功能，也就不会将操作系统的信号转发到子进程上，这也是容器中的应用没有收到 SIGTERM 信号的常见原因。</p><p>问题的根源就来自 Dockerfile，例如：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile"><span class="hljs-keyword">FROM</span> alpine:<span class="hljs-number">3.7</span><br><span class="hljs-keyword">COPY</span><span class="language-bash"> popcorn.sh .</span><br><span class="hljs-keyword">RUN</span><span class="language-bash"> <span class="hljs-built_in">chmod</span> +x popcorn.sh</span><br><span class="hljs-keyword">ENTRYPOINT</span><span class="language-bash"> ./popcorn.sh</span><br></code></pre></td></tr></table></figure><p><code>ENTRYPOINT</code> 指令使用的是 <code>shell 模式</code>，这样 Docker 就会把应用放到 <code>shell</code> 中运行，因此 <code>shell</code> 是 PID 1。</p><h4 id="解决方案-1：使用-exec-模式的-ENTRYPOINT-指令"><a href="#解决方案-1：使用-exec-模式的-ENTRYPOINT-指令" class="headerlink" title="解决方案 1：使用 exec 模式的 ENTRYPOINT 指令"></a>解决方案 1：使用 exec 模式的 ENTRYPOINT 指令</h4><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile"><span class="hljs-keyword">FROM</span> alpine:<span class="hljs-number">3.7</span><br><span class="hljs-keyword">COPY</span><span class="language-bash"> popcorn.sh .</span><br><span class="hljs-keyword">RUN</span><span class="language-bash"> <span class="hljs-built_in">chmod</span> +x popcorn.sh</span><br><span class="hljs-keyword">ENTRYPOINT</span><span class="language-bash"> [<span class="hljs-string">&quot;./popcorn.sh&quot;</span>]</span><br></code></pre></td></tr></table></figure><p>这样 PID 1 就是 <code>./popcorn.sh</code>，它将负责响应所有发送到容器的信号，至于 <code>./popcorn.sh</code> 是否真的能捕捉到系统信号，那是另一回事。</p><p>举个例子，假设使用上面的 Dockerfile 来构建镜像，<code>popcorn.sh</code> 脚本每过一秒打印一次日期：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/sh</span><br><span class="hljs-keyword">while</span> <span class="hljs-literal">true</span><br><span class="hljs-keyword">do</span><br>    <span class="hljs-built_in">date</span><br>    <span class="hljs-built_in">sleep</span> 1<br><span class="hljs-keyword">done</span><br></code></pre></td></tr></table></figure><p>构建镜像并创建容器：</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs applescript">docker build -t truek8s/popcorn .<br>docker <span class="hljs-built_in">run</span> -<span class="hljs-keyword">it</span> <span class="hljs-comment">--name corny --rm truek8s/popcorn</span><br></code></pre></td></tr></table></figure><p>打开另外一个终端执行停止容器的命令，并计时：</p><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gauss"><span class="hljs-built_in">time</span> docker <span class="hljs-keyword">stop</span> corny<br></code></pre></td></tr></table></figure><p>因为 <code>popcorn.sh</code> 并没有实现捕获和处理 <code>SIGTERM</code> 信号的逻辑，所以需要 10s 左右才能停止容器。要想解决这个问题，就要往脚本中添加信号处理代码，让它捕获到 <code>SIGTERM</code> 信号时就终止进程：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/sh</span><br><span class="hljs-comment"># catch the TERM signal and then exit</span><br><span class="hljs-built_in">trap</span> <span class="hljs-string">&quot;exit&quot;</span> TERM<br> <br><span class="hljs-keyword">while</span> <span class="hljs-literal">true</span><br><span class="hljs-keyword">do</span><br>    <span class="hljs-built_in">date</span><br>    <span class="hljs-built_in">sleep</span> 1<br><span class="hljs-keyword">done</span><br></code></pre></td></tr></table></figure><h4 id="解决方案-2：使用-init-系统"><a href="#解决方案-2：使用-init-系统" class="headerlink" title="解决方案 2：使用 init 系统"></a>解决方案 2：使用 init 系统</h4><p>如果容器中的应用默认无法处理 SIGTERM 信号，又不能修改代码，这时候方案 1 行不通了，只能在容器中添加一个 init 系统。init 系统有很多种，这里推荐使用 tini，它是专用于容器的轻量级 init 系统，使用方法也很简单：</p><ol><li>安装 tini</li><li>将 tini 设为容器的默认应用</li><li>将 <code>popcorn.sh</code> 作为 tini 的参数</li></ol><p>具体的 Dockerfile 如下：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-keyword">FROM</span> alpine:3.7<br>COPY popcorn.sh .<br><span class="hljs-built_in">RUN</span> chmod +x popcorn.sh<br><span class="hljs-built_in">RUN</span> apk <span class="hljs-built_in">add</span> --no-cache tini<br>ENTRYPOINT [<span class="hljs-string">&quot;/sbin/tini&quot;</span>, <span class="hljs-string">&quot;--&quot;</span>, <span class="hljs-string">&quot;./popcorn.sh&quot;</span>]<br></code></pre></td></tr></table></figure><p>现在 tini 就是 PID 1，它会将收到的系统信号转发给子进程 <code>popcorn.sh</code>。</p><blockquote><p>如果你想直接通过 docker 命令来运行容器，可以直接通过参数 <code>--init</code> 来使用 tini，不需要在镜像中安装 tini。如果是 Kubernetes 就不行了，还得老老实实安装 tini。</p></blockquote><h4 id="使用-tini-后应用还需要处理-SIGTERM-吗？"><a href="#使用-tini-后应用还需要处理-SIGTERM-吗？" class="headerlink" title="使用 tini 后应用还需要处理 SIGTERM 吗？"></a>使用 tini 后应用还需要处理 SIGTERM 吗？</h4><p>最后一个问题：如果移除 <code>popcorn.sh</code> 中对 <code>SIGTERM</code> 信号的处理逻辑，容器会在我们执行停止命令后立即终止吗？</p><p>首先启动两个容器一个容器使用 <code>init</code> 一个容器不使用 <code>init</code>。<br><img src="/images/init-12.png" alt="init-12"></p><p>停止两个容器查看耗时<br><img src="/images/init-13.png" alt="init-13"></p><p>结果：可以优雅关闭容器</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>在 Kubernetes 集群中使用 NodeLocal DNSCache</title>
    <link href="/2020/06/02/use-nodelocal-dns-cache/"/>
    <url>/2020/06/02/use-nodelocal-dns-cache/</url>
    
    <content type="html"><![CDATA[<h2 id="NodeLocal-DNS使用及配置"><a href="#NodeLocal-DNS使用及配置" class="headerlink" title="NodeLocal DNS使用及配置"></a>NodeLocal DNS使用及配置</h2><p><code>NodeLocal DNSCache</code> 通过在集群节点上运行一个 DaemonSet 来提高 clusterDNS 性能和可靠性。处于 <code>ClusterFirst</code> 的 DNS 模式下的 Pod 可以连接到 <code>kube-dns</code> 的 serviceIP 进行 DNS 查询。通过 <code>kube-proxy</code> 组件添加的 <code>iptables</code> 规则将其转换为 <code>CoreDNS</code> 端点。通过在每个集群节点上运行 DNS 缓存，NodeLocal DNSCache 可以缩短 DNS 查找的延迟时间、使 DNS 查找时间更加一致，以及减少发送到 kube-dns 的 DNS 查询次数。</p><p>在集群中运行 NodeLocal DNSCache 有如下几个好处：</p><ul><li>如果本地没有 CoreDNS 实例，则具有最高 DNS QPS 的 Pod 可能必须到另一个节点进行解析，使用 NodeLocal DNSCache 后，拥有本地缓存将有助于改善延迟</li><li>跳过 iptables DNAT 和连接跟踪将有助于减少 conntrack 竞争并避免 UDP DNS 条目填满 conntrack 表（常见的5s超时问题就是这个原因造成的）</li><li>从本地缓存代理到 kube-dns 服务的连接可以升级到 TCP，TCP conntrack 条目将在连接关闭时被删除，而 UDP 条目必须超时(默认 <code>nf_conntrack_udp_timeout</code> 是 30 秒)</li><li>将 DNS 查询从 UDP 升级到 TCP 将减少归因于丢弃的 UDP 数据包和 DNS 超时的尾部等待时间，通常长达 30 秒（3 次重试+ 10 秒超时）</li></ul><p><img src="/images/nodelocaldns-1.png" alt="nodelocaldns-1"></p><p>要安装 NodeLocal DNSCache 也非常简单，直接获取官方的资源清单即可：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">wget https:<span class="hljs-regexp">//</span>raw.githubusercontent.com<span class="hljs-regexp">/kubernetes/</span>kubernetes<span class="hljs-regexp">/master/</span>cluster<span class="hljs-regexp">/addons/</span>dns<span class="hljs-regexp">/nodelocaldns/</span>nodelocaldns.yaml<br></code></pre></td></tr></table></figure><p>该资源清单文件中包含几个变量，其中：</p><ul><li><code>__PILLAR__DNS__SERVER__</code> ：表示 kube-dns 这个 Service 的 ClusterIP，可以通过命令 <code>kubectl get svc kube-dns -n kube-system -o jsonpath=&#123;.spec.clusterIP&#125;</code> 获取</li><li><code>__PILLAR__LOCAL__DNS__</code> ：表示 DNSCache 本地的 IP，默认为 <code>169.254.20.10</code></li><li><code>__PILLAR__DNS__DOMAIN__</code> ：表示集群域，默认就是 <code>cluster.local</code></li></ul><p>如果kube-proxy使用Iptable模式</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc">sed -i &quot;s/<span class="hljs-emphasis">__PILLAR__</span>LOCAL<span class="hljs-emphasis">__DNS__</span>/$localdns/g; s/<span class="hljs-emphasis">__PILLAR__</span>DNS<span class="hljs-emphasis">__DOMAIN__</span>/$domain/g; s/<span class="hljs-emphasis">__PILLAR__</span>DNS<span class="hljs-emphasis">__SERVER__</span>/$kubedns/g&quot; nodelocaldns.yaml<br></code></pre></td></tr></table></figure><p>如果kube-proxy使用IPVS模式</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc">sed -i &quot;s/<span class="hljs-emphasis">__PILLAR__</span>LOCAL<span class="hljs-emphasis">__DNS__</span>/$localdns/g; s/<span class="hljs-emphasis">__PILLAR__</span>DNS<span class="hljs-emphasis">__DOMAIN__</span>/$domain/g; s/<span class="hljs-emphasis">__PILLAR__</span>DNS<span class="hljs-emphasis">__SERVER__</span>//g; s/<span class="hljs-emphasis">__PILLAR__</span>CLUSTER<span class="hljs-emphasis">__DNS__</span>/$kubedns/g&quot; nodelocaldns.yaml<br></code></pre></td></tr></table></figure><p>需要注意的是这里使用 DaemonSet 部署 node-local-dns 使用了 <code>hostNetwork=true</code>，会占用宿主机的 8080 端口，所以需要保证该端口未被占用。</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">containers:</span><br>- name: node-cache<br><span class="hljs-symbol">  image:</span> k8s.gcr.io/k8s-dns-node-cache:<span class="hljs-number">1.15</span><span class="hljs-number">.13</span><br><span class="hljs-symbol">  resources:</span><br><span class="hljs-symbol">    requests:</span><br><span class="hljs-symbol">      cpu:</span> <span class="hljs-number">25</span>m<br><span class="hljs-symbol">      memory:</span> <span class="hljs-number">5</span>Mi<br><span class="hljs-symbol">  args:</span> [ <span class="hljs-string">&quot;-localip&quot;</span>, <span class="hljs-string">&quot;169.254.20.10&quot;</span>, <span class="hljs-string">&quot;-conf&quot;</span>, <span class="hljs-string">&quot;/etc/Corefile&quot;</span>, <span class="hljs-string">&quot;-upstreamsvc&quot;</span>, <span class="hljs-string">&quot;kube-dns-upstream&quot;</span> ]<br></code></pre></td></tr></table></figure><p>注意：在args参数这里”169.254.20.10”会多一个“逗号”记得删除不然启动报错。</p><p>到这里还没有完，如果 kube-proxy 组件使用的是 ipvs 模式的话我们还需要修改 kubelet 的 <code>--cluster-dns</code> 参数，将其指向 <code>169.254.20.10</code>，Daemonset 会在每个节点创建一个网卡来绑这个 IP，Pod 向本节点这个 IP 发 DNS 请求，缓存没有命中的时候才会再代理到上游集群 DNS 进行查询。 <code>iptables</code> 模式下 Pod 还是向原来的集群 DNS 请求，节点上有这个 IP 监听，会被本机拦截，再请求集群上游 DNS，所以不需要更改 <code>--cluster-dns</code> 参数。</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">$ sed -i <span class="hljs-string">&#x27;s/10.96.0.10/169.254.20.10/g&#x27;</span> <span class="hljs-regexp">/var/</span>lib<span class="hljs-regexp">/kubelet/</span>config.yaml<br>$ systemctl daemon-reload &amp;&amp; systemctl restart kubelet<br></code></pre></td></tr></table></figure><p>我们可以部署一个新的 Pod 来验证下</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs dts">[root@devops010015001003 ~]<span class="hljs-meta"># cat busybox.yaml </span><br><span class="hljs-symbol">apiVersion:</span> v1<br><span class="hljs-symbol">kind:</span> Pod<br><span class="hljs-symbol">metadata:</span><br><span class="hljs-symbol">  name:</span> busybox<br><span class="hljs-symbol">  namespace:</span> default<br><span class="hljs-symbol">spec:</span><br><span class="hljs-symbol">  nodeSelector:</span><br><span class="hljs-symbol">    coredns:</span> <span class="hljs-string">&quot;2&quot;</span><br><span class="hljs-symbol">  containers:</span><br>  - name: busybox<br><span class="hljs-symbol">    image:</span> zhangguanzhang/centos<br><span class="hljs-symbol">    command:</span><br>      - sleep<br>      - <span class="hljs-string">&quot;3600&quot;</span><br><span class="hljs-symbol">    imagePullPolicy:</span> IfNotPresent<br><span class="hljs-symbol">  restartPolicy:</span> Always<br></code></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs yaml">[<span class="hljs-string">root@devops010015001003</span> <span class="hljs-string">~</span>]<span class="hljs-comment"># kubectl  exec -it busybox -- nslookup www.baidu.com</span><br><span class="hljs-attr">Server:</span>         <span class="hljs-number">169.254</span><span class="hljs-number">.20</span><span class="hljs-number">.10</span><br><span class="hljs-attr">Address:</span>        <span class="hljs-number">169.254</span><span class="hljs-number">.20</span><span class="hljs-number">.10</span><span class="hljs-comment">#53</span><br><br><span class="hljs-attr">Non-authoritative answer:</span><br><span class="hljs-string">www.baidu.com</span>   <span class="hljs-string">canonical</span> <span class="hljs-string">name</span> <span class="hljs-string">=</span> <span class="hljs-string">www.a.shifen.com.</span><br><span class="hljs-attr">Name:</span>   <span class="hljs-string">www.a.shifen.com</span><br><span class="hljs-attr">Address:</span> <span class="hljs-number">39.156</span><span class="hljs-number">.66</span><span class="hljs-number">.14</span><br><span class="hljs-attr">Name:</span>   <span class="hljs-string">www.a.shifen.com</span><br><span class="hljs-attr">Address:</span> <span class="hljs-number">39.156</span><span class="hljs-number">.66</span><span class="hljs-number">.18</span><br><br>[<span class="hljs-string">root@devops010015001003</span> <span class="hljs-string">~</span>]<span class="hljs-comment"># kubectl  exec -it busybox -- nslookup nginx</span><br><span class="hljs-attr">Server:</span>         <span class="hljs-number">169.254</span><span class="hljs-number">.20</span><span class="hljs-number">.10</span><br><span class="hljs-attr">Address:</span>        <span class="hljs-number">169.254</span><span class="hljs-number">.20</span><span class="hljs-number">.10</span><span class="hljs-comment">#53</span><br><br><span class="hljs-attr">Name:</span>   <span class="hljs-string">nginx.default.svc.cluster.local</span><br><span class="hljs-attr">Address:</span> <span class="hljs-number">10.101</span><span class="hljs-number">.191</span><span class="hljs-number">.0</span><br><br>[<span class="hljs-string">root@devops010015001003</span> <span class="hljs-string">~</span>]<span class="hljs-comment"># kubectl  exec -it busybox -- nslookup kubernetes</span><br><span class="hljs-attr">Server:</span>         <span class="hljs-number">169.254</span><span class="hljs-number">.20</span><span class="hljs-number">.10</span><br><span class="hljs-attr">Address:</span>        <span class="hljs-number">169.254</span><span class="hljs-number">.20</span><span class="hljs-number">.10</span><span class="hljs-comment">#53</span><br><br><span class="hljs-attr">Name:</span>   <span class="hljs-string">kubernetes.default.svc.cluster.local</span><br><span class="hljs-attr">Address:</span> <span class="hljs-number">10.96</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span><br></code></pre></td></tr></table></figure><p>我们可以看到 <code>nameserver</code> 已经变成 <code>169.254.20.10</code> 了，当然对于之前的历史 Pod 要想使用 <code>node-local-dns</code> 则需要重建，当然如果要想去跟踪 DNS 的解析过程的话可以去通过抓包来观察。</p><h2 id="使用CoreDNS-自定义域名失效"><a href="#使用CoreDNS-自定义域名失效" class="headerlink" title="使用CoreDNS 自定义域名失效"></a>使用CoreDNS 自定义域名失效</h2><p>在使用NodeLocal DNS后遇到个问题就是自定义域名无法解析</p><p>kubernetes coredns 添加自定义DNS解析记录:coredns 自带 hosts 插件， 允许像配置 hosts 一样配置自定义 DNS 解析，修改 kube-system 中 configMap 的 coredns 添加如下设置即可。</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs stylus">kubectl get cm -o wide -n kube-system<br>kubectl describe  cm coredns -n kube-system <br><br>.:<span class="hljs-number">53</span> &#123;<br>    errors<br>    health<br>    kubernetes cluster<span class="hljs-selector-class">.local</span> <span class="hljs-keyword">in</span>-addr<span class="hljs-selector-class">.arpa</span> ip6<span class="hljs-selector-class">.arpa</span> &#123;<br>       pods insecure<br>       upstream<br>       fallthrough <span class="hljs-keyword">in</span>-addr<span class="hljs-selector-class">.arpa</span> ip6<span class="hljs-selector-class">.arpa</span><br>    &#125;<br>    hosts &#123;<br>        <span class="hljs-number">172.21</span>.<span class="hljs-number">91.28</span> cache<span class="hljs-selector-class">.redis</span><br>        <span class="hljs-number">10.151</span>.<span class="hljs-number">30.11</span> git<span class="hljs-selector-class">.k8s</span><span class="hljs-selector-class">.local</span><br>          <br>        fallthrough<br>    &#125;<br>    prometheus :<span class="hljs-number">9153</span><br>    proxy . /etc/resolv<span class="hljs-selector-class">.conf</span><br>    cache <span class="hljs-number">30</span><br>    loop<br>    reload<br>    loadbalance<br>&#125;<br></code></pre></td></tr></table></figure><p>配置完成后，始终解析不了这个自定义的域名：</p><figure class="highlight golo"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs golo">[root<span class="hljs-meta">@devops</span>010015001003 ~]<span class="hljs-comment"># kubectl exec -it busybox -- nslookup git.k8s.local</span><br>Server:         <span class="hljs-number">169.254</span><span class="hljs-number">.20</span><span class="hljs-number">.10</span><br>Address:        <span class="hljs-number">169.254</span><span class="hljs-number">.20</span><span class="hljs-number">.10</span><span class="hljs-comment">#53</span><br><br>** server can&#x27;t <span class="hljs-keyword">find</span> git.k8s.<span class="hljs-keyword">local</span>: NXDOMAIN<br><br>command terminated <span class="hljs-keyword">with</span> exit code <span class="hljs-number">1</span><br>[root<span class="hljs-meta">@devops</span>010015001003 ~]<span class="hljs-comment"># kubectl exec -it busybox -- nslookup cache.redis</span><br>Server:         <span class="hljs-number">169.254</span><span class="hljs-number">.20</span><span class="hljs-number">.10</span><br>Address:        <span class="hljs-number">169.254</span><span class="hljs-number">.20</span><span class="hljs-number">.10</span><span class="hljs-comment">#53</span><br><br>** server can&#x27;t <span class="hljs-keyword">find</span> cache.redis: NXDOMAIN<br><br>command terminated <span class="hljs-keyword">with</span> exit code <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>我们就直接使用 CoreDNS 的地址来进行解析测试一番：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs yaml">[<span class="hljs-string">root@devops010015001003</span> <span class="hljs-string">~</span>]<span class="hljs-comment"># kubectl exec -it busybox -- nslookup cache.redis 10.96.0.10</span><br><span class="hljs-attr">Server:</span>         <span class="hljs-number">10.96</span><span class="hljs-number">.0</span><span class="hljs-number">.10</span><br><span class="hljs-attr">Address:</span>        <span class="hljs-number">10.96</span><span class="hljs-number">.0</span><span class="hljs-number">.10</span><span class="hljs-comment">#53</span><br><br><span class="hljs-attr">Name:</span>   <span class="hljs-string">cache.redis</span><br><span class="hljs-attr">Address:</span> <span class="hljs-number">172.21</span><span class="hljs-number">.91</span><span class="hljs-number">.28</span><br><span class="hljs-string">**</span> <span class="hljs-string">server</span> <span class="hljs-string">can&#x27;t</span> <span class="hljs-attr">find cache.redis:</span> <span class="hljs-string">NXDOMAIN</span><br><br><span class="hljs-string">command</span> <span class="hljs-string">terminated</span> <span class="hljs-string">with</span> <span class="hljs-string">exit</span> <span class="hljs-string">code</span> <span class="hljs-number">1</span><br>[<span class="hljs-string">root@devops010015001003</span> <span class="hljs-string">~</span>]<span class="hljs-comment"># kubectl exec -it busybox -- nslookup git.k8s.local 10.96.0.10</span><br><span class="hljs-attr">Server:</span>         <span class="hljs-number">10.96</span><span class="hljs-number">.0</span><span class="hljs-number">.10</span><br><span class="hljs-attr">Address:</span>        <span class="hljs-number">10.96</span><span class="hljs-number">.0</span><span class="hljs-number">.10</span><span class="hljs-comment">#53</span><br><br><span class="hljs-attr">Name:</span>   <span class="hljs-string">git.k8s.local</span><br><span class="hljs-attr">Address:</span> <span class="hljs-number">10.151</span><span class="hljs-number">.30</span><span class="hljs-number">.11</span><br><span class="hljs-string">**</span> <span class="hljs-string">server</span> <span class="hljs-string">can&#x27;t</span> <span class="hljs-attr">find git.k8s.local:</span> <span class="hljs-string">NXDOMAIN</span><br><br><span class="hljs-string">command</span> <span class="hljs-string">terminated</span> <span class="hljs-string">with</span> <span class="hljs-string">exit</span> <span class="hljs-string">code</span> <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>发现居然是正确的，那也就说明 CoreDNS 的配置是没有任何问题的，问题肯定就是 <code>NodeLocal DNSCache</code> 导致的，直接用 LocalDNS 的地址（169.254.20.10）解析发现确实是失败的：</p><figure class="highlight golo"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs golo">[root<span class="hljs-meta">@devops</span>010015001003 ~]<span class="hljs-comment"># kubectl exec -it busybox -- nslookup git.k8s.local 169.254.20.10</span><br>Server:         <span class="hljs-number">169.254</span><span class="hljs-number">.20</span><span class="hljs-number">.10</span><br>Address:        <span class="hljs-number">169.254</span><span class="hljs-number">.20</span><span class="hljs-number">.10</span><span class="hljs-comment">#53</span><br><br>** server can&#x27;t <span class="hljs-keyword">find</span> git.k8s.<span class="hljs-keyword">local</span>: NXDOMAIN<br><br>command terminated <span class="hljs-keyword">with</span> exit code <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>这个时候只能去查看 LocalDNS 的 Pod 日志了：</p><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs dns">[root@devops0<span class="hljs-number">10015001003</span> ~]# kubectl logs node-local-dns-<span class="hljs-number">58</span>zhf  -n kube-system    <br><span class="hljs-number">2020/06/02</span> <span class="hljs-number">05</span>:<span class="hljs-number">00</span>:<span class="hljs-number">32</span> [INFO] Updated Corefile with <span class="hljs-number">0</span> custom stubdomains and upstream servers /etc/resolv.conf<br><span class="hljs-number">2020/06/02</span> <span class="hljs-number">05</span>:<span class="hljs-number">00</span>:<span class="hljs-number">32</span> [INFO] Using config file:<br>cluster.local:<span class="hljs-number">53</span> &#123;<br>    errors<br>    cache &#123;<br>            success <span class="hljs-number">9984</span> <span class="hljs-number">30</span><br>            denial <span class="hljs-number">9984</span> <span class="hljs-number">5</span><br>    &#125;<br>    reload<br>    loop<br>    bind <span class="hljs-number">169.254.20.10</span> <br>    forward . <span class="hljs-number">10.96.0.10</span> &#123;<br>            force_tcp<br>    &#125;<br>    prometheus :<span class="hljs-number">9253</span><br>    health <span class="hljs-number">169.254.20.10</span>:<span class="hljs-number">8080</span><br>    &#125;<br>in-addr.arpa:<span class="hljs-number">53</span> &#123;<br>    errors<br>    cache <span class="hljs-number">30</span><br>    reload<br>    loop<br>    bind <span class="hljs-number">169.254.20.10</span> <br>    forward . <span class="hljs-number">10.96.0.10</span> &#123;<br>            force_tcp<br>    &#125;<br>    prometheus :<span class="hljs-number">9253</span><br>    &#125;<br>ip6.arpa:<span class="hljs-number">53</span> &#123;<br>    errors<br>    cache <span class="hljs-number">30</span><br>    reload<br>    loop<br>    bind <span class="hljs-number">169.254.20.10</span> <br>    forward . <span class="hljs-number">10.96.0.10</span> &#123;<br>            force_tcp<br>    &#125;<br>    prometheus :<span class="hljs-number">9253</span><br>    &#125;<br>.:<span class="hljs-number">53</span> &#123;<br>    errors<br>    cache <span class="hljs-number">30</span><br>    reload<br>    loop<br>    bind <span class="hljs-number">169.254.20.10</span> <br>    forward . /etc/resolv.conf &#123;<br>            force_tcp<br>    &#125;<br>    prometheus :<span class="hljs-number">9253</span><br>    &#125;<br><span class="hljs-number">2020/06/02</span> <span class="hljs-number">05</span>:<span class="hljs-number">00</span>:<span class="hljs-number">32</span> [INFO] Added interface - nodelocaldns<br>.:<span class="hljs-number">53</span> on <span class="hljs-number">169.254.20.10</span><br>cluster.local.:<span class="hljs-number">53</span> on <span class="hljs-number">169.254.20.10</span><br>in-addr.arpa.:<span class="hljs-number">53</span> on <span class="hljs-number">169.254.20.10</span><br>ip6.arpa.:<span class="hljs-number">53</span> on <span class="hljs-number">169.254.20.10</span><br>[INFO] plugin/reload: Running configuration MD5 = <span class="hljs-number">6d</span>e79febbb00e443750acee<span class="hljs-number">66a370b43</span><br>CoreDNS-<span class="hljs-number">1</span>.<span class="hljs-number">6</span>.<span class="hljs-number">7</span><br>linux/amd64, go1.<span class="hljs-number">11</span>.<span class="hljs-number">13</span>, <br></code></pre></td></tr></table></figure><p>仔细分析上面的 LocalDNS 的配置信息，其中 10.96.0.10 为 CoreDNS 的 Service ClusterIP，169.254.20.10 为 LocalDNS 的 IP 地址，10.103.178.36 是 LocalDNS 新建的一个 Service ClusterIP，该 Service 和 CoreDNS 一样都是关联以前的 CoreDNS 的 Endpoints 列表。</p><p>仔细观察可以发现 <code>cluster.local</code>、<code>in-addr.arpa</code> 以及 <code>ip6.arpa</code> 都会通过 <code>forward</code> 转发到 <code>10.96.0.10</code>，也就是去 CoreDNS 解析，其他的则是 <code>forward . /etc/resolv.conf</code> 通过 resolv.conf 文件去解析，该文件的内容如下所示：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs awk">.:<span class="hljs-number">53</span> &#123;<br>    errors<br>    cache <span class="hljs-number">30</span><br>    reload<br>    loop<br>    bind <span class="hljs-number">169.254</span>.<span class="hljs-number">20.10</span> <br>    forward . <span class="hljs-regexp">/etc/</span>resolv.conf &#123;<br>            force_tcp<br>    &#125;<br>    prometheus :<span class="hljs-number">9253</span><br>    &#125;<br></code></pre></td></tr></table></figure><p>我们发现这个变量 <code>__PILLAR__UPSTREAM__SERVERS__</code> 会自动替换为 <code>/etc/resolv.conf</code> 这样的话我们的自定义的域名就无法通过<code>CoreDNS</code>解析，所以我们需要修改为 <code>CoreDNS</code> 或  <code>LocalDNS</code> 的SVC地址这样就能解析了。</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">[root@devops010015001003 ~]#   kubectl <span class="hljs-keyword">get</span> svc -n kube-<span class="hljs-keyword">system</span><br><span class="hljs-type">NAME</span>                <span class="hljs-keyword">TYPE</span>        <span class="hljs-keyword">CLUSTER</span>-IP      <span class="hljs-keyword">EXTERNAL</span>-IP   PORT(S)                  AGE<br>calico-typha        ClusterIP   <span class="hljs-number">10.109</span><span class="hljs-number">.91</span><span class="hljs-number">.45</span>    &lt;<span class="hljs-keyword">none</span>&gt;        <span class="hljs-number">5473</span>/TCP                 <span class="hljs-number">5</span>d19h<br>kube-dns            ClusterIP   <span class="hljs-number">10.96</span><span class="hljs-number">.0</span><span class="hljs-number">.10</span>      &lt;<span class="hljs-keyword">none</span>&gt;        <span class="hljs-number">53</span>/UDP,<span class="hljs-number">53</span>/TCP,<span class="hljs-number">9153</span>/TCP   <span class="hljs-number">11</span>d<br>kube-dns-upstream   ClusterIP   <span class="hljs-number">10.103</span><span class="hljs-number">.178</span><span class="hljs-number">.36</span>   &lt;<span class="hljs-keyword">none</span>&gt;        <span class="hljs-number">53</span>/UDP,<span class="hljs-number">53</span>/TCP            <span class="hljs-number">34</span>m<br></code></pre></td></tr></table></figure><p>修改为：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs css">.:<span class="hljs-number">53</span> &#123;<br>    errors<br>    cache <span class="hljs-number">30</span><br>    reload<br>    loop<br>    bind <span class="hljs-number">169.254</span>.<span class="hljs-number">20.10</span> <br>    forward . <span class="hljs-number">10.103</span>.<span class="hljs-number">178.36</span> &#123;<br>            force_tcp<br>    &#125;<br>    prometheus :<span class="hljs-number">9253</span><br>    &#125;<br></code></pre></td></tr></table></figure><p>对于使用 NodeLocalDNS 的用户一定要注意这个问题，如果使用 hosts 或者 rewrite 插件失效，基本上就是这个问题造成的。排查问题通过日志去分析始终是最好的手段。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Calico配置及原理</title>
    <link href="/2020/05/27/using-calico/"/>
    <url>/2020/05/27/using-calico/</url>
    
    <content type="html"><![CDATA[<h2 id="Calico基本概念"><a href="#Calico基本概念" class="headerlink" title="Calico基本概念"></a>Calico基本概念</h2><ul><li>Calico是针对容器，虚拟机和基于主机的本机工作负载的开源网络和网络安全解决方案。</li><li>Calico支持广泛的平台，包括Kubernetes，OpenShift，Docker EE，OpenStack和裸机服务。</li><li>Calico将灵活的网络功能与无处不在的安全性实施相结合，以提供具有本地Linux内核性能和真正的云原生可扩展性的解决方案。</li><li>Calico为开发人员和集群运营商提供了一致的经验和功能集，无论是在公共云中还是本地运行，在单个节点上还是在数千个节点集群中运行。</li></ul><h2 id="Calico架构"><a href="#Calico架构" class="headerlink" title="Calico架构"></a>Calico架构</h2><p><img src="/images/calico-cni.png" alt="calico-cni"></p><h3 id="Calico网络模型主要工作组件："><a href="#Calico网络模型主要工作组件：" class="headerlink" title="Calico网络模型主要工作组件："></a>Calico网络模型主要工作组件：</h3><ul><li>Felix：运行在每一台 Host 的 agent 进程，主要负责编写路由和ACLs（访问控制列表）。以便为该主机上的 <code>endpoints</code> 资源正常运行提供所需的网络连接。</li><li>etcd：分布式键值存储，主要负责网络元数据一致性，确保Calico网络状态的准确性，可以与kubernetes共用；</li><li>bird（BGP Client）：<code>Calico</code> 为每一台 <code>Host</code> 部署一个 <code>BGP Client</code>，当 <code>Felix</code> 将路由写入 <code>kernel</code> FIB中时 <code>BGP Client</code> 将通过 <code>BGP</code> 协议广播告诉剩余 <code>calico</code> 节点，从而实现网络互通。</li><li>confd：通过监听etcd以了解BGP配置和全局默认值的更改（例如：AS number、日志级别、IPAM信息）。Confd根据ETCD中数据的更新，动态生成BIRD配置文件。当配置文件更改时，confd触发BIRD重新加载新文件。</li></ul><h2 id="Calico两种网络模式"><a href="#Calico两种网络模式" class="headerlink" title="Calico两种网络模式"></a>Calico两种网络模式</h2><p>&amp;emsp;&amp;emsp;Calico本身支持多种网络模式，从<code>overlay</code>和<code>underlay</code>上区分。<code>Calico overlay</code> 模式，一般也称Calico IPIP或VXLAN模式，不同Node间Pod使用IPIP或VXLAN隧道进行通信。<code>Calico underlay</code> 模式，一般也称calico BGP模式，不同Node Pod使用直接路由进行通信。在overlay和underlay都有<code>nodetonode mesh</code>(全网互联)和<code>Route Reflector</code>(路由反射器)。如果有安全组策略需要开放IPIP协议；要求Node允许BGP协议，如果有安全组策略需要开放TCP 179端口；官方推荐使用在Node小于100的集群，我们在使用的过程中已经通过IPIP模式支撑了100-200规模的集群稳定运行。</p><h3 id="路由更新速率问题"><a href="#路由更新速率问题" class="headerlink" title="路由更新速率问题"></a>路由更新速率问题</h3><p>&amp;emsp;&amp;emsp;为什么要考虑路由更新速率？在Calico默认的使用模式中，Calico每个Node一个分配一个Block，每个Block默认为64个IP，当单个Node启动的Pod超过64时，才会分配下一个Block。Calico BGP client默认只向外通告聚合后的Block的路由，默认配置，只有在Node上下线、Node上Pod数量超过Block size的倍数才会出现路由的更新，路由的条目数量是Node级别的。<br>&amp;emsp;&amp;emsp;而实际业务在使用的过程中，会针对一个服务或者一个deployment分配一个IP Pool，这种使用模式会导致Calico的IP Pool没有办法按照Node聚合，出现一些零散的无法聚合的IP地址，最差的情况，会导致每个Pod产生一条路由，会导致路由的条目变为Pod级别。<br>&amp;emsp;&amp;emsp;在默认情况下，交换机设备为了防止路由震荡，会对BGP路由进行收敛保护。但是Kubernetes集群中，Pod生命周期短，变化频繁，需要关闭网络设备的路由变更保护机制才能满足Kubernetes的要求；对于不同的网络设备，路由收敛速度也是不同的，在大规模Pod扩容和迁移的场景，或者进行双数据中心切换，除了考虑Pod的调度时间、启动时间，还需要对网络设备的路由收敛速度进行性能评估和压测。</p><h3 id="路由黑洞问题"><a href="#路由黑洞问题" class="headerlink" title="路由黑洞问题"></a>路由黑洞问题</h3><p>&amp;emsp;&amp;emsp;使用Calico Downward Default模型组网时，Node使用EBGP模式与Node建立邻居关系。当Pod使用的IP地址为内部统一规划的地址，出现Pod IP地址紧张的时候，会出现Pod之间不能正常访问的情况。（注：只会在EBGP模式下才会出现）<br>&amp;emsp;&amp;emsp;Calico分配IP地址的原则为，将整个IPPool分为多个地址块，每个Node获得一个Block，当有Pod调度到某个Node上时，Node优先使用Block内的地址。如果每个新增的Node分不到一个完整的地址块（也就是说Node无法获得整个网段64个IP），Calico IP地址管理功能会去使用其他Node的Block的IP，此时，就会出现Pod无法访问的现象。</p><p>如下图所示，Pod 10.168.73.82无法访问Pod 10.168.73.83。<br><img src="/images/calico-cni-4.png" alt="calico-cni-4"></p><p>&amp;emsp;&amp;emsp;查看Node 10.0.0.70的路由表，其中“blackhole 10.168.73.80&#x2F;28 proto bird”为黑洞路由。如果没有其他优先级更高的路由，主机会将所有目的地址为10.168.73.80&#x2F;28的网络数据丢弃掉。所以在Node 10.0.0.70上ping Pod 10.168.73.84会报“参数不合法”的错误。此时，在Downward Default模式下，Calico配置的这一条黑洞路由使得Node 10.0.0.70不能够响应其他Node上PodIP在10.168.73.80&#x2F;28网段发起的网络请求。<br>&amp;emsp;&amp;emsp;要解决路由黑洞问题问题，首先，除了对整个Calico 的IP Pool总量进行监控外，还需要对可用的IP Block进行监控，确保不会出现IP Block不够分的情况，或者或者IP地址Block借用的情况；也可以通过在规划时计算IP地址总量，以及在kubelet配置参数中指定maxPods来规避这个问题；（注：一般我们会配置子网为<code>/16</code>也就是说能容纳<code>65536</code>个POD。如果一台主机一个block块(64个IP)那么也要1024个主机。为什么是1024，因为65536&#x2F;64&#x3D;1024，用总的IP数除以一个block块的IP数可以计算出总共有多少个block，上面也提到过当一个新的主机无法获得一个完整的block的时候才会出现路由黑洞。所以只要主机不超过1024台或者block块不超过1024个就不会出现。）</p><h3 id="IPIP网络："><a href="#IPIP网络：" class="headerlink" title="IPIP网络："></a>IPIP网络：</h3><p>流量：tunl0设备封装数据，形成隧道，承载流量。</p><p>适用网络类型：适用于互相访问的pod不在同一个网段中，跨网段访问的场景。外层封装的ip能够解决跨网段的路由问题。</p><p>效率：流量需要tunl0设备封装，效率略低。</p><p><img src="/images/calico-cni-2.png" alt="calico-cni-2"></p><h3 id="BGP网络："><a href="#BGP网络：" class="headerlink" title="BGP网络："></a>BGP网络：</h3><p>流量：使用主机路由表信息导向流量</p><p>适用网络类型：适用于互相访问的pod在同一个网段，适用于大型网络。</p><p>效率：原生hostGW，效率高。</p><p><img src="/images/calico-cni-3.png" alt="calico-cni-3"></p><h2 id="Calico-数据流向"><a href="#Calico-数据流向" class="headerlink" title="Calico 数据流向"></a>Calico 数据流向</h2><p>由于个人环境中使用的是 <code>IPIP</code> 模式，因此接下来这里分析一下这种模式。首先是准备两个准备两个Pod分别在不同的主机上。</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">[root@k8s-m1 ~]<span class="hljs-comment"># kubectl get pod -o wide</span><br>NAME                     READY   STATUS    RESTARTS   AGE     IP               <span class="hljs-keyword">NODE</span>     <span class="hljs-title">NOMINATED</span> <span class="hljs-keyword">NODE</span>   <span class="hljs-title">READINESS</span> GATES<br>busybox                  <span class="hljs-number">1</span>/<span class="hljs-number">1</span>     Running   <span class="hljs-number">4</span>          <span class="hljs-number">4h</span>53m   <span class="hljs-number">10.244</span>.<span class="hljs-number">215.68</span>    k8s-n1   <span class="hljs-tag">&lt;none&gt;</span>           <span class="hljs-tag">&lt;none&gt;</span><br>nginx-<span class="hljs-number">7</span>fb7fd49b4-<span class="hljs-number">94694</span>   <span class="hljs-number">1</span>/<span class="hljs-number">1</span>     Running   <span class="hljs-number">0</span>          <span class="hljs-number">46h</span>     <span class="hljs-number">10.244</span>.<span class="hljs-number">111.195</span>   k8s-n2   <span class="hljs-tag">&lt;none&gt;</span>           <span class="hljs-tag">&lt;none&gt;</span><br></code></pre></td></tr></table></figure><p>这里在 <code>nginx-7fb7fd49b4-94694</code> 这个Pod中ping <code>busybox</code> 这个Pod</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs routeros">[root@k8s-m1 ~]# kubectl exec -it nginx-7fb7fd49b4-94694 -- /bin/sh<br>/ #<span class="hljs-built_in"> ping </span>10.244.215.68<span class="hljs-built_in"></span><br><span class="hljs-built_in">PING </span>10.244.215.68 (10.244.215.68): 56 data bytes<br>64 bytes <span class="hljs-keyword">from</span> 10.244.215.68: <span class="hljs-attribute">seq</span>=0 <span class="hljs-attribute">ttl</span>=62 <span class="hljs-attribute">time</span>=0.562 ms<br>64 bytes <span class="hljs-keyword">from</span> 10.244.215.68: <span class="hljs-attribute">seq</span>=1 <span class="hljs-attribute">ttl</span>=62 <span class="hljs-attribute">time</span>=0.535 ms<br>64 bytes <span class="hljs-keyword">from</span> 10.244.215.68: <span class="hljs-attribute">seq</span>=2 <span class="hljs-attribute">ttl</span>=62 <span class="hljs-attribute">time</span>=0.408 ms<br>64 bytes <span class="hljs-keyword">from</span> 10.244.215.68: <span class="hljs-attribute">seq</span>=3 <span class="hljs-attribute">ttl</span>=62 <span class="hljs-attribute">time</span>=0.357 ms<br>^C<br>--- 10.244.215.68<span class="hljs-built_in"> ping </span>statistics ---<br>4 packets transmitted, 4 packets received, 0% packet loss<br>round-trip min/avg/max = 0.357/0.465/0.562 ms<br><br></code></pre></td></tr></table></figure><p>进入pod <code>nginx-7fb7fd49b4-94694</code> 中查看这个pod中的路由信息</p><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs accesslog"><span class="hljs-string">[root@k8s-m1 ~]</span># kubectl exec -it nginx-7fb7fd49b4-<span class="hljs-number">94694</span> -- /bin/sh<br>/ # route -n<br>Kernel IP routing table<br>Destination     Gateway         Genmask         Flags Metric Ref    Use Iface<br><span class="hljs-number">0.0.0.0</span>         <span class="hljs-number">169</span>.<span class="hljs-number">254</span>.<span class="hljs-number">1</span>.<span class="hljs-number">1</span>     <span class="hljs-number">0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span>         UG    <span class="hljs-number">0</span>      <span class="hljs-number">0</span>        <span class="hljs-number">0</span> eth0<br><span class="hljs-number">169.254.1.1</span>     <span class="hljs-number">0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span>         <span class="hljs-number">255</span>.<span class="hljs-number">255</span>.<span class="hljs-number">255</span>.<span class="hljs-number">255</span> UH    <span class="hljs-number">0</span>      <span class="hljs-number">0</span>        <span class="hljs-number">0</span> eth0<br></code></pre></td></tr></table></figure><p>根据路由信息 <code>ping 10.244.215.68</code> 会匹配到第一条。</p><p>第一条路由的意思是：去往任何网段的数据包都发往网关169.254.1.1，然后从eth0网卡发送出去。</p><p><code>nginx-7fb7fd49b4-94694</code> 所在的 <code>k8s-n2</code> 宿主机上路由信息如下：</p><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs accesslog"><span class="hljs-string">[root@k8s-n2 ~]</span># route -n<br>Kernel IP routing table<br>Destination     Gateway         Genmask         Flags Metric Ref    Use Iface<br><span class="hljs-number">0.0.0.0</span>         <span class="hljs-number">192</span>.<span class="hljs-number">168</span>.<span class="hljs-number">28</span>.<span class="hljs-number">1</span>    <span class="hljs-number">0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span>         UG    <span class="hljs-number">0</span>      <span class="hljs-number">0</span>        <span class="hljs-number">0</span> eth0<br><span class="hljs-number">10.244.42.128</span>   <span class="hljs-number">192</span>.<span class="hljs-number">168</span>.<span class="hljs-number">28</span>.<span class="hljs-number">10</span>   <span class="hljs-number">255</span>.<span class="hljs-number">255</span>.<span class="hljs-number">255</span>.<span class="hljs-number">192</span> UG    <span class="hljs-number">0</span>      <span class="hljs-number">0</span>        <span class="hljs-number">0</span> tunl0<br><span class="hljs-number">10.244.111.192</span>  <span class="hljs-number">0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span>         <span class="hljs-number">255</span>.<span class="hljs-number">255</span>.<span class="hljs-number">255</span>.<span class="hljs-number">192</span> U     <span class="hljs-number">0</span>      <span class="hljs-number">0</span>        <span class="hljs-number">0</span> *<br><span class="hljs-number">10.244.111.193</span>  <span class="hljs-number">0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span>         <span class="hljs-number">255</span>.<span class="hljs-number">255</span>.<span class="hljs-number">255</span>.<span class="hljs-number">255</span> UH    <span class="hljs-number">0</span>      <span class="hljs-number">0</span>        <span class="hljs-number">0</span> cali9f065bd7f12<br><span class="hljs-number">10.244.111.194</span>  <span class="hljs-number">0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span>         <span class="hljs-number">255</span>.<span class="hljs-number">255</span>.<span class="hljs-number">255</span>.<span class="hljs-number">255</span> UH    <span class="hljs-number">0</span>      <span class="hljs-number">0</span>        <span class="hljs-number">0</span> cali09e37c2b7c3<br><span class="hljs-number">10.244.111.195</span>  <span class="hljs-number">0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span>         <span class="hljs-number">255</span>.<span class="hljs-number">255</span>.<span class="hljs-number">255</span>.<span class="hljs-number">255</span> UH    <span class="hljs-number">0</span>      <span class="hljs-number">0</span>        <span class="hljs-number">0</span> calic9aa42a3793<br><span class="hljs-number">10.244.111.197</span>  <span class="hljs-number">0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span>         <span class="hljs-number">255</span>.<span class="hljs-number">255</span>.<span class="hljs-number">255</span>.<span class="hljs-number">255</span> UH    <span class="hljs-number">0</span>      <span class="hljs-number">0</span>        <span class="hljs-number">0</span> calia71b83e0080<br><span class="hljs-number">10.244.111.198</span>  <span class="hljs-number">0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span>         <span class="hljs-number">255</span>.<span class="hljs-number">255</span>.<span class="hljs-number">255</span>.<span class="hljs-number">255</span> UH    <span class="hljs-number">0</span>      <span class="hljs-number">0</span>        <span class="hljs-number">0</span> cali78caf7934ca<br><span class="hljs-number">10.244.215.64</span>   <span class="hljs-number">192</span>.<span class="hljs-number">168</span>.<span class="hljs-number">28</span>.<span class="hljs-number">13</span>   <span class="hljs-number">255</span>.<span class="hljs-number">255</span>.<span class="hljs-number">255</span>.<span class="hljs-number">192</span> UG    <span class="hljs-number">0</span>      <span class="hljs-number">0</span>        <span class="hljs-number">0</span> tunl0<br><span class="hljs-number">169.254.0.0</span>     <span class="hljs-number">0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span>         <span class="hljs-number">255</span>.<span class="hljs-number">255</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span>     U     <span class="hljs-number">1002</span>   <span class="hljs-number">0</span>        <span class="hljs-number">0</span> eth0<br><span class="hljs-number">192.168.28.0</span>    <span class="hljs-number">0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span>         <span class="hljs-number">255</span>.<span class="hljs-number">255</span>.<span class="hljs-number">255</span>.<span class="hljs-number">0</span>   U     <span class="hljs-number">0</span>      <span class="hljs-number">0</span>        <span class="hljs-number">0</span> eth0<br></code></pre></td></tr></table></figure><p>可以看到一条Destination为 <code>10.244.215.64</code> 的路由。<br>意思是：当ping包来到 <code>k8s-n2</code> 节点上，会匹配到路由tunl0。该路由的意思是：去往<code>10.244.215.64/26</code>的网段的数据包都发往网关 <code>192.168.28.13</code>。因为 <code>nginx-7fb7fd49b4-94694</code> 的pod在<code>192.168.28.14</code>上，<code>busybox</code>的pod在<code>192.168.28.13</code>上。所以数据包就通过设备tunl0发往到 <code>k8s-n1</code> 节点上。</p><p><code>busybox</code>所在的 <code>k8s-n1</code> 宿主机上路由信息如下：</p><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs accesslog"><span class="hljs-string">[root@k8s-n1 ~]</span># route -n<br>Kernel IP routing table<br>Destination     Gateway         Genmask         Flags Metric Ref    Use Iface<br><span class="hljs-number">0.0.0.0</span>         <span class="hljs-number">192</span>.<span class="hljs-number">168</span>.<span class="hljs-number">28</span>.<span class="hljs-number">1</span>    <span class="hljs-number">0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span>         UG    <span class="hljs-number">0</span>      <span class="hljs-number">0</span>        <span class="hljs-number">0</span> eth0<br><span class="hljs-number">10.244.42.128</span>   <span class="hljs-number">192</span>.<span class="hljs-number">168</span>.<span class="hljs-number">28</span>.<span class="hljs-number">10</span>   <span class="hljs-number">255</span>.<span class="hljs-number">255</span>.<span class="hljs-number">255</span>.<span class="hljs-number">192</span> UG    <span class="hljs-number">0</span>      <span class="hljs-number">0</span>        <span class="hljs-number">0</span> tunl0<br><span class="hljs-number">10.244.111.192</span>  <span class="hljs-number">192</span>.<span class="hljs-number">168</span>.<span class="hljs-number">28</span>.<span class="hljs-number">14</span>   <span class="hljs-number">255</span>.<span class="hljs-number">255</span>.<span class="hljs-number">255</span>.<span class="hljs-number">192</span> UG    <span class="hljs-number">0</span>      <span class="hljs-number">0</span>        <span class="hljs-number">0</span> tunl0<br><span class="hljs-number">10.244.215.64</span>   <span class="hljs-number">0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span>         <span class="hljs-number">255</span>.<span class="hljs-number">255</span>.<span class="hljs-number">255</span>.<span class="hljs-number">192</span> U     <span class="hljs-number">0</span>      <span class="hljs-number">0</span>        <span class="hljs-number">0</span> *<br><span class="hljs-number">10.244.215.68</span>   <span class="hljs-number">0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span>         <span class="hljs-number">255</span>.<span class="hljs-number">255</span>.<span class="hljs-number">255</span>.<span class="hljs-number">255</span> UH    <span class="hljs-number">0</span>      <span class="hljs-number">0</span>        <span class="hljs-number">0</span> cali12d4a061371<br><span class="hljs-number">10.244.215.70</span>   <span class="hljs-number">0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span>         <span class="hljs-number">255</span>.<span class="hljs-number">255</span>.<span class="hljs-number">255</span>.<span class="hljs-number">255</span> UH    <span class="hljs-number">0</span>      <span class="hljs-number">0</span>        <span class="hljs-number">0</span> cali9b7bd2198e3<br><span class="hljs-number">10.244.215.71</span>   <span class="hljs-number">0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span>         <span class="hljs-number">255</span>.<span class="hljs-number">255</span>.<span class="hljs-number">255</span>.<span class="hljs-number">255</span> UH    <span class="hljs-number">0</span>      <span class="hljs-number">0</span>        <span class="hljs-number">0</span> calif301e12f535<br><span class="hljs-number">10.244.215.72</span>   <span class="hljs-number">0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span>         <span class="hljs-number">255</span>.<span class="hljs-number">255</span>.<span class="hljs-number">255</span>.<span class="hljs-number">255</span> UH    <span class="hljs-number">0</span>      <span class="hljs-number">0</span>        <span class="hljs-number">0</span> cali8af25a4f5bc<br><span class="hljs-number">10.244.215.73</span>   <span class="hljs-number">0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span>         <span class="hljs-number">255</span>.<span class="hljs-number">255</span>.<span class="hljs-number">255</span>.<span class="hljs-number">255</span> UH    <span class="hljs-number">0</span>      <span class="hljs-number">0</span>        <span class="hljs-number">0</span> cali05ecd722319<br><span class="hljs-number">169.254.0.0</span>     <span class="hljs-number">0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span>         <span class="hljs-number">255</span>.<span class="hljs-number">255</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span>     U     <span class="hljs-number">1002</span>   <span class="hljs-number">0</span>        <span class="hljs-number">0</span> eth0<br><span class="hljs-number">192.168.28.0</span>    <span class="hljs-number">0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span>         <span class="hljs-number">255</span>.<span class="hljs-number">255</span>.<span class="hljs-number">255</span>.<span class="hljs-number">0</span>   U     <span class="hljs-number">0</span>      <span class="hljs-number">0</span>        <span class="hljs-number">0</span> eth0<br></code></pre></td></tr></table></figure><p>当 <code>k8s-n1</code> 节点网卡收到数据包之后，发现发往的目的ip为 <code>10.244.215.68</code> ，于是匹配到Destination为 <code>10.244.215.68</code> 的路由。</p><p>该路由的意思是：<code>10.244.215.68</code> 是本机直连设备，去往设备的数据包发往 <code>cali12d4a061371</code></p><p>为什么这么奇怪会有一个名为 <code>cali12d4a061371</code>的设备呢？<br>简单来说，Calico 在主机上创建了一堆的 <code>veth pair</code> ，其中一端在主机上，另一端在容器的网络命名空间里，然后在容器和主机中分别设置几条路由，来完成网络的互联。</p><p>接着验证一下。我们进入 <code>busybox</code> 的pod，查看到 4 号设备后面的编号是：<code>66</code></p><figure class="highlight pf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs pf">[root@k8s-m1 ~]<span class="hljs-comment"># kubectl exec -it busybox -- /bin/sh</span><br>sh-<span class="hljs-number">4.2</span><span class="hljs-comment"># ip a</span><br><span class="hljs-number">1</span>: lo: <span class="hljs-variable">&lt;LOOPBACK,UP,LOWER_UP&gt;</span> mtu <span class="hljs-number">65536</span> qdisc noqueue <span class="hljs-keyword">state</span> UNKNOWN <span class="hljs-keyword">group</span> <span class="hljs-keyword">default</span> qlen <span class="hljs-number">1000</span><br>    link/loopback <span class="hljs-number">00</span>:<span class="hljs-number">00</span>:<span class="hljs-number">00</span>:<span class="hljs-number">00</span>:<span class="hljs-number">00</span>:<span class="hljs-number">00</span> brd <span class="hljs-number">00</span>:<span class="hljs-number">00</span>:<span class="hljs-number">00</span>:<span class="hljs-number">00</span>:<span class="hljs-number">00</span>:<span class="hljs-number">00</span><br>    <span class="hljs-keyword">inet</span> <span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>/<span class="hljs-number">8</span> scope host lo<br>       valid_lft forever preferred_lft forever<br>    <span class="hljs-keyword">inet6</span> ::<span class="hljs-number">1</span>/<span class="hljs-number">128</span> scope host <br>       valid_lft forever preferred_lft forever<br><span class="hljs-number">2</span>: tunl0@NONE: <span class="hljs-variable">&lt;NOARP&gt;</span> mtu <span class="hljs-number">1480</span> qdisc noop <span class="hljs-keyword">state</span> DOWN <span class="hljs-keyword">group</span> <span class="hljs-keyword">default</span> qlen <span class="hljs-number">1000</span><br>    link/ipip <span class="hljs-number">0.0</span>.<span class="hljs-number">0.0</span> brd <span class="hljs-number">0.0</span>.<span class="hljs-number">0.0</span><br><span class="hljs-number">4</span>: eth0@if66: <span class="hljs-variable">&lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt;</span> mtu <span class="hljs-number">1480</span> qdisc noqueue <span class="hljs-keyword">state</span> UP <span class="hljs-keyword">group</span> <span class="hljs-keyword">default</span> <br>    link/ether <span class="hljs-number">42</span>:<span class="hljs-number">26</span>:b4:<span class="hljs-number">65</span>:<span class="hljs-number">87</span>:<span class="hljs-number">9</span>f brd ff:ff:ff:ff:ff:ff link-netnsid <span class="hljs-number">0</span><br>    <span class="hljs-keyword">inet</span> <span class="hljs-number">10.244</span>.<span class="hljs-number">215.68</span>/<span class="hljs-number">32</span> brd <span class="hljs-number">10.244</span>.<span class="hljs-number">215.68</span> scope <span class="hljs-keyword">global</span> eth0<br>       valid_lft forever preferred_lft forever<br>    <span class="hljs-keyword">inet6</span> fe80::<span class="hljs-number">4026</span>:b4ff:fe65:<span class="hljs-number">879</span>f/<span class="hljs-number">64</span> scope link <br>       valid_lft forever preferred_lft forever<br></code></pre></td></tr></table></figure><p>然后我们登录到 <code>busybox</code> 这个pod所在的宿主机查看</p><figure class="highlight pf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs pf">[root@k8s-n1 ~]<span class="hljs-comment"># ip add</span><br><span class="hljs-number">1</span>: lo: <span class="hljs-variable">&lt;LOOPBACK,UP,LOWER_UP&gt;</span> mtu <span class="hljs-number">65536</span> qdisc noqueue <span class="hljs-keyword">state</span> UNKNOWN <span class="hljs-keyword">group</span> <span class="hljs-keyword">default</span> qlen <span class="hljs-number">1000</span><br>    link/loopback <span class="hljs-number">00</span>:<span class="hljs-number">00</span>:<span class="hljs-number">00</span>:<span class="hljs-number">00</span>:<span class="hljs-number">00</span>:<span class="hljs-number">00</span> brd <span class="hljs-number">00</span>:<span class="hljs-number">00</span>:<span class="hljs-number">00</span>:<span class="hljs-number">00</span>:<span class="hljs-number">00</span>:<span class="hljs-number">00</span><br>    <span class="hljs-keyword">inet</span> <span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>/<span class="hljs-number">8</span> scope host lo<br>       valid_lft forever preferred_lft forever<br><span class="hljs-number">2</span>: eth0: <span class="hljs-variable">&lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt;</span> mtu <span class="hljs-number">1500</span> qdisc pfifo_fast <span class="hljs-keyword">state</span> UP <span class="hljs-keyword">group</span> <span class="hljs-keyword">default</span> qlen <span class="hljs-number">1000</span><br>    link/ether <span class="hljs-number">00</span>:<span class="hljs-number">1</span>c:<span class="hljs-number">42</span>:f3:<span class="hljs-number">3</span>c:<span class="hljs-number">42</span> brd ff:ff:ff:ff:ff:ff<br>    <span class="hljs-keyword">inet</span> <span class="hljs-number">192.168</span>.<span class="hljs-number">28.13</span>/<span class="hljs-number">24</span> brd <span class="hljs-number">192.168</span>.<span class="hljs-number">28.255</span> scope <span class="hljs-keyword">global</span> eth0<br>       valid_lft forever preferred_lft forever<br><br>...<br><br><span class="hljs-number">66</span>: cali12d4a061371@if4: <span class="hljs-variable">&lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt;</span> mtu <span class="hljs-number">1480</span> qdisc noqueue <span class="hljs-keyword">state</span> UP <span class="hljs-keyword">group</span> <span class="hljs-keyword">default</span> <br>    link/ether ee:ee:ee:ee:ee:ee brd ff:ff:ff:ff:ff:ff link-netnsid <span class="hljs-number">3</span><br><span class="hljs-number">68</span>: cali9b7bd2198e3@if4: <span class="hljs-variable">&lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt;</span> mtu <span class="hljs-number">1480</span> qdisc noqueue <span class="hljs-keyword">state</span> UP <span class="hljs-keyword">group</span> <span class="hljs-keyword">default</span> <br>    link/ether ee:ee:ee:ee:ee:ee brd ff:ff:ff:ff:ff:ff link-netnsid <span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><p>发现pod <code>busybox</code> 中的另一端设备编号和<code>k8s-n1</code>宿主机上看到的 <code>cali12d4a061371</code> 编号 <code>66</code> 是一样的</p><p>所以，<code>k8s-n1</code>上的路由，发送 <code>cali12d4a061371</code> 网卡设备的数据其实就是发送到了 <code>busybox</code> 的这个pod中去了。到这里ping包就到了目的地。最粗暴的办法是使用 <code>ip link del cali12d4a061371@if4</code> 删除网卡看是否还能ping通就知道了。</p><p>&amp;emsp;&amp;emsp;我们看到不管是容器也好还是主机也好都有一些奇怪的地方，从容器路由表可以知道 <code>169.254.1.1</code> 是容器的默认网关，MAC地址也是一个无效的MAC地址<code>ee:ee:ee:ee:ee:ee</code> 为什么会这这样呢，其实这些都是calico写死了的。Calico利用了网卡的proxy_arp功能，具体的，是将<code>/proc/sys/net/ipv4/conf/calic9aa42a3793/proxy_arp</code>置为<code>1</code>。当设置这个标志之后，就开启了proxy_arp功能。主机就会看起来像一个网关，会响应所有的ARP请求，并将自己的MAC地址告诉客户端。<br>&amp;emsp;&amp;emsp;也就是说，当容器发送ARP请求时，<code>calic9aa42a3793</code>网卡会告诉容器，我拥有169.254.1.1这个IP，我的MAC地址是XXX，这样当容器去访问外部服务时其实是访问的是<code>calic9aa42a3793</code>。然后在由<code>calic9aa42a3793</code>代替容器去访问外部服务然后把结果返回给容器这样就看起来网络就通了。</p><p>&amp;emsp;&amp;emsp;通过tcpdump抓包可以看到首先容器会发送一个arp广播问<code>169.254.1.1</code>的MAC地址是多少，告诉<code>10.244.215.81</code> 这IP。其实这个IP就是当前Pod自己的IP，也就是告诉自己。然后<code>cali03d85d58f77</code>这个ARP请求，并回复告诉容器我拥有这个IP的MAC，他的MAC地址是<code>ee:ee:ee:ee:ee:ee</code>。如果你想验证你可以使用<code>ip link set dev cali03d85d58f77 address ee:ee:ee:ee:11:11</code>修改<code>cali03d85d58f77</code>网卡的MAC地址，然后你在抓包看看效果。</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">tcpdump</span> -i cali03d85d58f77 -e -nn<br><span class="hljs-attribute">tcpdump</span>: verbose output suppressed, use -v or -vv for full protocol decode<br><span class="hljs-attribute">listening</span> <span class="hljs-literal">on</span> cali03d85d58f77, link-type EN10MB (Ethernet), capture size <span class="hljs-number">262144</span> bytes<br><span class="hljs-attribute">14</span>:<span class="hljs-number">36</span>:<span class="hljs-number">35</span>.<span class="hljs-number">204394</span> <span class="hljs-number">72</span>:f0:<span class="hljs-number">91</span>:<span class="hljs-number">25</span>:<span class="hljs-number">10</span>:ce &gt; ff:ff:ff:ff:ff:ff, ethertype ARP (<span class="hljs-number">0</span>x0806), length <span class="hljs-number">42</span>: Request who-has <span class="hljs-number">169.254.1.1</span> tell <span class="hljs-number">10.244.215.81</span>, length <span class="hljs-number">28</span><br><span class="hljs-attribute">14</span>:<span class="hljs-number">36</span>:<span class="hljs-number">35</span>.<span class="hljs-number">204428</span> ee:ee:ee:ee:ee:ee &gt; <span class="hljs-number">72</span>:f0:<span class="hljs-number">91</span>:<span class="hljs-number">25</span>:<span class="hljs-number">10</span>:ce, ethertype ARP (<span class="hljs-number">0</span>x0806), length <span class="hljs-number">42</span>: Reply <span class="hljs-number">169.254.1.1</span> is-at ee:ee:ee:ee:ee:ee, length <span class="hljs-number">28</span><br><span class="hljs-attribute">14</span>:<span class="hljs-number">36</span>:<span class="hljs-number">35</span>.<span class="hljs-number">204433</span> <span class="hljs-number">72</span>:f0:<span class="hljs-number">91</span>:<span class="hljs-number">25</span>:<span class="hljs-number">10</span>:ce &gt; ee:ee:ee:ee:ee:ee, ethertype IPv4 (<span class="hljs-number">0</span>x0800), length <span class="hljs-number">98</span>: <span class="hljs-number">10.244.215.81</span> &gt; <span class="hljs-number">10.244.111.204</span>: ICMP echo request, id <span class="hljs-number">11520</span>, seq <span class="hljs-number">0</span>, length <span class="hljs-number">64</span><br><span class="hljs-attribute">14</span>:<span class="hljs-number">36</span>:<span class="hljs-number">35</span>.<span class="hljs-number">205018</span> ee:ee:ee:ee:ee:ee &gt; <span class="hljs-number">72</span>:f0:<span class="hljs-number">91</span>:<span class="hljs-number">25</span>:<span class="hljs-number">10</span>:ce, ethertype IPv4 (<span class="hljs-number">0</span>x0800), length <span class="hljs-number">98</span>: <span class="hljs-number">10.244.111.204</span> &gt; <span class="hljs-number">10.244.215.81</span>: ICMP echo reply, id <span class="hljs-number">11520</span>, seq <span class="hljs-number">0</span>, length <span class="hljs-number">64</span><br></code></pre></td></tr></table></figure><p>修改MAC地址后</p><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs accesslog">/ # ip neigh<br><span class="hljs-number">169.254.1.1</span> dev eth0 lladdr ee:ee:ee:ee:<span class="hljs-number">11</span>:<span class="hljs-number">11</span> ref <span class="hljs-number">1</span> used <span class="hljs-number">0</span>/<span class="hljs-number">0</span>/<span class="hljs-number">0</span> probes <span class="hljs-number">1</span> REACHABLE<br><span class="hljs-number">192.168.28.13</span> dev eth0 lladdr ee:ee:ee:ee:ee:ee used <span class="hljs-number">0</span>/<span class="hljs-number">0</span>/<span class="hljs-number">0</span> probes <span class="hljs-number">0</span> STALE<br></code></pre></td></tr></table></figure><h2 id="部署安装"><a href="#部署安装" class="headerlink" title="部署安装"></a>部署安装</h2><p>1）确保Calico可以在主机上进行管理cali和tunl接口，如果主机上存在NetworkManage，请配置NetworkManager。</p><p>NetworkManager会为默认网络名称空间中的接口操纵路由表，在该默认名称空间中，固定了Calico veth对以连接到容器，这可能会干扰Calico代理正确路由的能力。</p><p>在以下位置创建以下配置文件，以防止NetworkManager干扰接口：</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs gradle">vim <span class="hljs-regexp">/etc/</span>NetworkManager<span class="hljs-regexp">/conf.d/</span>calico.conf<br>[keyfile]<br>unmanaged-devices=<span class="hljs-keyword">interface</span>-name:cali*;<span class="hljs-keyword">interface</span>-name:tunl*<br></code></pre></td></tr></table></figure><h4 id="选择数据存储方式"><a href="#选择数据存储方式" class="headerlink" title="选择数据存储方式"></a>选择数据存储方式</h4><p>&amp;emsp;&amp;emsp;Calico同时支持Kubernetes API数据存储（kdd）和etcd数据存储。建议在本地部署中使用Kubernetes API数据存储，它仅支持Kubernetes工作负载。etcd是混合部署的最佳数据存储。（注意：使用Kubernetes API数据存储安装Calico时calico超过50个节点）需要做如下设置。</p><p>&amp;emsp;&amp;emsp;在calico.yaml文件中将名为<code>calico-typha</code>的<code>deployments</code>的<code>replicas</code>修改为当前节点的10&#x2F;1。假如有200个节点就设置20个<code>replicas</code>。</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">apiVersion:</span> apps/v1beta1<br><span class="hljs-symbol">kind:</span> Deployment<br><span class="hljs-symbol">metadata:</span><br><span class="hljs-symbol">  name:</span> calico-typha<br>  ...<br><span class="hljs-symbol">spec:</span><br>  ...<br><span class="hljs-symbol">  replicas:</span> <span class="hljs-params">&lt;number of replicas&gt;</span><br></code></pre></td></tr></table></figure><p>2）然后更改 <code>CALICO_IPV4POOL_IPIP</code> 为 <code>Never</code> 使用 <code>BGP</code> 模式，另外增加 <code>IP_AUTODETECTION_METHOD</code> 为 <code>interface</code> 使用匹配模式，默认是first-found模式，在复杂网络环境下还是有出错的可能，还有<code>CALICO_IPV4POOL_CIDR</code> 设置为kubeadm初始化时设置的<code>podSubnet</code>参数。</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">curl https:<span class="hljs-regexp">//</span>docs.projectcalico.org<span class="hljs-regexp">/manifests/</span>calico-typha.yaml -o calico.yaml<br></code></pre></td></tr></table></figure><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"># <span class="hljs-keyword">no</span> effect. This should fall <span class="hljs-keyword">within</span> `<span class="hljs-comment">--cluster-cidr`.</span><br>- <span class="hljs-type">name</span>: CALICO_IPV4POOL_CIDR<br>  <span class="hljs-keyword">value</span>: &quot;10.244.0.0/16&quot;<br># <span class="hljs-keyword">Cluster</span> <span class="hljs-keyword">type</span> <span class="hljs-keyword">to</span> identify the deployment <span class="hljs-keyword">type</span><br>- <span class="hljs-type">name</span>: CLUSTER_TYPE<br>  <span class="hljs-keyword">value</span>: &quot;k8s,bgp&quot;<br># IP automatic detection<br>- <span class="hljs-type">name</span>: IP_AUTODETECTION_METHOD<br>  <span class="hljs-keyword">value</span>: &quot;interface=en.*&quot;<br># Auto-detect the BGP IP address.<br>- <span class="hljs-type">name</span>: IP<br>  <span class="hljs-keyword">value</span>: &quot;autodetect&quot;<br># <span class="hljs-keyword">Enable</span> IPIP<br>- <span class="hljs-type">name</span>: CALICO_IPV4POOL_IPIP<br>  <span class="hljs-keyword">value</span>: &quot;Never&quot;<br></code></pre></td></tr></table></figure><p>3）应用calico文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@devops010015001003 ~]<span class="hljs-comment"># kubectl apply  -f calico.yaml       </span><br>configmap/calico-config created<br>customresourcedefinition.apiextensions.k8s.io/bgpconfigurations.crd.projectcalico.org created<br>customresourcedefinition.apiextensions.k8s.io/bgppeers.crd.projectcalico.org created<br>customresourcedefinition.apiextensions.k8s.io/blockaffinities.crd.projectcalico.org created<br>customresourcedefinition.apiextensions.k8s.io/clusterinformations.crd.projectcalico.org created<br>customresourcedefinition.apiextensions.k8s.io/felixconfigurations.crd.projectcalico.org created<br>customresourcedefinition.apiextensions.k8s.io/globalnetworkpolicies.crd.projectcalico.org created<br>customresourcedefinition.apiextensions.k8s.io/globalnetworksets.crd.projectcalico.org created<br>customresourcedefinition.apiextensions.k8s.io/hostendpoints.crd.projectcalico.org created<br>customresourcedefinition.apiextensions.k8s.io/ipamblocks.crd.projectcalico.org created<br>customresourcedefinition.apiextensions.k8s.io/ipamconfigs.crd.projectcalico.org created<br>customresourcedefinition.apiextensions.k8s.io/ipamhandles.crd.projectcalico.org created<br>customresourcedefinition.apiextensions.k8s.io/ippools.crd.projectcalico.org created<br>customresourcedefinition.apiextensions.k8s.io/kubecontrollersconfigurations.crd.projectcalico.org created<br>customresourcedefinition.apiextensions.k8s.io/networkpolicies.crd.projectcalico.org created<br>customresourcedefinition.apiextensions.k8s.io/networksets.crd.projectcalico.org created<br>clusterrole.rbac.authorization.k8s.io/calico-kube-controllers created<br>clusterrolebinding.rbac.authorization.k8s.io/calico-kube-controllers created<br>clusterrole.rbac.authorization.k8s.io/calico-node created<br>clusterrolebinding.rbac.authorization.k8s.io/calico-node created<br>service/calico-typha created<br>deployment.apps/calico-typha created<br>poddisruptionbudget.policy/calico-typha created<br>daemonset.apps/calico-node created<br>serviceaccount/calico-node created<br>deployment.apps/calico-kube-controllers created<br>serviceaccount/calico-kube-controllers created<br></code></pre></td></tr></table></figure><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">[root@devops010015001003 ~]<span class="hljs-comment"># kubectl  get pod -n kube-system</span><br>NAME                                         READY   STATUS    RESTARTS   AGE<br>calico-kube-controllers-<span class="hljs-number">789</span>f6df884-fxgcl     <span class="hljs-number">1</span>/<span class="hljs-number">1</span>     Running   <span class="hljs-number">0</span>          <span class="hljs-number">4m</span>55s<br>calico-<span class="hljs-keyword">node</span><span class="hljs-title">-28hx7</span>                            <span class="hljs-number">1</span>/<span class="hljs-number">1</span>     Running   <span class="hljs-number">0</span>          <span class="hljs-number">4m</span>55s<br>calico-<span class="hljs-keyword">node</span><span class="hljs-title">-fqk8n</span>                            <span class="hljs-number">1</span>/<span class="hljs-number">1</span>     Running   <span class="hljs-number">0</span>          <span class="hljs-number">4m</span>55s<br>calico-<span class="hljs-keyword">node</span><span class="hljs-title">-plb4z</span>                            <span class="hljs-number">1</span>/<span class="hljs-number">1</span>     Running   <span class="hljs-number">0</span>          <span class="hljs-number">4m</span>55s<br>calico-<span class="hljs-keyword">node</span><span class="hljs-title">-ppgpb</span>                            <span class="hljs-number">1</span>/<span class="hljs-number">1</span>     Running   <span class="hljs-number">0</span>          <span class="hljs-number">4m</span>55s<br>calico-<span class="hljs-keyword">node</span><span class="hljs-title">-x9gfj</span>                            <span class="hljs-number">1</span>/<span class="hljs-number">1</span>     Running   <span class="hljs-number">0</span>          <span class="hljs-number">4m</span>55s<br>calico-typha-<span class="hljs-number">7698958</span>d65-<span class="hljs-number">6</span>j5jr                <span class="hljs-number">1</span>/<span class="hljs-number">1</span>     Running   <span class="hljs-number">0</span>          <span class="hljs-number">4m</span>55s<br>calico-typha-<span class="hljs-number">7698958</span>d65-b4tn6                <span class="hljs-number">1</span>/<span class="hljs-number">1</span>     Running   <span class="hljs-number">0</span>          <span class="hljs-number">4m</span>55s<br></code></pre></td></tr></table></figure><h2 id="安装calicoctl"><a href="#安装calicoctl" class="headerlink" title="安装calicoctl"></a>安装calicoctl</h2><p>下载calicoctl客户端</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs autoit">[root<span class="hljs-symbol">@devops010015001003</span> ~]<span class="hljs-meta"># curl -O -L  https://github.com/projectcalico/calicoctl/releases/download/v3.14.0/calicoctl</span><br>[root<span class="hljs-symbol">@devops010015001003</span> ~]<span class="hljs-meta"># chmod 755 calicoctl</span><br>[root<span class="hljs-symbol">@devops010015001003</span> ~]<span class="hljs-meta"># chown root.root calicoctl</span><br>[root<span class="hljs-symbol">@devops010015001003</span> ~]<span class="hljs-meta"># mv calicoctl /usr/bin/</span><br></code></pre></td></tr></table></figure><p>验证是否可用</p><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs dns">[root@devops0<span class="hljs-number">10015001003</span> ~]# calicoctl get nodes<br>NAME                 <br>devops0<span class="hljs-number">10015001003</span>   <br>devops0<span class="hljs-number">10015001004</span>   <br>devops0<span class="hljs-number">10015001005</span>   <br>devops0<span class="hljs-number">10015001006</span>   <br>devops0<span class="hljs-number">10015001007</span>   <br></code></pre></td></tr></table></figure><h2 id="BGP两种模式"><a href="#BGP两种模式" class="headerlink" title="BGP两种模式"></a>BGP两种模式</h2><ul><li><p>全互联模式(node-to-node mesh)<br>&amp;emsp;&amp;emsp;全互联模式，每一个BGP Speaker都需要和其他BGP Speaker建立BGP连接，这样BGP连接总数就是N^2，如果数量过大会消耗大量连接。如果集群数量超过100台官方不建议使用此种模式。</p></li><li><p>路由反射模式Router Reflection（RR）<br>&amp;emsp;&amp;emsp;RR模式中会指定一个或多个BGP Speaker为RouterReflection，它与网络中其他Speaker建立连接，每个Speaker只要与Router Reflection建立BGP就可以获得全网的路由信息。在calico中可以通过Global Peer实现RR模式。</p></li></ul><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs gherkin">[root<span class="hljs-meta">@devops010015001003</span> ~]<span class="hljs-comment"># calicoctl node status</span><br>Calico process is running.<br><br>IPv4 BGP status<br>+--------------+-------------------+-------+----------+-------------+<br>|<span class="hljs-string"> PEER ADDRESS </span>|<span class="hljs-string">     PEER TYPE     </span>|<span class="hljs-string"> STATE </span>|<span class="hljs-string">  SINCE   </span>|<span class="hljs-string">    INFO     </span>|<br>+--------------+-------------------+-------+----------+-------------+<br>|<span class="hljs-string"> 10.15.1.4    </span>|<span class="hljs-string"> node-to-node mesh </span>|<span class="hljs-string"> up    </span>|<span class="hljs-string"> 09:38:47 </span>|<span class="hljs-string"> Established </span>|<br>|<span class="hljs-string"> 10.15.1.5    </span>|<span class="hljs-string"> node-to-node mesh </span>|<span class="hljs-string"> up    </span>|<span class="hljs-string"> 09:38:47 </span>|<span class="hljs-string"> Established </span>|<br>|<span class="hljs-string"> 10.15.1.6    </span>|<span class="hljs-string"> node-to-node mesh </span>|<span class="hljs-string"> up    </span>|<span class="hljs-string"> 09:38:47 </span>|<span class="hljs-string"> Established </span>|<br>|<span class="hljs-string"> 10.15.1.7    </span>|<span class="hljs-string"> node-to-node mesh </span>|<span class="hljs-string"> up    </span>|<span class="hljs-string"> 09:38:48 </span>|<span class="hljs-string"> Established </span>|<br>+--------------+-------------------+-------+----------+-------------+<br><br>IPv6 BGP status<br>No IPv6 peers found.<br></code></pre></td></tr></table></figure><p>使用calicoctl命令查看calico当前使用模式为<code>node-to-node mesh</code>全互联模式（full mesh）会造成路由条目过大，无法在大规模集群中部署。使用BGP RR(中心化)的方式交换路由，能够有效降低节点间的连接数。</p><h3 id="配置BGP-RR模型-使用node充当路由反射器"><a href="#配置BGP-RR模型-使用node充当路由反射器" class="headerlink" title="配置BGP RR模型(使用node充当路由反射器)"></a>配置BGP RR模型(使用node充当路由反射器)</h3><p>我们将建立两个路由反射器，这意味着即使我们取消一个路由反射器节点进行维护，也可以避免单点故障。</p><p>选择两个节点，并对每个节点执行以下操作：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">calicoctl <span class="hljs-built_in">get</span> node &lt;node name&gt; -o yaml --<span class="hljs-built_in">export</span> &gt; node.yaml<br></code></pre></td></tr></table></figure><p>编辑YAML以添加：</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">metadata:</span><br><span class="hljs-symbol">  labels:</span><br>    calico-route-reflector: <span class="hljs-string">&quot;&quot;</span><br><span class="hljs-symbol">spec:</span><br><span class="hljs-symbol">  bgp:</span><br><span class="hljs-symbol">    routeReflectorClusterID:</span> <span class="hljs-number">224.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span><br></code></pre></td></tr></table></figure><p>重新应用YAML</p><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xquery">calicoctl<span class="hljs-built_in"> apply</span> -f <span class="hljs-type">node</span>.yaml<br></code></pre></td></tr></table></figure><h4 id="配置-BGPPeer"><a href="#配置-BGPPeer" class="headerlink" title="配置 BGPPeer"></a>配置 BGPPeer</h4><p>将所有非反射器节点配置为与所有路由反射器对等</p><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-attribute">calicoctl apply -f - &lt;&lt;EOF</span><br><span class="hljs-attribute">kind</span><span class="hljs-punctuation">:</span> <span class="hljs-string">BGPPeer</span><br><span class="hljs-attribute">apiVersion</span><span class="hljs-punctuation">:</span> <span class="hljs-string">projectcalico.org/v3</span><br><span class="hljs-attribute">metadata</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">peer-to-rrs</span><br><span class="hljs-attribute">spec</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">nodeSelector</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;!has(calico-route-reflector)&quot;</span><br>  <span class="hljs-attribute">peerSelector</span><span class="hljs-punctuation">:</span> <span class="hljs-string">has(calico-route-reflector)</span><br>EOF<br></code></pre></td></tr></table></figure><p>将所有路由反射器配置为彼此对等</p><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-attribute">calicoctl apply -f - &lt;&lt;EOF</span><br><span class="hljs-attribute">kind</span><span class="hljs-punctuation">:</span> <span class="hljs-string">BGPPeer</span><br><span class="hljs-attribute">apiVersion</span><span class="hljs-punctuation">:</span> <span class="hljs-string">projectcalico.org/v3</span><br><span class="hljs-attribute">metadata</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">rrs-to-rrs</span><br><span class="hljs-attribute">spec</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">nodeSelector</span><span class="hljs-punctuation">:</span> <span class="hljs-string">has(calico-route-reflector)</span><br>  <span class="hljs-attribute">peerSelector</span><span class="hljs-punctuation">:</span> <span class="hljs-string">has(calico-route-reflector)</span><br>EOF<br></code></pre></td></tr></table></figure><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">[root@devops010015001003 overlord]<span class="hljs-comment"># calicoctl get bgppeer      </span><br>NAME          PEERIP   <span class="hljs-keyword">NODE</span>                           <span class="hljs-title">ASN</span>   <br>peer-to-rrs            !has(calico-route-reflector)   <span class="hljs-number">0</span>     <br>rrs-to-rrs             has(calico-route-reflector)    <span class="hljs-number">0</span>    <br></code></pre></td></tr></table></figure><p>禁用默认的node-to-node mesh模式</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">calicoctl</span> <span class="hljs-string">create</span> <span class="hljs-string">-f</span> <span class="hljs-bullet">-</span> <span class="hljs-string">&lt;&lt;EOF</span><br> <span class="hljs-attr">apiVersion:</span> <span class="hljs-string">projectcalico.org/v3</span><br> <span class="hljs-attr">kind:</span> <span class="hljs-string">BGPConfiguration</span><br> <span class="hljs-attr">metadata:</span><br>   <span class="hljs-attr">name:</span> <span class="hljs-string">default</span><br> <span class="hljs-attr">spec:</span><br>   <span class="hljs-attr">nodeToNodeMeshEnabled:</span> <span class="hljs-literal">false</span><br>   <span class="hljs-attr">asNumber:</span> <span class="hljs-number">64512</span><br><span class="hljs-string">EOF</span><br></code></pre></td></tr></table></figure><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript">[root@devops010015001003 overlord]<span class="hljs-comment"># calicoctl get bgpconfig -o wide</span><br>NAME      LOGSEVERITY   MESHENABLED   ASNUMBER   <br><span class="hljs-keyword">default</span>                 <span class="hljs-literal">false</span>         <span class="hljs-number">64512</span>      <br></code></pre></td></tr></table></figure><p>此时在反射器节点上使用 calicoctl node status 应该能看到类似如下输出</p><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs gherkin">[root<span class="hljs-meta">@devops010015001003</span> overlord]<span class="hljs-comment"># calicoctl node status</span><br>Calico process is running.<br><br>IPv4 BGP status<br>+--------------+---------------+-------+----------+-------------+<br>|<span class="hljs-string"> PEER ADDRESS </span>|<span class="hljs-string">   PEER TYPE   </span>|<span class="hljs-string"> STATE </span>|<span class="hljs-string">  SINCE   </span>|<span class="hljs-string">    INFO     </span>|<br>+--------------+---------------+-------+----------+-------------+<br>|<span class="hljs-string"> 10.15.1.4    </span>|<span class="hljs-string"> node specific </span>|<span class="hljs-string"> up    </span>|<span class="hljs-string"> 01:12:40 </span>|<span class="hljs-string"> Established </span>|<br>|<span class="hljs-string"> 10.15.1.5    </span>|<span class="hljs-string"> node specific </span>|<span class="hljs-string"> up    </span>|<span class="hljs-string"> 01:12:46 </span>|<span class="hljs-string"> Established </span>|<br>|<span class="hljs-string"> 10.15.1.6    </span>|<span class="hljs-string"> node specific </span>|<span class="hljs-string"> up    </span>|<span class="hljs-string"> 01:12:46 </span>|<span class="hljs-string"> Established </span>|<br>|<span class="hljs-string"> 10.15.1.7    </span>|<span class="hljs-string"> node specific </span>|<span class="hljs-string"> up    </span>|<span class="hljs-string"> 01:12:46 </span>|<span class="hljs-string"> Established </span>|<br>+--------------+---------------+-------+----------+-------------+<br><br>IPv6 BGP status<br>No IPv6 peers found.<br></code></pre></td></tr></table></figure><p>在非反射器节点上，您应该只看到两个对等体。</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc">[root@devops010015001005 overlord]# calicoctl node status<br>Calico process is running.<br><br><span class="hljs-section">IPv4 BGP status</span><br><span class="hljs-section">+--------------+---------------+-------+----------+-------------+</span><br><span class="hljs-section">| PEER ADDRESS |   PEER TYPE   | STATE |  SINCE   |    INFO     |</span><br><span class="hljs-section">+--------------+---------------+-------+----------+-------------+</span><br>| 10.15.1.3    | node specific | up    | 01:12:46 | Established |<br><span class="hljs-section">| 10.15.1.4    | node specific | up    | 01:12:46 | Established |</span><br><span class="hljs-section">+--------------+---------------+-------+----------+-------------+</span><br><br>IPv6 BGP status<br>No IPv6 peers found.<br><br></code></pre></td></tr></table></figure><h3 id="Calico-BGP跨网段-大型网络"><a href="#Calico-BGP跨网段-大型网络" class="headerlink" title="Calico BGP跨网段(大型网络)"></a>Calico BGP跨网段(大型网络)</h3><p><img src="/images/calico-cni-6.png" alt="calico-cni-6"></p><p><img src="/images/calico-cni-5.jpg" alt="calico-cni-5"></p><p>当节点位于不同的网络段时，我们需要在交换机或路由器上开启BGP协议，并配置BGPPeer将peerIP设置为路由器或交换机IP，我们需要做如下操作。</p><p>为机架1上的节点设置AS号</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">calicoctl patch <span class="hljs-keyword">node</span> <span class="hljs-title">my-node</span> -p &#x27;&#123;<span class="hljs-string">&quot;spec&quot;</span>: &#123;<span class="hljs-string">&quot;bgp&quot;</span>: &#123;<span class="hljs-string">&quot;asNumber&quot;</span>: <span class="hljs-string">&quot;64514&quot;</span>&#125;&#125;&#125;&#x27;<br></code></pre></td></tr></table></figure><p>为机架1上的节点打标签</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">kubectl label <span class="hljs-keyword">node</span> <span class="hljs-title">my-node</span> <span class="hljs-attr">rack=</span>rack-<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>设置机架1上的node节点与tor交换机做IBGP</p><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-attribute">apiVersion</span><span class="hljs-punctuation">:</span> <span class="hljs-string">projectcalico.org/v3</span><br><span class="hljs-attribute">kind</span><span class="hljs-punctuation">:</span> <span class="hljs-string">BGPPeer</span><br><span class="hljs-attribute">metadata</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">rack1-tor</span><br><span class="hljs-attribute">spec</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">peerIP</span><span class="hljs-punctuation">:</span> <span class="hljs-string">192.20.30.40</span><br>  <span class="hljs-attribute">asNumber</span><span class="hljs-punctuation">:</span> <span class="hljs-string">64514</span><br>  <span class="hljs-attribute">nodeSelector</span><span class="hljs-punctuation">:</span> <span class="hljs-string">rack == &#x27;rack-1&#x27;</span><br></code></pre></td></tr></table></figure><p>关闭BGP的node-to-node模式（对全局生效）</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">calicoctl</span> <span class="hljs-string">create</span> <span class="hljs-string">-f</span> <span class="hljs-bullet">-</span> <span class="hljs-string">&lt;&lt;EOF</span><br> <span class="hljs-attr">apiVersion:</span> <span class="hljs-string">projectcalico.org/v3</span><br> <span class="hljs-attr">kind:</span> <span class="hljs-string">BGPConfiguration</span><br> <span class="hljs-attr">metadata:</span><br>   <span class="hljs-attr">name:</span> <span class="hljs-string">default</span><br> <span class="hljs-attr">spec:</span><br>   <span class="hljs-attr">nodeToNodeMeshEnabled:</span> <span class="hljs-literal">false</span><br>   <span class="hljs-attr">asNumber:</span> <span class="hljs-number">64512</span><br><span class="hljs-string">EOF</span><br></code></pre></td></tr></table></figure><h2 id="Calico-Overlay网络"><a href="#Calico-Overlay网络" class="headerlink" title="Calico Overlay网络"></a>Calico Overlay网络</h2><p>在Calico Overlay网络中有两种模式可选（仅支持IPV4地址）</p><ul><li>IP-in-IP （使用BGP实现）</li><li>Vxlan  （不使用BGP实现）</li></ul><p>两种模式均支持如下参数</p><ul><li>Always: 永远进行 IPIP 封装(默认)</li><li>CrossSubnet: 只在跨网段时才进行 IPIP 封装，适合有 Kubernetes 节点在其他网段的情况，属于中肯友好方案</li><li>Never: 从不进行 IPIP 封装，适合确认所有 Kubernetes 节点都在同一个网段下的情况（配置此参数就开启了BGP模式）</li></ul><p>在默认情况下，默认的 ipPool 启用了 IPIP 封装(至少通过官方安装文档安装的 Calico 是这样)，并且封装模式为 <code>Always</code>；这也就意味着任何时候都会在原报文上封装新 IP 地址，在这种情况下将外部流量路由到 RR 节点，RR 节点再转发进行 IPIP 封装时，可能出现网络无法联通的情况(没仔细追查，网络渣，猜测是 Pod 那边得到的源 IP 不对导致的)；此时我们应当调整 IPIP 封装策略为 <code>CrossSubnet</code></p><p>导出 ipPool 配置</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs actionscript">calicoctl <span class="hljs-keyword">get</span> ippool <span class="hljs-keyword">default</span>-ipv4-ippool -o yaml &gt; ippool.yaml<br></code></pre></td></tr></table></figure><p>修改 <code>ipipMode</code> 值为 <code>CrossSubnet</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">projectcalico.org/v3</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">IPPool</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">creationTimestamp:</span> <span class="hljs-number">2019-06-17T13:55:44Z</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">default-ipv4-ippool</span><br>  <span class="hljs-attr">resourceVersion:</span> <span class="hljs-string">&quot;61858741&quot;</span><br>  <span class="hljs-attr">uid:</span> <span class="hljs-string">99a82055-9107-11e9-815b-b82a72dffa9f</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">blockSize:</span> <span class="hljs-number">26</span><br>  <span class="hljs-attr">cidr:</span> <span class="hljs-number">10.244</span><span class="hljs-number">.0</span><span class="hljs-number">.0</span><span class="hljs-string">/16</span><br>  <span class="hljs-attr">ipipMode:</span> <span class="hljs-string">CrossSubnet</span><br>  <span class="hljs-attr">natOutgoing:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">nodeSelector:</span> <span class="hljs-string">all()</span><br></code></pre></td></tr></table></figure><p>重新使用 <code>calicoctl apply -f ippool.yaml</code> 应用既可</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>在Kuberentes集群中使用sysctl</title>
    <link href="/2020/01/14/using-sysctls-in-a-kubernetes-cluster/"/>
    <url>/2020/01/14/using-sysctls-in-a-kubernetes-cluster/</url>
    
    <content type="html"><![CDATA[<p>本文将描述如何使用sysctl接口在Kubernetes集群中配置和使用内核参数。</p><h2 id="获取sysctl参数列表"><a href="#获取sysctl参数列表" class="headerlink" title="获取sysctl参数列表"></a>获取sysctl参数列表</h2><p>在Linux中，sysctl接口允许管理员在运行时修改内核参数。参数可以通过<code>/proc/sys/</code> 虚拟进程文件系统获得。参数涵盖多个子系统，例如:</p><ul><li>内核 (通用前缀：kernel.)</li><li>网络 (通用前缀：net.)</li><li>虚拟内存 (通用前缀：vm.)</li><li>设备专用 (通用前缀：dev.)</li><li>更多子系统描述见 <a href="https://www.kernel.org/doc/Documentation/sysctl/README">Kernel docs</a>.</li></ul><p>要获取所有参数列表，你可以运行：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">sysctl -<span class="hljs-selector-tag">a</span><br></code></pre></td></tr></table></figure><h2 id="启用非安全的-Sysctl-参数"><a href="#启用非安全的-Sysctl-参数" class="headerlink" title="启用非安全的 Sysctl 参数"></a>启用非安全的 Sysctl 参数</h2><p>sysctl 参数分为 安全 和 非安全的。安全 sysctl 参数除了需要设置恰当的命名空间外，在同一 node 上的不同 Pod 之间也必须是相互隔离的。这意味着在 Pod 上设置 安全 sysctl 参数</p><ul><li>必须不能影响到节点上的其他 Pod</li><li>必须不能损害节点的健康</li><li>必须不允许使用超出 Pod 的资源限制的 CPU 或内存资源。</li></ul><p>至今为止，大多数 有命名空间的 sysctl 参数不一定被认为是 安全 的。以下几种 sysctl 参数是 安全的：</p><ul><li>kernel.shm_rmid_forced,</li><li>net.ipv4.ip_local_port_range,</li><li>net.ipv4.tcp_syncookies.</li></ul><p>注意: 示例中的 <code>net.ipv4.tcp_syncookies</code> 在Linux 内核 4.4 或更低的版本中是无命名空间的。</p><p>在未来的 Kubernetes 版本中，若kubelet 支持更好的隔离机制，则上述列表中将会列出更多 安全的 sysctl 参数。</p><p>所有 安全的 sysctl 参数都默认启用。</p><p>所有 非安全的 sysctl 参数都默认禁用，且必须由集群管理员在每个节点上手动开启。那些设置了不安全 sysctl 参数的 Pod 仍会被调度，但无法正常启动。</p><p>参考上述警告，集群管理员只有在一些非常特殊的情况下（如：高可用或实时应用调整），才可以启用特定的 非安全的 sysctl 参数。如需启用 非安全的 sysctl 参数，请您在每个节点上分别设置 kubelet 命令行参数，例如：</p><figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs brainfuck"><span class="hljs-comment">KUBELET_EXTRA_ARGS=&quot;</span><span class="hljs-literal">--</span><span class="hljs-comment">v=4</span> <span class="hljs-literal">--</span><span class="hljs-comment">logtostderr=false</span> <span class="hljs-literal">--</span><span class="hljs-comment">log</span><span class="hljs-literal">-</span><span class="hljs-comment">dir=/var/log/kubernetes/kubelet</span> <span class="hljs-literal">--</span><span class="hljs-comment">cgroup</span><span class="hljs-literal">-</span><span class="hljs-comment">driver=cgroupfs</span> <span class="hljs-literal">--</span><span class="hljs-comment">allowed</span><span class="hljs-literal">-</span><span class="hljs-comment">unsafe</span><span class="hljs-literal">-</span><span class="hljs-comment">sysctls=ke</span><br><span class="hljs-comment">rnel</span><span class="hljs-string">.</span><span class="hljs-comment">msg*</span><span class="hljs-string">,</span><span class="hljs-comment">net</span><span class="hljs-string">.</span><span class="hljs-comment">*&quot;</span><br></code></pre></td></tr></table></figure><p>只有有命名空间的sysctl可以通过这种方式启用。</p><h2 id="设置-Pod-的-Sysctl-参数"><a href="#设置-Pod-的-Sysctl-参数" class="headerlink" title="设置 Pod 的 Sysctl 参数"></a>设置 Pod 的 Sysctl 参数</h2><p>目前，在 Linux 内核中，有许多的 sysctl 参数都是 有命名空间的 。 这就意味着可以为节点上的每个 Pod 分别去设置它们的 sysctl 参数。 在 Kubernetes 中，只有那些有命名空间的 sysctl 参数可以通过 Pod 的 securityContext 对其进行配置。</p><p>以下列出有命名空间的 sysctl 参数，在未来的 Linux 内核版本中，此列表可能会发生变化。</p><ul><li>kernel.shm*,</li><li>kernel.msg*,</li><li>kernel.sem,</li><li>fs.mqueue.*,</li><li>net.*（内核中网络配置项相关参数），它可以在容器命名空间里被更改。然而，也有一些特例 (例如，net.netfilter.nf_conntrack_max 和 net.netfilter.nf_conntrack_expect_max 可以在容器命名空间里被更改，但它们是非命名空间的)。</li></ul><p>没有命名空间的 sysctl 参数称为 节点级别的 sysctl 参数。 如果需要对其进行设置，则必须在每个节点的操作系统上手动地去配置它们，或者通过在 DaemonSet 中运行特权模式容器来配置。</p><p>可使用 pod 的 securityContext 来配置有命名空间的 sysctl 参数，securityContext 应用于同一个 pod 中的所有容器。</p><p>此示例中，使用 Pod SecurityContext 来对一个安全的 sysctl 参数 <code>kernel.shm_rmid_forced</code> 以及两个非安全的 sysctl 参数 <code>net.core.somaxconn</code> 和 <code>kernel.msgmax</code> 进行设置。在 Pod 定义中对 安全的 和 非安全的 sysctl 参数不做区分。</p><p>警告：为了避免破坏操作系统的稳定性，请您在了解变更后果之后再修改 sysctl 参数。</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">apiVersion:</span> v1<br><span class="hljs-symbol">kind:</span> Pod<br><span class="hljs-symbol">metadata:</span><br><span class="hljs-symbol">  name:</span> sysctl-example<br><span class="hljs-symbol">spec:</span><br><span class="hljs-symbol">  securityContext:</span><br><span class="hljs-symbol">    sysctls:</span><br>    - name: kernel.shm_rmid_forced<br><span class="hljs-symbol">      value:</span> <span class="hljs-string">&quot;0&quot;</span><br>    - name: net.core.somaxconn<br><span class="hljs-symbol">      value:</span> <span class="hljs-string">&quot;1024&quot;</span><br>    - name: kernel.msgmax<br><span class="hljs-symbol">      value:</span> <span class="hljs-string">&quot;65536&quot;</span><br>  ...<br></code></pre></td></tr></table></figure><p>最佳实践方案是将具有特殊sysctl设置的节点视为集群中的<code>污染节点</code>，并且只将需要使用到特殊 sysctl 设置的 Pod 调度到这些节点上。建议使用Kubernetes的污染和容忍特性来实现这一点。</p><p>带有非安全sysctl的pod将无法在任何没有显式启用这两个不安全sysctl的节点上启动（启动将会失败）。与节点级sysctl一样，建议使用污染和容忍特性和节点污染将这些pod调度到正确的节点上。</p><h2 id="PodSecurityPolicy"><a href="#PodSecurityPolicy" class="headerlink" title="PodSecurityPolicy"></a>PodSecurityPolicy</h2><p>您可以通过在 PodSecurityPolicy 的 <code>forbiddenSysctls</code> 和&#x2F;或 <code>allowedUnsafeSysctls</code> 字段中，指定 sysctl 或填写 sysctl 匹配模式来进一步为 Pod 设置 sysctl 参数。sysctl 参数匹配模式以 <code>*</code> 字符结尾，如 <code>kernel.*</code>。 单独的 <code>*</code> 字符匹配所有 sysctl 参数。</p><p>所有 安全的 sysctl 参数都默认启用。</p><p><code>forbiddenSysctls</code> 和 <code>allowedUnsafeSysctls</code> 的值都是字符串列表类型，可以添加 sysctl 参数名称，也可以添加 sysctl 参数匹配模式（以<code>*</code>结尾）。 只填写 <code>*</code> 则匹配所有的 sysctl 参数。</p><p><code>forbiddenSysctls</code> 字段用于禁用特定的 sysctl 参数。 您可以在列表中禁用安全和非安全的 sysctl 参数的组合。 要禁用所有的 sysctl 参数，请设置为 <code>*</code>。</p><p>如果要在 <code>allowedUnsafeSysctls</code> 字段中指定一个非安全的 sysctl 参数，并且它在<code>forbiddenSysctls</code> 字段中未被禁用，则可以在 Pod 中通过 PodSecurityPolicy 启用该 sysctl 参数。 若要在 PodSecurityPolicy 中开启所有非安全的 sysctl 参数，请设 <code>allowedUnsafeSysctls</code> 字段值为 <code>*</code>。</p><p><code>allowedUnsafeSysctls</code> 与 <code>forbiddenSysctls</code> 两字段的配置不能重叠，否则这就意味着存在某个 sysctl 参数既被启用又被禁用。</p><p>警告：如果您通过 PodSecurityPolicy 中的 <code>allowedUnsafeSysctls</code> 字段将非安全的 sysctl 参数列入白名单，但该 sysctl 参数未通过 kubelet 命令行参数 <code>--allowed-unsafe-sysctls</code> 在节点上将其列入白名单，则设置了这个 sysctl 参数的 Pod 将会启动失败。</p><p>以下示例设置启用了以 <code>kernel.msg</code> 为前缀的非安全的 sysctl 参数，以及禁用了 sysctl 参数 <code>kernel.shm_rmid_forced</code>。</p><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-attribute">apiVersion</span><span class="hljs-punctuation">:</span> <span class="hljs-string">policy/v1beta1</span><br><span class="hljs-attribute">kind</span><span class="hljs-punctuation">:</span> <span class="hljs-string">PodSecurityPolicy</span><br><span class="hljs-attribute">metadata</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">sysctl-psp</span><br><span class="hljs-attribute">spec</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">allowedUnsafeSysctls</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">kernel.msg*</span><br>  <span class="hljs-attribute">forbiddenSysctls</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">kernel.shm_rmid_forced</span><br> ...<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Kubernetes 资源预留</title>
    <link href="/2020/01/13/reserve-compute-resources-for-system-daemons/"/>
    <url>/2020/01/13/reserve-compute-resources-for-system-daemons/</url>
    
    <content type="html"><![CDATA[<p>&amp;emsp;&amp;emsp;系统资源可分为两类：可压缩资源（CPU）和不可压缩资源（memory、storage）。可压缩资源比如CPU超配后，在系统满负荷时会划分时间片分时运行进程，系统整体会变慢（一般不会导致太大的问题）。但不可压缩资源如Memory，当系统内存不足时，就有可能触发系统 OOM；这时候根据 oom score 来确定优先杀死哪个进程，而 <code>oom_score_adj</code> 又是影响 oom score 的重要参数，其值越低，表示 oom 的优先级越低。在计算节点中，进程的 <code>oom_score_adj</code> 如下：</p><table><thead><tr><th>Name</th><th align="center">Score</th></tr></thead><tbody><tr><td>sshd等（sshd／dmevented &#x2F; systemd-udevd）</td><td align="center">-1000</td></tr><tr><td>K8S 管理进程（kubelet &#x2F; docker &#x2F; journalctl）</td><td align="center">-999</td></tr><tr><td>Guaranteed Pod</td><td align="center">-998</td></tr><tr><td>其它进程（内核 init 进程等）</td><td align="center">0</td></tr><tr><td>Burstable Pod</td><td align="center">min(max(2, 1000 – (1000 * memoryRequestBytes) &#x2F; machineMemoryCapacityBytes), 999)</td></tr><tr><td>BestEffort Pod</td><td align="center">1000</td></tr></tbody></table><p>所以，OOM 的优先级如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">BestEffort Pod &gt; Burstable Pod &gt; 其它进程 &gt; Guaranteed Pod &gt; kubelet/docker 等 &gt; sshd 等<br></code></pre></td></tr></table></figure><p>&amp;emsp;&amp;emsp;在Kubernetes平台，默认情况下Pod能够使用节点全部可用资源。如果节点上的Pod负载较大，那么这些Pod可能会与节点上的系统守护进程和k8s组件争夺资源并导致节点资源短缺，甚至引发系统OOM，导致某些进程被Linux系统的OOM killer机制杀掉，假如被杀掉的进程是系统进程或K8S组件，会导致比较严重的问题。</p><h2 id="Node-Allocatable简介"><a href="#Node-Allocatable简介" class="headerlink" title="Node Allocatable简介"></a>Node Allocatable简介</h2><p>&amp;emsp;&amp;emsp;kubelet的启动配置中有一个<code>Node Allocatable</code>特性，来为系统守护进程和k8s组件预留计算资源，使得即使节点满负载运行时，也不至于出现pod去和系统守护进程以及k8s组件争抢资源，导致节点挂掉的情况。目前支持对CPU, memory, ephemeral-storage三种资源进行预留。kubernetes官方建议根据各个节点的负载情况来具体配置相关参数。</p><p>节点计算资源的分配如下图所示：</p><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs gherkin"> Node Capacity<br>---------------------------<br>|<span class="hljs-string">     kube-reserved       </span>|<br>|<span class="hljs-string">-------------------------</span>|<br>|<span class="hljs-string">     system-reserved     </span>|<br>|<span class="hljs-string">-------------------------</span>|<br>|<span class="hljs-string">    eviction-threshold   </span>|<br>|<span class="hljs-string">-------------------------</span>|<br>|<span class="hljs-string">                         </span>|<br>|<span class="hljs-string">      allocatable        </span>|<br>|<span class="hljs-string">   (available for pods)  </span>|<br>|<span class="hljs-string">                         </span>|<br>|<span class="hljs-string">                         </span>|<br>---------------------------<br></code></pre></td></tr></table></figure><p>其中各个部分的含义如下：</p><ul><li>Node Capacity：Node的硬件资源总量</li><li>kube-reserved：给k8s系统进程预留的资源(包括kubelet、container runtime、node problem detector等，但不会给以pod形式起的k8s系统进程预留资源)</li><li>system-reserved：给linux系统守护进程预留的资源</li><li>eviction-threshold：通过<code>--eviction-hard</code>参数为节点预留内存，当节点可用内存值低于此值时，kubelet会进行pod的驱逐</li><li>allocatable：是真正可供节点上Pod使用的容量，kube-scheduler调度Pod时的参考此值(kubectl describe node可以看到，Node上所有Pods的request量不超过Allocatable)</li></ul><p>节点可供Pod使用资源总量的计算公式如下：</p><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs fortran"><span class="hljs-keyword">allocatable</span> = [Node Capacity] - [kube-reserved] - [system-reserved] - [eviction-threshold]<br></code></pre></td></tr></table></figure><p>从公式可以看出，默认情况下（不设置kube-reserved、system-reserved、eviction-threshold）节点上默认可以让Pod使用的资源总量等于节点的总容量，会导致Pod与系统进程和k8s组件争抢资源的情况发生。</p><h2 id="示例场景"><a href="#示例场景" class="headerlink" title="示例场景"></a>示例场景</h2><p>下面是一个例子来说明节点<code>Allocatable</code>计算:</p><ul><li>节点拥有<code>32Gi memory</code> ，<code>16 CPUs</code> ， <code>100Gi</code> 存储。</li><li><code>--kube-reserved</code> 设置为 <code>cpu=1,memory=2Gi,ephemeral-storage=1Gi</code>。</li><li><code>--system-reserved</code> 设置为 <code>cpu=500m,memory=1Gi,ephemeral-storage=1Gi</code>。</li><li><code>--eviction-hard</code> 设置为 <code>memory.available&lt;500Mi,nodefs.available&lt;10%</code>。</li></ul><p>在此场景下， <code>Allocatable</code> 为 <code>14.5 CPUs</code>，<code>28.5Gi</code> 内存， <code>88Gi</code> 本地存储。调度器确保该节点上所有pod上的总内存请求不超过<code>28.5Gi</code>，存储也不超过<code>88Gi</code>。当跨pod的总体内存使用量超过<code>28.5Gi</code>时，或者如果整个磁盘使用量超过<code>88Gi</code>时，Kubelet 将驱逐pod。如果节点上的所有进程都尽可能多地消耗CPU，那么pod一起消耗的CPU不能超过 <code>14.5 CPUs</code>。</p><p>如果不强制执行<code>kube-reserved</code>和&#x2F;或<code>system-reserved</code>，并且系统守护进程超出了它们的保留，那么当节点内存使用总量大于<code>31.5Gi</code>或存储容量大于<code>90Gi</code>时，kubelet就会驱逐pod。</p><h2 id="配置参数"><a href="#配置参数" class="headerlink" title="配置参数"></a>配置参数</h2><p>kubelet的启动参数中涉及资源预留的主要有如下几个：</p><ul><li><code>--cgroups-per-qos</code></li><li><code>--cgroup-driver</code></li><li><code>--enforce-node-allocatable=pods[,][system-reserved][,][kube-reserved]</code></li><li><code>--kube-reserved=[cpu=100m][,][memory=100Mi][,][ephemeral-storage=1Gi]</code></li><li><code>--kube-reserved-cgroup</code></li><li><code>--system-reserved=[cpu=100mi][,][memory=100Mi][,][ephemeral-storage=1Gi]</code></li><li><code>--system-reserved-cgroup</code></li><li><code>--eviction-hard</code></li></ul><h2 id="参数详解"><a href="#参数详解" class="headerlink" title="参数详解"></a>参数详解</h2><p><code>--cgroups-per-qos</code><br>可选，默认开启。开启这个参数后，kubelet会将所有的pod创建在kubelet管理的cgroup层次结构下（这样才有了限制所有Pod使用资源总量的基础）。要想启用Node Allocatable特性，这个参数必须开启。</p><p><code>--cgroup-driver</code><br>可选。指定kubelet使用的cgroup driver。默认为cgroupfs，还可以是systemd，但是这个值需要和docker runtime所使用的cgroup driver保持一致。</p><p><code>--enforce-node-allocatable</code><br>指定kubelet为哪些进程做硬限制，可选的值有：pods,kube-reserved,system-reserve。</p><p>这个参数默认开启并指定pods，此时kubelet会为所有pod的总cgroup做资源限制(通过cgroup中的kubepods.limit_in_bytes)，限制为公式计算出的allocatable的大小。而用cgroup做了硬限制后，当所有pod使用量达到allocatable后，会有pod被<code>OOM killer</code>机制杀掉，以保证实际使用量不会超过allocatable。（后面会有实验验证）</p><p>假如想为系统进程和k8s进程也做cgroup级别的硬限制，还可以在限制列表中再加system-reserved和kube-reserved，同时还要分别加上<code>--kube-reserved-cgroup</code>和<code>--system-reserved-cgroup</code>以指定分别限制在哪个cgroup里。</p><p><code>--kube-reserved</code><br>指定为k8s系统组件（kubelet、kube-proxy、dockerd等）预留的资源量，如：<code>--kube-reserved=cpu=1,memory=2Gi,ephemeral-storage=1Gi</code>。</p><p>这里需要注意一点的是这里的kube-reserved只为非pod形式启动的kube组件预留资源，假如组件要是以static pod形式启动的，那并不在这个kube-reserved管理并限制的cgroup中，而是在kubepod这个cgroup中。</p><p><code>--kube-reserved-cgroup</code><br>这个参数用来指定k8s系统组件所使用的cgroup。注意，这里指定的cgroup及其子系统需要预先创建好，kubelet并不会为你自动创建好。</p><p><code>--system-reserved</code><br>为系统守护进程(sshd, udev等)预留的资源量，如：<code>--system-reserved=cpu=500m,memory=1Gi,ephemeral-storage=1Gi</code>。注意，除了考虑为系统进程预留的量之外，还应该为kernel和用户登录会话预留一些内存。</p><p><code>--system-reserved-cgroup</code><br>这个参数用来指定系统守护进程所使用的cgroup。注意，这里指定的cgroup及其子系统需要预先创建好，kubelet并不会为你自动创建好。</p><p><code>--eviction-hard</code><br>设置进行pod驱逐的阈值，这个参数只支持内存和磁盘。通过<code>--eviction-hard</code>标志预留一些内存后，当节点上的可用内存降至保留值以下时，kubelet 将会对pod进行驱逐。</p><h2 id="实践"><a href="#实践" class="headerlink" title="实践"></a>实践</h2><h3 id="限制pod、k8s组件资源"><a href="#限制pod、k8s组件资源" class="headerlink" title="限制pod、k8s组件资源"></a>限制pod、k8s组件资源</h3><p>1.将以下内容添加到kubelet的 <code>/var/lib/kubelet/config.yaml</code> 文件中：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">....</span><br><span class="hljs-attr">evictionHard:</span>  <span class="hljs-comment"># 配置硬驱逐阈值</span><br>  <span class="hljs-attr">memory.available:</span> <span class="hljs-string">&quot;500Mi&quot;</span><br>  <span class="hljs-attr">nodefs.available:</span> <span class="hljs-string">&quot;10%&quot;</span><br><span class="hljs-attr">enforceNodeAllocatable:</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">pods</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">kube-reserved</span>  <span class="hljs-comment"># 开启 kube 资源预留</span><br><span class="hljs-attr">kubeReserved:</span><br>  <span class="hljs-attr">cpu:</span> <span class="hljs-string">500m</span><br>  <span class="hljs-attr">memory:</span> <span class="hljs-string">1Gi</span><br>  <span class="hljs-attr">ephemeral-storage:</span> <span class="hljs-string">10Gi</span><br><span class="hljs-attr">kubeReservedCgroup:</span> <span class="hljs-string">/kubelet.slice</span>  <span class="hljs-comment"># 指定 kube 资源预留的 cgroup</span><br><span class="hljs-string">....</span><br></code></pre></td></tr></table></figure><p>修改完成后，如果 <code>--kube-reserved-cgroup</code> 不存在，<code>Kubelet</code> 不会创建它，启动 <code>Kubelet</code> 将会失败。由于子系统较多，具体是哪一个子系统不存在不好定位，我们可以将 <code>kubelet</code> 的日志级别调整为 <code>--v=4</code>，就可以看到具体丢失的 cgroup 路径：</p><figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs brainfuck"><span class="hljs-comment">$ vi /etc/sysconfig/kubelet</span><br><span class="hljs-comment">KUBELET_EXTRA_ARGS=&quot;</span><span class="hljs-literal">--</span><span class="hljs-comment">v=4</span> <span class="hljs-literal">--</span><span class="hljs-comment">logtostderr=false</span> <span class="hljs-literal">--</span><span class="hljs-comment">log</span><span class="hljs-literal">-</span><span class="hljs-comment">dir=/var/log/kubernetes/kubelet</span> <span class="hljs-literal">--</span><span class="hljs-comment">cgroup</span><span class="hljs-literal">-</span><span class="hljs-comment">driver=systemd&quot;</span><br></code></pre></td></tr></table></figure><p>现在可以看到具体的 cgroup 不存在的路径信息了：(kubelet.INFO日志中)</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">The Cgroup [kubelet] has some missing paths: [<span class="hljs-regexp">/sys/</span>fs<span class="hljs-regexp">/cgroup/</span>hugetlb<span class="hljs-regexp">/kubelet.slice /</span>sys<span class="hljs-regexp">/fs/</span>cgroup<span class="hljs-regexp">/pids/</span>kubelet.slice <span class="hljs-regexp">/sys/</span>fs<span class="hljs-regexp">/cgroup/</span>cpuset<span class="hljs-regexp">/kubelet.slice /</span>sys<span class="hljs-regexp">/fs/</span>cgroup<span class="hljs-regexp">/cpu,cpuacct/</span>kubelet.slice <span class="hljs-regexp">/sys/</span>fs<span class="hljs-regexp">/cgroup/</span>cpu,cpuacct<span class="hljs-regexp">/kubelet.slice /</span>sys<span class="hljs-regexp">/fs/</span>cgroup<span class="hljs-regexp">/memory/</span>kubelet.slice]<br></code></pre></td></tr></table></figure><p>至于如何设置cgroup结构，请参考<a href="https://github.com/kubernetes/community/blob/master/contributors/design-proposals/node/node-allocatable.md#recommended-cgroups-setup">官方建议</a>。</p><p>2.为kubelet.slice创建子系统:</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs awk">$ mkdir -p <span class="hljs-regexp">/sys/</span>fs<span class="hljs-regexp">/cgroup/</span>cpu,cpuacct/kubelet.slice<br>$ mkdir -p <span class="hljs-regexp">/sys/</span>fs<span class="hljs-regexp">/cgroup/m</span>emory/kubelet.slice<br>$ mkdir -p <span class="hljs-regexp">/sys/</span>fs<span class="hljs-regexp">/cgroup/</span>systemd/kubelet.slice<br>$ mkdir -p <span class="hljs-regexp">/sys/</span>fs<span class="hljs-regexp">/cgroup/</span>pids/kubelet.slice<br>$ mkdir -p <span class="hljs-regexp">/sys/</span>fs<span class="hljs-regexp">/cgroup/</span>cpu,cpuacct/kubelet.slice<br>$ mkdir -p <span class="hljs-regexp">/sys/</span>fs<span class="hljs-regexp">/cgroup/</span>cpuset/kubelet.slice<br>$ mkdir -p <span class="hljs-regexp">/sys/</span>fs<span class="hljs-regexp">/cgroup/</span>hugetlb/kubelet.slice<br></code></pre></td></tr></table></figure><p>注意：systemd 的 cgroup 驱动对应的 cgroup 名称是以 .slice 结尾的，比如如果你把 cgroup 名称配置成 kubelet.service，那么对应的创建的 cgroup 名称应该为 kubelet.service.slice。如果你配置的是 cgroupfs 的驱动，则用配置的值即可。无论哪种方式，通过查看错误日志都是排查问题最好的方式。</p><p>我们也可以通过查看代码知道需要创建那些子系统：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/kubernetes/</span>kubernetes<span class="hljs-regexp">/blob/</span>v1.<span class="hljs-number">18.10</span><span class="hljs-regexp">/pkg/</span>kubelet<span class="hljs-regexp">/cm/</span>cgroup_manager_linux.go<br></code></pre></td></tr></table></figure><p>3.重启kubelet</p><h4 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h4><p>1.验证公式计算的allocatable与实际一致<br>按以上设置节点上所有Pod实际使用的资源总和不会超过：</p><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs fortran"><span class="hljs-keyword">allocatable</span> = capacity - kube-reserved - eviction-hard<br></code></pre></td></tr></table></figure><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">Capacity</span>:<br>  <span class="hljs-attribute">cpu</span>:                <span class="hljs-number">4</span><br>  <span class="hljs-attribute">ephemeral</span>-storage:  <span class="hljs-number">32488964</span>Ki<br>  <span class="hljs-attribute">hugepages</span>-<span class="hljs-number">1</span>Gi:      <span class="hljs-number">0</span><br>  <span class="hljs-attribute">hugepages</span>-<span class="hljs-number">2</span>Mi:      <span class="hljs-number">0</span><br>  <span class="hljs-attribute">memory</span>:             <span class="hljs-number">7976520</span>Ki  (约<span class="hljs-number">7</span>.<span class="hljs-number">6</span>G)<br>  <span class="hljs-attribute">pods</span>:               <span class="hljs-number">110</span><br><span class="hljs-attribute">Allocatable</span>:<br>  <span class="hljs-attribute">cpu</span>:                <span class="hljs-number">3500</span>m<br>  <span class="hljs-attribute">ephemeral</span>-storage:  <span class="hljs-number">28868087349</span><br>  <span class="hljs-attribute">hugepages</span>-<span class="hljs-number">1</span>Gi:      <span class="hljs-number">0</span><br>  <span class="hljs-attribute">hugepages</span>-<span class="hljs-number">2</span>Mi:      <span class="hljs-number">0</span><br>  <span class="hljs-attribute">memory</span>:             <span class="hljs-number">6415944</span>Ki  (约<span class="hljs-number">6</span>.<span class="hljs-number">1</span>G)<br>  <span class="hljs-attribute">pods</span>:               <span class="hljs-number">110</span><br></code></pre></td></tr></table></figure><p>根据公式 <code>capacity - kube-reserved - eviction-hard</code>，memory的allocatable的值为 <code>7.6G - 1G - 0.5G = 6.1G</code> ，与Allocatable的值一致。</p><p>查看kubelet.service控制组中对内存的限制值memory.limit_in_bytes:</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">$ cat <span class="hljs-regexp">/sys/</span>fs<span class="hljs-regexp">/cgroup/m</span>emory<span class="hljs-regexp">/kubelet.slice/m</span>emory.limit_in_bytes<br><span class="hljs-number">1073741824</span>(<span class="hljs-number">1</span>G)<br></code></pre></td></tr></table></figure><p>2.验证公式计算的总使用量限制与实际值一致<br>查看kubepods控制组中对内存的限制值memory.limit_in_bytes（memory.limit_in_bytes值决定了Node上所有的Pod实际能使用的内存上限）</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">$ cat <span class="hljs-regexp">/sys/</span>fs<span class="hljs-regexp">/cgroup/m</span>emory<span class="hljs-regexp">/kubepods.slice/m</span>emory.limit_in_bytes <br><span class="hljs-number">7094214656</span><br></code></pre></td></tr></table></figure><p>根据公式 <code>capacity - kube-reserved</code>，Node上Pod能实际使用的资源上限值为：<code>7.6G - 1G = 6.6G</code>，与实际一致。</p><h3 id="限制system系统资源"><a href="#限制system系统资源" class="headerlink" title="限制system系统资源"></a>限制system系统资源</h3><p>&amp;emsp;&amp;emsp;我们也可以用同样的方式为系统配置预留值，<code>system-reserved</code> 用于为诸如 sshd、udev 等系统守护进程争取资源预留，<code>system-reserved</code> 也应该为 kernel 预留 内存，因为目前 kernel 使用的内存并不记在 Kubernetes 的 pod 上。但是在执行 <code>system-reserved</code> 预留操作时请加倍小心，因为它可能导致节点上的关键系统服务 CPU 资源短缺或因为内存不足而被终止，所以如果不是自己非常清楚如何配置，可以不用配置系统预留值。<br>&amp;emsp;&amp;emsp;同样通过 kubelet 的参数 <code>--system-reserved</code> 配置系统预留值，但是也需要配置 <code>--system-reserved-cgroup</code> 参数为系统进程设置 cgroup。<br>&amp;emsp;&amp;emsp;请注意，如果 <code>--system-reserved-cgroup</code> 不存在，kubelet 不会创建它，kubelet 会启动失败。</p><h2 id="建议优化"><a href="#建议优化" class="headerlink" title="建议优化"></a>建议优化</h2><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-comment"># 节点资源预留</span><br><span class="hljs-attribute">enforce</span>-node-allocatable: &#x27;pods&#x27;<br><span class="hljs-attribute">system</span>-reserved: &#x27;cpu=<span class="hljs-number">0</span>.<span class="hljs-number">25</span>,memory=<span class="hljs-number">200</span>Mi&#x27;<br><span class="hljs-attribute">kube</span>-reserved: &#x27;cpu=<span class="hljs-number">0</span>.<span class="hljs-number">25</span>,memory=<span class="hljs-number">1500</span>Mi&#x27;<br><br><span class="hljs-comment"># POD驱逐，这个参数只支持内存和磁盘。</span><br><br><span class="hljs-comment">## 硬驱逐阈值</span><br><span class="hljs-comment">### 当节点上的可用资源降至保留值以下时，就会触发强制驱逐。强制驱逐会强制kill掉POD，不会等POD自动退出。</span><br><span class="hljs-attribute">eviction</span>-hard: &#x27;memory.available&lt;<span class="hljs-number">300</span>Mi,nodefs.available&lt;<span class="hljs-number">10</span>%,imagefs.available&lt;<span class="hljs-number">15</span>%,nodefs.inodesFree&lt;<span class="hljs-number">5</span>%&#x27;<br><br><span class="hljs-comment">## 软驱逐阈值</span><br><span class="hljs-comment">### 以下四个参数配套使用，当节点上的可用资源少于这个值时但大于硬驱逐阈值时候，会等待eviction-soft-grace-period设置的时长；</span><br><span class="hljs-comment">### 等待中每10s检查一次，当最后一次检查还触发了软驱逐阈值就会开始驱逐，驱逐不会直接Kill POD，先发送停止信号给POD，然后等待eviction-max-pod-grace-period设置的时长；</span><br><span class="hljs-comment">### 在eviction-max-pod-grace-period时长之后，如果POD还未退出则发送强制kill POD&quot;</span><br><span class="hljs-attribute">eviction</span>-soft: &#x27;memory.available&lt;<span class="hljs-number">500</span>Mi,nodefs.available&lt;<span class="hljs-number">50</span>%,imagefs.available&lt;<span class="hljs-number">50</span>%,nodefs.inodesFree&lt;<span class="hljs-number">10</span>%&#x27;<br><span class="hljs-attribute">eviction</span>-soft-grace-period: &#x27;memory.available=<span class="hljs-number">1</span>m30s&#x27;<br><span class="hljs-attribute">eviction</span>-max-pod-grace-period: &#x27;<span class="hljs-number">30</span>&#x27;<br><span class="hljs-attribute">eviction</span>-pressure-transition-period: &#x27;<span class="hljs-number">30</span>s&#x27;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Prometheus Operator 监控 etcd 集群</title>
    <link href="/2019/12/19/prometheus-operator-monitor-etcd/"/>
    <url>/2019/12/19/prometheus-operator-monitor-etcd/</url>
    
    <content type="html"><![CDATA[<p>&amp;emsp;&amp;emsp;除了 Kubernetes 集群中的一些资源对象、节点以及组件需要监控，有的时候我们可能还需要根据实际的业务需求去添加自定义的监控项，添加一个自定义监控的步骤也是非常简单的。</p><ul><li>第一步建立一个 ServiceMonitor 对象，用于 Prometheus 添加监控项</li><li>第二步为 ServiceMonitor 对象关联 metrics 数据接口的一个 Service 对象</li><li>第三步确保 Service 对象可以正确获取到 metrics 数据</li></ul><p>&amp;emsp;&amp;emsp;接下来我们就来以 etcd 为例添加 etcd 集群的监控。无论是 Kubernetes 集群外的还是使用 Kubeadm 安装在集群内部的 etcd 集群，我们这里都将其视作集群外的独立集群，因为对于二者的使用方法没什么特殊之处。</p><h2 id="Etcd-Metrics"><a href="#Etcd-Metrics" class="headerlink" title="Etcd Metrics"></a>Etcd Metrics</h2><p>&amp;emsp;&amp;emsp;对于 etcd 集群一般情况下，为了安全都会开启 https 证书认证的方式，所以要想让 Prometheus 访问到 etcd 集群的监控数据，就需要提供相应的证书校验。</p><p>&amp;emsp;&amp;emsp;这里我是kubeadm安装的kubernetes集群，但etcd是采用二进制方式安装，我们可以通过如下命令获取需要的两部分信息<code>--listen-client-urls</code>中etcd的IP地址和<code>--cert-file</code>中连接etcd用到的证书路径</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs gradle">[root@k8s-m1 ~]# ps aux | <span class="hljs-keyword">grep</span> -P <span class="hljs-string">&#x27;/etc[d] &#x27;</span><br>root      <span class="hljs-number">59550</span>  <span class="hljs-number">1.6</span>  <span class="hljs-number">4.1</span> <span class="hljs-number">10709140</span> <span class="hljs-number">159108</span> ?     Ssl  Dec10 <span class="hljs-number">211</span>:<span class="hljs-number">39</span> <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/bin/</span>etcd --name=etcd0 --data-dir=<span class="hljs-regexp">/var/</span>lib<span class="hljs-regexp">/etcd --listen-client-urls=https:/</span><span class="hljs-regexp">/127.0.0.1:2379,https:/</span><span class="hljs-regexp">/10.15.1.17:2379 --advertise-client-urls=https:/</span><span class="hljs-regexp">/10.15.1.17:2379 --listen-peer-urls=https:/</span><span class="hljs-regexp">/10.15.1.17:2380 --initial-advertise-peer-urls=https:/</span><span class="hljs-regexp">/10.15.1.17:2380 --cert-file=/</span>etc<span class="hljs-regexp">/kubernetes/</span>pki<span class="hljs-regexp">/etcd/</span>server.crt --key-<span class="hljs-keyword">file</span>=<span class="hljs-regexp">/etc/</span>kubernetes<span class="hljs-regexp">/pki/</span>etcd<span class="hljs-regexp">/server.key --client-cert-auth --trusted-ca-file=/</span>etc<span class="hljs-regexp">/kubernetes/</span>pki<span class="hljs-regexp">/etcd/</span>ca.crt --peer-cert-<span class="hljs-keyword">file</span>=<span class="hljs-regexp">/etc/</span>kubernetes<span class="hljs-regexp">/pki/</span>etcd<span class="hljs-regexp">/peer.crt --peer-key-file=/</span>etc<span class="hljs-regexp">/kubernetes/</span>pki<span class="hljs-regexp">/etcd/</span>peer.key --peer-client-cert-auth --peer-trusted-ca-<span class="hljs-keyword">file</span>=<span class="hljs-regexp">/etc/</span>kubernetes<span class="hljs-regexp">/pki/</span>etcd<span class="hljs-regexp">/ca.crt --initial-cluster=etcd0=https:/</span><span class="hljs-regexp">/10.15.1.17:2380,etcd1=https:/</span><span class="hljs-regexp">/10.15.1.18:2380,etcd2=https:/</span><span class="hljs-regexp">/10.15.1.19:2380 --initial-cluster-token=my-etcd-token --initial-cluster-state=new --heartbeat-interval 1000 --election-timeout 5000</span><br></code></pre></td></tr></table></figure><p>然后使用下面的curl，带上各自证书路径访问https的url执行</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">curl --cacert <span class="hljs-regexp">/etc/</span>kubernetes<span class="hljs-regexp">/pki/</span>etcd<span class="hljs-regexp">/ca.crt --cert /</span>etc<span class="hljs-regexp">/kubernetes/</span>pki<span class="hljs-regexp">/etcd/</span>server.crt  --key <span class="hljs-regexp">/etc/</span>kubernetes<span class="hljs-regexp">/pki/</span>etcd<span class="hljs-regexp">/server.key  https:/</span><span class="hljs-regexp">/10.15.1.17:2379/m</span>etrics<br></code></pre></td></tr></table></figure><p>我们会看到etcd的metrics输出信息如下</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">grpc_server_started_total</span>&#123;grpc_method=<span class="hljs-string">&quot;Alarm&quot;</span>,grpc_service=<span class="hljs-string">&quot;etcdserverpb.Maintenance&quot;</span>,grpc_type=<span class="hljs-string">&quot;unary&quot;</span>&#125; <span class="hljs-number">0</span><br><span class="hljs-attribute">grpc_server_started_total</span>&#123;grpc_method=<span class="hljs-string">&quot;AuthDisable&quot;</span>,grpc_service=<span class="hljs-string">&quot;etcdserverpb.Auth&quot;</span>,grpc_type=<span class="hljs-string">&quot;unary&quot;</span>&#125; <span class="hljs-number">0</span><br><span class="hljs-attribute">grpc_server_started_total</span>&#123;grpc_method=<span class="hljs-string">&quot;AuthEnable&quot;</span>,grpc_service=<span class="hljs-string">&quot;etcdserverpb.Auth&quot;</span>,grpc_type=<span class="hljs-string">&quot;unary&quot;</span>&#125; <span class="hljs-number">0</span><br><span class="hljs-attribute">grpc_server_started_total</span>&#123;grpc_method=<span class="hljs-string">&quot;Authenticate&quot;</span>,grpc_service=<span class="hljs-string">&quot;etcdserverpb.Auth&quot;</span>,grpc_type=<span class="hljs-string">&quot;unary&quot;</span>&#125; <span class="hljs-number">0</span><br><span class="hljs-attribute">grpc_server_started_total</span>&#123;grpc_method=<span class="hljs-string">&quot;Check&quot;</span>,grpc_service=<span class="hljs-string">&quot;grpc.health.v1.Health&quot;</span>,grpc_type=<span class="hljs-string">&quot;unary&quot;</span>&#125; <span class="hljs-number">0</span><br><span class="hljs-attribute">grpc_server_started_total</span>&#123;grpc_method=<span class="hljs-string">&quot;Compact&quot;</span>,grpc_service=<span class="hljs-string">&quot;etcdserverpb.KV&quot;</span>,grpc_type=<span class="hljs-string">&quot;unary&quot;</span>&#125; <span class="hljs-number">2543</span><br><span class="hljs-attribute">grpc_server_started_total</span>&#123;grpc_method=<span class="hljs-string">&quot;Defragment&quot;</span>,grpc_service=<span class="hljs-string">&quot;etcdserverpb.Maintenance&quot;</span>,grpc_type=<span class="hljs-string">&quot;unary&quot;</span>&#125; <span class="hljs-number">0</span><br><span class="hljs-attribute">grpc_server_started_total</span>&#123;grpc_method=<span class="hljs-string">&quot;DeleteRange&quot;</span>,grpc_service=<span class="hljs-string">&quot;etcdserverpb.KV&quot;</span>,grpc_type=<span class="hljs-string">&quot;unary&quot;</span>&#125; <span class="hljs-number">0</span><br><span class="hljs-attribute">grpc_server_started_total</span>&#123;grpc_method=<span class="hljs-string">&quot;Hash&quot;</span>,grpc_service=<span class="hljs-string">&quot;etcdserverpb.Maintenance&quot;</span>,grpc_type=<span class="hljs-string">&quot;unary&quot;</span>&#125; <span class="hljs-number">0</span><br><span class="hljs-attribute">grpc_server_started_total</span>&#123;grpc_method=<span class="hljs-string">&quot;HashKV&quot;</span>,grpc_service=<span class="hljs-string">&quot;etcdserverpb.Maintenance&quot;</span>,grpc_type=<span class="hljs-string">&quot;unary&quot;</span>&#125; <span class="hljs-number">0</span><br><span class="hljs-attribute">grpc_server_started_total</span>&#123;grpc_method=<span class="hljs-string">&quot;LeaseGrant&quot;</span>,grpc_service=<span class="hljs-string">&quot;etcdserverpb.Lease&quot;</span>,grpc_type=<span class="hljs-string">&quot;unary&quot;</span>&#125; <span class="hljs-number">76364</span><br><span class="hljs-attribute">grpc_server_started_total</span>&#123;grpc_method=<span class="hljs-string">&quot;LeaseKeepAlive&quot;</span>,grpc_service=<span class="hljs-string">&quot;etcdserverpb.Lease&quot;</span>,grpc_type=<span class="hljs-string">&quot;bidi_stream&quot;</span>&#125; <span class="hljs-number">0</span><br><span class="hljs-attribute">grpc_server_started_total</span>&#123;grpc_method=<span class="hljs-string">&quot;LeaseLeases&quot;</span>,grpc_service=<span class="hljs-string">&quot;etcdserverpb.Lease&quot;</span>,grpc_type=<span class="hljs-string">&quot;unary&quot;</span>&#125; <span class="hljs-number">0</span><br><span class="hljs-attribute">grpc_server_started_total</span>&#123;grpc_method=<span class="hljs-string">&quot;LeaseRevoke&quot;</span>,grpc_service=<span class="hljs-string">&quot;etcdserverpb.Lease&quot;</span>,grpc_type=<span class="hljs-string">&quot;unary&quot;</span>&#125; <span class="hljs-number">0</span><br><span class="hljs-attribute">grpc_server_started_total</span>&#123;grpc_method=<span class="hljs-string">&quot;LeaseTimeToLive&quot;</span>,grpc_service=<span class="hljs-string">&quot;etcdserverpb.Lease&quot;</span>,grpc_type=<span class="hljs-string">&quot;unary&quot;</span>&#125; <span class="hljs-number">0</span><br><span class="hljs-attribute">grpc_server_started_total</span>&#123;grpc_method=<span class="hljs-string">&quot;MemberAdd&quot;</span>,grpc_service=<span class="hljs-string">&quot;etcdserverpb.Cluster&quot;</span>,grpc_type=<span class="hljs-string">&quot;unary&quot;</span>&#125; <span class="hljs-number">0</span><br><span class="hljs-attribute">grpc_server_started_total</span>&#123;grpc_method=<span class="hljs-string">&quot;MemberList&quot;</span>,grpc_service=<span class="hljs-string">&quot;etcdserverpb.Cluster&quot;</span>,grpc_type=<span class="hljs-string">&quot;unary&quot;</span>&#125; <span class="hljs-number">0</span><br><span class="hljs-attribute">grpc_server_started_total</span>&#123;grpc_method=<span class="hljs-string">&quot;MemberRemove&quot;</span>,grpc_service=<span class="hljs-string">&quot;etcdserverpb.Cluster&quot;</span>,grpc_type=<span class="hljs-string">&quot;unary&quot;</span>&#125; <span class="hljs-number">0</span><br><span class="hljs-attribute">grpc_server_started_total</span>&#123;grpc_method=<span class="hljs-string">&quot;MemberUpdate&quot;</span>,grpc_service=<span class="hljs-string">&quot;etcdserverpb.Cluster&quot;</span>,grpc_type=<span class="hljs-string">&quot;unary&quot;</span>&#125; <span class="hljs-number">0</span><br><span class="hljs-attribute">grpc_server_started_total</span>&#123;grpc_method=<span class="hljs-string">&quot;MoveLeader&quot;</span>,grpc_service=<span class="hljs-string">&quot;etcdserverpb.Maintenance&quot;</span>,grpc_type=<span class="hljs-string">&quot;unary&quot;</span>&#125; <span class="hljs-number">0</span><br><span class="hljs-attribute">grpc_server_started_total</span>&#123;grpc_method=<span class="hljs-string">&quot;Put&quot;</span>,grpc_service=<span class="hljs-string">&quot;etcdserverpb.KV&quot;</span>,grpc_type=<span class="hljs-string">&quot;unary&quot;</span>&#125; <span class="hljs-number">0</span><br><span class="hljs-attribute">grpc_server_started_total</span>&#123;grpc_method=<span class="hljs-string">&quot;Range&quot;</span>,grpc_service=<span class="hljs-string">&quot;etcdserverpb.KV&quot;</span>,grpc_type=<span class="hljs-string">&quot;unary&quot;</span>&#125; <span class="hljs-number">1</span>.<span class="hljs-number">336056</span>e+<span class="hljs-number">06</span><br><span class="hljs-attribute">grpc_server_started_total</span>&#123;grpc_method=<span class="hljs-string">&quot;RoleAdd&quot;</span>,grpc_service=<span class="hljs-string">&quot;etcdserverpb.Auth&quot;</span>,grpc_type=<span class="hljs-string">&quot;unary&quot;</span>&#125; <span class="hljs-number">0</span><br><span class="hljs-attribute">grpc_server_started_total</span>&#123;grpc_method=<span class="hljs-string">&quot;RoleDelete&quot;</span>,grpc_service=<span class="hljs-string">&quot;etcdserverpb.Auth&quot;</span>,grpc_type=<span class="hljs-string">&quot;unary&quot;</span>&#125; <span class="hljs-number">0</span><br><span class="hljs-attribute">grpc_server_started_total</span>&#123;grpc_method=<span class="hljs-string">&quot;RoleGet&quot;</span>,grpc_service=<span class="hljs-string">&quot;etcdserverpb.Auth&quot;</span>,grpc_type=<span class="hljs-string">&quot;unary&quot;</span>&#125; <span class="hljs-number">0</span><br><span class="hljs-attribute">grpc_server_started_total</span>&#123;grpc_method=<span class="hljs-string">&quot;RoleGrantPermission&quot;</span>,grpc_service=<span class="hljs-string">&quot;etcdserverpb.Auth&quot;</span>,grpc_type=<span class="hljs-string">&quot;unary&quot;</span>&#125; <span class="hljs-number">0</span><br><span class="hljs-attribute">grpc_server_started_total</span>&#123;grpc_method=<span class="hljs-string">&quot;RoleList&quot;</span>,grpc_service=<span class="hljs-string">&quot;etcdserverpb.Auth&quot;</span>,grpc_type=<span class="hljs-string">&quot;unary&quot;</span>&#125; <span class="hljs-number">0</span><br><span class="hljs-attribute">grpc_server_started_total</span>&#123;grpc_method=<span class="hljs-string">&quot;RoleRevokePermission&quot;</span>,grpc_service=<span class="hljs-string">&quot;etcdserverpb.Auth&quot;</span>,grpc_type=<span class="hljs-string">&quot;unary&quot;</span>&#125; <span class="hljs-number">0</span><br><span class="hljs-attribute">grpc_server_started_total</span>&#123;grpc_method=<span class="hljs-string">&quot;Snapshot&quot;</span>,grpc_service=<span class="hljs-string">&quot;etcdserverpb.Maintenance&quot;</span>,grpc_type=<span class="hljs-string">&quot;server_stream&quot;</span>&#125; <span class="hljs-number">0</span><br><span class="hljs-attribute">grpc_server_started_total</span>&#123;grpc_method=<span class="hljs-string">&quot;Status&quot;</span>,grpc_service=<span class="hljs-string">&quot;etcdserverpb.Maintenance&quot;</span>,grpc_type=<span class="hljs-string">&quot;unary&quot;</span>&#125; <span class="hljs-number">12</span><br><span class="hljs-attribute">grpc_server_started_total</span>&#123;grpc_method=<span class="hljs-string">&quot;Txn&quot;</span>,grpc_service=<span class="hljs-string">&quot;etcdserverpb.KV&quot;</span>,grpc_type=<span class="hljs-string">&quot;unary&quot;</span>&#125; <span class="hljs-number">427834</span><br><span class="hljs-attribute">grpc_server_started_total</span>&#123;grpc_method=<span class="hljs-string">&quot;UserAdd&quot;</span>,grpc_service=<span class="hljs-string">&quot;etcdserverpb.Auth&quot;</span>,grpc_type=<span class="hljs-string">&quot;unary&quot;</span>&#125; <span class="hljs-number">0</span><br><span class="hljs-attribute">grpc_server_started_total</span>&#123;grpc_method=<span class="hljs-string">&quot;UserChangePassword&quot;</span>,grpc_service=<span class="hljs-string">&quot;etcdserverpb.Auth&quot;</span>,grpc_type=<span class="hljs-string">&quot;unary&quot;</span>&#125; <span class="hljs-number">0</span><br><span class="hljs-attribute">grpc_server_started_total</span>&#123;grpc_method=<span class="hljs-string">&quot;UserDelete&quot;</span>,grpc_service=<span class="hljs-string">&quot;etcdserverpb.Auth&quot;</span>,grpc_type=<span class="hljs-string">&quot;unary&quot;</span>&#125; <span class="hljs-number">0</span><br><span class="hljs-attribute">grpc_server_started_total</span>&#123;grpc_method=<span class="hljs-string">&quot;UserGet&quot;</span>,grpc_service=<span class="hljs-string">&quot;etcdserverpb.Auth&quot;</span>,grpc_type=<span class="hljs-string">&quot;unary&quot;</span>&#125; <span class="hljs-number">0</span><br><span class="hljs-attribute">grpc_server_started_total</span>&#123;grpc_method=<span class="hljs-string">&quot;UserGrantRole&quot;</span>,grpc_service=<span class="hljs-string">&quot;etcdserverpb.Auth&quot;</span>,grpc_type=<span class="hljs-string">&quot;unary&quot;</span>&#125; <span class="hljs-number">0</span><br><span class="hljs-attribute">grpc_server_started_total</span>&#123;grpc_method=<span class="hljs-string">&quot;UserList&quot;</span>,grpc_service=<span class="hljs-string">&quot;etcdserverpb.Auth&quot;</span>,grpc_type=<span class="hljs-string">&quot;unary&quot;</span>&#125; <span class="hljs-number">0</span><br><span class="hljs-attribute">grpc_server_started_total</span>&#123;grpc_method=<span class="hljs-string">&quot;UserRevokeRole&quot;</span>,grpc_service=<span class="hljs-string">&quot;etcdserverpb.Auth&quot;</span>,grpc_type=<span class="hljs-string">&quot;unary&quot;</span>&#125; <span class="hljs-number">0</span><br><span class="hljs-attribute">grpc_server_started_total</span>&#123;grpc_method=<span class="hljs-string">&quot;Watch&quot;</span>,grpc_service=<span class="hljs-string">&quot;etcdserverpb.Watch&quot;</span>,grpc_type=<span class="hljs-string">&quot;bidi_stream&quot;</span>&#125; <span class="hljs-number">70</span><br><span class="hljs-comment"># HELP process_cpu_seconds_total Total user and system CPU time spent in seconds.</span><br><span class="hljs-comment"># TYPE process_cpu_seconds_total counter</span><br><span class="hljs-attribute">process_cpu_seconds_total</span> <span class="hljs-number">12272</span>.<span class="hljs-number">94</span><br><span class="hljs-comment"># HELP process_max_fds Maximum number of open file descriptors.</span><br><span class="hljs-comment"># TYPE process_max_fds gauge</span><br><span class="hljs-attribute">process_max_fds</span> <span class="hljs-number">65535</span><br><span class="hljs-comment"># HELP process_open_fds Number of open file descriptors.</span><br><span class="hljs-comment"># TYPE process_open_fds gauge</span><br><span class="hljs-attribute">process_open_fds</span> <span class="hljs-number">108</span><br><span class="hljs-comment"># HELP process_resident_memory_bytes Resident memory size in bytes.</span><br><span class="hljs-comment"># TYPE process_resident_memory_bytes gauge</span><br><span class="hljs-attribute">process_resident_memory_bytes</span> <span class="hljs-number">8</span>.<span class="hljs-number">8608768</span>e+<span class="hljs-number">07</span><br><span class="hljs-comment"># HELP process_start_time_seconds Start time of the process since unix epoch in seconds.</span><br><span class="hljs-comment"># TYPE process_start_time_seconds gauge</span><br><span class="hljs-attribute">process_start_time_seconds</span> <span class="hljs-number">1</span>.<span class="hljs-number">57595738888</span>e+<span class="hljs-number">09</span><br><span class="hljs-comment"># HELP process_virtual_memory_bytes Virtual memory size in bytes.</span><br><span class="hljs-comment"># TYPE process_virtual_memory_bytes gauge</span><br><span class="hljs-attribute">process_virtual_memory_bytes</span> <span class="hljs-number">1</span>.<span class="hljs-number">096615936</span>e+<span class="hljs-number">10</span><br></code></pre></td></tr></table></figure><p>&amp;emsp;&amp;emsp;通过以上方式我们输出了etcd的metrics信息，我们可以看到 etcd 使用的证书都对应在节点的 &#x2F;etc&#x2F;kubernetes&#x2F;pki&#x2F;etcd 这个路径下面，所以首先我们将需要使用到的证书通过 secret 对象保存到kubernetes集群中去：(在 etcd 运行的节点)</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs gradle">kubectl -n monitoring create secret generic etcd-certs --<span class="hljs-keyword">from</span>-<span class="hljs-keyword">file</span>=<span class="hljs-regexp">/etc/</span>kubernetes<span class="hljs-regexp">/pki/</span>etcd<span class="hljs-regexp">/healthcheck-client.crt --from-file=/</span>etc<span class="hljs-regexp">/kubernetes/</span>pki<span class="hljs-regexp">/etcd/</span>healthcheck-client.key --<span class="hljs-keyword">from</span>-<span class="hljs-keyword">file</span>=<span class="hljs-regexp">/etc/</span>kubernetes<span class="hljs-regexp">/pki/</span>etcd/ca.crt<br>secret <span class="hljs-string">&quot;etcd-certs&quot;</span> created<br></code></pre></td></tr></table></figure><p>然后将上面创建的 etcd-certs 对象配置到 prometheus 资源对象中，直接更新 prometheus 资源对象即可：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">kubectl <span class="hljs-built_in">edit</span> prometheus k8s -n monitoring<br></code></pre></td></tr></table></figure><p>添加如下的 secrets 属性：</p><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-attribute">nodeSelector</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">beta.kubernetes.io/os</span><span class="hljs-punctuation">:</span> <span class="hljs-string">linux</span><br><span class="hljs-attribute">replicas</span><span class="hljs-punctuation">:</span> <span class="hljs-string">2</span><br><span class="hljs-attribute">secrets</span><span class="hljs-punctuation">:</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">etcd-certs</span><br></code></pre></td></tr></table></figure><p>更新完成后，我们就可以在 Prometheus 的 Pod 中获取到上面创建的 etcd 证书文件了，具体的路径我们可以进入 Pod 中查看：</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs gradle">$ [root@k8s-m1 kube-prom]# kubectl exec -it prometheus-k8s-<span class="hljs-number">0</span> -c prometheus <span class="hljs-regexp">/bin/</span>sh -n monitoring <br><br><span class="hljs-regexp">/ $ ls /</span>etc<span class="hljs-regexp">/prometheus/</span>secrets<span class="hljs-regexp">/etcd-certs/</span><br>ca.crt      healthcheck-client.crt  healthcheck-client.key<br></code></pre></td></tr></table></figure><h3 id="创建-ServiceMonitor"><a href="#创建-ServiceMonitor" class="headerlink" title="创建 ServiceMonitor"></a>创建 ServiceMonitor</h3><p>现在 Prometheus 访问 etcd 集群的证书已经准备好了，接下来创建 ServiceMonitor 对象即可（prometheus-serviceMonitorEtcd.yaml）</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">apiVersion:</span> monitoring.coreos.com/v1<br><span class="hljs-symbol">kind:</span> ServiceMonitor<br><span class="hljs-symbol">metadata:</span><br><span class="hljs-symbol">  name:</span> etcd-k8s<br><span class="hljs-symbol">  namespace:</span> monitoring<br><span class="hljs-symbol">  labels:</span><br>    k8s-app: etcd-k8s<br><span class="hljs-symbol">spec:</span><br><span class="hljs-symbol">  jobLabel:</span> k8s-app<br><span class="hljs-symbol">  endpoints:</span><br>  - port: port<br><span class="hljs-symbol">    interval:</span> <span class="hljs-number">30</span>s<br><span class="hljs-symbol">    scheme:</span> https<br><span class="hljs-symbol">    tlsConfig:</span><br><span class="hljs-symbol">      caFile:</span> <span class="hljs-keyword">/etc/</span>prometheus<span class="hljs-keyword">/secrets/</span>etcd-certs/ca.crt<br><span class="hljs-symbol">      certFile:</span> <span class="hljs-keyword">/etc/</span>prometheus<span class="hljs-keyword">/secrets/</span>etcd-certs/healthcheck-client.crt<br><span class="hljs-symbol">      keyFile:</span> <span class="hljs-keyword">/etc/</span>prometheus<span class="hljs-keyword">/secrets/</span>etcd-certs/healthcheck-client.key<br><span class="hljs-symbol">      insecureSkipVerify:</span> true<br><span class="hljs-symbol">  selector:</span><br><span class="hljs-symbol">    matchLabels:</span><br>      k8s-app: etcd<br><span class="hljs-symbol">  namespaceSelector:</span><br><span class="hljs-symbol">    matchNames:</span><br>    - kube-system<br></code></pre></td></tr></table></figure><p>&amp;emsp;&amp;emsp;上面我们在 monitoring 命名空间下面创建了名为 etcd-k8s 的 ServiceMonitor 对象，匹配 kube-system 这个命名空间下面的具有 k8s-app&#x3D;etcd 这个 label 标签的 Service，jobLabel 表示用于检索 job 任务名称的标签。和前面不太一样的地方是 endpoints 属性的写法，配置上访问 etcd 的相关证书，endpoints 属性下面可以配置很多抓取的参数，tlsConfig 表示用于配置抓取监控数据端点的 tls 认证，由于证书 serverName 和 etcd 中签发的可能不匹配，所以加上了 insecureSkipVerify&#x3D;true</p><p><img src="/images/etcd-5.jpg" alt="etcd-5"></p><p>关于 ServiceMonitor 属性的更多用法可以查看 <a href="https://github.com/coreos/prometheus-operator/blob/master/Documentation/api.md">prometheus-operator api</a> 了解更多</p><p>直接创建这个 ServiceMonitor 对象：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stylus">kubectl create -f prometheus-serviceMonitorEtcd<span class="hljs-selector-class">.yaml</span><br>servicemonitor<span class="hljs-selector-class">.monitoring</span><span class="hljs-selector-class">.coreos</span><span class="hljs-selector-class">.com</span> <span class="hljs-string">&quot;etcd-k8s&quot;</span> created<br></code></pre></td></tr></table></figure><h2 id="创建-Service"><a href="#创建-Service" class="headerlink" title="创建 Service"></a>创建 Service</h2><p>ServiceMonitor 创建完成了，但是现在还没有关联的对应的 Service 对象，所以需要我们去手动创建一个 Service 对象（prometheus-etcdService.yaml）：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Service</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">etcd-k8s</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">kube-system</span><br>  <span class="hljs-attr">labels:</span><br>    <span class="hljs-attr">k8s-app:</span> <span class="hljs-string">etcd</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">ClusterIP</span><br>  <span class="hljs-attr">clusterIP:</span> <span class="hljs-string">None</span><br>  <span class="hljs-attr">ports:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">port</span><br>    <span class="hljs-attr">port:</span> <span class="hljs-number">2379</span><br>    <span class="hljs-attr">protocol:</span> <span class="hljs-string">TCP</span><br><span class="hljs-meta">---</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Endpoints</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">etcd-k8s</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">kube-system</span><br>  <span class="hljs-attr">labels:</span><br>    <span class="hljs-attr">k8s-app:</span> <span class="hljs-string">etcd</span><br><span class="hljs-attr">subsets:</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">addresses:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">ip:</span> <span class="hljs-number">10.15</span><span class="hljs-number">.1</span><span class="hljs-number">.17</span><br>    <span class="hljs-attr">targetRef:</span><br>      <span class="hljs-attr">kind:</span> <span class="hljs-string">Node</span><br>      <span class="hljs-attr">name:</span> <span class="hljs-string">k8s-m1</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">ip:</span> <span class="hljs-number">10.15</span><span class="hljs-number">.1</span><span class="hljs-number">.18</span><br>    <span class="hljs-attr">targetRef:</span><br>      <span class="hljs-attr">kind:</span> <span class="hljs-string">Node</span><br>      <span class="hljs-attr">name:</span> <span class="hljs-string">k8s-m2</span>   <br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">ip:</span> <span class="hljs-number">10.15</span><span class="hljs-number">.1</span><span class="hljs-number">.19</span><br>    <span class="hljs-attr">targetRef:</span><br>      <span class="hljs-attr">kind:</span> <span class="hljs-string">Node</span><br>      <span class="hljs-attr">name:</span> <span class="hljs-string">k8s-m3</span><br>  <span class="hljs-attr">ports:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">port</span><br>    <span class="hljs-attr">port:</span> <span class="hljs-number">2379</span><br>    <span class="hljs-attr">protocol:</span> <span class="hljs-string">TCP</span><br></code></pre></td></tr></table></figure><p>&amp;emsp;&amp;emsp;我们这里创建的 Service 没有采用前面通过 label 标签的形式去匹配 Pod 的做法，因为前面我们说过很多时候我们创建的 etcd 集群是独立于集群之外的，这种情况下面我们就需要自定义一个 Endpoints，要注意 metadata 区域的内容要和 Service 保持一致，Service 的 clusterIP 设置为 None，对改知识点不太熟悉的，可以去查看我们前面关于 Service 部分的讲解。</p><p>Endpoints 的 subsets 中填写 etcd 集群的地址即可，我们这里是单节点的，填写一个即可，直接创建该 Service 资源：</p><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gauss">kubectl <span class="hljs-keyword">create</span> -f prometheus-etcdService.yaml<br></code></pre></td></tr></table></figure><p>创建完成后，隔一会儿去 Prometheus 的 Dashboard 中查看 targets，便会有 etcd 的监控项了：<br><img src="/images/etcd-6.png" alt="etcd-6"></p><p>数据采集到后，可以在 grafana 中导入编号为<code>3070</code>的 dashboard，获取到 etcd 的监控图表。</p><p><img src="/images/etcd-7.png" alt="etcd-7"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Kubeadm 证书过期时间调整</title>
    <link href="/2019/12/05/Kubeadm-certificate-modified/"/>
    <url>/2019/12/05/Kubeadm-certificate-modified/</url>
    
    <content type="html"><![CDATA[<h2 id="下载源码"><a href="#下载源码" class="headerlink" title="下载源码"></a>下载源码</h2><p>手动下载源码编译，这里我使用v1.15.6来做示范。我们使用容器编译，这里我使用<code>4c8g</code>的<code>centos7.6</code>+<code>docker-ce-18.09</code>。想办法把源码拉下来</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">git</span> clone https://github.com/kubernetes/kubernetes -b v1.<span class="hljs-number">15</span>.<span class="hljs-number">6</span><br><span class="hljs-attribute">cd</span> kubernetes<br><span class="hljs-attribute">git</span> checkout -b v1.<span class="hljs-number">15</span>.<span class="hljs-number">6</span><br></code></pre></td></tr></table></figure><h2 id="编译前准备"><a href="#编译前准备" class="headerlink" title="编译前准备"></a>编译前准备</h2><p>因为我们拉取后修改了源码，编译出的version信息会是下面带<code>-dirty</code></p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ada">$ kube-controller-manager <span class="hljs-comment">--version</span><br>Kubernetes v1.<span class="hljs-number">15.5</span>-dirty<br></code></pre></td></tr></table></figure><p>可以执行下面命令去掉<code>-dirty</code>,或者自己git add后commit也行</p><figure class="highlight purebasic"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs purebasic">sed -ri &#x27;s<span class="hljs-symbol">#KUBE_GIT_TREE_STATE</span>=<span class="hljs-string">&quot;dirty&quot;</span><span class="hljs-symbol">#KUBE_GIT_TREE_STATE</span>=<span class="hljs-string">&quot;clean&quot;</span><span class="hljs-symbol">#g</span>&#x27; hack/lib/version.sh<br></code></pre></td></tr></table></figure><p>另外如果有需求也编译docker镜像的话可以先提前准备本地镜像，修改<code>build/lib/release.sh</code>，命令<code>sed -ri &#39;s#(build)\s+--pull#\1#&#39; build/lib/release.sh</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-string">&quot;<span class="hljs-variable">$&#123;DOCKER[@]&#125;</span>&quot;</span> build --pull -q -t <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;docker_image_tag&#125;</span>&quot;</span> <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;docker_build_path&#125;</span>&quot;</span> &gt;/dev/null<br>修改为下面<br><span class="hljs-string">&quot;<span class="hljs-variable">$&#123;DOCKER[@]&#125;</span>&quot;</span> build -q -t <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;docker_image_tag&#125;</span>&quot;</span> <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;docker_build_path&#125;</span>&quot;</span> &gt;/dev/null<br></code></pre></td></tr></table></figure><p>因为我们使用docker镜像编译，需要提前准备镜像，可以先到下面的<code>make quick-release</code>先看报错无法拉取的镜像名，获取到了后再下面拉取镜像</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs gradle">[root@k8s-m1 kubernetes]# <span class="hljs-keyword">grep</span> <span class="hljs-keyword">FROM</span>  _output<span class="hljs-regexp">/images/</span>kube-build\:build-<span class="hljs-number">7</span>db96ab759-<span class="hljs-number">5</span>-v1.<span class="hljs-number">12.12</span>-<span class="hljs-number">1</span>/Dockerfile <br><span class="hljs-keyword">FROM</span> k8s.gcr.io/kube-cross:v1.<span class="hljs-number">12.12</span>-<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>清理编译文件</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">make clean</span><br></code></pre></td></tr></table></figure><p>拉取该镜像</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">curl -s https:<span class="hljs-regexp">//</span>zhangguanzhang.github.io<span class="hljs-regexp">/bash/</span>pull.sh | bash -s k8s.gcr.io/kube-cross:v1.<span class="hljs-number">12.12</span>-<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>拉下来之后挂载到容器去编译，环境都弄好了（挂载上之后先暂时不管，先修改代码）</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">docker run -it --rm -v <span class="hljs-regexp">/root/</span>kubernetes:<span class="hljs-regexp">/go/</span>src<span class="hljs-regexp">/k8s.io/</span>kubernetes k8s.gcr.io<span class="hljs-regexp">/kube-cross:v1.12.12-1  /</span>bin/sh<br></code></pre></td></tr></table></figure><p>修改关键部分代码的证书生产有效期（自签CA的有效期）</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gradle">[root@k8s-m1 kubernetes]# vim .<span class="hljs-regexp">/staging/</span>src<span class="hljs-regexp">/k8s.io/</span>client-go<span class="hljs-regexp">/util/</span>cert/cert.go<br></code></pre></td></tr></table></figure><figure class="highlight roboconf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs roboconf">// NewSelfSignedCACert creates a CA certificate<br>func NewSelfSignedCACert(cfg Config, key crypto.Signer) (*x509.Certificate, error) &#123;<br>        <span class="hljs-attribute">now</span> := time<span class="hljs-variable">.Now</span>()<br>        tmpl := x509<span class="hljs-variable">.Certificate</span>&#123;<br>                SerialNumber: new(big<span class="hljs-variable">.Int</span>)<span class="hljs-variable">.SetInt</span>64(0),<br>                Subject: pkix<span class="hljs-variable">.Name</span>&#123;<br>                        CommonName:   cfg<span class="hljs-variable">.CommonName</span>,<br>                        Organization: cfg<span class="hljs-variable">.Organization</span>,<br>                &#125;,<br>                NotBefore:             now<span class="hljs-variable">.UTC</span>(),<br>                NotAfter:              now<span class="hljs-variable">.Add</span>(duration365d * 10)<span class="hljs-variable">.UTC</span>(),         # 修改NotAfter字段，默认为10年改为100年<br>                KeyUsage:              x509<span class="hljs-variable">.KeyUsageKeyEncipherment</span> | x509<span class="hljs-variable">.KeyUsageDigitalSignature</span> | x509<span class="hljs-variable">.KeyUsageCertSign</span>,<br>                BasicConstraintsValid: true,<br>                IsCA:                  true,<br>        &#125;<br><br>        certDERBytes, err := x509<span class="hljs-variable">.CreateCertificate</span>(cryptorand<span class="hljs-variable">.Reader</span>, &amp;tmpl, &amp;tmpl, key<span class="hljs-variable">.Public</span>(), key)<br>        if err != nil &#123;<br>                return nil, err<br>        &#125;<br>        return x509<span class="hljs-variable">.ParseCertificate</span>(certDERBytes)<br>&#125;<br></code></pre></td></tr></table></figure><p>修改kubeadm生成的有效期</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gradle">[root@k8s-m1 kubernetes]# vim .<span class="hljs-regexp">/cmd/</span>kubeadm<span class="hljs-regexp">/app/</span>constants/constants.go<br></code></pre></td></tr></table></figure><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs objectivec"><span class="hljs-keyword">const</span> (<br>        <span class="hljs-comment">// KubernetesDir is the directory Kubernetes owns for storing various configuration files</span><br>        KubernetesDir = <span class="hljs-string">&quot;/etc/kubernetes&quot;</span><br>        <span class="hljs-comment">// ManifestsSubDirName defines directory name to store manifests</span><br>        ManifestsSubDirName = <span class="hljs-string">&quot;manifests&quot;</span><br>        <span class="hljs-comment">// TempDirForKubeadm defines temporary directory for kubeadm</span><br>        <span class="hljs-comment">// should be joined with KubernetesDir.</span><br>        TempDirForKubeadm = <span class="hljs-string">&quot;tmp&quot;</span><br><br>        <span class="hljs-comment">// CertificateValidity defines the validity for all the signed certificates generated by kubeadm</span><br>        CertificateValidity = time.Hour * <span class="hljs-number">24</span> * <span class="hljs-number">365</span> * <span class="hljs-number">100</span>       # 修改CertificateValidity字段<br><br>        <span class="hljs-comment">// CACertAndKeyBaseName defines certificate authority base name</span><br>        <span class="hljs-built_in">CACertAndKeyBaseName</span> = <span class="hljs-string">&quot;ca&quot;</span><br>        <span class="hljs-comment">// CACertName defines certificate name</span><br>        <span class="hljs-built_in">CACertName</span> = <span class="hljs-string">&quot;ca.crt&quot;</span><br>        <span class="hljs-comment">// CAKeyName defines certificate name</span><br>        <span class="hljs-built_in">CAKeyName</span> = <span class="hljs-string">&quot;ca.key&quot;</span><br></code></pre></td></tr></table></figure><h2 id="进入容器内开始编译"><a href="#进入容器内开始编译" class="headerlink" title="进入容器内开始编译"></a>进入容器内开始编译</h2><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs gradle">[root@k8s-m1 kubernetes]# docker run -it --rm -v <span class="hljs-regexp">/root/</span>kubernetes:<span class="hljs-regexp">/go/</span>src<span class="hljs-regexp">/k8s.io/</span>kubernetes k8s.gcr.io<span class="hljs-regexp">/kube-cross:v1.12.12-1  /</span>bin/sh<br># cd <span class="hljs-regexp">/go/</span>src<span class="hljs-regexp">/k8s.io/</span>kubernetes<br><br># pwd<br><span class="hljs-regexp">/go/</span>src<span class="hljs-regexp">/k8s.io/</span>kubernetes<br><br># make WHAT=cmd/kubeadm GOFLAGS=-v<br></code></pre></td></tr></table></figure><p>编译成功后二进制文件在<code>./_output/local/bin/linux/amd64/</code> 目录下，直接覆盖掉 &#x2F;usr&#x2F;bin&#x2F; 下的 kubeadm 就行了，这个只在 master 节点替换掉就行了(如果有多台master，则将第一台生成的相关证书拷贝到其余master即可。)</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">cp _output<span class="hljs-regexp">/local/</span>bin<span class="hljs-regexp">/linux/</span>amd64<span class="hljs-regexp">/kubeadm  /u</span>sr<span class="hljs-regexp">/bin/</span><br></code></pre></td></tr></table></figure><p>获取kubeadm版本信息</p><figure class="highlight d"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs d">[root<span class="hljs-keyword">@k8s</span>-m1 kubernetes]# kubeadm <span class="hljs-keyword">version</span><br>kubeadm <span class="hljs-keyword">version</span>: &amp;<span class="hljs-keyword">version</span>.Info&#123;Major:<span class="hljs-string">&quot;1&quot;</span>, Minor:<span class="hljs-string">&quot;15&quot;</span>, GitVersion:<span class="hljs-string">&quot;v1.15.6&quot;</span>, GitCommit:<span class="hljs-string">&quot;7015f71e75f670eb9e7ebd4b5749639d42e20079&quot;</span>, GitTreeState:<span class="hljs-string">&quot;clean&quot;</span>, BuildDate:<span class="hljs-string">&quot;2019-12-05T05:59:03Z&quot;</span>, GoVersion:<span class="hljs-string">&quot;go1.12.12&quot;</span>, Compiler:<span class="hljs-string">&quot;gc&quot;</span>, Platform:<span class="hljs-string">&quot;linux/amd64&quot;</span>&#125;<br></code></pre></td></tr></table></figure><h2 id="更新所有证书"><a href="#更新所有证书" class="headerlink" title="更新所有证书"></a>更新所有证书</h2><p>由 kubeadm 生成的客户端证书在 1 年后到期。 下面将介绍如何使用 kubeadm 管理证书续订。</p><h3 id="检查证书是否过期"><a href="#检查证书是否过期" class="headerlink" title="检查证书是否过期"></a>检查证书是否过期</h3><p><code>check-expiration</code> 能被用来检查证书是否过期</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">kubeadm alpha certs check-expiration</span><br></code></pre></td></tr></table></figure><p>输出类似于以下内容：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">CERTIFICATE</span>                EXPIRES                  RESIDUAL TIME   EXTERNALLY MANAGED<br><span class="hljs-attribute">admin</span>.conf                 May <span class="hljs-number">15</span>, <span class="hljs-number">2020</span> <span class="hljs-number">13</span>:<span class="hljs-number">03</span> UTC   <span class="hljs-number">364</span>d            false<br><span class="hljs-attribute">apiserver</span>                  May <span class="hljs-number">15</span>, <span class="hljs-number">2020</span> <span class="hljs-number">13</span>:<span class="hljs-number">00</span> UTC   <span class="hljs-number">364</span>d            false<br><span class="hljs-attribute">apiserver</span>-etcd-client      May <span class="hljs-number">15</span>, <span class="hljs-number">2020</span> <span class="hljs-number">13</span>:<span class="hljs-number">00</span> UTC   <span class="hljs-number">364</span>d            false<br><span class="hljs-attribute">apiserver</span>-kubelet-client   May <span class="hljs-number">15</span>, <span class="hljs-number">2020</span> <span class="hljs-number">13</span>:<span class="hljs-number">00</span> UTC   <span class="hljs-number">364</span>d            false<br><span class="hljs-attribute">controller</span>-manager.conf    May <span class="hljs-number">15</span>, <span class="hljs-number">2020</span> <span class="hljs-number">13</span>:<span class="hljs-number">03</span> UTC   <span class="hljs-number">364</span>d            false<br><span class="hljs-attribute">etcd</span>-healthcheck-client    May <span class="hljs-number">15</span>, <span class="hljs-number">2020</span> <span class="hljs-number">13</span>:<span class="hljs-number">00</span> UTC   <span class="hljs-number">364</span>d            false<br><span class="hljs-attribute">etcd</span>-peer                  May <span class="hljs-number">15</span>, <span class="hljs-number">2020</span> <span class="hljs-number">13</span>:<span class="hljs-number">00</span> UTC   <span class="hljs-number">364</span>d            false<br><span class="hljs-attribute">etcd</span>-server                May <span class="hljs-number">15</span>, <span class="hljs-number">2020</span> <span class="hljs-number">13</span>:<span class="hljs-number">00</span> UTC   <span class="hljs-number">364</span>d            false<br><span class="hljs-attribute">front</span>-proxy-client         May <span class="hljs-number">15</span>, <span class="hljs-number">2020</span> <span class="hljs-number">13</span>:<span class="hljs-number">00</span> UTC   <span class="hljs-number">364</span>d            false<br><span class="hljs-attribute">scheduler</span>.conf             May <span class="hljs-number">15</span>, <span class="hljs-number">2020</span> <span class="hljs-number">13</span>:<span class="hljs-number">03</span> UTC   <span class="hljs-number">364</span>d            false<br></code></pre></td></tr></table></figure><p>该命令显示 <code>/etc/kubernetes/pki</code> 文件夹中的客户端证书以及 kubeadm 使用的 KUBECONFIG 文件中嵌入的客户端证书的到期时间&#x2F;剩余时间。<br>另外， kubeadm 会通知用户证书是否由外部管理； 在这种情况下，用户应该小心的手动&#x2F;使用其他工具来管理证书更新。</p><blockquote><p>警告： kubeadm 不能管理由外部 CA 签名的证书</p></blockquote><blockquote><p>注意： 上面的列表中没有包含 kubelet.conf 因为 kubeadm 将 kubelet 配置为自动更新证书。</p></blockquote><h3 id="手动更新证书"><a href="#手动更新证书" class="headerlink" title="手动更新证书"></a>手动更新证书</h3><p>您能随时通过 <code>kubeadm alpha certs renew</code> 命令手动更新您的证书。</p><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs processing">kubeadm  <span class="hljs-built_in">alpha</span> certs re<span class="hljs-keyword">new </span><span class="hljs-class title_">all</span> <br></code></pre></td></tr></table></figure><p>完成后重启kube-apiserver,kube-controller,kube-scheduler这三个容器</p><p>这个命令用 CA （或者 front-proxy-CA ）证书和存储在 <code>/etc/kubernetes/pki</code> 中的密钥执行更新。</p><blockquote><p>警告： 如果您运行了一个 HA 集群，这个命令需要在所有控制面板节点上执行。</p></blockquote><blockquote><p>注意：alpha certs renew 使用现有的证书作为属性 (Common Name、Organization、SAN 等) 的权威来源，而不是 kubeadm-config ConfigMap 。强烈建议使它们保持同步。</p></blockquote><h2 id="启用-Kubelet-Server-证书"><a href="#启用-Kubelet-Server-证书" class="headerlink" title="启用 Kubelet Server 证书"></a>启用 Kubelet Server 证书</h2><p>kubelet证书分为<code>server</code>和<code>client</code>两种， k8s 1.9默认启用了client证书的自动轮换，但server证书出于安全原因需要用户手动签发</p><h3 id="增加-kubelet-参数"><a href="#增加-kubelet-参数" class="headerlink" title="增加 kubelet 参数"></a>增加 kubelet 参数</h3><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs gradle"># 在<span class="hljs-regexp">/etc/</span>systemd<span class="hljs-regexp">/system/</span>kubelet.service.d/<span class="hljs-number">10</span>-kubeadm.conf 增加如下参数<br>Environment=<span class="hljs-string">&quot;KUBELET_EXTRA_ARGS=--rotate-server-certificates&quot;</span><br></code></pre></td></tr></table></figure><h3 id="增加-controller-manager-参数"><a href="#增加-controller-manager-参数" class="headerlink" title="增加 controller-manager 参数"></a>增加 controller-manager 参数</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-section"># 在/etc/kubernetes/manifests/kube-controller-manager.yaml 添加如下参数</span><br><span class="hljs-bullet">  -</span> command:<br><span class="hljs-bullet">    -</span> kube-controller-manager<br><span class="hljs-bullet">    -</span> --experimental-cluster-signing-duration=87600h0m0s<br><span class="hljs-bullet">    -</span> ....<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>使用Kubeadm搭建一个高可用集群</title>
    <link href="/2019/12/03/kubeadm-base-use/"/>
    <url>/2019/12/03/kubeadm-base-use/</url>
    
    <content type="html"><![CDATA[<p>市面上很多kubeadm的文章都是错误示范或者不够详细，大多数都没写系统设置之类的就直接<code>kubeadm init</code>导致很多跟着做的人会报错</p><p>我期望看到本文的读者最少具备以下知识:</p><ul><li>Linux一些目录规范和systemd</li><li>学过一点docker</li><li>懂dns和&#x2F;etc&#x2F;hosts、curl互相结合来测试一些web的接口响应状态</li><li>不要求github有自己项目，至少会浏览github</li></ul><p>本教学将以下列节点数与规格来进行部署Kubernetes集群,系统<code>CentOS 8.1</code>，有条件<code>8.2</code>，不要使用<code>centos7.4</code>以及一下，容器技术依赖于内核技术，低版本系统部署和运行后问题会非常多</p><table><thead><tr><th align="left">IP</th><th align="right">Hostname</th><th align="center">role</th><th align="center">CPU</th><th align="center">Memory</th></tr></thead><tbody><tr><td align="left">10.15.1.250</td><td align="right"></td><td align="center">vip</td><td align="center"></td><td align="center"></td></tr><tr><td align="left">10.15.1.17</td><td align="right">K8S-M1</td><td align="center">master</td><td align="center">4</td><td align="center">8G</td></tr><tr><td align="left">10.15.1.18</td><td align="right">K8S-M2</td><td align="center">master</td><td align="center">4</td><td align="center">8G</td></tr><tr><td align="left">10.15.1.19</td><td align="right">K8S-M3</td><td align="center">master</td><td align="center">4</td><td align="center">8G</td></tr><tr><td align="left">10.15.1.20</td><td align="right">K8S-N1</td><td align="center">node</td><td align="center">4</td><td align="center">8G</td></tr><tr><td align="left">10.15.1.21</td><td align="right">K8S-N2</td><td align="center">node</td><td align="center">4</td><td align="center">8G</td></tr></tbody></table><blockquote><ul><li>所有操作全部用root使用者进行，系统盘尽量大点，不然到时候镜像多了例如到了85%会被gc回收镜像</li></ul></blockquote><ul><li>高可用一般建议大于等于3台的奇数台,我使用3台master来做高可用</li><li>一台也可以，但是差距不大，差异性我会在文章中注明的，并且单台master的话其他的master ip不用写即可</li></ul><h2 id="事前准备-每台机器"><a href="#事前准备-每台机器" class="headerlink" title="事前准备(每台机器)"></a>事前准备(每台机器)</h2><h4 id="系统层面设置"><a href="#系统层面设置" class="headerlink" title="系统层面设置"></a>系统层面设置</h4><p>假设系统是刚用官方iso安装完成未作任何配置(网络和dns自行去配置)</p><ul><li><p>所有防火墙与SELinux 已关闭。如CentOS：<br>否则后续 K8S 挂载目录时可能报错 Permission denied，有些云厂商的ip是被NetworkManager纳管的(例如青云)，停了它会网络不通，可以不停。</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs awk">systemctl disable --now firewalld NetworkManager<br>setenforce <span class="hljs-number">0</span><br>sed -ri <span class="hljs-string">&#x27;/^[^#]*SELINUX=/s#=.+$#=disabled#&#x27;</span> <span class="hljs-regexp">/etc/</span>selinux/config<br>ln -sf <span class="hljs-regexp">/usr/</span>share<span class="hljs-regexp">/zoneinfo/</span>Asia<span class="hljs-regexp">/Shanghai /</span>etc/localtime<br></code></pre></td></tr></table></figure></li><li><p>关闭 dnsmasq (可选)<br>linux 系统开启了 dnsmasq 后(如 GUI 环境)，将系统 DNS Server 设置为 127.0.0.1，这会导致 docker 容器无法解析域名，需要关闭它</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">systemctl <span class="hljs-keyword">disable</span> <span class="hljs-comment">--now dnsmasq</span><br></code></pre></td></tr></table></figure></li><li><p>Kubernetes 建议关闭系统Swap,在<code>所有机器</code>使用以下指令关闭swap并注释掉<code>/etc/fstab</code>中swap的行，不想关闭可以不执行，后面会应对的配置选项：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">swapoff -a &amp;&amp; sysctl -w vm.swappiness=<span class="hljs-number">0</span><br>sed -ri <span class="hljs-string">&#x27;/^[^#]*swap/s@^@#@&#x27;</span> <span class="hljs-regexp">/etc/</span>fstab<br></code></pre></td></tr></table></figure></li><li><p>安装一些基础依赖和工具</p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs livescript">yum install epel-release -y<br>yum install -y <span class="hljs-string">\</span><br>    curl <span class="hljs-string">\</span><br>    wget <span class="hljs-string">\</span><br>    git <span class="hljs-string">\</span><br>    conntrack-tools <span class="hljs-string">\</span><br>    psmisc <span class="hljs-string">\</span><br>    nfs-utils <span class="hljs-string">\</span><br>    jq <span class="hljs-string">\</span><br>    socat <span class="hljs-string">\</span><br>    bash-completion <span class="hljs-string">\</span><br>    ipset <span class="hljs-string">\</span><br>    ipvsadm <span class="hljs-string">\</span><br>    conntrack <span class="hljs-string">\</span><br>    libseccomp <span class="hljs-string">\</span><br>    net-tools <span class="hljs-string">\</span><br>    crontabs <span class="hljs-string">\</span><br>    sysstat <span class="hljs-string">\</span><br>    unzip <span class="hljs-string">\</span><br>    bind-utils <span class="hljs-string">\</span><br>    tcpdump <span class="hljs-string">\</span><br>    telnet <span class="hljs-string">\</span><br>    lsof <span class="hljs-string">\</span><br>    htop<br></code></pre></td></tr></table></figure></li><li><p>如果集群kube-proxy想使用ipvs模式的话需要开机加载下列模块儿，按照规范使用<code>systemd-modules-load</code>来加载而不是在<code>/etc/rc.local</code>里写modprobe</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs awk">:&gt; <span class="hljs-regexp">/etc/m</span>odules-load.d/ipvs.conf<br>module=(<br>ip_vs<br>ip_vs_rr<br>ip_vs_wrr<br>ip_vs_sh<br>nf_conntrack<br>br_netfilter<br>  )<br><span class="hljs-keyword">for</span> kernel_module <span class="hljs-keyword">in</span> <span class="hljs-variable">$&#123;module[@]&#125;</span>;<span class="hljs-keyword">do</span><br>    <span class="hljs-regexp">/sbin/m</span>odinfo -F filename <span class="hljs-variable">$kernel_module</span> |&amp; grep -qv ERROR &amp;&amp; echo <span class="hljs-variable">$kernel_module</span> &gt;&gt; <span class="hljs-regexp">/etc/m</span>odules-load.d/ipvs.conf || :<br>done<br>systemctl restart systemd-modules-load.service<br></code></pre></td></tr></table></figure></li></ul><p>上面如果systemctl enable命令报错可以systemctl status -l systemd-modules-load.service看看哪个内核模块加载不了,在&#x2F;etc&#x2F;modules-load.d&#x2F;ipvs.conf里注释掉它再enable试试</p><ul><li><p><code>所有机器</code>需要设定<code>/etc/sysctl.d/k8s.conf</code>的系统参数，目前对ipv6支持不怎么好，所以里面也关闭ipv6了。</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">cat</span> &lt;&lt;EOF &gt; /etc/sysctl.d/k8s.conf<br><span class="hljs-attribute">net</span>.ipv6.conf.<span class="hljs-literal">all</span>.disable_ipv6 = <span class="hljs-number">1</span><br><span class="hljs-attribute">net</span>.ipv6.conf.default.disable_ipv6 = <span class="hljs-number">1</span><br><span class="hljs-attribute">net</span>.ipv6.conf.lo.disable_ipv6 = <span class="hljs-number">1</span><br><span class="hljs-attribute">net</span>.ipv4.neigh.default.gc_stale_time = <span class="hljs-number">120</span><br><span class="hljs-attribute">net</span>.ipv4.conf.<span class="hljs-literal">all</span>.rp_filter = <span class="hljs-number">0</span><br><span class="hljs-attribute">net</span>.ipv4.conf.default.rp_filter = <span class="hljs-number">0</span><br><span class="hljs-attribute">net</span>.ipv4.conf.default.arp_announce = <span class="hljs-number">2</span><br><span class="hljs-attribute">net</span>.ipv4.conf.lo.arp_announce = <span class="hljs-number">2</span><br><span class="hljs-attribute">net</span>.ipv4.conf.<span class="hljs-literal">all</span>.arp_announce = <span class="hljs-number">2</span><br><span class="hljs-attribute">net</span>.ipv4.ip_forward = <span class="hljs-number">1</span><br><span class="hljs-attribute">net</span>.ipv4.tcp_max_tw_buckets = <span class="hljs-number">5000</span><br><span class="hljs-attribute">net</span>.ipv4.tcp_syncookies = <span class="hljs-number">1</span><br><span class="hljs-attribute">net</span>.ipv4.tcp_max_syn_backlog = <span class="hljs-number">1024</span><br><span class="hljs-attribute">net</span>.ipv4.tcp_synack_retries = <span class="hljs-number">2</span><br><span class="hljs-comment"># 要求iptables不对bridge的数据进行处理</span><br><span class="hljs-attribute">net</span>.bridge.bridge-nf-call-ip6tables = <span class="hljs-number">1</span><br><span class="hljs-attribute">net</span>.bridge.bridge-nf-call-iptables = <span class="hljs-number">1</span><br><span class="hljs-attribute">net</span>.bridge.bridge-nf-call-arptables = <span class="hljs-number">1</span><br><span class="hljs-attribute">net</span>.netfilter.nf_conntrack_max = <span class="hljs-number">2310720</span><br><span class="hljs-attribute">fs</span>.inotify.max_user_watches=<span class="hljs-number">89100</span><br><span class="hljs-attribute">fs</span>.may_detach_mounts = <span class="hljs-number">1</span><br><span class="hljs-attribute">fs</span>.file-max = <span class="hljs-number">52706963</span><br><span class="hljs-attribute">fs</span>.nr_open = <span class="hljs-number">52706963</span><br><span class="hljs-attribute">vm</span>.overcommit_memory=<span class="hljs-number">1</span><br><span class="hljs-attribute">vm</span>.panic_on_oom=<span class="hljs-number">0</span><br><span class="hljs-attribute">EOF</span><br><br><span class="hljs-attribute">sysctl</span> --system<br></code></pre></td></tr></table></figure></li><li><p>如果选择关闭swap也要在内核里关闭，不关闭可以不执行</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arcade">echo <span class="hljs-string">&#x27;vm.swappiness = 0&#x27;</span> &gt;&gt; <span class="hljs-regexp">/etc/</span>sysctl.d/k8s.conf<br></code></pre></td></tr></table></figure></li><li><p>如果kube-proxy使用ipvs的话为了防止timeout需要设置下tcp参数</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">cat <span class="hljs-symbol">&lt;&lt;EOF &gt;&gt;</span> /etc/sysctl.d/k8s.conf<br># https://github.com/moby/moby/issues/<span class="hljs-number">31208</span> <br># ipvsadm -l <span class="hljs-comment">--timout</span><br># 修复ipvs模式下长连接timeout问题 小于<span class="hljs-number">900</span>即可<br>net.ipv4.tcp_keepalive_time = <span class="hljs-number">600</span><br>net.ipv4.tcp_keepalive_intvl = <span class="hljs-number">30</span><br>net.ipv4.tcp_keepalive_probes = <span class="hljs-number">10</span><br>EOF<br>sysctl <span class="hljs-comment">--system</span><br></code></pre></td></tr></table></figure></li><li><p>修改systemctl启动的最小文件打开数量。关闭ssh方向dns解析</p><figure class="highlight leaf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs leaf">sed -ri &#x27;s/^<span class="hljs-function"><span class="hljs-keyword">#</span><span class="hljs-params">(<span class="hljs-variable">DefaultLimitCORE</span>)</span></span>=/\1=100000/&#x27; /etc/systemd/system.conf<br>sed -ri &#x27;s/^<span class="hljs-function"><span class="hljs-keyword">#</span><span class="hljs-params">(<span class="hljs-variable">DefaultLimitNOFILE</span>)</span></span>=/\1=100000/&#x27; /etc/systemd/system.conf<br><br>sed -ri &#x27;s/^<span class="hljs-function"><span class="hljs-keyword">#</span><span class="hljs-params">(<span class="hljs-variable">UseDNS</span> )</span></span>yes/\1no/&#x27; /etc/ssh/sshd_config<br></code></pre></td></tr></table></figure></li><li><p>文件最大打开数，按照规范，在子配置文件写</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs stata"><span class="hljs-keyword">cat</span>&gt;/etc/security/limits.<span class="hljs-keyword">d</span>/kubernetes.<span class="hljs-keyword">conf</span>&lt;&lt;EOF<br><span class="hljs-comment">*       soft    nproc   131072</span><br><span class="hljs-comment">*       hard    nproc   131072</span><br><span class="hljs-comment">*       soft    nofile  131072</span><br><span class="hljs-comment">*       hard    nofile  131072</span><br>root    soft    nproc   131072<br>root    hard    nproc   131072<br>root    soft    nofile  131072<br>root    hard    nofile  131072<br>EOF<br></code></pre></td></tr></table></figure></li><li><p>集群的HA依赖于时间一致性，安装并配置chrony</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">yum</span> install -y chrony<br><span class="hljs-attribute">cat</span>&gt;/etc/chrony.conf&lt;&lt;EOF<br><span class="hljs-attribute">server</span> cn.pool.ntp.org iburst minpoll <span class="hljs-number">4</span> maxpoll <span class="hljs-number">10</span><br><span class="hljs-attribute">server</span> s1b.time.edu.cn iburst minpoll <span class="hljs-number">4</span> maxpoll <span class="hljs-number">10</span><br><span class="hljs-comment"># Ignor source level</span><br><span class="hljs-attribute">stratumweight</span> <span class="hljs-number">0</span><br><br><span class="hljs-comment"># Record the rate at which the system clock gains/losses time.</span><br><span class="hljs-attribute">driftfile</span> /var/lib/chrony/chrony.drift<br><br><span class="hljs-comment"># This directive enables kernel synchronisation (every 11 minutes) of the</span><br><span class="hljs-comment"># real-time clock. Note that it can’t be used along with the &#x27;rtcfile&#x27; directive.</span><br><span class="hljs-attribute">rtcsync</span><br><br><span class="hljs-comment"># Allow the system clock to be stepped in the first three updates</span><br><span class="hljs-comment"># if its offset is larger than 1 second.</span><br><span class="hljs-attribute">makestep</span> <span class="hljs-number">1</span>.<span class="hljs-number">0</span> <span class="hljs-number">3</span><br><br><br><span class="hljs-comment"># Enable hardware timestamping on all interfaces that support it.</span><br><span class="hljs-comment">#hwtimestamp *</span><br><br><span class="hljs-comment"># Increase the minimum number of selectable sources required to adjust</span><br><span class="hljs-comment"># the system clock.</span><br><span class="hljs-comment">#minsources 2</span><br><br><span class="hljs-attribute">bindcmdaddress</span> <span class="hljs-number">127.0.0.1</span><br><br><span class="hljs-comment">#bindcmdaddress ::1</span><br><br><span class="hljs-comment"># Specify file containing keys for NTP authentication.</span><br><span class="hljs-attribute">keyfile</span> /etc/chrony/chrony.keys<br><br><span class="hljs-attribute">logdir</span> /var/log/chrony<br><span class="hljs-comment"># adjust time big than 1 sec will log to file</span><br><span class="hljs-attribute">logchange</span> <span class="hljs-number">1</span><br><span class="hljs-attribute">EOF</span><br><br><span class="hljs-attribute">systemctl</span> enable --now chronyd<br></code></pre></td></tr></table></figure></li><li><p>修改hostname<br>kubelet和kube-proxy上报node信息默认是取hostname的，除非通过<code>--hostname-override</code>指定，这里自行设置hostname</p><figure class="highlight dsconfig"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dsconfig"><span class="hljs-string">hostnamectl</span> <span class="hljs-built_in">set-hostname</span> <span class="hljs-string">xxx</span><br></code></pre></td></tr></table></figure></li><li><p>所有主机修改hosts文件</p><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs accesslog">cat &gt;&gt;/etc/hosts &lt;&lt; EOF<br><span class="hljs-number">10.15.1.17</span> k8s-m1<br><span class="hljs-number">10.15.1.18</span> k8s-m2<br><span class="hljs-number">10.15.1.19</span> k8s-m3<br><span class="hljs-number">10.15.1.20</span> k8s-n1<br><span class="hljs-number">10.15.1.21</span> k8s-n2<br>EOF<br></code></pre></td></tr></table></figure></li><li><p>docker官方的内核检查脚本建议<code>(RHEL7/CentOS7: User namespaces disabled; add &#39;user_namespace.enable=1&#39; to boot command line)</code>,使用下面命令开启</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">grubby <span class="hljs-attribute">--args</span>=<span class="hljs-string">&quot;user_namespace.enable=1&quot;</span> <span class="hljs-attribute">--update-kernel</span>=<span class="hljs-string">&quot;<span class="hljs-variable">$(grubby --default-kernel)</span>&quot;</span><br></code></pre></td></tr></table></figure></li><li><p>重启系统</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">reboot</span><br></code></pre></td></tr></table></figure></li></ul><h4 id="安装docker"><a href="#安装docker" class="headerlink" title="安装docker"></a>安装docker</h4><p>这里我们使用docker官方的安装脚本安装docker(该脚本支持centos和ubuntu)但是如果是生产还是建议使用产考官方网站的安装方式。</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-built_in">export</span> <span class="hljs-attribute">VERSION</span>=19.03<br>curl -fsSL <span class="hljs-string">&quot;https://get.docker.com/&quot;</span> | bash -s -- --mirror Aliyun<br></code></pre></td></tr></table></figure><ul><li><code>所有机器</code>配置加速源并配置docker的启动参数使用systemd,使用systemd是官方的建议,详见 <a href="https://kubernetes.io/docs/setup/cri/">https://kubernetes.io/docs/setup/cri/</a></li></ul><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs awk">mkdir -p <span class="hljs-regexp">/etc/</span>docker/<br>cat&gt;<span class="hljs-regexp">/etc/</span>docker/daemon.json&lt;&lt;EOF<br>&#123;<br>  <span class="hljs-string">&quot;exec-opts&quot;</span>: [<span class="hljs-string">&quot;native.cgroupdriver=systemd&quot;</span>],<br>  <span class="hljs-string">&quot;registry-mirrors&quot;</span>: [<br>      <span class="hljs-string">&quot;https://fz5yth0r.mirror.aliyuncs.com&quot;</span>,<br>      <span class="hljs-string">&quot;http://hub-mirror.c.163.com/&quot;</span>,<br>      <span class="hljs-string">&quot;https://docker.mirrors.ustc.edu.cn/&quot;</span>,<br>      <span class="hljs-string">&quot;https://registry.docker-cn.com&quot;</span><br>  ],<br>  <span class="hljs-string">&quot;storage-driver&quot;</span>: <span class="hljs-string">&quot;overlay2&quot;</span>,<br>  <span class="hljs-string">&quot;storage-opts&quot;</span>: [<br>    <span class="hljs-string">&quot;overlay2.override_kernel_check=true&quot;</span><br>  ],<br>  <span class="hljs-string">&quot;log-driver&quot;</span>: <span class="hljs-string">&quot;json-file&quot;</span>,<br>  <span class="hljs-string">&quot;log-opts&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;max-size&quot;</span>: <span class="hljs-string">&quot;100m&quot;</span>,<br>    <span class="hljs-string">&quot;max-file&quot;</span>: <span class="hljs-string">&quot;3&quot;</span><br>  &#125;<br>&#125;<br>EOF<br></code></pre></td></tr></table></figure><blockquote><p><code>Live Restore Enabled</code>这个千万别开，某些极端情况下容器Dead状态之类的必须重启docker daemon才能解决，开了就只能重启机器解决了</p></blockquote><ul><li><p>设置docker开机启动,CentOS安装完成后docker需要手动设置docker命令补全：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">yum install -y epel-release bash-completion &amp;&amp; \<br>    cp <span class="hljs-regexp">/usr/</span>share<span class="hljs-regexp">/bash-completion/</span>completions<span class="hljs-regexp">/docker /</span>etc<span class="hljs-regexp">/bash_completion.d/</span><br></code></pre></td></tr></table></figure></li><li><p>docker自1.13版起会自动设置iptables的FORWARD默认策略为DROP，这可能会影响Kubernetes集群依赖的报文转发功能，防止FORWARD的DROP策略影响转发,给docker daemon添加下列参数修正，当然暴力点也可以<code>iptables -P FORWARD ACCEPT</code></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs awk">mkdir -p <span class="hljs-regexp">/etc/</span>systemd<span class="hljs-regexp">/system/</span>docker.service.d/<br>cat&gt;<span class="hljs-regexp">/etc/</span>systemd<span class="hljs-regexp">/system/</span>docker.service.d/<span class="hljs-number">10</span>-docker.conf&lt;&lt;EOF<br>[Service]<br>ExecStartPost=<span class="hljs-regexp">/sbin/i</span>ptables -I FORWARD -s <span class="hljs-number">0.0</span>.<span class="hljs-number">0.0</span>/<span class="hljs-number">0</span> -j ACCEPT<br>ExecStopPost=<span class="hljs-regexp">/bin/</span>bash -c <span class="hljs-string">&#x27;/sbin/iptables -D FORWARD -s 0.0.0.0/0 -j ACCEPT &amp;&gt; /dev/null || :&#x27;</span><br>EOF<br></code></pre></td></tr></table></figure></li><li><p>启动docker并看下信息是否正常</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">systemctl <span class="hljs-keyword">enable</span> <span class="hljs-comment">--now docker</span><br>docker <span class="hljs-keyword">info</span><br></code></pre></td></tr></table></figure></li><li><p>如果enable docker的时候报错开启debug，如何开见</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs routeros">$ systemctl cat kubelet<br><span class="hljs-comment"># /usr/lib/systemd/system/kubelet.service</span><br>[Unit]<br><span class="hljs-attribute">Description</span>=Kubernetes Kubelet<br><span class="hljs-attribute">Documentation</span>=https://github.com/kubernetes/kubernetes<br><span class="hljs-attribute">After</span>=docker.service<br><span class="hljs-attribute">Requires</span>=docker.service<br><br>[Service]<br><span class="hljs-attribute">ExecStart</span>=/usr/local/bin/kubelet \<br>  <span class="hljs-attribute">--bootstrap-kubeconfig</span>=/etc/kubernetes/bootstrap.kubeconfig \<br>  <span class="hljs-attribute">--kubeconfig</span>=/etc/kubernetes/kubelet.kubeconfig \<br>  <span class="hljs-attribute">--config</span>=/etc/kubernetes/kubelet-conf.yml \<br>  <span class="hljs-attribute">--hostname-override</span>=k8s-m1 \<br>  <span class="hljs-attribute">--pod-infra-container-image</span>=100.64.2.62:9999/pause-amd64:3.1 \<br>  <span class="hljs-attribute">--allow-privileged</span>=<span class="hljs-literal">true</span> \<br>  <span class="hljs-attribute">--network-plugin</span>=cni \<br>  <span class="hljs-attribute">--cni-conf-dir</span>=/etc/cni/net.d \<br>  <span class="hljs-attribute">--cni-bin-dir</span>=/opt/cni/bin \<br>  <span class="hljs-attribute">--cert-dir</span>=/etc/kubernetes/pki \<br>  <span class="hljs-attribute">--logtostderr</span>=<span class="hljs-literal">false</span> \<br>  <span class="hljs-attribute">--log-dir</span>=/var/log/kubernetes/kubelet \<br>  <span class="hljs-attribute">--v</span>=2<br><br><span class="hljs-attribute">Restart</span>=always<br><span class="hljs-attribute">RestartSec</span>=10s<br><br>[Install]<br><span class="hljs-attribute">WantedBy</span>=multi-user.target<br></code></pre></td></tr></table></figure><p>把<code>ExecStart</code>的部分复制在终端运行，去掉<code>--logtostderr</code>和<code>--log-dir</code>相关的不前台打印日志的选项,–v是日志等级，1-8</p></li><li><p>另外kubelet启动报下面错的话，请开启ipv6</p><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs fortran">docker_service.go:<span class="hljs-number">401</span>] Streaming server stopped unexpectedly: listen tcp [::<span class="hljs-number">1</span>]:<span class="hljs-number">0</span>: <span class="hljs-keyword">bind</span>: cannot <span class="hljs-keyword">assign</span> requested address<br></code></pre></td></tr></table></figure></li></ul><h2 id="kubeadm部署"><a href="#kubeadm部署" class="headerlink" title="kubeadm部署"></a>kubeadm部署</h2><h4 id="安装kubeadm相关"><a href="#安装kubeadm相关" class="headerlink" title="安装kubeadm相关"></a>安装kubeadm相关</h4><p>默认源在国外会无法安装，我们使用国内的镜像源，所有机器都要操作</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs routeros">cat &lt;&lt;EOF &gt;/etc/yum.repos.d/kubernetes.repo<br>[kubernetes]<br><span class="hljs-attribute">name</span>=Kubernetes<br><span class="hljs-attribute">baseurl</span>=https://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64<br><span class="hljs-attribute">enabled</span>=1<br><span class="hljs-attribute">gpgcheck</span>=0<br>EOF<br></code></pre></td></tr></table></figure><h5 id="master部分安装相关软件"><a href="#master部分安装相关软件" class="headerlink" title="master部分安装相关软件"></a>master部分安装相关软件</h5><p>k8s的node就是kubelet+cri(一般是docker)，kubectl是一个agent读取kubeconfig去访问kube-apiserver来操作集群，kubeadm是部署，所以master节点需要安装三个，node一般不需要kubectl但是yum安装的时候还是会给你安装最新版所以我这里node还是安装了kubectl</p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs livescript">yum install -y <span class="hljs-string">\</span><br>    kubeadm-<span class="hljs-number">1.18</span>.<span class="hljs-number">8</span> <span class="hljs-string">\</span><br>    kubectl-<span class="hljs-number">1.18</span>.<span class="hljs-number">8</span> <span class="hljs-string">\</span><br>    kubelet-<span class="hljs-number">1.18</span>.<span class="hljs-number">8</span> <span class="hljs-string">\</span><br>    --disableexcludes=kubernetes &amp;&amp; <span class="hljs-string">\</span><br>    systemctl enable kubelet<br></code></pre></td></tr></table></figure><h5 id="node部分安装相关软件"><a href="#node部分安装相关软件" class="headerlink" title="node部分安装相关软件"></a>node部分安装相关软件</h5><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs livescript">yum install -y <span class="hljs-string">\</span><br>    kubeadm-<span class="hljs-number">1.18</span>.<span class="hljs-number">8</span> <span class="hljs-string">\</span><br>    kubectl-<span class="hljs-number">1.18</span>.<span class="hljs-number">8</span> <span class="hljs-string">\</span><br>    kubelet-<span class="hljs-number">1.18</span>.<span class="hljs-number">8</span> <span class="hljs-string">\</span><br>    --disableexcludes=kubernetes &amp;&amp; <span class="hljs-string">\</span><br>    systemctl enable kubelet<br></code></pre></td></tr></table></figure><h4 id="配置kubelet的参数方法-有需要的话"><a href="#配置kubelet的参数方法-有需要的话" class="headerlink" title="配置kubelet的参数方法(有需要的话)"></a>配置kubelet的参数方法(有需要的话)</h4><p>查看kubelet的systemd文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">systemctl <span class="hljs-built_in">cat</span> kubelet<br></code></pre></td></tr></table></figure><p>我们可以看到<code>/etc/sysconfig/kubelet</code>是<code>EnvironmentFile</code>，里面注释也写明了我们应该在该文件里写<code>KUBELET_EXTRA_ARGS</code>来给kubelet配置运行参数,下面是个例子，具体参数啥的可以<code>kubelet --help</code>看</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cat</span> &gt;/etc/sysconfig/kubelet&lt;&lt;<span class="hljs-string">EOF</span><br><span class="hljs-string">KUBELET_EXTRA_ARGS=&quot;--xxx=yyy --aaa=bbb&quot;</span><br><span class="hljs-string">EOF</span><br></code></pre></td></tr></table></figure><p>文件<code>/var/lib/kubelet/kubeadm-flags.env</code>也一样</p><h3 id="配置HA"><a href="#配置HA" class="headerlink" title="配置HA"></a>配置HA</h3><ul><li>三台master都安装haproxy+keepalived</li></ul><h4 id="haproxy配置文件"><a href="#haproxy配置文件" class="headerlink" title="haproxy配置文件"></a>haproxy配置文件</h4><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs smali">global<br>  maxconn  2000<br>  ulimit-n  16384<br>  log  127.0.0.1 local0 err<br>  stats timeout 30s<br><br>defaults<br>  log global<br>  mode  http<br>  option  httplog<br>  timeout connect 5000<br>  timeout client  50000<br>  timeout server  50000<br>  timeout http-request 15s<br>  timeout http-keep-alive 15s<br><br>frontend<span class="hljs-built_in"> monitor-in</span><br><span class="hljs-built_in"></span>  bind *:33305<br>  mode http<br>  option httplog<br> <span class="hljs-built_in"> monitor-uri </span>/monitor<br><br>listen stats<br>  bind    *:8006<br>  mode    http<br>  stats   enable<br>  stats   hide-version<br>  stats   uri       /stats<br>  stats   refresh   30s<br>  stats   realm     Haproxy\ Statistics<br>  stats   auth      admin:admin<br><br>frontend k8s-api<br>  bind 0.0.0.0:8443<br>  bind 127.0.0.1:8443<br>  mode tcp<br>  option tcplog<br>  tcp-request inspect-delay 5s<br>  default_backend k8s-api<br><br>backend k8s-api<br>  mode tcp<br>  option tcplog<br>  option httpchk GET /healthz<br>  http-check expect string ok<br>  balance roundrobin<br>  default-server inter 10s downinter 5s rise 2 fall 2 slowstart 60s maxconn 250 maxqueue 256 weight 100<br>    server  api1  10.15.1.17:6443 <span class="hljs-built_in"> check </span>check-ssl verify none<br>    server  api2  10.15.1.18:6443 <span class="hljs-built_in"> check </span>check-ssl verify none<br>    server  api3  10.15.1.19:6443 <span class="hljs-built_in"> check </span>check-ssl verify none<br></code></pre></td></tr></table></figure><h4 id="keepalived配置文件"><a href="#keepalived配置文件" class="headerlink" title="keepalived配置文件"></a>keepalived配置文件</h4><figure class="highlight pf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs pf">global_defs &#123;<br>    enable_script_security<br>&#125;<br><br>vrrp_script haproxy-check &#123;<br>    <span class="hljs-keyword">user</span> root<br>    script <span class="hljs-string">&quot;/bin/bash /etc/keepalived/check_haproxy.sh&quot;</span><br>    interval <span class="hljs-number">3</span><br>    weight -<span class="hljs-number">2</span><br>    fall <span class="hljs-number">10</span><br>    rise <span class="hljs-number">2</span><br>&#125;<br><br>vrrp_instance haproxy-vip &#123;<br>    <span class="hljs-keyword">state</span> BACKUP<br>    priority <span class="hljs-number">101</span><br>    interface eth0<br>    virtual_router_id <span class="hljs-number">47</span><br>    advert_int <span class="hljs-number">3</span><br>    unicast_src_ip <span class="hljs-number">10.15</span>.<span class="hljs-number">1.17</span>           <span class="hljs-comment"># 本机IP</span><br>    unicast_peer &#123;<br>        <span class="hljs-number">10.15</span>.<span class="hljs-number">1.18</span>      <span class="hljs-comment"># 对端IP</span><br>        <span class="hljs-number">10.15</span>.<span class="hljs-number">1.19</span>      <span class="hljs-comment"># 对端IP</span><br>    &#125;<br><br>    virtual_ipaddress &#123;<br>        <span class="hljs-number">10.15</span>.<span class="hljs-number">1.250</span>/<span class="hljs-number">24</span>   <span class="hljs-comment"># VIP地址</span><br>    &#125;<br><br>    track_script &#123;<br>        haproxy-check<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>keeaplived这里需要注意，默认keepalived是采用的组播方式，加上unicast_peer参数后是单播方式，三台keepalived配置文件不一样unicast_src_ipc参数写当前节点IP，unicast_peer参数写另外两个节点IP地址。其他的权重和BACKUP都保持一致</p></blockquote><h4 id="keepalived-健康检查脚本"><a href="#keepalived-健康检查脚本" class="headerlink" title="keepalived 健康检查脚本"></a>keepalived 健康检查脚本</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cat</span> &lt;&lt;<span class="hljs-string">&#x27;EOF&#x27;</span>&gt; /etc/keepalived/check_haproxy.sh<br><span class="hljs-comment">#!/bin/bash</span><br>VIRTUAL_IP=10.15.1.250<br><br><span class="hljs-function"><span class="hljs-title">errorExit</span></span>() &#123;<br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;*** $*&quot;</span> 1&gt;&amp;2<br>    <span class="hljs-built_in">exit</span> 1<br>&#125;<br><br><span class="hljs-keyword">if</span> ip addr | grep -q <span class="hljs-variable">$VIRTUAL_IP</span> ; <span class="hljs-keyword">then</span><br>    curl -s --max-time 2 --insecure https://<span class="hljs-variable">$&#123;VIRTUAL_IP&#125;</span>:8443/healthz  -o /dev/null || errorExit <span class="hljs-string">&quot;Error GET https://<span class="hljs-variable">$&#123;VIRTUAL_IP&#125;</span>:8443/healthz&quot;</span><br><span class="hljs-keyword">fi</span><br>EOF<br></code></pre></td></tr></table></figure><h3 id="外部Etcd服务搭建"><a href="#外部Etcd服务搭建" class="headerlink" title="外部Etcd服务搭建"></a>外部Etcd服务搭建</h3><p>openssl 证书配置文件</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs makefile">mkdir -p /etc/kubernetes/pki/etcd<br>cd /etc/kubernetes/pki<br><br>cat &lt;&lt;EOF&gt; /etc/kubernetes/pki/openssl.cnf<br>[ req ]<br>default_bits = 2048<br>default_md = sha256<br>distinguished_name = req_distinguished_name<br><br>[req_distinguished_name]<br><br>[ v3_ca ]<br>basicConstraints = critical, CA:TRUE<br>keyUsage = critical, digitalSignature, keyEncipherment, keyCertSign<br><br>[ v3_req_server ]<br>basicConstraints = CA:FALSE<br>keyUsage = critical, digitalSignature, keyEncipherment<br>extendedKeyUsage = serverAuth<br><br>[ v3_req_client ]<br>basicConstraints = CA:FALSE<br>keyUsage = critical, digitalSignature, keyEncipherment<br>extendedKeyUsage = clientAuth<br><br>[ v3_req_apiserver ]<br>basicConstraints = CA:FALSE<br>keyUsage = critical, digitalSignature, keyEncipherment<br>extendedKeyUsage = serverAuth<br>subjectAltName = @alt_names_cluster<br><br>[ v3_req_etcd ]<br>basicConstraints = CA:FALSE<br>keyUsage = critical, digitalSignature, keyEncipherment<br>extendedKeyUsage = serverAuth, clientAuth<br>subjectAltName = @alt_names_etcd<br><br>[ alt_names_cluster ]<br>DNS.1 = kubernetes<br>DNS.2 = kubernetes.default<br>DNS.3 = kubernetes.default.svc<br>DNS.4 = kubernetes.default.svc.cluster.local<br>DNS.5 = k8s-master1<br>DNS.6 = k8s-master2<br>DNS.7 = k8s-master3<br>DNS.8 = localhost<br>IP.1 = 10.96.0.1<br>IP.2 = 127.0.0.1<br>IP.3 = 10.0.7.100<br>IP.4 = 10.0.7.101<br>IP.5 = 10.0.7.102<br>IP.6 = 10.0.7.103<br><br>[ alt_names_etcd ]<br>DNS.1 = localhost<br>DNS.2 = k8s-m1<br>DNS.3 = k8s-m2<br>DNS.4 = k8s-m3<br>IP.1 = 10.15.1.17<br>IP.2 = 10.15.1.18<br>IP.3 = 10.15.1.19<br>IP.4 = 127.0.0.1<br>EOF<br></code></pre></td></tr></table></figure><h4 id="生成-CA-证书"><a href="#生成-CA-证书" class="headerlink" title="生成 CA 证书"></a>生成 CA 证书</h4><p>etcd-ca</p><figure class="highlight sas"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sas">openssl genrsa -<span class="hljs-keyword">out</span> etcd/ca.<span class="hljs-keyword">key</span> 2048<br>openssl req -x509 -new -nodes -<span class="hljs-keyword">key</span> etcd/ca.<span class="hljs-keyword">key</span> -config openssl.cnf -subj <span class="hljs-string">&quot;/CN=etcd-ca&quot;</span> -extensions v3_ca -<span class="hljs-keyword">out</span> etcd/ca.crt -days 10000<br></code></pre></td></tr></table></figure><h4 id="生成证书"><a href="#生成证书" class="headerlink" title="生成证书"></a>生成证书</h4><p>apiserver-etcd-client</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs stylus">openssl genrsa -out apiserver-etcd-client<span class="hljs-selector-class">.key</span> <span class="hljs-number">2048</span><br>openssl req -new -key apiserver-etcd-client<span class="hljs-selector-class">.key</span> -subj <span class="hljs-string">&quot;/CN=apiserver-etcd-client/O=system:masters&quot;</span> -out apiserver-etcd-client<span class="hljs-selector-class">.csr</span><br>openssl x509 -<span class="hljs-keyword">in</span> apiserver-etcd-client<span class="hljs-selector-class">.csr</span> -req -CA etcd/ca<span class="hljs-selector-class">.crt</span> -CAkey etcd/ca<span class="hljs-selector-class">.key</span> -CAcreateserial -extensions v3_req_etcd -extfile openssl<span class="hljs-selector-class">.cnf</span> -out apiserver-etcd-client<span class="hljs-selector-class">.crt</span> -days <span class="hljs-number">10000</span><br></code></pre></td></tr></table></figure><p>kube-etcd</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">openssl genrsa -<span class="hljs-keyword">out</span> etcd/<span class="hljs-keyword">server</span>.key <span class="hljs-number">2048</span><br>openssl req -<span class="hljs-built_in">new</span> -key etcd/<span class="hljs-keyword">server</span>.key -subj &quot;/CN=etcd-server&quot; -<span class="hljs-keyword">out</span> etcd/<span class="hljs-keyword">server</span>.csr<br>openssl x509 -<span class="hljs-keyword">in</span> etcd/<span class="hljs-keyword">server</span>.csr -req -CA etcd/ca.crt -CAkey etcd/ca.key -CAcreateserial -extensions v3_req_etcd -extfile openssl.cnf -<span class="hljs-keyword">out</span> etcd/<span class="hljs-keyword">server</span>.crt -days <span class="hljs-number">10000</span><br></code></pre></td></tr></table></figure><p>kube-etcd-peer</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs stylus">openssl genrsa -out etcd/peer<span class="hljs-selector-class">.key</span> <span class="hljs-number">2048</span><br>openssl req -new -key etcd/peer<span class="hljs-selector-class">.key</span> -subj <span class="hljs-string">&quot;/CN=etcd-peer&quot;</span> -out etcd/peer<span class="hljs-selector-class">.csr</span><br>openssl x509 -<span class="hljs-keyword">in</span> etcd/peer<span class="hljs-selector-class">.csr</span> -req -CA etcd/ca<span class="hljs-selector-class">.crt</span> -CAkey etcd/ca<span class="hljs-selector-class">.key</span> -CAcreateserial -extensions v3_req_etcd -extfile openssl<span class="hljs-selector-class">.cnf</span> -out etcd/peer<span class="hljs-selector-class">.crt</span> -days <span class="hljs-number">10000</span><br></code></pre></td></tr></table></figure><p>kube-etcd-healthcheck-client</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs stylus">openssl genrsa -out etcd/healthcheck-client<span class="hljs-selector-class">.key</span> <span class="hljs-number">2048</span><br>openssl req -new -key etcd/healthcheck-client<span class="hljs-selector-class">.key</span> -subj <span class="hljs-string">&quot;/CN=etcd-client&quot;</span> -out etcd/healthcheck-client<span class="hljs-selector-class">.csr</span><br>openssl x509 -<span class="hljs-keyword">in</span> etcd/healthcheck-client<span class="hljs-selector-class">.csr</span> -req -CA etcd/ca<span class="hljs-selector-class">.crt</span> -CAkey etcd/ca<span class="hljs-selector-class">.key</span> -CAcreateserial -extensions v3_req_etcd -extfile openssl<span class="hljs-selector-class">.cnf</span> -out etcd/healthcheck-client<span class="hljs-selector-class">.crt</span> -days <span class="hljs-number">10000</span><br></code></pre></td></tr></table></figure><p>清理 csr srl</p><figure class="highlight sqf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sqf"><span class="hljs-built_in">find</span> . -<span class="hljs-built_in">name</span> <span class="hljs-string">&quot;*.csr&quot;</span> -o -<span class="hljs-built_in">name</span> <span class="hljs-string">&quot;*.srl&quot;</span>|xargs  rm -f<br></code></pre></td></tr></table></figure><h4 id="分发证书"><a href="#分发证书" class="headerlink" title="分发证书"></a>分发证书</h4><p>将 Etcd 证书分发到其他 master 节点</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">scp -r <span class="hljs-regexp">/etc/</span>kubernetes root@k8s-m2:/etc<br>scp -r <span class="hljs-regexp">/etc/</span>kubernetes root@k8s-m3:/etc<br></code></pre></td></tr></table></figure><h4 id="配置-etcd"><a href="#配置-etcd" class="headerlink" title="配置 etcd"></a>配置 etcd</h4><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-comment"># https://github.com/etcd-io/etcd/blob/master/CHANGELOG-3.4.md#breaking-changes</span><br><br><span class="hljs-attribute">mkdir</span> -p /var/lib/etcd<br><br><span class="hljs-attribute">chmod</span> <span class="hljs-number">0700</span> /var/lib/etcd # etcd <span class="hljs-number">3</span>.<span class="hljs-number">4</span>.<span class="hljs-number">10</span>开始目录权限必须是<span class="hljs-number">0700</span>，见上面文档<br><br><span class="hljs-attribute">wget</span> https://mirrors.huaweicloud.com/etcd/v3.<span class="hljs-number">4</span>.<span class="hljs-number">13</span>/etcd-v3.<span class="hljs-number">4</span>.<span class="hljs-number">13</span>-linux-amd64.tar.gz<br><br><span class="hljs-attribute">tar</span> xf etcd-v3.<span class="hljs-number">4</span>.<span class="hljs-number">13</span>-linux-amd64.tar.gz --strip-components=<span class="hljs-number">1</span> -C /usr/bin/ etcd-v3.<span class="hljs-number">4</span>.<span class="hljs-number">13</span>-linux-amd64/&#123;etcd,etcdctl&#125;<br></code></pre></td></tr></table></figure><p>设置 unit file 并启动 etcd,其他节点修改对应 ETCD_NAME 为 etcd1 和 etcd2，ip 改为节点 IP。</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs awk">ETCD_NAME=etcd0<br>ETCD_IP=<span class="hljs-string">&quot;10.15.1.17&quot;</span><br>ETCD_IPS=(<span class="hljs-number">10.15</span>.<span class="hljs-number">1.17</span> <span class="hljs-number">10.15</span>.<span class="hljs-number">1.18</span> <span class="hljs-number">10.15</span>.<span class="hljs-number">1.19</span>)<br><br>cat&lt;&lt;EOF&gt; <span class="hljs-regexp">/usr/</span>lib<span class="hljs-regexp">/systemd/</span>system/etcd.service <br>[Unit]<br>Description=etcd<br>Documentation=https:<span class="hljs-regexp">//</span>coreos.com<span class="hljs-regexp">/etcd/</span>docs<span class="hljs-regexp">/latest/</span><br>After=network.target<br><br>[Service]<br>Type=notify<br>WorkingDirectory=<span class="hljs-regexp">/var/</span>lib/etcd<br>ExecStart=<span class="hljs-regexp">/usr/</span>bin/etcd \\<br>    --name=<span class="hljs-variable">$&#123;ETCD_NAME&#125;</span> \\<br>    --data-dir=<span class="hljs-regexp">/var/</span>lib/etcd \\<br>    --listen-client-urls=https:<span class="hljs-regexp">//</span><span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>:<span class="hljs-number">2379</span>,https:<span class="hljs-regexp">//</span><span class="hljs-variable">$&#123;ETCD_IP&#125;</span>:<span class="hljs-number">2379</span> \\<br>    --advertise-client-urls=https:<span class="hljs-regexp">//</span><span class="hljs-variable">$&#123;ETCD_IP&#125;</span>:<span class="hljs-number">2379</span> \\<br>    --listen-peer-urls=https:<span class="hljs-regexp">//</span><span class="hljs-variable">$&#123;ETCD_IP&#125;</span>:<span class="hljs-number">2380</span> \\<br>    --initial-advertise-peer-urls=https:<span class="hljs-regexp">//</span><span class="hljs-variable">$&#123;ETCD_IP&#125;</span>:<span class="hljs-number">2380</span> \\<br>    --cert-file=<span class="hljs-regexp">/etc/</span>kubernetes<span class="hljs-regexp">/pki/</span>etcd/server.crt \\<br>    --key-file=<span class="hljs-regexp">/etc/</span>kubernetes<span class="hljs-regexp">/pki/</span>etcd/server.key \\<br>    --client-cert-auth \\<br>    --trusted-ca-file=<span class="hljs-regexp">/etc/</span>kubernetes<span class="hljs-regexp">/pki/</span>etcd/ca.crt \\<br>    --peer-cert-file=<span class="hljs-regexp">/etc/</span>kubernetes<span class="hljs-regexp">/pki/</span>etcd/peer.crt \\<br>    --peer-key-file=<span class="hljs-regexp">/etc/</span>kubernetes<span class="hljs-regexp">/pki/</span>etcd/peer.key \\<br>    --peer-client-cert-auth \\<br>    --peer-trusted-ca-file=<span class="hljs-regexp">/etc/</span>kubernetes<span class="hljs-regexp">/pki/</span>etcd/ca.crt \\<br>    --initial-cluster=etcd0=https:<span class="hljs-regexp">//</span><span class="hljs-variable">$&#123;ETCD_IPS[0]&#125;</span>:<span class="hljs-number">2380</span>,etcd1=https:<span class="hljs-regexp">//</span><span class="hljs-variable">$&#123;ETCD_IPS[1]&#125;</span>:<span class="hljs-number">2380</span>,etcd2=https:<span class="hljs-regexp">//</span><span class="hljs-variable">$&#123;ETCD_IPS[2]&#125;</span>:<span class="hljs-number">2380</span> \\<br>    --initial-cluster-token=my-etcd-token \\<br>    --initial-cluster-state=new \\<br>    --heartbeat-interval <span class="hljs-number">1000</span> \\<br>    --election-timeout <span class="hljs-number">5000</span><br><br>Restart=always<br>RestartSec=<span class="hljs-number">10</span>s<br>LimitNOFILE=<span class="hljs-number">65535</span><br><br>[Install]<br>WantedBy=multi-user.target<br>EOF<br>systemctl daemon-reload<br>systemctl restart etcd<br>systemctl enable etcd<br></code></pre></td></tr></table></figure><h4 id="配置Etcd环境变量"><a href="#配置Etcd环境变量" class="headerlink" title="配置Etcd环境变量"></a>配置Etcd环境变量</h4><p>在<code>/etc/profile.d</code>目录下创建<code>etcd.sh</code>文件将如下内容写入。</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs routeros">cat &gt;/etc/profile.d/etcd.sh&lt;&lt;<span class="hljs-string">&#x27;EOF&#x27;</span><br><span class="hljs-attribute">ETCD_CERET_DIR</span>=/etc/kubernetes/pki/etcd/<br><span class="hljs-attribute">ETCD_CA_FILE</span>=ca.crt<br><span class="hljs-attribute">ETCD_KEY_FILE</span>=healthcheck-client.key<br><span class="hljs-attribute">ETCD_CERT_FILE</span>=healthcheck-client.crt<br><span class="hljs-attribute">ETCD_EP</span>=https://10.15.1.17:2379,https://10.15.1.18:2379,https://10.15.1.19:2379<br><br>alias <span class="hljs-attribute">etcd_v2</span>=<span class="hljs-string">&quot;etcdctl --cert-file <span class="hljs-variable">$&#123;ETCD_CERET_DIR&#125;</span>/<span class="hljs-variable">$&#123;ETCD_CERT_FILE&#125;</span> \</span><br><span class="hljs-string">              --key-file <span class="hljs-variable">$&#123;ETCD_CERET_DIR&#125;</span>/<span class="hljs-variable">$&#123;ETCD_KEY_FILE&#125;</span>  \</span><br><span class="hljs-string">              --ca-file <span class="hljs-variable">$&#123;ETCD_CERET_DIR&#125;</span>/<span class="hljs-variable">$&#123;ETCD_CA_FILE&#125;</span>  \</span><br><span class="hljs-string">              --endpoints <span class="hljs-variable">$ETCD_EP</span>&quot;</span><br><br>alias <span class="hljs-attribute">etcd_v3</span>=<span class="hljs-string">&quot;ETCDCTL_API=3 \</span><br><span class="hljs-string">    etcdctl   \</span><br><span class="hljs-string">   --cert <span class="hljs-variable">$&#123;ETCD_CERET_DIR&#125;</span>/<span class="hljs-variable">$&#123;ETCD_CERT_FILE&#125;</span> \</span><br><span class="hljs-string">   --key <span class="hljs-variable">$&#123;ETCD_CERET_DIR&#125;</span>/<span class="hljs-variable">$&#123;ETCD_KEY_FILE&#125;</span> \</span><br><span class="hljs-string">   --cacert <span class="hljs-variable">$&#123;ETCD_CERET_DIR&#125;</span>/<span class="hljs-variable">$&#123;ETCD_CA_FILE&#125;</span> \</span><br><span class="hljs-string">    --endpoints <span class="hljs-variable">$ETCD_EP</span>&quot;</span><br><br>function etcd-ha()&#123;<br>    etcd_v3 endpoint status <span class="hljs-attribute">--write-out</span>=table<br>&#125;<br><br>EOF<br></code></pre></td></tr></table></figure><h4 id="使用命令查看Etcd-API版本"><a href="#使用命令查看Etcd-API版本" class="headerlink" title="使用命令查看Etcd API版本"></a>使用命令查看Etcd API版本</h4><figure class="highlight d"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs d">[root<span class="hljs-keyword">@k8s</span>-m1 profile.d]# etcd_v3 <span class="hljs-keyword">version</span><br>etcdctl <span class="hljs-keyword">version</span>: <span class="hljs-number">3.4</span><span class="hljs-number">.13</span><br>API <span class="hljs-keyword">version</span>: <span class="hljs-number">3.4</span><br></code></pre></td></tr></table></figure><h4 id="查询Etcd状态"><a href="#查询Etcd状态" class="headerlink" title="查询Etcd状态"></a>查询Etcd状态</h4><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs gherkin">[root<span class="hljs-meta">@k8s-m1</span> lib]<span class="hljs-comment"># etcd_v3 --write-out=table endpoint status</span><br>+-------------------------+------------------+---------+---------+-----------+-----------+------------+<br>|<span class="hljs-string">        ENDPOINT         </span>|<span class="hljs-string">        ID        </span>|<span class="hljs-string"> VERSION </span>|<span class="hljs-string"> DB SIZE </span>|<span class="hljs-string"> IS LEADER </span>|<span class="hljs-string"> RAFT TERM </span>|<span class="hljs-string"> RAFT INDEX </span>|<br>+-------------------------+------------------+---------+---------+-----------+-----------+------------+<br>|<span class="hljs-string"> https://10.15.1.17:2379 </span>|<span class="hljs-string"> aa86d9e8ed413b73 </span>|<span class="hljs-string">  3.4.13 </span>|<span class="hljs-string">  1.9 MB </span>|<span class="hljs-string">     false </span>|<span class="hljs-string">         2 </span>|<span class="hljs-string">     210645 </span>|<br>|<span class="hljs-string"> https://10.15.1.18:2379 </span>|<span class="hljs-string"> 5e699870e3d2ee5b </span>|<span class="hljs-string">  3.4.13 </span>|<span class="hljs-string">  1.9 MB </span>|<span class="hljs-string">      true </span>|<span class="hljs-string">         2 </span>|<span class="hljs-string">     210645 </span>|<br>|<span class="hljs-string"> https://10.15.1.19:2379 </span>|<span class="hljs-string"> d261643c99e6fbc7 </span>|<span class="hljs-string">  3.4.13 </span>|<span class="hljs-string">  1.9 MB </span>|<span class="hljs-string">     false </span>|<span class="hljs-string">         2 </span>|<span class="hljs-string">     210645 </span>|<br>+-------------------------+------------------+---------+---------+-----------+-----------+------------+<br></code></pre></td></tr></table></figure><h3 id="配置集群信息-第一个master上配置"><a href="#配置集群信息-第一个master上配置" class="headerlink" title="配置集群信息(第一个master上配置)"></a>配置集群信息(第一个master上配置)</h3><p>打印默认init的配置信息</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">kubeadm<span class="hljs-built_in"> config </span><span class="hljs-built_in">print</span> init-defaults &gt; initconfig.yaml<br></code></pre></td></tr></table></figure><p>我们看下默认init的集群参数</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">kubeadm.k8s.io/v1beta2</span><br><span class="hljs-attr">bootstrapTokens:</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">groups:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">system:bootstrappers:kubeadm:default-node-token</span><br>  <span class="hljs-attr">token:</span> <span class="hljs-string">abcdef.0123456789abcdef</span><br>  <span class="hljs-attr">ttl:</span> <span class="hljs-string">24h0m0s</span><br>  <span class="hljs-attr">usages:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">signing</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">authentication</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">InitConfiguration</span><br><span class="hljs-attr">localAPIEndpoint:</span><br>  <span class="hljs-attr">advertiseAddress:</span> <span class="hljs-number">1.2</span><span class="hljs-number">.3</span><span class="hljs-number">.4</span><br>  <span class="hljs-attr">bindPort:</span> <span class="hljs-number">6443</span><br><span class="hljs-attr">nodeRegistration:</span><br>  <span class="hljs-attr">criSocket:</span> <span class="hljs-string">/var/run/dockershim.sock</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">k8s-m1</span><br>  <span class="hljs-attr">taints:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">effect:</span> <span class="hljs-string">NoSchedule</span><br>    <span class="hljs-attr">key:</span> <span class="hljs-string">node-role.kubernetes.io/master</span><br><span class="hljs-meta">---</span><br><span class="hljs-attr">apiServer:</span><br>  <span class="hljs-attr">timeoutForControlPlane:</span> <span class="hljs-string">4m0s</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">kubeadm.k8s.io/v1beta2</span><br><span class="hljs-attr">certificatesDir:</span> <span class="hljs-string">/etc/kubernetes/pki</span><br><span class="hljs-attr">clusterName:</span> <span class="hljs-string">kubernetes</span><br><span class="hljs-attr">controllerManager:</span> &#123;&#125;<br><span class="hljs-attr">dns:</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">CoreDNS</span><br><span class="hljs-attr">etcd:</span><br>  <span class="hljs-attr">local:</span><br>    <span class="hljs-attr">dataDir:</span> <span class="hljs-string">/var/lib/etcd</span><br><span class="hljs-attr">imageRepository:</span> <span class="hljs-string">k8s.gcr.io</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">ClusterConfiguration</span><br><span class="hljs-attr">kubernetesVersion:</span> <span class="hljs-string">v1.16.0</span><br><span class="hljs-attr">networking:</span><br>  <span class="hljs-attr">dnsDomain:</span> <span class="hljs-string">cluster.local</span><br>  <span class="hljs-attr">serviceSubnet:</span> <span class="hljs-number">10.96</span><span class="hljs-number">.0</span><span class="hljs-number">.0</span><span class="hljs-string">/12</span><br><span class="hljs-attr">scheduler:</span> &#123;&#125;<br></code></pre></td></tr></table></figure><p>我们主要关注和只保留<code>ClusterConfiguration</code>的段，然后修改下，可以参考下列的<code>v1beta2</code>文档,如果是低版本可能是<code>v1beta1</code>，某些字段和新的是不一样的，自行查找godoc看<br><a href="https://godoc.org/k8s.io/kubernetes/cmd/kubeadm/app/apis/kubeadm/v1beta2#hdr-Basics">https://godoc.org/k8s.io/kubernetes/cmd/kubeadm/app/apis/kubeadm/v1beta2#hdr-Basics</a><br><a href="https://godoc.org/k8s.io/kubernetes/cmd/kubeadm/app/apis/kubeadm/v1beta2">https://godoc.org/k8s.io/kubernetes/cmd/kubeadm/app/apis/kubeadm/v1beta2</a><br><a href="https://godoc.org/k8s.io/kubernetes/cmd/kubeadm/app/apis/kubeadm/v1beta2#pkg-constants">https://godoc.org/k8s.io/kubernetes/cmd/kubeadm/app/apis/kubeadm/v1beta2#pkg-constants</a><br><a href="https://godoc.org/k8s.io/kubernetes/cmd/kubeadm/app/apis/kubeadm/v1beta2#ClusterConfiguration">https://godoc.org/k8s.io/kubernetes/cmd/kubeadm/app/apis/kubeadm/v1beta2#ClusterConfiguration</a></p><p><code>controlPlaneEndpoint</code>写VIP地址，下面是最终的yaml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">kubeadm.k8s.io/v1beta2</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">ClusterConfiguration</span><br><span class="hljs-attr">imageRepository:</span> <span class="hljs-string">registry.aliyuncs.com/k8sxio</span><br><span class="hljs-attr">kubernetesVersion:</span> <span class="hljs-string">v1.18.8</span><br><span class="hljs-attr">certificatesDir:</span> <span class="hljs-string">/etc/kubernetes/pki</span><br><span class="hljs-attr">clusterName:</span> <span class="hljs-string">kubernetes</span><br><span class="hljs-attr">networking:</span> <br>  <span class="hljs-attr">dnsDomain:</span> <span class="hljs-string">cluster.local</span><br>  <span class="hljs-attr">serviceSubnet:</span> <span class="hljs-number">10.96</span><span class="hljs-number">.0</span><span class="hljs-number">.0</span><span class="hljs-string">/12</span><br>  <span class="hljs-attr">podSubnet:</span> <span class="hljs-number">10.244</span><span class="hljs-number">.0</span><span class="hljs-number">.0</span><span class="hljs-string">/16</span><br><span class="hljs-attr">controlPlaneEndpoint:</span> <span class="hljs-number">10.15</span><span class="hljs-number">.1</span><span class="hljs-number">.250</span><span class="hljs-string">:8443</span> <span class="hljs-comment"># 单个master的话写master的ip或者不写</span><br><span class="hljs-attr">apiServer:</span> <span class="hljs-comment"># https://godoc.org/k8s.io/kubernetes/cmd/kubeadm/app/apis/kubeadm/v1beta2#APIServer</span><br>  <span class="hljs-attr">timeoutForControlPlane:</span> <span class="hljs-string">4m0s</span><br>  <span class="hljs-attr">extraArgs:</span><br>    <span class="hljs-attr">authorization-mode:</span> <span class="hljs-string">&quot;Node,RBAC&quot;</span><br>    <span class="hljs-attr">enable-admission-plugins:</span> <span class="hljs-string">&quot;NamespaceLifecycle,LimitRanger,ServiceAccount,PersistentVolumeClaimResize,DefaultStorageClass,DefaultTolerationSeconds,NodeRestriction,MutatingAdmissionWebhook,ValidatingAdmissionWebhook,ResourceQuota,Priority,PodPreset&quot;</span><br>    <span class="hljs-attr">runtime-config:</span> <span class="hljs-string">api/all=true,settings.k8s.io/v1alpha1=true</span><br>    <span class="hljs-attr">storage-backend:</span> <span class="hljs-string">etcd3</span><br>  <span class="hljs-attr">certSANs:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span> <span class="hljs-comment"># 多个master的时候负载均衡出问题了能够快速使用localhost调试</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">localhost</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-number">10.15</span><span class="hljs-number">.1</span><span class="hljs-number">.18</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-number">10.15</span><span class="hljs-number">.1</span><span class="hljs-number">.19</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">k8s-m2</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">k8s-m3</span><br>  <span class="hljs-attr">extraVolumes:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">hostPath:</span> <span class="hljs-string">/etc/localtime</span><br>    <span class="hljs-attr">mountPath:</span> <span class="hljs-string">/etc/localtime</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">localtime</span><br>    <span class="hljs-attr">readOnly:</span> <span class="hljs-literal">true</span><br><span class="hljs-attr">controllerManager:</span> <br>  <span class="hljs-attr">extraArgs:</span><br>    <span class="hljs-attr">bind-address:</span> <span class="hljs-string">&quot;0.0.0.0&quot;</span><br>  <span class="hljs-attr">extraVolumes:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">hostPath:</span> <span class="hljs-string">/etc/localtime</span><br>    <span class="hljs-attr">mountPath:</span> <span class="hljs-string">/etc/localtime</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">localtime</span><br>    <span class="hljs-attr">readOnly:</span> <span class="hljs-literal">true</span><br><span class="hljs-attr">scheduler:</span> <br>  <span class="hljs-attr">extraArgs:</span><br>    <span class="hljs-attr">bind-address:</span> <span class="hljs-string">&quot;0.0.0.0&quot;</span><br>  <span class="hljs-attr">extraVolumes:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">hostPath:</span> <span class="hljs-string">/etc/localtime</span><br>    <span class="hljs-attr">mountPath:</span> <span class="hljs-string">/etc/localtime</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">localtime</span><br>    <span class="hljs-attr">readOnly:</span> <span class="hljs-literal">true</span><br><span class="hljs-attr">dns:</span> <br>  <span class="hljs-attr">type:</span> <span class="hljs-string">CoreDNS</span> <br><span class="hljs-attr">etcd:</span> <br>  <span class="hljs-attr">external:</span><br>    <span class="hljs-attr">endpoints:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">https://10.15.1.17:2379</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">https://10.15.1.18:2379</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">https://10.15.1.19:2379</span><br>    <span class="hljs-attr">caFile:</span> <span class="hljs-string">/etc/kubernetes/pki/etcd/ca.crt</span><br>    <span class="hljs-attr">certFile:</span> <span class="hljs-string">/etc/kubernetes/pki/apiserver-etcd-client.crt</span><br>    <span class="hljs-attr">keyFile:</span> <span class="hljs-string">/etc/kubernetes/pki/apiserver-etcd-client.key</span><br><span class="hljs-meta">---</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">kubeproxy.config.k8s.io/v1alpha1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">KubeProxyConfiguration</span> <br><span class="hljs-attr">mode:</span> <span class="hljs-string">ipvs</span> <span class="hljs-comment"># or iptables</span><br><span class="hljs-attr">ipvs:</span><br>  <span class="hljs-attr">excludeCIDRs:</span> <span class="hljs-literal">null</span><br>  <span class="hljs-attr">minSyncPeriod:</span> <span class="hljs-string">0s</span><br>  <span class="hljs-attr">scheduler:</span> <span class="hljs-string">&quot;rr&quot;</span> <span class="hljs-comment"># 调度算法</span><br>  <span class="hljs-attr">strictARP:</span> <span class="hljs-literal">false</span><br>  <span class="hljs-attr">syncPeriod:</span> <span class="hljs-string">15s</span><br><span class="hljs-attr">iptables:</span><br>  <span class="hljs-attr">masqueradeAll:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">masqueradeBit:</span> <span class="hljs-number">14</span><br>  <span class="hljs-attr">minSyncPeriod:</span> <span class="hljs-string">0s</span><br>  <span class="hljs-attr">syncPeriod:</span> <span class="hljs-string">30s</span><br><span class="hljs-meta">---</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">kubelet.config.k8s.io/v1beta1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">KubeletConfiguration</span> <br><span class="hljs-attr">cgroupDriver:</span> <span class="hljs-string">systemd</span><br><span class="hljs-attr">failSwapOn:</span> <span class="hljs-literal">true</span> <span class="hljs-comment"># 如果开启swap则设置为false</span><br></code></pre></td></tr></table></figure><ul><li><p>在<code>certSANs</code>段只需要写另外两个master节点的<code>IP</code>和<code>主机名</code>，因为kubeadm已经添加了一些，如果重复定义会导致证书中的IP和域名重复；使用 <code>openssl x509 -in apiserver.crt -text -noout</code> 可查看。此<a href="https://github.com/kubernetes/kubeadm/issues/1959">Bug</a>是由于kubeadm没去重导致，该<a href="https://github.com/kubernetes/kubeadm/issues/1959">Bug</a>将在1.18版本修复；</p></li><li><p>swap的话看最后一行，apiserver的exterArgs是为了开启<code>podPreset</code>，单台master的话把<code>controlPlaneEndpoint</code>的值改为第一个master的ip</p></li><li><p><code>kubectl get cs</code> 查看组件状态发现<code>controllerManager</code>和<code>scheduler</code> 状态<code>Unhealthy</code> 删除<code>--port=0</code> 即可</p></li><li><p>检查文件是否错误，忽略<code>warning</code>，错误的话会抛出<code>error</code>，没错则会输出到包含字符串<code>kubeadm join xxx</code>啥的</p></li></ul><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">kubeadm init <span class="hljs-attr">--config</span> initconfig<span class="hljs-selector-class">.yaml</span> <span class="hljs-attr">--dry-run</span><br></code></pre></td></tr></table></figure><p>检查镜像是否正确</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arduino">kubeadm config images list --config initconfig.yaml<br></code></pre></td></tr></table></figure><p>预先拉取镜像</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">kubeadm config images pull --config initconfig.yaml <span class="hljs-comment"># 下面是输出</span><br>[config/images] Pulled registry.aliyuncs.com/k8sxio/kube-apiserver:v1.18.8<br>[config/images] Pulled registry.aliyuncs.com/k8sxio/kube-controller-manager:v1.18.8<br>[config/images] Pulled registry.aliyuncs.com/k8sxio/kube-scheduler:v1.18.8<br>[config/images] Pulled registry.aliyuncs.com/k8sxio/kube-proxy:v1.18.8<br>[config/images] Pulled registry.aliyuncs.com/k8sxio/pause:3.2<br>[config/images] Pulled coredns/coredns:1.6.9<br></code></pre></td></tr></table></figure><h4 id="kubeadm-init"><a href="#kubeadm-init" class="headerlink" title="kubeadm init"></a>kubeadm init</h4><p>下面init只在第一个master上面操作</p><figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs brainfuck"><span class="hljs-comment">#</span> <span class="hljs-literal">--</span><span class="hljs-comment">upload</span><span class="hljs-literal">-</span><span class="hljs-comment">certs 参数的意思为将相关的证书直接上传到etcd中保存，这样省去我们手动分发证书的过程</span><br><br><span class="hljs-comment">kubeadm init</span> <span class="hljs-literal">--</span><span class="hljs-comment">config initconfig</span><span class="hljs-string">.</span><span class="hljs-comment">yaml</span> <span class="hljs-literal">--</span><span class="hljs-comment">upload</span><span class="hljs-literal">-</span><span class="hljs-comment">certs</span><br></code></pre></td></tr></table></figure><p>记住init后打印的token，复制kubectl的kubeconfig，kubectl的kubeconfig路径默认是<code>~/.kube/config</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">mkdir</span> -p <span class="hljs-variable">$HOME</span>/.kube<br><span class="hljs-built_in">cp</span> /etc/kubernetes/admin.conf <span class="hljs-variable">$HOME</span>/.kube/config<br></code></pre></td></tr></table></figure><p>init的yaml信息实际上会存在集群的configmap里，我们可以随时查看，该yaml在其他node和master join的时候会使用到</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim">kubectl -n kube-<span class="hljs-built_in">system</span> <span class="hljs-built_in">get</span> <span class="hljs-keyword">cm</span> kubeadm-config -<span class="hljs-keyword">o</span> yaml<br></code></pre></td></tr></table></figure><h4 id="配置其他master的k8s管理组件-某些低版本不支持上传证书的时候操作需手动拷贝证书"><a href="#配置其他master的k8s管理组件-某些低版本不支持上传证书的时候操作需手动拷贝证书" class="headerlink" title="配置其他master的k8s管理组件(某些低版本不支持上传证书的时候操作需手动拷贝证书)"></a>配置其他master的k8s管理组件(某些低版本不支持上传证书的时候操作需手动拷贝证书)</h4><p>第一个master上拷贝ca证书到其他master节点上</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">scp -r <span class="hljs-regexp">/etc/</span>kubernetes<span class="hljs-regexp">/pki root@k8s-m2:/</span>etc<span class="hljs-regexp">/kubernetes/</span><br>scp -r <span class="hljs-regexp">/etc/</span>kubernetes<span class="hljs-regexp">/pki root@k8s-m3:/</span>etc<span class="hljs-regexp">/kubernetes/</span><br></code></pre></td></tr></table></figure><p>其他master join进来</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs stylus">kubeadm join <span class="hljs-number">10.15</span>.<span class="hljs-number">1.250</span>:<span class="hljs-number">8443</span> \<br>    <span class="hljs-attr">--token</span> xxx<span class="hljs-selector-class">.zzzzzzzzz</span>     \<br>    <span class="hljs-attr">--discovery-token-ca-cert-hash</span> sha256:xxxxxxxxxxx <span class="hljs-attr">--control-plane</span><br></code></pre></td></tr></table></figure><p>通过下列命令可以获取sha256的值</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs gradle">openssl x509 -pubkey -in \<br>    <span class="hljs-regexp">/etc/</span>kubernetes<span class="hljs-regexp">/pki/</span>ca.crt | \<br>    openssl rsa -pubin -outform der <span class="hljs-number">2</span>&gt;<span class="hljs-regexp">/dev/</span><span class="hljs-keyword">null</span> | \<br>    openssl dgst -sha256 -hex | sed <span class="hljs-string">&#x27;s/^.* //&#x27;</span><br></code></pre></td></tr></table></figure><ul><li>如果集群在<code>init</code>时使用了 <code>--upload-certs</code> 参数将相关的证书直接上传到etcd中保存，则其他master在加入时需要使用 <code>--certificate-key</code> 参数。</li><li>token忘记的话可以<code>kubeadm token list</code>查看，可以通过<code>kubeadm token create</code>创建。在高版本可以使用<code>kubeadm token create --print-join-command</code>创建，老版本不确定是否支持<code>--print-join-command</code>这个选项，不支持的话就不带<code>--print-join-command</code>选项创建token。</li><li>通过将参数 <code>--upload-certs </code> 添加到 <code>kubeadm init</code>，你可以将控制平面证书临时上传到集群中的 <code>Secret</code> 请注意此 <code>Secret</code> 将在 <code>2小时</code> 后自动过期。证书使用 32 字节密钥加密，可以使用 <code>--certificate-key</code> 指定。</li></ul><p>以下阶段命令可用于证书到期后重新上传证书：</p><figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs brainfuck"><span class="hljs-comment">kubeadm init phase upload</span><span class="hljs-literal">-</span><span class="hljs-comment">certs</span> <span class="hljs-literal">--</span><span class="hljs-comment">upload</span><span class="hljs-literal">-</span><span class="hljs-comment">certs</span> <span class="hljs-literal">--</span><span class="hljs-comment">certificate</span><span class="hljs-literal">-</span><span class="hljs-comment">key=SOME_VALUE</span><br></code></pre></td></tr></table></figure><p>如果未将参数 <code>--certificate-key</code> 传递给 <code>kubeadm init</code> 和 <code>kubeadm init phase upload-certs</code>， 则会自动生成一个新密钥。</p><p>以下命令可用于按需生成新密钥：</p><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs processing">kubeadm <span class="hljs-built_in">alpha</span> certs certificate-<span class="hljs-built_in">key</span><br></code></pre></td></tr></table></figure><p>设置kubectl的补全脚本</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arcade">kubectl completion bash &gt; <span class="hljs-regexp">/etc/</span>bash_completion.d/kubectl<br></code></pre></td></tr></table></figure><p>获取节点状态信息</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">[root@k8s-m1 kubernetes]<span class="hljs-comment"># kubectl get nodes </span><br>NAME     STATUS     ROLES    AGE   <span class="hljs-keyword">VERSION</span><br>k8s-m1   NotReady   <span class="hljs-keyword">master</span>   <span class="hljs-title">23h</span>   v1.<span class="hljs-number">15.6</span><br>k8s-m2   NotReady   <span class="hljs-keyword">master</span>   <span class="hljs-title">23h</span>   v1.<span class="hljs-number">15.6</span><br>k8s-m3   NotReady   <span class="hljs-keyword">master</span>   <span class="hljs-title">23h</span>   v1.<span class="hljs-number">15.6</span><br>k8s-n1   NotReady   <span class="hljs-tag">&lt;none&gt;</span>   <span class="hljs-number">23h</span>   v1.<span class="hljs-number">15.6</span><br>k8s-n2   NotReady   <span class="hljs-tag">&lt;none&gt;</span>   <span class="hljs-number">23h</span>   v1.<span class="hljs-number">15.6</span><br><br><br>[root@k8s-m1 kubernetes]<span class="hljs-comment"># kubectl get cs</span><br>NAME                 STATUS    MESSAGE             ERROR<br>scheduler            Healthy   ok                  <br>controller-manager   Healthy   ok                  <br>etcd-<span class="hljs-number">0</span>               Healthy   &#123;<span class="hljs-string">&quot;health&quot;</span>:<span class="hljs-string">&quot;true&quot;</span>&#125;   <br>etcd-<span class="hljs-number">2</span>               Healthy   &#123;<span class="hljs-string">&quot;health&quot;</span>:<span class="hljs-string">&quot;true&quot;</span>&#125;   <br>etcd-<span class="hljs-number">1</span>               Healthy   &#123;<span class="hljs-string">&quot;health&quot;</span>:<span class="hljs-string">&quot;true&quot;</span>&#125;   <br></code></pre></td></tr></table></figure><h3 id="addon-此章开始到结尾选取任意一个master上执行"><a href="#addon-此章开始到结尾选取任意一个master上执行" class="headerlink" title="addon(此章开始到结尾选取任意一个master上执行)"></a>addon(此章开始到结尾选取任意一个master上执行)</h3><p>容器的网络还没处理好，这里我用<code>flannel</code>部署，如果你了解bgp可以使用<code>calico</code><br>yaml文件来源与flannel官方github <a href="https://github.com/coreos/flannel/tree/master/Documentation">https://github.com/coreos/flannel/tree/master/Documentation</a></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">kubectl apply -f https:<span class="hljs-regexp">//</span>raw.githubusercontent.com<span class="hljs-regexp">/coreos/</span>flannel<span class="hljs-regexp">/master/</span>Documentation/kube-flannel.yml<br><br></code></pre></td></tr></table></figure><h3 id="验证集群可用性"><a href="#验证集群可用性" class="headerlink" title="验证集群可用性"></a>验证集群可用性</h3><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">kubectl -n kube-<span class="hljs-keyword">system</span> <span class="hljs-built_in">get</span> pod -o wide<br></code></pre></td></tr></table></figure><p>等待kube-system空间下的pod都是running后我们来测试下集群可用性</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">cat&lt;&lt;EOF</span> <span class="hljs-string">|</span> <span class="hljs-string">kubectl</span> <span class="hljs-string">apply</span> <span class="hljs-string">-f</span> <span class="hljs-bullet">-</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">apps/v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Deployment</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">nginx</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">matchLabels:</span><br>      <span class="hljs-attr">app:</span> <span class="hljs-string">nginx</span><br>  <span class="hljs-attr">template:</span><br>    <span class="hljs-attr">metadata:</span><br>      <span class="hljs-attr">labels:</span><br>        <span class="hljs-attr">app:</span> <span class="hljs-string">nginx</span><br>    <span class="hljs-attr">spec:</span><br>      <span class="hljs-attr">containers:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">image:</span> <span class="hljs-string">nginx:alpine</span><br>        <span class="hljs-attr">name:</span> <span class="hljs-string">nginx</span><br>        <span class="hljs-attr">ports:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">containerPort:</span> <span class="hljs-number">80</span><br><span class="hljs-meta">---</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Service</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">nginx</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">app:</span> <span class="hljs-string">nginx</span><br>  <span class="hljs-attr">ports:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">protocol:</span> <span class="hljs-string">TCP</span><br>      <span class="hljs-attr">port:</span> <span class="hljs-number">80</span><br>      <span class="hljs-attr">targetPort:</span> <span class="hljs-number">80</span><br><span class="hljs-meta">---</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Pod</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">busybox</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">default</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">containers:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">busybox</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">zhangguanzhang/centos</span><br>    <span class="hljs-attr">command:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">sleep</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;3600&quot;</span><br>    <span class="hljs-attr">imagePullPolicy:</span> <span class="hljs-string">IfNotPresent</span><br>  <span class="hljs-attr">restartPolicy:</span> <span class="hljs-string">Always</span><br><span class="hljs-string">EOF</span><br></code></pre></td></tr></table></figure><p>等待pod running</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">$ kubectl <span class="hljs-keyword">get</span> po,svc -o wide<br><span class="hljs-type">NAME</span>                         READY   STATUS    RESTARTS   AGE    IP            NODE     NOMINATED NODE   READINESS GATES<br>pod/busybox                  <span class="hljs-number">1</span>/<span class="hljs-number">1</span>     Running   <span class="hljs-number">0</span>          <span class="hljs-number">4</span>m4s   <span class="hljs-number">10.244</span><span class="hljs-number">.2</span><span class="hljs-number">.18</span>   k8s-n1   &lt;<span class="hljs-keyword">none</span>&gt;           &lt;<span class="hljs-keyword">none</span>&gt;<br>pod/nginx<span class="hljs-number">-5</span>c559d5697<span class="hljs-number">-2</span>ctxh   <span class="hljs-number">1</span>/<span class="hljs-number">1</span>     Running   <span class="hljs-number">0</span>          <span class="hljs-number">4</span>m4s   <span class="hljs-number">10.244</span><span class="hljs-number">.2</span><span class="hljs-number">.16</span>   k8s-n1   &lt;<span class="hljs-keyword">none</span>&gt;           &lt;<span class="hljs-keyword">none</span>&gt;<br><br><span class="hljs-type">NAME</span>                 <span class="hljs-keyword">TYPE</span>        <span class="hljs-keyword">CLUSTER</span>-IP      <span class="hljs-keyword">EXTERNAL</span>-IP   PORT(S)   AGE    SELECTOR<br>service/kubernetes   ClusterIP   <span class="hljs-number">10.96</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>       &lt;<span class="hljs-keyword">none</span>&gt;        <span class="hljs-number">443</span>/TCP   <span class="hljs-number">12</span>m    &lt;<span class="hljs-keyword">none</span>&gt;<br>service/nginx        ClusterIP   <span class="hljs-number">10.100</span><span class="hljs-number">.39</span><span class="hljs-number">.101</span>   &lt;<span class="hljs-keyword">none</span>&gt;        <span class="hljs-number">80</span>/TCP    <span class="hljs-number">4</span>m4s   app=nginx<br></code></pre></td></tr></table></figure><p>验证集群dns</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">$ kubectl exec -ti busybox <span class="hljs-comment">-- nslookup kubernetes</span><br><span class="hljs-keyword">Server</span>:    <span class="hljs-number">10.96</span><span class="hljs-number">.0</span><span class="hljs-number">.10</span><br>Address <span class="hljs-number">1</span>: <span class="hljs-number">10.96</span><span class="hljs-number">.0</span><span class="hljs-number">.10</span> kube-dns.kube-<span class="hljs-keyword">system</span>.svc.<span class="hljs-keyword">cluster</span>.<span class="hljs-keyword">local</span><br><br><span class="hljs-type">Name</span>:      kubernetes<br>Address <span class="hljs-number">1</span>: <span class="hljs-number">10.96</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span> kubernetes.<span class="hljs-keyword">default</span>.svc.<span class="hljs-keyword">cluster</span>.<span class="hljs-keyword">local</span><br></code></pre></td></tr></table></figure><p>在master上curl nginx的svc的ip出现nginx的index内容即集群正常，例如我的nginx svc ip是<code>10.100.39.101</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs xml">$ curl -s 10.100.39.101<br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Welcome to nginx!<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">    <span class="hljs-selector-tag">body</span> &#123;</span><br><span class="language-css">        <span class="hljs-attribute">width</span>: <span class="hljs-number">35em</span>;</span><br><span class="language-css">        <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span> auto;</span><br><span class="language-css">        <span class="hljs-attribute">font-family</span>: Tahoma, Verdana, Arial, sans-serif;</span><br><span class="language-css">    &#125;</span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Welcome to nginx!<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>If you see this page, the nginx web server is successfully installed and<br>working. Further configuration is required.<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>For online documentation and support please refer to<br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;http://nginx.org/&quot;</span>&gt;</span>nginx.org<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span>.<span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br>Commercial support is available at<br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;http://nginx.com/&quot;</span>&gt;</span>nginx.com<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span>.<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">em</span>&gt;</span>Thank you for using nginx.<span class="hljs-tag">&lt;/<span class="hljs-name">em</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="日志管理"><a href="#日志管理" class="headerlink" title="日志管理"></a>日志管理</h2><p>以kube-apiserver为例将日志挂载出来方便管理（kube-controller-manager、kube-scheduler同理）</p><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-attribute">spec</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">containers</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">command:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">--logtostderr=false</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">--log-dir=/var/log/kubernetes/kube-apiserver</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">--v=2</span><br></code></pre></td></tr></table></figure><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">volumeMounts:<br>- mountPath: <span class="hljs-regexp">/var/</span>log<span class="hljs-regexp">/kubernetes/</span>kube-apiserver<br>  name: k8s-logs<br></code></pre></td></tr></table></figure><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">volumes:</span><br>- hostPath:<br><span class="hljs-symbol">    path:</span> <span class="hljs-keyword">/var/</span>log<span class="hljs-keyword">/kubernetes/</span>kube-apiserver<br><span class="hljs-symbol">    type:</span> DirectoryOrCreate<br><span class="hljs-symbol">  name:</span> k8s-logs<br></code></pre></td></tr></table></figure><p>kubelet日志（因为kubelet是用systemctl管理的非容器管理所以日志不存在挂载一说）</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs autoit">[root<span class="hljs-symbol">@k8s</span>-m1 manifests]<span class="hljs-meta"># vim /etc/sysconfig/kubelet </span><br></code></pre></td></tr></table></figure><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-attribute">--v</span>=2 <span class="hljs-attribute">--logtostderr</span>=<span class="hljs-literal">false</span> <span class="hljs-attribute">--log-dir</span>=/var/log/kubernetes/kubelet<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Envoy-Administration-interface</title>
    <link href="/2019/11/26/Envoy-Administration-interface/"/>
    <url>/2019/11/26/Envoy-Administration-interface/</url>
    
    <content type="html"><![CDATA[<h2 id="管理接口admin"><a href="#管理接口admin" class="headerlink" title="管理接口admin"></a>管理接口admin</h2><ul><li>Envoy内建了一个管理接口，它支持查询和修改操作，甚至有可能暴露私有数据（例如统计数据、集群名称和证书信息等），因此非常有必要精心编排其访问控制机制以避免非授权访问；</li></ul><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">admin:</span><br><span class="hljs-symbol">  access_log_path:</span> ...      <span class="hljs-meta"># 管理接口的访问日志文件路径，无须记录访问日志时使用/dev/null；</span><br><span class="hljs-symbol">  profile_path:</span> ...         <span class="hljs-meta"># cpu profiler的输出路径，默认为/var/log/envoy/envoy.prof；</span><br><span class="hljs-symbol">    address:</span>                <span class="hljs-meta"># 监听的套接字；</span><br><span class="hljs-symbol">    socket_address:</span><br><span class="hljs-symbol">      protocol:</span> ...<br><span class="hljs-symbol">      address:</span> ...<br><span class="hljs-symbol">      port_value:</span> ...<br></code></pre></td></tr></table></figure><ul><li>下面是一个简单的配置示例</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">admin:</span><br>  <span class="hljs-attr">access_log_path:</span> <span class="hljs-string">/tmp/admin_access.log</span><br>  <span class="hljs-attr">address:</span><br>    <span class="hljs-attr">socket_address:</span> &#123; <span class="hljs-attr">address:</span> <span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>, <span class="hljs-attr">port_value:</span> <span class="hljs-number">9901</span> &#125;<br></code></pre></td></tr></table></figure><ul><li>一个完整的envoy配置示例</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">admin:</span><br>  <span class="hljs-attr">access_log_path:</span> <span class="hljs-string">/tmp/admin_access.log</span><br>  <span class="hljs-attr">profile_path:</span> <span class="hljs-string">/tmp/envoy.prof</span><br>  <span class="hljs-attr">address:</span><br>    <span class="hljs-attr">socket_address:</span> &#123; <span class="hljs-attr">address:</span> <span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>, <span class="hljs-attr">port_value:</span> <span class="hljs-number">9901</span> &#125;<br><br><span class="hljs-attr">static_resources:</span><br>  <span class="hljs-attr">listeners:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">listener_0</span><br>    <span class="hljs-attr">address:</span><br>      <span class="hljs-attr">socket_address:</span> &#123; <span class="hljs-attr">address:</span> <span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>, <span class="hljs-attr">port_value:</span> <span class="hljs-number">80</span> &#125;<br>    <span class="hljs-attr">filter_chains:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">filters:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">envoy.http_connection_manager</span><br>        <span class="hljs-attr">config:</span><br>          <span class="hljs-attr">stat_prefix:</span> <span class="hljs-string">egress_http</span><br>          <span class="hljs-attr">codec_type:</span> <span class="hljs-string">AUTO</span><br>          <span class="hljs-attr">route_config:</span><br>            <span class="hljs-attr">name:</span> <span class="hljs-string">test_route</span><br>            <span class="hljs-attr">virtual_hosts:</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">web_service_1</span><br>              <span class="hljs-attr">domains:</span> [<span class="hljs-string">&quot;*.ik8s.io&quot;</span>, <span class="hljs-string">&quot;ik8s.io&quot;</span>]<br>              <span class="hljs-attr">routes:</span><br>              <span class="hljs-bullet">-</span> <span class="hljs-attr">match:</span> &#123; <span class="hljs-attr">prefix:</span> <span class="hljs-string">&quot;/&quot;</span> &#125;<br>                <span class="hljs-attr">route:</span> &#123; <span class="hljs-attr">cluster:</span> <span class="hljs-string">web_cluster_1</span> &#125;<br>            <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">web_service_2</span><br>              <span class="hljs-attr">domains:</span> [<span class="hljs-string">&quot;*.k8scast.cn&quot;</span>,<span class="hljs-string">&quot;k8scast.cn&quot;</span>]<br>              <span class="hljs-attr">routes:</span><br>              <span class="hljs-bullet">-</span> <span class="hljs-attr">match:</span> &#123; <span class="hljs-attr">prefix:</span> <span class="hljs-string">&quot;/&quot;</span> &#125;<br>                <span class="hljs-attr">route:</span> &#123; <span class="hljs-attr">cluster:</span> <span class="hljs-string">web_cluster_2</span> &#125; <br>          <span class="hljs-attr">http_filters:</span><br>          <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">envoy.router</span><br><br>  <span class="hljs-attr">clusters:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">web_cluster_1</span><br>    <span class="hljs-attr">connect_timeout:</span> <span class="hljs-number">0.</span><span class="hljs-string">25s</span><br>    <span class="hljs-attr">type:</span> <span class="hljs-string">STRICT_DNS</span><br>    <span class="hljs-attr">lb_policy:</span> <span class="hljs-string">ROUND_ROBIN</span><br>    <span class="hljs-attr">load_assignment:</span><br>      <span class="hljs-attr">cluster_name:</span> <span class="hljs-string">web_cluster_1</span> <br>      <span class="hljs-attr">endpoints:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">lb_endpoints:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">endpoint:</span><br>            <span class="hljs-attr">address:</span><br>              <span class="hljs-attr">socket_address:</span><br>                <span class="hljs-attr">address:</span> <span class="hljs-string">myservice</span><br>                <span class="hljs-attr">port_value:</span> <span class="hljs-number">8081</span><br><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">web_cluster_2</span><br>    <span class="hljs-attr">connect_timeout:</span> <span class="hljs-number">0.</span><span class="hljs-string">25s</span><br>    <span class="hljs-attr">type:</span> <span class="hljs-string">STRICT_DNS</span><br>    <span class="hljs-attr">lb_policy:</span> <span class="hljs-string">ROUND_ROBIN</span><br>    <span class="hljs-attr">load_assignment:</span><br>      <span class="hljs-attr">cluster_name:</span> <span class="hljs-string">web_cluster_2</span><br>      <span class="hljs-attr">endpoints:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">lb_endpoints:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">endpoint:</span><br>            <span class="hljs-attr">address:</span><br>              <span class="hljs-attr">socket_address:</span><br>                <span class="hljs-attr">address:</span> <span class="hljs-string">webserver1</span> <br>                <span class="hljs-attr">port_value:</span> <span class="hljs-number">8081</span><br></code></pre></td></tr></table></figure><ul><li>管理接口admin<ul><li>admin接口内置了多个&#x2F;path，不同的path可能会分别接受不同的GET或POST请求</li><li>GET &#x2F;help：打印所有可用选项；</li></ul></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs bash">admin commands are:<br>/: Admin home page                                                       <span class="hljs-comment"># GET</span><br>/certs: <span class="hljs-built_in">print</span> certs on machine                                           <span class="hljs-comment"># GET，列出已加载的所有TLS证书及相关的信息；</span><br>/clusters: upstream cluster status                                       <span class="hljs-comment"># GET，额外支持使用“GET /clusters?format=json”</span><br>/config_dump: dump current Envoy configs (experimental)                  <span class="hljs-comment"># GET，打印Envoy加载的各类配置信息；</span><br>/contention: dump current Envoy mutex contention stats (<span class="hljs-keyword">if</span> enabled)      <span class="hljs-comment"># GET，互斥跟踪</span><br>/cpuprofiler: <span class="hljs-built_in">enable</span>/disable the CPU profiler                            <span class="hljs-comment"># POST，启用或禁用cpuprofiler</span><br>/healthcheck/fail: cause the server to fail health checks                <span class="hljs-comment"># POST，强制设定HTTP健康状态检查为失败；</span><br>/healthcheck/ok: cause the server to pass health checks                  <span class="hljs-comment"># POST，强制设定HTTP健康状态检查为成功；</span><br>/heapprofiler: <span class="hljs-built_in">enable</span>/disable the heap profiler                          <span class="hljs-comment"># POST，启用或禁用heapprofiler；</span><br>/help: <span class="hljs-built_in">print</span> out list of admin commands<br>/hot_restart_version: <span class="hljs-built_in">print</span> the hot restart compatibility version        <span class="hljs-comment"># GET，打印热重启相关的信息；</span><br>/listeners: <span class="hljs-built_in">print</span> listener addresses                                     <span class="hljs-comment"># GET，列出所有侦听器，支持使用“GET /listeners?format=json”</span><br>/logging: query/change logging levels                                    <span class="hljs-comment"># POST，启用或禁用不同子组件上的不同日志记录级别</span><br>/memory: <span class="hljs-built_in">print</span> current allocation/heap usage                             <span class="hljs-comment"># POST，打印当前内在分配信息，以字节为单位；</span><br>/quitquitquit: <span class="hljs-built_in">exit</span> the server                                           <span class="hljs-comment"># POST，干净退出服务器；</span><br>/reset_counters: reset all counters to zero                              <span class="hljs-comment"># POST，重围所有计数器；</span><br>/runtime: <span class="hljs-built_in">print</span> runtime values                                           <span class="hljs-comment"># GET，以json格式输出所有运行时相关值；</span><br>/runtime_modify: modify runtime values                                   <span class="hljs-comment"># POST /runtime_modify?key1=value1&amp;key2=value2，添加或修改在查询参数中传递的运行时值</span><br>/server_info: <span class="hljs-built_in">print</span> server version/status information                    <span class="hljs-comment"># GET，打印当前Envoy Server的相关信息；</span><br>/stats: <span class="hljs-built_in">print</span> server stats                                               <span class="hljs-comment"># 按需输出统计数据，例如GET /stats?filter=regex，另外还支持json和prometheus两种输出格式；</span><br>/stats/prometheus: <span class="hljs-built_in">print</span> server stats <span class="hljs-keyword">in</span> prometheus format：             <span class="hljs-comment"># 输出prometheus格式的统计信息；</span><br></code></pre></td></tr></table></figure><h2 id="管理接口几个示例输出"><a href="#管理接口几个示例输出" class="headerlink" title="管理接口几个示例输出"></a>管理接口几个示例输出</h2><ul><li>GET &#x2F;clusters：列出所有已配置的集群，包括每个集群中发现的所有上游主机以及每个主机的统计信息；支持输出为json格式；<ul><li>集群管理器信息：“version_info string”，无CDS时，则显示为“version_info::static”</li><li>集群相关的信息：断路器、异常点检测和用于表示是否通过CDS添加的集群标识“add_via_api”</li><li>每个主机的统计信息：包括总连接数、活动连接数、总请求数和主机的健康状态等；不健康的原因通常有以下三种<ul><li>failed_active_hc：未通过主动健康状态检测；</li><li>failed_eds_health：被EDS标记为不健康；</li><li>failed_outlier_check：未通过异常检测机制的检查；</li></ul></li></ul></li><li>GET &#x2F;listeners：列出所有已配置的侦听器，包括侦听器的名称以及监听的地址；支持输出为json格式；</li><li>POST &#x2F;reset_counters：将所有计数器重置为0；不过，它只会影响Server本地的输出，对于已经发送到外部存储系统的统计数据无效；</li><li>GET &#x2F;config_dump：以json格式打印当前从Envoy的各种组件加载的配置信息；</li><li>GET &#x2F;ready：获取Server就绪与否的状态，LIVE状态为200，否则为503；</li></ul><h2 id="统计集群中每个主机的状态信息说明"><a href="#统计集群中每个主机的状态信息说明" class="headerlink" title="统计集群中每个主机的状态信息说明"></a>统计集群中每个主机的状态信息说明</h2><table><thead><tr><th align="left">Name</th><th align="right">Type</th><th align="center">Description</th></tr></thead><tbody><tr><td align="left">cx_total</td><td align="right">Counter</td><td align="center">Total connections</td></tr><tr><td align="left">cx_active</td><td align="right">Gauge</td><td align="center">Total active connections</td></tr><tr><td align="left">cx_connect_fail</td><td align="right">Counter</td><td align="center">Total connection failures</td></tr><tr><td align="left">rq_total</td><td align="right">Counter</td><td align="center">Total requests</td></tr><tr><td align="left">rq_timeout</td><td align="right">Counter</td><td align="center">Total timed out requests</td></tr><tr><td align="left">rq_success</td><td align="right">Counter</td><td align="center">Total requests with non-5xx responses</td></tr><tr><td align="left">rq_error</td><td align="right">Counter</td><td align="center">Total requests with 5xx responses</td></tr><tr><td align="left">rq_active</td><td align="right">Gauge</td><td align="center">Total active requests</td></tr><tr><td align="left">healthy</td><td align="right">String</td><td align="center">The health status of the host. See below</td></tr><tr><td align="left">weight</td><td align="right">Integer</td><td align="center">Load balancing weight (1-100)</td></tr><tr><td align="left">zone</td><td align="right">String</td><td align="center">Service zone</td></tr><tr><td align="left">canary</td><td align="right">Boolean</td><td align="center">Whether the host is a canary</td></tr><tr><td align="left">success_rate</td><td align="right">Double</td><td align="center">Request success rate (0-100). -1 if there was not enough request volume in the interval to calculate it</td></tr></tbody></table>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Envoy的概念与术语</title>
    <link href="/2019/11/11/Envoy-concept/"/>
    <url>/2019/11/11/Envoy-concept/</url>
    
    <content type="html"><![CDATA[<h2 id="什么是Envoy？"><a href="#什么是Envoy？" class="headerlink" title="什么是Envoy？"></a>什么是Envoy？</h2><p>Envoy 是以 C++ 开发的高性能非阻塞的服务代理程序，其内置服务发现、高级负载均衡、TLS终止、HTTP&#x2F;2、GRPC代理、熔断器、健康检查、L3&#x2F;4网络过滤器、L7层过滤器、动态配置，基于百分比流量拆分的灰度发布、故障注入等功能。<br>Envoy是的新型服务代理程序，与HAProxy和Nginx一样。但Envoy主要面向SOA（面向服务的架构）的网络代理，所以非常适用于微服务，其主要是用来调解Service Mesh中所有服务的入站和出站流量。</p><p>Envoy使用单进程&#x2F;多线程的架构模型，一个主线程（Main thread）负责实现各类管理任务，而一些工作线程（Worker threads）则负责执行监听、过滤和转发等代理服务器的核心功能。</p><h3 id="主线程："><a href="#主线程：" class="headerlink" title="主线程："></a>主线程：</h3><p>负责Envoy程序的启动和关闭、xDS API调用处理（包括DNS、健康状态检测和集群管理等）、运行时配置、统计数据刷新、管理接口维护和其它线程管理（信号和热重启等）等，相关的所有事件均以异步非阻塞模式完成；</p><h3 id="工作线程："><a href="#工作线程：" class="headerlink" title="工作线程："></a>工作线程：</h3><p>默认情况下，Envoy根据当前主机CPU核心数来创建等同数量的工作线程，不过，管理员也可以通过程序选项–concurrency具体指定；每个工作线程运行一个非阻塞型事件循环，负责为每个侦听器监听指定的套接字、接收新请求、为每个连接初始一个过滤器栈并处理此连接整个生命周期中的所有事件；</p><h3 id="文件刷写线程："><a href="#文件刷写线程：" class="headerlink" title="文件刷写线程："></a>文件刷写线程：</h3><p>Envoy写入的每个文件都有一个专用、独立的阻塞型刷写线程，当工作线程需要写入文件时，数据实际上被移入内存缓冲区，最终通过文件刷写线程同步至文件中。</p><h2 id="xDS-API常用术语"><a href="#xDS-API常用术语" class="headerlink" title="xDS API常用术语"></a>xDS API常用术语</h2><h4 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h4><table><thead><tr><th>Concept</th><th align="center">概念</th><th align="right">描述</th></tr></thead><tbody><tr><td>Host</td><td align="center">主机</td><td align="right">能够进行网络通信的实体（如移动设备、服务器上的应用程序）。在Envoy，主机是逻辑网络应用程序。一块物理硬件上可能运行有多个主机，只要它们是可以独立寻址的。</td></tr><tr><td>Downstream</td><td align="center">下游</td><td align="right">下游主机连接到 Envoy，发送请求并接收响应。</td></tr><tr><td>Upstream</td><td align="center">上游</td><td align="right">上游主机接收来自 Envoy 的连接和请求，并返回响应。</td></tr><tr><td>Mesh</td><td align="center">网格</td><td align="right">一组主机，协调好以提供一致的网络拓扑。在本文档中，“Envoy mesh”是一组 Envoy 代理，它们构成了分布式系统的消息传递基础，这个分布式系统由很多不同服务和应用程序平台组成。</td></tr><tr><td>Runtime configuration</td><td align="center">运行时配置</td><td align="right">外置实时配置系统，和 Envoy 一起部署。可以更改配置设置，影响操作，而无需重启 Envoy 或更改主要配置。</td></tr></tbody></table><h4 id="请求转发概念"><a href="#请求转发概念" class="headerlink" title="请求转发概念"></a>请求转发概念</h4><table><thead><tr><th>Concept</th><th align="center">概念</th><th align="right">描述</th></tr></thead><tbody><tr><td>Listener</td><td align="center">监听器</td><td align="right">监听器是命名网地址（例如，端口、unix domain socket等)，可以被下游客户端连接。Envoy 暴露一个或者多个监听器给下游主机连接</td></tr><tr><td>Router</td><td align="center">路由</td><td align="right">路由是一组将虚拟主机(virtual hosts)与群集(cluster)匹配的规则(rule)，允许您创建流量转移规则</td></tr><tr><td>Cluster</td><td align="center">集群</td><td align="right">集群是指 Envoy 连接到的逻辑上相同的一组上游主机</td></tr><tr><td>Endpoint</td><td align="center">端点</td><td align="right">Envoy将“端点(Endpoint)”定义为群集(Cluster)中可用的IP和端口</td></tr></tbody></table><h4 id="xDS-API概念"><a href="#xDS-API概念" class="headerlink" title="xDS API概念"></a>xDS API概念</h4><p>xds API 是 Envoy 定义的，用于控制平面和数据平面之间数据交互的通讯协议。</p><table><thead><tr><th>Concept</th><th align="center">全称</th></tr></thead><tbody><tr><td>LDS</td><td align="center">Listener Discovery Service</td></tr><tr><td>RDS</td><td align="center">Route Discovery Service</td></tr><tr><td>CDS</td><td align="center">Cluster Discovery Service</td></tr><tr><td>EDS</td><td align="center">Endpoint Discovery Service</td></tr><tr><td>ADS</td><td align="center">Aggregated Discovery Service</td></tr><tr><td>HDS</td><td align="center">Health Discovery Service</td></tr><tr><td>SDS</td><td align="center">Secret Discovery Service</td></tr><tr><td>MS</td><td align="center">Secret Discovery Service</td></tr><tr><td>RLS</td><td align="center">Rate Limit Service</td></tr></tbody></table><h4 id="和xDS相关的其他概念还有："><a href="#和xDS相关的其他概念还有：" class="headerlink" title="和xDS相关的其他概念还有："></a>和xDS相关的其他概念还有：</h4><table><thead><tr><th>概念</th><th align="center">描述</th></tr></thead><tbody><tr><td>Management Server</td><td align="center">实现v2 Envoy API的逻辑服务器。这不一定是单个物理机器，因为它可以被复制&#x2F;分片，并且用于不同xDS API的API服务可以在不同的物理机器上实现。</td></tr></tbody></table><h4 id="区域概念"><a href="#区域概念" class="headerlink" title="区域概念"></a>区域概念</h4><table><thead><tr><th>Concept</th><th align="center">概念</th><th align="right">描述</th></tr></thead><tbody><tr><td>Locality</td><td align="center">局域性</td><td align="right">Envoy实例或端点运行的位置。这包括地域&#x2F;region，分区&#x2F;zone和子分区&#x2F;sub-zone标识。</td></tr><tr><td>Region</td><td align="center">地域</td><td align="right">分区（zone）所在的地理区域。</td></tr><tr><td>Zone</td><td align="center">分区</td><td align="right">AWS中的Availability Zone (AZ), GCP中的Zone</td></tr><tr><td>Sub-zone</td><td align="center">子分区</td><td align="right">Envoy实例或端点在分区内运行的位置。这允许在分区内存在多个负载均衡目标。</td></tr></tbody></table><h2 id="Envoy部署类型"><a href="#Envoy部署类型" class="headerlink" title="Envoy部署类型"></a>Envoy部署类型</h2><p>Envoy 有多种使用场景，其中更多情况下Envoy用于以容器编排系统为底层环境的服务网格中，并以sidecar的形式与主程序容器运行为单个Pod；</p><p>常见部署类型如下图所示：<br><img src="/images/envoy-1.png" alt="envoy-1"></p><ul><li>仅服务之间(东西流量)<ul><li>服务间 egress listener</li><li>服务间 ingress listener</li><li>可选外部服务 egress listener</li></ul></li><li>服务之间外加前端代理(南北流量)</li><li>服务间、前端代理、双向代理</li></ul><h3 id="仅服务之间"><a href="#仅服务之间" class="headerlink" title="仅服务之间"></a>仅服务之间</h3><p><img src="/images/envoy-4.png" alt="envoy-4"></p><p>上图显示了最简单的 Envoy 部署，它使用 Envoy 作为面向服务架构（SOA）内部的所有流量的通信总线。在这种情况下，Envoy 暴露了几个用于本地来源流量以及服务流量的监听器<code>egress listener</code>和<code>igress listener</code>。</p><h4 id="服务间-egress-listener"><a href="#服务间-egress-listener" class="headerlink" title="服务间 egress listener"></a>服务间 egress listener</h4><p>这是应用程序与基础结构中的其他服务对话所使用的端口。 例如，<code>http://localhost:9001</code>。HTTP 和 gRPC请求使用 HTTP&#x2F;1.1 host 头或 HTTP&#x2F;2:authority 头来表示请求指向哪个远程集群。根据配置中的详细信息，Envoy 处理服务发现、负载平衡、速率限制等。服务只需要了解本地 Envoy，不需要关心网络拓扑结构，无论他们是在开发还是在生产中运行。<br>此监听器支持 HTTP&#x2F;1.1 或 HTTP&#x2F;2，具体取决于应用程序的功能。</p><h4 id="服务间-ingress-listener"><a href="#服务间-ingress-listener" class="headerlink" title="服务间 ingress listener"></a>服务间 ingress listener</h4><p>这是远程 Envoys 想要与本地 Envoys 通信时使用的端口。例如，<code>http://localhost:9211</code>。入向请求将通过配置的端口路由到本地服务。根据应用程序或负载平衡需求（例如，如果服务需要 HTTP 端口和 gRPC 端口），可能会涉及多个应用程序端口。 本地 Envoy 根据需要执行缓冲、熔断等。<br>我们的默认配置对所有 Envoy 相互间的通信使用 HTTP&#x2F;2 协议，无论应用程序在通过本地 Envoy 出向时使用的是 HTTP&#x2F;1.1 还是 HTTP&#x2F;2。 HTTP&#x2F;2 通过长连接和显式重置通知提供更好的性能。</p><h3 id="服务间外加前端代理"><a href="#服务间外加前端代理" class="headerlink" title="服务间外加前端代理"></a>服务间外加前端代理</h3><p><img src="/images/envoy-5.png" alt="envoy-5"></p><p>上图显示了作为 HTTP L7 边缘（前端）反向代理 Envoy 群集的 服务到服务 配置。反向代理提供以下功能：</p><ul><li>终止 TLS。</li><li>支持 HTTP&#x2F;1.1 和 HTTP&#x2F;2。</li><li>HTTP L7 路由支持。</li><li>前端 Envoy 与服务到服务的 Envoy 集群使用标准 <code>ingress port</code> 通信，并结合使用发现服务进行主机查找。因此，前端 Envoy 主机与任何其他 Envoy 主机的工作方式相同，除了他们不与其他服务搭配运行。这意味着以相同的方式操作他们并发出相同的统计数据。（Envoy容器分<code>Ingress Port</code>和<code>Egress Port</code>）</li></ul><h2 id="Envoy配置概述"><a href="#Envoy配置概述" class="headerlink" title="Envoy配置概述"></a>Envoy配置概述</h2><ul><li>启动时从Bootstrap配置文件中加载初始配置</li><li>静态配置</li><li>支持动态配置<ul><li>xDS API<ul><li>从配置文件加载配置</li><li>从管理服务器（Management Server）基于xds协议加载配置</li></ul></li><li>runtime<ul><li>某些关键特性（Feature flags）保存为key&#x2F;value数据</li><li>支持多层配置和覆盖机制</li></ul></li></ul></li><li>启用全动态配置机制后，仅极少数场景需要重新启动Envoy进程<ul><li>支持热重启</li></ul></li></ul><h2 id="Envoy配置中的重要概念"><a href="#Envoy配置中的重要概念" class="headerlink" title="Envoy配置中的重要概念"></a>Envoy配置中的重要概念</h2><ul><li>Bootstrap配置中几个重要的基础概念<ul><li>node：节点标识，以呈现给管理服务器并且例如用于标识目的；</li><li>static_resources：静态配置的资源，用于配置静态的listener、cluster和secret；</li><li>dynamic_resources：动态配置的资源，用于配置基于xDS API获取listener、cluster和secret配置的lds_config、cds_config和ads_config；</li><li>admin：Envoy内置的管理接口；</li><li>tracing：分布式跟踪；</li><li>layered_runtime：层级化的运行时，支持使用RTDS从管理服务器动态加载；</li><li>hds_config：使用HDS从管理服务器加载上游主机健康状态检测相关的配置；</li><li>overload_manager：过载管理器；</li><li>stats_sinks：统计信息接收器；</li><li>一般来说，侦听器和集群是最为常用基础配置，无论是以静态或者是动态方式提供；</li></ul></li></ul><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs prolog">&#123;<br>  <span class="hljs-string">&quot;node&quot;</span>: <span class="hljs-string">&quot;&#123;...&#125;&quot;</span>,<br>  <span class="hljs-string">&quot;static_resources&quot;</span>: <span class="hljs-string">&quot;&#123;...&#125;&quot;</span>,<br>  <span class="hljs-string">&quot;dynamic_resources&quot;</span>: <span class="hljs-string">&quot;&#123;...&#125;&quot;</span>,<br>  <span class="hljs-string">&quot;cluster_manager&quot;</span>: <span class="hljs-string">&quot;&#123;...&#125;&quot;</span>,<br>  <span class="hljs-string">&quot;hds_config&quot;</span>: <span class="hljs-string">&quot;&#123;...&#125;&quot;</span>,<br>  <span class="hljs-string">&quot;flags_path&quot;</span>: <span class="hljs-string">&quot;...&quot;</span>,<br>  <span class="hljs-string">&quot;stats_sinks&quot;</span>: [],<br>  <span class="hljs-string">&quot;stats_config&quot;</span>: <span class="hljs-string">&quot;&#123;...&#125;&quot;</span>,<br>  <span class="hljs-string">&quot;stats_flush_interval&quot;</span>: <span class="hljs-string">&quot;&#123;...&#125;&quot;</span>,<br>  <span class="hljs-string">&quot;watchdog&quot;</span>: <span class="hljs-string">&quot;&#123;...&#125;&quot;</span>,<br>  <span class="hljs-string">&quot;tracing&quot;</span>: <span class="hljs-string">&quot;&#123;...&#125;&quot;</span>,<br>  <span class="hljs-string">&quot;runtime&quot;</span>: <span class="hljs-string">&quot;&#123;...&#125;&quot;</span>,<br>  <span class="hljs-string">&quot;layered_runtime&quot;</span>: <span class="hljs-string">&quot;&#123;...&#125;&quot;</span>,<br>  <span class="hljs-string">&quot;admin&quot;</span>: <span class="hljs-string">&quot;&#123;...&#125;&quot;</span>,<br>  <span class="hljs-string">&quot;overload_manager&quot;</span>: <span class="hljs-string">&quot;&#123;...&#125;&quot;</span>,<br>  <span class="hljs-string">&quot;enable_dispatcher_stats&quot;</span>: <span class="hljs-string">&quot;...&quot;</span>,<br>  <span class="hljs-string">&quot;header_prefix&quot;</span>: <span class="hljs-string">&quot;...&quot;</span>,<br>  <span class="hljs-string">&quot;stats_server_version_override&quot;</span>: <span class="hljs-string">&quot;&#123;...&#125;&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="侦听器和集群配置概述"><a href="#侦听器和集群配置概述" class="headerlink" title="侦听器和集群配置概述"></a>侦听器和集群配置概述</h3><ul><li>侦听器<ul><li>接受来自下游客户端请求的入口端点，通常每个监听器都独立配置有一些网络级别（L3&#x2F;L4）的过滤器，当侦听器接接收到新连接时，配置好的连接本地过滤器将被实例化，并开始处理后续事件。通用监听器架构用于执行绝大多数不同的代理任务，例如tcp_proxy和http_connection_manager等代理类的过滤器负责路由请求。</li></ul></li><li>集群<ul><li>一组上游主机的逻辑组合</li><li>每个主机映射为集群中的一个端点</li><li>下游的请求被调度至上游主机</li></ul></li></ul><h3 id="Envoy-流量走势图"><a href="#Envoy-流量走势图" class="headerlink" title="Envoy 流量走势图"></a>Envoy 流量走势图</h3><p><img src="/images/envoy-2.png" alt="envoy-2"></p><h2 id="Envoy的配置方式"><a href="#Envoy的配置方式" class="headerlink" title="Envoy的配置方式"></a>Envoy的配置方式</h2><ul><li>Envoy的架构支持非常灵活的配置方式：简单部署场景可以使用纯静态配置，而更复杂的部署场景则可以逐步添加需要的动态配置机制；<ul><li>纯静态配置：用户自行提供侦听器、过滤器链、集群及HTTP路由（http代理场景），上游端点的发现仅可通过DNS服务进行，且配置的重新加载必须通过内置的热重启（hotrestart）完成；</li><li>仅使用EDS：EDS提供的端点发现功能可有效规避DNS的限制（响应中的最大记录数等）；</li><li>使用EDS和CDS：CDS能够让Envoy以优雅的方式添加、更新和删除上游集群，于是，初始配置时，Envoy无须事先了解所有上游集群；</li><li>EDS、CDS和RDS：动态发现路由配置；RDS与EDS、CDS一起使用时，为用户提供了构建复杂路由拓扑的能力（流量转移、蓝&#x2F;绿部署等）；</li><li>EDS、CDS、RDS和LDS：动态发现侦听器配置，包括内嵌的过滤器链；启用此四种发现服务后，除了较罕见的配置变动、证书轮替或更新Envoy程序之外，几乎无须再热重启Envoy；</li><li>EDS、CDS、RDS、LDS和SDS：动态发现侦听器密钥相关的证书、私钥及TLS会话票据，以及对证书验证逻辑的配置（受信任的根证书和撤销机制等）；</li></ul></li></ul><h2 id="Listener"><a href="#Listener" class="headerlink" title="Listener"></a>Listener</h2><p><code>Listerner</code>接受来自下游客户端请求，Envoy配置支持在单个进程内有任意数量的<code>Listerner</code>（监听器）。通常我们建议每台机器运行一个Envoy，而不必介意配置的监听器数量。这样可以更容易的操作，并有单一的统计来源。（备注：目前 Envoy 只支持 TCP 监听器）</p><h3 id="Listener配置"><a href="#Listener配置" class="headerlink" title="Listener配置"></a>Listener配置</h3><p>监听器配置可以在<code>Bootstrap</code>（引导程序）配置中静态声明，也可以通过监听器发现服务（Listerner Discovert Service&#x2F;LDS）动态声明。</p><h4 id="静态声明："><a href="#静态声明：" class="headerlink" title="静态声明："></a>静态声明：</h4><ul><li>纯静态资源配置方式主是直接在配置文件中通过static_resources配置参数明确定义listeners、clusters和secrets的配置方式，各配置参数的数据类型如下面的配置所示；<ul><li>其中，listeners用于配置纯静态类型的侦听器列表，clusters用于定义可用的集群列表及每个集群的端点，而可选的secrets用于定义TLS通信中用到数字证书等配置信息</li><li>具体使用时<code>admin</code>和<code>static_resources</code>两参数即可提供一个最小化的资源配置；</li></ul></li></ul><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs prolog">&#123;<br><span class="hljs-string">&quot;listeners&quot;</span>: [],<br><span class="hljs-string">&quot;clusters&quot;</span>: [],<br><span class="hljs-string">&quot;secrets&quot;</span>: []<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="Listener简易静态配置"><a href="#Listener简易静态配置" class="headerlink" title="Listener简易静态配置"></a>Listener简易静态配置</h4><p>侦听器主要用于定义Envoy监听的用于接收Downstreams请求的套接字、用于处理请求时调用的过滤器链及相关的其它配置属性；</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">listeners:</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span><br>  <span class="hljs-attr">address:</span><br>  <span class="hljs-attr">socket_address:</span> &#123; <span class="hljs-attr">address:</span> <span class="hljs-string">...</span>, <span class="hljs-attr">port_value:</span> <span class="hljs-string">...</span>, <span class="hljs-attr">protocol:</span> <span class="hljs-string">...</span> &#125;<br>  <span class="hljs-attr">filter_chains:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">filters:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span><br>    <span class="hljs-attr">config:</span><br></code></pre></td></tr></table></figure><p>L4过滤器<code>echo</code>主要用于演示网络过滤器API的功能，它会回显接收到的所有数据至下游的请求者；在配置文件中调用时其名称为<code>envoy.echo</code>；</p><p>下面是一个最简单的静态侦听器配置示例：</p><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-attribute">static_resources</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">listeners</span><span class="hljs-punctuation">:</span><br>     <span class="hljs-attribute">name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">containers_1</span><br>     <span class="hljs-attribute">address</span><span class="hljs-punctuation">:</span><br>       <span class="hljs-attribute">socket_address</span><span class="hljs-punctuation">:</span><br>         <span class="hljs-attribute">address</span><span class="hljs-punctuation">:</span> <span class="hljs-string">0.0.0.0</span><br>         <span class="hljs-attribute">port_value</span><span class="hljs-punctuation">:</span> <span class="hljs-string">15001</span><br>     <span class="hljs-attribute">filter_chains</span><span class="hljs-punctuation">:</span><br>     <span class="hljs-bullet">-</span> <span class="hljs-string">filters:</span><br>       <span class="hljs-bullet">-</span> <span class="hljs-string">name: envoy.echo</span><br></code></pre></td></tr></table></figure><h2 id="基于镜像启动第一个Envoy实例"><a href="#基于镜像启动第一个Envoy实例" class="headerlink" title="基于镜像启动第一个Envoy实例"></a>基于镜像启动第一个Envoy实例</h2><p>基于envoy的预制docker镜像启动实例时，需要额外自定义配置文件。Envoy镜像默认的配置文件在<code>/etc/envoy/envoy.yaml</code>但未必符合用户的使用需求，因此，用户一般需要自定义好配置文件，而后将其以存储卷的方式挂载进容器；</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">docker run --name envoy -p <span class="hljs-number">80</span>:<span class="hljs-number">15001</span> -v <span class="hljs-regexp">/root/</span>envoy.yaml:<span class="hljs-regexp">/etc/</span>envoy<span class="hljs-regexp">/envoy.yaml envoyproxy/</span>envoy-alpine:latest<br></code></pre></td></tr></table></figure><h2 id="Listener-Network-L3-x2F-L4-过滤器"><a href="#Listener-Network-L3-x2F-L4-过滤器" class="headerlink" title="Listener Network (L3&#x2F;L4) 过滤器"></a>Listener Network (L3&#x2F;L4) 过滤器</h2><ul><li>envoy内置了许多L3&#x2F;L4过滤器，例如<ul><li>代理类：TCP Proxy、HTTP connection manager、Thrift Proxy、Mongo proxy、Dubbo Proxy、ZooKeeper proxy、MySQL proxy和Redis proxy等；</li><li>其它：Client TLS authentication、Rate limit、Role Based Access Control (RBAC) Network Filter和Upstream Cluster from SNI等；</li></ul></li><li>HTTP connection manager<ul><li>HTTP connection manager自身是L3&#x2F;L4过滤器，它能够将原始字节转换为HTTP级别消息和事件（例如，headers和body等）</li><li>它还处理所有HTTP连接和请求共有的功能，例如访问日志记录、请求ID生成和跟踪、请求&#x2F;响应头操作、路由表管理和统计信息等；</li><li>与L3&#x2F;L4过滤器堆栈相似，Envoy还支持在HTTP连接管理器中使用HTTP级过滤器堆栈；</li><li>HTTP过滤器在L7运行，它们访问和操作HTTP请求和响应；例如，gRPC-JSON Transcoder Filter为gRPC后端公开REST API，并将请求和响应转换为相应的格式；</li><li>常用的HTTP过路器有Router、Rate limit、Health check、Gzip和Fault Injection等；</li></ul></li></ul><h3 id="L4过滤器tcp-proxy"><a href="#L4过滤器tcp-proxy" class="headerlink" title="L4过滤器tcp_proxy"></a>L4过滤器tcp_proxy</h3><ul><li>TCP代理过滤器在下游客户端及上游集群之间执行<code>1:1</code>网络连接代理</li><li>它可以单独用作隧道替换，也可以同其他过滤器（如MongoDB过滤器或速率限制过滤器）结合使用；</li><li>TCP代理过滤器严格执行由全局资源管理于为每个上游集群的全局资源管理器设定的连接限制<ul><li>TCP代理过滤器检查上游集群的资源管理器是否可以在不超过该集群的最大连接数的情况下创建连接；</li></ul></li><li>TCP代理过滤器可直接将请求路由至指定的集群，也能够在多个目标集群间基于权重进行调度转发；</li></ul><h4 id="在filters中需要注意的地方"><a href="#在filters中需要注意的地方" class="headerlink" title="在filters中需要注意的地方"></a>在filters中需要注意的地方</h4><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;...&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;config&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&#123;...&#125;&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;typed_config&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&#123;...&#125;&quot;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>每个L3&#x2F;L4的网络过滤器都有一个<code>config</code>或<code>typed_config</code>参数每个过滤器都有特定的配置，具体配置取决于要实例化的过滤器，只能设置<code>config</code>或<code>typed_config</code>其中一种。其中<code>typed_config</code>中<code>&quot;@type&quot;: type.googleapis.com/envoy.config.filter.network</code>是固定配置</p><h4 id="tcp-proxy过滤器配置语法："><a href="#tcp-proxy过滤器配置语法：" class="headerlink" title="tcp_proxy过滤器配置语法："></a>tcp_proxy过滤器配置语法：</h4><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs 1c">&#123;<br>  <span class="hljs-string">&quot;stat_prefix&quot;</span>: <span class="hljs-string">&quot;...&quot;</span>,            <span class="hljs-meta"># 用于统计数据中输出时使用的前缀字符；</span><br>  <span class="hljs-string">&quot;cluster&quot;</span>: <span class="hljs-string">&quot;...&quot;</span>,                <span class="hljs-meta"># 路由到的目标集群标识；</span><br>  <span class="hljs-string">&quot;weighted_clusters&quot;</span>: <span class="hljs-string">&quot;&#123;...&#125;&quot;</span>,<br>  <span class="hljs-string">&quot;metadata_match&quot;</span>: <span class="hljs-string">&quot;&#123;...&#125;&quot;</span>,<br>  <span class="hljs-string">&quot;idle_timeout&quot;</span>: <span class="hljs-string">&quot;&#123;...&#125;&quot;</span>,         <span class="hljs-meta"># 上下游连接间的超时时长，即没有发送和接收报文的超时时长；</span><br>  <span class="hljs-string">&quot;access_log&quot;</span>: [],                <span class="hljs-meta"># 访问日志；</span><br>  <span class="hljs-string">&quot;max_connect_attempts&quot;</span>: <span class="hljs-string">&quot;&#123;...&#125;&quot;</span>  <span class="hljs-meta"># 最大连接尝试次数；</span><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="一个配置示例："><a href="#一个配置示例：" class="headerlink" title="一个配置示例："></a>一个配置示例：</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">static_resources:</span><br>  <span class="hljs-attr">listeners:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">listener_0</span><br>    <span class="hljs-attr">address:</span><br>     <span class="hljs-attr">socket_address:</span> &#123; <span class="hljs-attr">address:</span> <span class="hljs-number">0.0</span><span class="hljs-number">.0</span><span class="hljs-number">.0</span>, <span class="hljs-attr">port_value:</span> <span class="hljs-number">80</span> &#125;<br>    <span class="hljs-attr">filter_chains:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">filters:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">envoy.tcp_proxy</span><br>        <span class="hljs-attr">typed_config:</span> <br>          <span class="hljs-string">&quot;@type&quot;</span><span class="hljs-string">:</span> <span class="hljs-string">type.googleapis.com/envoy.config.filter.network.tcp_proxy.v2.TcpProxy</span><br>          <span class="hljs-attr">stat_prefix:</span> <span class="hljs-string">tcp</span><br>          <span class="hljs-attr">cluster:</span> <span class="hljs-string">test_cluster</span><br></code></pre></td></tr></table></figure><h4 id="一个完整的TCP代理配置示例："><a href="#一个完整的TCP代理配置示例：" class="headerlink" title="一个完整的TCP代理配置示例："></a>一个完整的TCP代理配置示例：</h4><ul><li>下面的示例基于TCP代理将下游用户（本机）请求代理至外部的（egress）两个web服务器（如何区分Engress看<code>clusters</code>中代理的地址是否是<code>127.0.0.1</code>，如果是<code>127.0.0.1</code>则表示是<code>Ingress</code>，如果是域名或是内网地址说明是<code>Egress</code>）</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">static_resources:</span><br>  <span class="hljs-attr">listeners:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">listener_0</span><br>    <span class="hljs-attr">address:</span><br>     <span class="hljs-attr">socket_address:</span> &#123; <span class="hljs-attr">address:</span> <span class="hljs-number">0.0</span><span class="hljs-number">.0</span><span class="hljs-number">.0</span>, <span class="hljs-attr">port_value:</span> <span class="hljs-number">80</span> &#125;<br>    <span class="hljs-attr">filter_chains:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">filters:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">envoy.tcp_proxy</span><br>        <span class="hljs-attr">typed_config:</span><br>          <span class="hljs-string">&quot;@type&quot;</span><span class="hljs-string">:</span> <span class="hljs-string">type.googleapis.com/envoy.config.filter.network.tcp_proxy.v2.TcpProxy</span><br>          <span class="hljs-attr">stat_prefix:</span> <span class="hljs-string">tcp</span><br>          <span class="hljs-attr">cluster:</span> <span class="hljs-string">test_cluster</span><br>  <span class="hljs-attr">clusters:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">test_cluster</span><br>    <span class="hljs-attr">connect_timeout:</span> <span class="hljs-number">0.</span><span class="hljs-string">25s</span><br>    <span class="hljs-attr">type:</span> <span class="hljs-string">STATIC</span><br>    <span class="hljs-attr">lb_policy:</span> <span class="hljs-string">ROUND_ROBIN</span><br>    <span class="hljs-attr">load_assignment:</span><br>      <span class="hljs-attr">cluster_name:</span> <span class="hljs-string">test_cluster</span><br>      <span class="hljs-attr">endpoints:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">lb_endpoints:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">endpoint:</span><br>            <span class="hljs-attr">address:</span><br>              <span class="hljs-attr">socket_address:</span> &#123; <span class="hljs-attr">address:</span> <span class="hljs-number">172.17</span><span class="hljs-number">.0</span><span class="hljs-number">.3</span>, <span class="hljs-attr">port_value:</span> <span class="hljs-number">80</span> &#125;<br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">endpoint:</span><br>            <span class="hljs-attr">address:</span><br>              <span class="hljs-attr">socket_address:</span> &#123; <span class="hljs-attr">address:</span> <span class="hljs-number">172.17</span><span class="hljs-number">.0</span><span class="hljs-number">.4</span>, <span class="hljs-attr">port_value:</span> <span class="hljs-number">80</span> &#125;<br></code></pre></td></tr></table></figure><h4 id="使用Docker-compose方式模拟Enovy以Sidecar方式运行"><a href="#使用Docker-compose方式模拟Enovy以Sidecar方式运行" class="headerlink" title="使用Docker-compose方式模拟Enovy以Sidecar方式运行"></a>使用Docker-compose方式模拟Enovy以Sidecar方式运行</h4><ul><li>创建一个<code>docker-compose.yaml</code>写入如下内容：</li></ul><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-attribute">version</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&#x27;3&#x27;</span><br><span class="hljs-attribute">services</span><span class="hljs-punctuation">: </span><br>  <span class="hljs-attribute">envoy</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-attribute">image</span><span class="hljs-punctuation">:</span> <span class="hljs-string">envoyproxy/envoy-alpine:latest</span><br>    <span class="hljs-attribute">volumes</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">./envoy.yaml:/etc/envoy/envoy.yaml</span><br>    <span class="hljs-attribute">network_mode</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;service:mainserver&quot;</span><br>    <span class="hljs-attribute">depends_on</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">mainserver</span><br><br>  <span class="hljs-attribute">mainserver</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-attribute">image</span><span class="hljs-punctuation">:</span> <span class="hljs-string">ikubernetes/mini-http-server:v0.3</span><br>    <span class="hljs-attribute">networks</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-attribute">envoymesh</span><span class="hljs-punctuation">:</span><br>        <span class="hljs-attribute">aliases</span><span class="hljs-punctuation">:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">webserver</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">httpserver</span><br><br><span class="hljs-attribute">networks</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">envoymesh</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&#123;&#125;</span><br></code></pre></td></tr></table></figure><ul><li>创建一个<code>envoy.yaml</code>文件并写入如下内容，以下是<code>tcp_proxy Ingress</code>代理；</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">static_resources:</span><br>  <span class="hljs-attr">listeners:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">listener_0</span><br>    <span class="hljs-attr">address:</span><br>      <span class="hljs-attr">socket_address:</span> &#123;<span class="hljs-attr">address:</span> <span class="hljs-number">0.0</span><span class="hljs-number">.0</span><span class="hljs-number">.0</span>, <span class="hljs-attr">port_value:</span> <span class="hljs-number">80</span>&#125;<br>    <span class="hljs-attr">filter_chains:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">filters:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">envoy.tcp_proxy</span><br>        <span class="hljs-attr">typed_config:</span><br>          <span class="hljs-string">&quot;@type&quot;</span><span class="hljs-string">:</span> <span class="hljs-string">type.googleapis.com/envoy.config.filter.network.tcp_proxy.v2.TcpProxy</span><br>          <span class="hljs-attr">stat_prefix:</span> <span class="hljs-string">ingress_tcp</span><br>          <span class="hljs-attr">cluster:</span> <span class="hljs-string">test_cluster</span><br>  <span class="hljs-attr">clusters:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">test_cluster</span><br>    <span class="hljs-attr">connect_timeout:</span> <span class="hljs-number">0.</span><span class="hljs-string">25s</span><br>    <span class="hljs-attr">type:</span> <span class="hljs-string">STATIC</span><br>    <span class="hljs-attr">lb_policy:</span> <span class="hljs-string">ROUND_ROBIN</span><br>    <span class="hljs-attr">load_assignment:</span><br>      <span class="hljs-attr">cluster_name:</span> <span class="hljs-string">test_cluster</span><br>      <span class="hljs-attr">endpoints:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">lb_endpoints:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">endpoint:</span> <br>            <span class="hljs-attr">address:</span><br>              <span class="hljs-attr">socket_address:</span> &#123;<span class="hljs-attr">address:</span> <span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>, <span class="hljs-attr">port_value:</span> <span class="hljs-number">8081</span>&#125;   <br></code></pre></td></tr></table></figure><ul><li>执行如下命令启动</li></ul><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs gams">[root@k8s-m<span class="hljs-number">-1001501017</span> ~]# docker-compose -f docker-compose.yaml up<br><span class="hljs-function"><span class="hljs-title">Creating</span></span> root_mainserver_1 ... done<br><span class="hljs-function"><span class="hljs-title">Creating</span></span> root_envoy_1      ... done<br></code></pre></td></tr></table></figure><ul><li>执行如下命令返回当前容器名称（访问br网口地址）</li></ul><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs dns">[root@k8s-m-<span class="hljs-number">1001501017</span> overlord]# curl <span class="hljs-number">172.17.0.2</span>/hostname<br>Hostname: a4ec<span class="hljs-number">27589203</span>.<br></code></pre></td></tr></table></figure><h3 id="L4过滤器http-connection-manager"><a href="#L4过滤器http-connection-manager" class="headerlink" title="L4过滤器http_connection_manager"></a>L4过滤器http_connection_manager</h3><ul><li>http_connection_manager通过引入L7过滤器链实现了对http协议的操纵，其中router过滤器用于配置路由转发；</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">listeners:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span><br>    <span class="hljs-attr">address:</span><br>      <span class="hljs-attr">socket_address:</span> &#123; <span class="hljs-attr">address:</span> <span class="hljs-string">...</span>, <span class="hljs-attr">port_value:</span> <span class="hljs-string">...</span>, <span class="hljs-attr">protocol:</span> <span class="hljs-string">...</span> &#125;<br>    <span class="hljs-attr">filter_chains:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">filters:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">envoy.http_connection_manager</span><br>        <span class="hljs-attr">config:</span><br>          <span class="hljs-attr">condec_type:</span> <span class="hljs-string">...</span>         <span class="hljs-comment"># 连接管理器使用的编解码器类型，可用值有AUTO、HTTP1和HTTP2；</span><br>          <span class="hljs-attr">stat_prefix:</span> <span class="hljs-string">...</span>         <span class="hljs-comment"># 统计信息中使用的易读性的信息前缀；</span><br>          <span class="hljs-attr">route_config:</span>            <span class="hljs-comment"># 静态路由配置；动态配置应该使用rds字段进行指定；</span><br>            <span class="hljs-attr">name:</span> <span class="hljs-string">...</span>              <span class="hljs-comment"># 路由配置的名称；</span><br>            <span class="hljs-attr">virtual_hosts:</span>         <span class="hljs-comment"># 虚拟主机列表，用于构成路由表；</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">...</span>            <span class="hljs-comment"># 虚拟主机的逻辑名称，用于统计信息，与路由无关；</span><br>              <span class="hljs-attr">domains:</span> []          <span class="hljs-comment"># 当前虚拟主机匹配的域名列表，支持使用“*”通配符；匹配搜索次序为精确匹配、前缀通配、后缀通配及完全通配；</span><br>              <span class="hljs-attr">routes:</span> []           <span class="hljs-comment"># 路由列表，按顺序搜索，第一个匹配到路由信息；</span><br>          <span class="hljs-attr">http_filters:</span>            <span class="hljs-comment"># 定义http过滤器链</span><br>          <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">envoy.router</span>     <span class="hljs-comment"># 调用的过滤器为envoy.router</span><br></code></pre></td></tr></table></figure><ul><li>提示：<ul><li>L4过滤器<code>http_connection_manager</code>在<code>http_filters</code>中引入了L7的<code>router</code>过滤器；</li><li>处理请求时，Envoy首先根据下游客户端请求的“host”来搜索虚拟主机列表中各virtual_host中的domains列表中的定义，第一个匹配到的Domain的定义所属的virtual_host即可处理请求的虚拟主机；</li><li>而后搜索当前虚拟主机中的routes列表中的路由列表中各路由条目的match的定义，第一个匹配到的match后的路由机制（route、redirect或direct_response）即生效；</li></ul></li></ul><h4 id="HTTP-L7路由基础配置"><a href="#HTTP-L7路由基础配置" class="headerlink" title="HTTP L7路由基础配置"></a>HTTP L7路由基础配置</h4><ul><li>route_config.virtual_hosts.routes配置的路由信息用于将下游的客户端请求路由至合适的上游集群中某Server上；<ul><li>其路由方式是将url匹配match字段的定义<ul><li>match字段可通过prefix（前缀）、path（路径）或regex（正则表达式）三者之一来表示匹配模式；</li></ul></li><li>与match相关的请求将由route、redirect或direct_response三个字段其中之一完成路由；</li><li>由route定义的路由目标必须是cluster（上游集群名称）、cluster_header（根据请求标头中的cluster_header的值确定目标集群）或weighted_clusters（路由目标有多个集群，每个集群拥有一定的权重）其中之一；</li><li>redirect则返回一个重定向。</li><li>direct_response直接返回任意HTTP响应，无需代理。</li></ul></li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">routes:</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">...</span>        <span class="hljs-comment"># 此路由条目的名称；</span><br>  <span class="hljs-attr">match:</span><br>    <span class="hljs-attr">prefix:</span> <span class="hljs-string">...</span>    <span class="hljs-comment"># 请求的URL的前缀；</span><br>  <span class="hljs-attr">route:</span>           <span class="hljs-comment"># 路由条目；</span><br>    <span class="hljs-attr">cluster:</span>       <span class="hljs-comment"># 目标下游集群；</span><br></code></pre></td></tr></table></figure><h4 id="L7-Egress代理配置示例"><a href="#L7-Egress代理配置示例" class="headerlink" title="L7 Egress代理配置示例"></a>L7 Egress代理配置示例</h4><ul><li>下面是一个egress类型的Envoy配置示例，它定义了两个<code>virtual_host</code>，不过，发往第二个<code>virtual_host</code>的请求将被重定向至第一个；</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">static_resources:</span><br>  <span class="hljs-attr">listeners:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">listener_0</span><br>    <span class="hljs-attr">address:</span><br>      <span class="hljs-attr">socket_address:</span> &#123; <span class="hljs-attr">address:</span> <span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>, <span class="hljs-attr">port_value:</span> <span class="hljs-number">80</span> &#125;<br>    <span class="hljs-attr">filter_chains:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">filters:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">envoy.http_connection_manager</span><br>        <span class="hljs-attr">config:</span><br>          <span class="hljs-attr">stat_prefix:</span> <span class="hljs-string">egress_http</span><br>          <span class="hljs-attr">codec_type:</span> <span class="hljs-string">AUTO</span><br>          <span class="hljs-attr">route_config:</span><br>            <span class="hljs-attr">name:</span> <span class="hljs-string">test_route</span><br>            <span class="hljs-attr">virtual_hosts:</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">web_service_1</span><br>              <span class="hljs-attr">domains:</span> [<span class="hljs-string">&quot;*.ik8s.io&quot;</span>, <span class="hljs-string">&quot;ik8s.io&quot;</span>]<br>              <span class="hljs-attr">routes:</span><br>              <span class="hljs-bullet">-</span> <span class="hljs-attr">match:</span> &#123; <span class="hljs-attr">prefix:</span> <span class="hljs-string">&quot;/&quot;</span> &#125;<br>                <span class="hljs-attr">route:</span> &#123; <span class="hljs-attr">cluster:</span> <span class="hljs-string">web_cluster_1</span> &#125;<br>            <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">web_service_2</span><br>              <span class="hljs-attr">domains:</span> [<span class="hljs-string">&quot;*.k8scast.cn&quot;</span>,<span class="hljs-string">&quot;k8scast.cn&quot;</span>]<br>              <span class="hljs-attr">routes:</span><br>              <span class="hljs-bullet">-</span> <span class="hljs-attr">match:</span> &#123; <span class="hljs-attr">prefix:</span> <span class="hljs-string">&quot;/&quot;</span> &#125;<br>                <span class="hljs-attr">redirect:</span><br>                  <span class="hljs-attr">host_redirect:</span> <span class="hljs-string">&quot;www.ik8s.io&quot;</span><br>            <span class="hljs-attr">http_filters:</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">envoy.router</span><br>    <span class="hljs-attr">clusters:</span><br><span class="hljs-string">...</span><br></code></pre></td></tr></table></figure><ul><li>大白话理解<code>route_config</code><ul><li>在上面的示例中<code>route_config.virtual_hosts</code>配置了两个虚拟主机<code>web_service_1</code>和<code>web_service_2</code>，相当于nginx中两个<code>server</code>。用户的请求首先匹配<code>domains</code>字段，这里其实可以用nginx中<code>server</code>的<code>server_name</code>来理解，如果能匹配到<code>web_service_1</code>中的<code>domains</code>那么就继续匹配下面的<code>routes</code>字段，在<code>routes</code>字段中有个<code>match</code>字段，这里相当于nginx中的<code>location</code>（routes中可以有多个匹配规则）当用户请求的URL与此<code>match</code>匹配时将会执行下面的<code>route</code>字段中路由将请求转发至上游服务器，这里也就是相当于nginx的<code>upstream</code></li></ul></li></ul><h4 id="L7-Egress代理完整配置示例"><a href="#L7-Egress代理完整配置示例" class="headerlink" title="L7 Egress代理完整配置示例"></a>L7 Egress代理完整配置示例</h4><ul><li>为了便于在容器本地进行测试，可以在制作镜像时为其添加本地的测试客户端curl，其使用的Dockerfile如下，在以下示例中将使用docker-compose的方式模拟Envoy以Sidecar方式运行在Pod中，所以这时候一个Pod应该有两个容器，一个业务容器和一个Envoy容器，这里演示Egress的时候没有业务容器所以就直接在Envoy容器中使用curl发起请求以模拟Egress的场景。当我们在Envoy容器用使用curl请求<code>ik8s.io</code>或<code>k8scast.cn</code>的时候将被代理到指定的<code>cluster</code>中。</li></ul><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-keyword">FROM</span> envoyproxy/envoy-alpine:latest<br><br><span class="hljs-built_in">ADD</span> envoy.yaml /etc/envoy/<br><br><span class="hljs-built_in">RUN</span> apk update &amp;&amp; apk --no-cache <span class="hljs-built_in">add</span> curl<br></code></pre></td></tr></table></figure><ul><li>Envoy配置如下：</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">static_resources:</span><br>  <span class="hljs-attr">listeners:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">listener_0</span><br>    <span class="hljs-attr">address:</span><br>      <span class="hljs-attr">socket_address:</span> &#123; <span class="hljs-attr">address:</span> <span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>, <span class="hljs-attr">port_value:</span> <span class="hljs-number">80</span> &#125;<br>    <span class="hljs-attr">filter_chains:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">filters:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">envoy.http_connection_manager</span><br>        <span class="hljs-attr">config:</span><br>          <span class="hljs-attr">stat_prefix:</span> <span class="hljs-string">egress_http</span><br>          <span class="hljs-attr">codec_type:</span> <span class="hljs-string">AUTO</span><br>          <span class="hljs-attr">route_config:</span><br>            <span class="hljs-attr">name:</span> <span class="hljs-string">test_route</span><br>            <span class="hljs-attr">virtual_hosts:</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">web_service_1</span><br>              <span class="hljs-attr">domains:</span> [<span class="hljs-string">&quot;*.ik8s.io&quot;</span>, <span class="hljs-string">&quot;ik8s.io&quot;</span>]<br>              <span class="hljs-attr">routes:</span><br>              <span class="hljs-bullet">-</span> <span class="hljs-attr">match:</span> &#123; <span class="hljs-attr">prefix:</span> <span class="hljs-string">&quot;/&quot;</span> &#125;<br>                <span class="hljs-attr">route:</span> &#123; <span class="hljs-attr">cluster:</span> <span class="hljs-string">web_cluster_1</span> &#125;<br>            <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">web_service_2</span><br>              <span class="hljs-attr">domains:</span> [<span class="hljs-string">&quot;*.k8scast.cn&quot;</span>,<span class="hljs-string">&quot;k8scast.cn&quot;</span>]<br>              <span class="hljs-attr">routes:</span><br>              <span class="hljs-bullet">-</span> <span class="hljs-attr">match:</span> &#123; <span class="hljs-attr">prefix:</span> <span class="hljs-string">&quot;/&quot;</span> &#125;<br>                <span class="hljs-attr">route:</span> &#123; <span class="hljs-attr">cluster:</span> <span class="hljs-string">web_cluster_2</span> &#125; <br>          <span class="hljs-attr">http_filters:</span><br>          <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">envoy.router</span><br><br>  <span class="hljs-attr">clusters:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">web_cluster_1</span><br>    <span class="hljs-attr">connect_timeout:</span> <span class="hljs-number">0.</span><span class="hljs-string">25s</span><br>    <span class="hljs-attr">type:</span> <span class="hljs-string">STRICT_DNS</span><br>    <span class="hljs-attr">lb_policy:</span> <span class="hljs-string">ROUND_ROBIN</span><br>    <span class="hljs-attr">load_assignment:</span><br>      <span class="hljs-attr">cluster_name:</span> <span class="hljs-string">web_cluster_1</span> <br>      <span class="hljs-attr">endpoints:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">lb_endpoints:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">endpoint:</span><br>            <span class="hljs-attr">address:</span><br>              <span class="hljs-attr">socket_address:</span><br>                <span class="hljs-attr">address:</span> <span class="hljs-string">myservice</span><br>                <span class="hljs-attr">port_value:</span> <span class="hljs-number">8081</span><br><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">web_cluster_2</span><br>    <span class="hljs-attr">connect_timeout:</span> <span class="hljs-number">0.</span><span class="hljs-string">25s</span><br>    <span class="hljs-attr">type:</span> <span class="hljs-string">STRICT_DNS</span><br>    <span class="hljs-attr">lb_policy:</span> <span class="hljs-string">ROUND_ROBIN</span><br>    <span class="hljs-attr">load_assignment:</span><br>      <span class="hljs-attr">cluster_name:</span> <span class="hljs-string">web_cluster_2</span><br>      <span class="hljs-attr">endpoints:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">lb_endpoints:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">endpoint:</span><br>            <span class="hljs-attr">address:</span><br>              <span class="hljs-attr">socket_address:</span><br>                <span class="hljs-attr">address:</span> <span class="hljs-string">webserver1</span><br>                <span class="hljs-attr">port_value:</span> <span class="hljs-number">8081</span><br></code></pre></td></tr></table></figure><ul><li>Docker-Compose文件内容如下：</li></ul><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-attribute">version</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&#x27;3.3&#x27;</span><br><span class="hljs-attribute">services</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">envoy</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-attribute">build</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-attribute">context</span><span class="hljs-punctuation">:</span> <span class="hljs-string">.</span><br>      <span class="hljs-attribute">dockerfile</span><span class="hljs-punctuation">:</span> <span class="hljs-string">Dockerfile-envoy</span><br>    <span class="hljs-attribute">volumes</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">./envoy.yaml:/etc/envoy/envoy.yaml</span><br>    <span class="hljs-attribute">networks</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-attribute">envoymesh</span><span class="hljs-punctuation">:</span><br>        <span class="hljs-attribute">aliases</span><span class="hljs-punctuation">:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">envoy</span><br>    <span class="hljs-attribute">depends_on</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">webserver1</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">webserver2</span><br>    <span class="hljs-attribute">expose</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;80&quot;</span><br><br>  <span class="hljs-attribute">webserver1</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-attribute">image</span><span class="hljs-punctuation">:</span> <span class="hljs-string">ikubernetes/mini-http-server:v0.3</span><br>    <span class="hljs-attribute">networks</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-attribute">envoymesh</span><span class="hljs-punctuation">:</span><br>        <span class="hljs-attribute">aliases</span><span class="hljs-punctuation">:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">webserver1</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">myservice</span><br>    <span class="hljs-attribute">expose</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;8081&quot; </span><br><br>  <span class="hljs-attribute">webserver2</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-attribute">image</span><span class="hljs-punctuation">:</span> <span class="hljs-string">ikubernetes/mini-http-server:v0.3</span><br>    <span class="hljs-attribute">networks</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-attribute">envoymesh</span><span class="hljs-punctuation">:</span><br>        <span class="hljs-attribute">aliases</span><span class="hljs-punctuation">:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">webserver2</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">myservice</span><br>    <span class="hljs-attribute">expose</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;8081&quot;</span><br>    <br><span class="hljs-attribute">networks</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">envoymesh</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&#123;&#125;</span><br></code></pre></td></tr></table></figure><ul><li>而后于容器的交互式接口中即可发起测试</li></ul><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs awk">[root@k8s-m-<span class="hljs-number">1001501017</span> overlord]<span class="hljs-comment"># docker ps</span><br>CONTAINER ID        IMAGE                               COMMAND                  CREATED             STATUS              PORTS               NAMES<br><span class="hljs-number">6</span>f996e7d349e        test_envoy                          <span class="hljs-string">&quot;/docker-entrypoint.…&quot;</span>   <span class="hljs-number">11</span> seconds ago      Up <span class="hljs-number">11</span> seconds       <span class="hljs-number">80</span><span class="hljs-regexp">/tcp, 10000/</span>tcp   test_envoy_1<br><span class="hljs-number">4</span>c17cf4ce9d8        ikubernetes<span class="hljs-regexp">/mini-http-server:v0.3   &quot;/</span>bin<span class="hljs-regexp">/httpserver&quot;        13 seconds ago      Up 11 seconds       8081/</span>tcp            test_webserver2_1<br><span class="hljs-number">28</span>ca847a6bd2        ikubernetes<span class="hljs-regexp">/mini-http-server:v0.3   &quot;/</span>bin<span class="hljs-regexp">/httpserver&quot;        13 seconds ago      Up 11 seconds       8081/</span>tcp            test_webserver1_1<br></code></pre></td></tr></table></figure><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs autoit">[root<span class="hljs-symbol">@k8s</span>-m<span class="hljs-number">-1001501017</span> overlord]<span class="hljs-meta"># docker exec -it 6f996e7d349e /bin/sh</span><br>/ <span class="hljs-meta"># curl -H <span class="hljs-string">&#x27;host: ik8s.io&#x27;</span> 127.0.0.1</span><br>This is a website server by a Go HTTP server.<br>/ <span class="hljs-meta"># curl -H <span class="hljs-string">&#x27;host: ik8s.io&#x27;</span> 127.0.0.1/hostname</span><br>Hostname: <span class="hljs-number">4</span>c17cf4ce9d8.<br>/ <span class="hljs-meta"># curl -H <span class="hljs-string">&#x27;host: ik8s.io&#x27;</span> 127.0.0.1/hostname</span><br>Hostname: <span class="hljs-number">28</span>ca847a6bd2.<br>/ <span class="hljs-meta"># curl -H <span class="hljs-string">&#x27;host: ik8s.io&#x27;</span> 127.0.0.1/hostname</span><br>Hostname: <span class="hljs-number">4</span>c17cf4ce9d8.<br>/ <span class="hljs-meta"># curl -H <span class="hljs-string">&#x27;host: ik8s.io&#x27;</span> 127.0.0.1/hostname</span><br>Hostname: <span class="hljs-number">28</span>ca847a6bd2.<br>/ <span class="hljs-meta"># curl -H <span class="hljs-string">&#x27;host: ik8s.io&#x27;</span> 127.0.0.1/hostname</span><br>Hostname: <span class="hljs-number">4</span>c17cf4ce9d8.<br>/ <span class="hljs-meta"># curl -H <span class="hljs-string">&#x27;host: ik8s.io&#x27;</span> 127.0.0.1/hostname</span><br>Hostname: <span class="hljs-number">28</span>ca847a6bd2.<br></code></pre></td></tr></table></figure><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs autoit">[root<span class="hljs-symbol">@k8s</span>-m<span class="hljs-number">-1001501017</span> overlord]<span class="hljs-meta"># docker exec -it 6f996e7d349e /bin/sh</span><br>/ <span class="hljs-meta"># curl -H <span class="hljs-string">&#x27;host: k8scast.cn&#x27;</span> 127.0.0.1/hostname</span><br>Hostname: <span class="hljs-number">28</span>ca847a6bd2.<br></code></pre></td></tr></table></figure><ul><li>从上面的envoy示例中我们可以看出，当我们请求<code>ik8s.io</code>的时候会被负载到两个不同的容器上，因为上面的<code>web_cluster_1</code>集群中<code>endpoints</code>下的<code>address</code>字段是名为<code>myservice</code>的名称。然而这个名称在<code>docker-compose</code>的定义中<code>webserver1</code>和<code>webserver2</code>都有一个别名叫<code>myservice</code>，所以在<code>STRICT_DNS</code>解析的时候会解析到两个不同的容器上。在看我们请求<code>k8scast.cn</code>的时候永远只会请求到<code>webserver1</code>容器上，因为<code>STRICT_DNS</code>通过名称解析只有一个容器的别名叫<code>webserver1</code>。</li></ul><h4 id="L7-Ingress代理配置示例"><a href="#L7-Ingress代理配置示例" class="headerlink" title="L7 Ingress代理配置示例"></a>L7 Ingress代理配置示例</h4><ul><li>在以下示例中将使用<code>docker-compose</code>模拟envoy以<code>Sidecar</code>的方式注入到Pod内和业务服务运行在同一Pod中。业务服务则监听于<code>127.0.0.1:8081</code>，由同一Pod内的envoy程序代理后暴露给外部访问；</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">static_resources:</span><br>  <span class="hljs-attr">listeners:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">listener_0</span><br>    <span class="hljs-attr">address:</span><br>      <span class="hljs-attr">socket_address:</span> &#123; <span class="hljs-attr">address:</span> <span class="hljs-number">0.0</span><span class="hljs-number">.0</span><span class="hljs-number">.0</span>, <span class="hljs-attr">port_value:</span> <span class="hljs-number">80</span> &#125;<br>    <span class="hljs-attr">filter_chains:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">filters:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">envoy.http_connection_manager</span><br>        <span class="hljs-attr">config:</span><br>          <span class="hljs-attr">stat_prefix:</span> <span class="hljs-string">ingress_http</span><br>          <span class="hljs-attr">codec_type:</span> <span class="hljs-string">AUTO</span><br>          <span class="hljs-attr">route_config:</span><br>            <span class="hljs-attr">name:</span> <span class="hljs-string">local_route</span><br>            <span class="hljs-attr">virtual_hosts:</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">local_service</span><br>              <span class="hljs-attr">domains:</span> [<span class="hljs-string">&quot;*&quot;</span>]<br>              <span class="hljs-attr">routes:</span><br>              <span class="hljs-bullet">-</span> <span class="hljs-attr">match:</span> &#123; <span class="hljs-attr">prefix:</span> <span class="hljs-string">&quot;/&quot;</span> &#125;<br>                <span class="hljs-attr">route:</span> &#123; <span class="hljs-attr">cluster:</span> <span class="hljs-string">local_service</span> &#125;<br>          <span class="hljs-attr">http_filters:</span><br>          <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">envoy.router</span><br><br>  <span class="hljs-attr">clusters:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">local_service</span><br>    <span class="hljs-attr">connect_timeout:</span> <span class="hljs-number">0.</span><span class="hljs-string">25s</span><br>    <span class="hljs-attr">type:</span> <span class="hljs-string">STATIC</span><br>    <span class="hljs-attr">lb_policy:</span> <span class="hljs-string">ROUND_ROBIN</span><br>    <span class="hljs-attr">load_assignment:</span><br>      <span class="hljs-attr">cluster_name:</span> <span class="hljs-string">local_service</span><br>      <span class="hljs-attr">endpoints:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">lb_endpoints:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">endpoint:</span><br>            <span class="hljs-attr">address:</span><br>              <span class="hljs-attr">socket_address:</span><br>                <span class="hljs-attr">address:</span> <span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span><br>                <span class="hljs-attr">port_value:</span> <span class="hljs-number">8081</span><br></code></pre></td></tr></table></figure><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-attribute">version</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&#x27;3&#x27;</span><br><span class="hljs-attribute">services</span><span class="hljs-punctuation">: </span><br>  <span class="hljs-attribute">envoy</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-attribute">image</span><span class="hljs-punctuation">:</span> <span class="hljs-string">envoyproxy/envoy-alpine:latest</span><br>    <span class="hljs-attribute">volumes</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">./envoy.yaml:/etc/envoy/envoy.yaml</span><br>    <span class="hljs-attribute">network_mode</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;service:mainserver&quot;</span><br>    <span class="hljs-attribute">depends_on</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">mainserver</span><br><br>  <span class="hljs-attribute">mainserver</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-attribute">image</span><span class="hljs-punctuation">:</span> <span class="hljs-string">ikubernetes/mini-http-server:v0.3</span><br>    <span class="hljs-attribute">networks</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-attribute">envoymesh</span><span class="hljs-punctuation">:</span><br>        <span class="hljs-attribute">aliases</span><span class="hljs-punctuation">:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">webserver</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">httpserver</span><br><br><span class="hljs-attribute">networks</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">envoymesh</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&#123;&#125;</span><br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@localhost ~]<span class="hljs-comment"># docker ps</span><br>CONTAINER ID        IMAGE                               COMMAND                  CREATED             STATUS              PORTS               NAMES<br>cfa6f41885c8        envoyproxy/envoy-alpine:latest      <span class="hljs-string">&quot;/docker-entrypoint.…&quot;</span>   10 seconds ago      Up 9 seconds                            ingress_envoy_1<br>c05cf9a1a59d        ikubernetes/mini-http-server:v0.3   <span class="hljs-string">&quot;/bin/httpserver&quot;</span>        10 seconds ago      Up 9 seconds        8081/tcp            ingress_mainserver_1<br></code></pre></td></tr></table></figure><figure class="highlight pf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs pf">[root@localhost ~]<span class="hljs-comment"># docker exec -it cfa6f41885c8 /bin/sh</span><br>/ <span class="hljs-comment"># ip -4 a</span><br><span class="hljs-number">1</span>: lo: <span class="hljs-variable">&lt;LOOPBACK,UP,LOWER_UP&gt;</span> mtu <span class="hljs-number">65536</span> qdisc noqueue <span class="hljs-keyword">state</span> UNKNOWN qlen <span class="hljs-number">1000</span><br>    <span class="hljs-keyword">inet</span> <span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>/<span class="hljs-number">8</span> scope host lo<br>       valid_lft forever preferred_lft forever<br><span class="hljs-number">32</span>: eth0@if33: <span class="hljs-variable">&lt;BROADCAST,MULTICAST,UP,LOWER_UP,M-DOWN&gt;</span> mtu <span class="hljs-number">1500</span> qdisc noqueue <span class="hljs-keyword">state</span> UP <br>    <span class="hljs-keyword">inet</span> <span class="hljs-number">172.20</span>.<span class="hljs-number">0.2</span>/<span class="hljs-number">16</span> brd <span class="hljs-number">172.20</span>.<span class="hljs-number">255.255</span> scope <span class="hljs-keyword">global</span> eth0<br>       valid_lft forever preferred_lft forever<br></code></pre></td></tr></table></figure><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">/ # netstat -ntlp<br>Active Internet connections (<span class="hljs-keyword">only</span> servers)<br>Proto Recv-Q Send-Q <span class="hljs-keyword">Local</span> Address           <span class="hljs-keyword">Foreign</span> Address         State       PID/Program <span class="hljs-type">name</span>    <br>tcp        <span class="hljs-number">0</span>      <span class="hljs-number">0</span> <span class="hljs-number">0.0</span><span class="hljs-number">.0</span><span class="hljs-number">.0</span>:<span class="hljs-number">80</span>              <span class="hljs-number">0.0</span><span class="hljs-number">.0</span><span class="hljs-number">.0</span>:*               <span class="hljs-keyword">LISTEN</span>      <span class="hljs-number">1</span>/envoy<br>tcp        <span class="hljs-number">0</span>      <span class="hljs-number">0</span> <span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.11</span>:<span class="hljs-number">35255</span>        <span class="hljs-number">0.0</span><span class="hljs-number">.0</span><span class="hljs-number">.0</span>:*               <span class="hljs-keyword">LISTEN</span>      -<br>tcp        <span class="hljs-number">0</span>      <span class="hljs-number">0</span> :::<span class="hljs-number">8081</span>                 :::*                    <span class="hljs-keyword">LISTEN</span>      -<br></code></pre></td></tr></table></figure><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs axapta">[root@localhost ~]<span class="hljs-meta"># curl 172.20.0.2</span><br>This <span class="hljs-keyword">is</span> a website <span class="hljs-keyword">server</span> <span class="hljs-keyword">by</span> a Go HTTP <span class="hljs-keyword">server</span>.<br><br>[root@localhost ~]<span class="hljs-meta"># curl 172.20.0.2/hostname</span><br>Hostname: c05cf9a1a59d.<br></code></pre></td></tr></table></figure><ul><li>这里我们可以看到其实是mainserver提供的服务</li></ul><h2 id="Cluster"><a href="#Cluster" class="headerlink" title="Cluster"></a>Cluster</h2><h3 id="Upstream-clusters"><a href="#Upstream-clusters" class="headerlink" title="Upstream clusters"></a>Upstream clusters</h3><ul><li>通常，集群代表了一组提供相同服务的上游服务器（端点）的组合，Envoy将通过Cluster来实现流量的负载均衡。Envoy可配置任意数量的上游集群，并使用Cluster Manager进行管理；<ul><li>集群需要在“预热”环节完成之后方能转为可用状态，这意味着集群管理器通过DNS解析或EDS服务完成端点初始化，以及健康状态检测成功之后才可用；</li><li>由集群管理器负责管理的各集群可以由用户静态配置，也可借助于CDS API动态获取；</li><li>集群中的每个成员由endpoint进行标识，它可由用户静态配置，也可通过EDS或DNS服务动态发现；<ul><li>Static：静态配置</li><li>Strict DNS：严格DNS，Envoy将持续和异步地解析指定的DNS目标，并将DNS结果中的返回的每个IP地址视为上游集群中可用成员；</li><li>Logical DNS：逻辑DNS，集群仅使用在需要启动新连接时返回的第一个IP地址，而非严格获取DNS查询的结果并假设它们构成整个上游集群；适用于必须通过DNS访问的大规模Web服务集群；</li><li>Original destination：当传入连接通过iptables的REDIRECT或TPROXY target或使用代理协议重定向到Envoy时，可以使用原始目标集群；</li><li>Endpoint discovery service (EDS)：EDS是一种基于GRPC或REST-JSON API的xDS管理服务器获取集群成员的服务发现方式；</li><li>Custom cluster：Envoy还支持在集群配置上的cluster_type字段中指定使用自定义集群发现机制；</li></ul></li></ul></li></ul><p><img src="/images/envoy-3.png" alt="envoy-3"></p><h3 id="Clusters-配置中常用参数"><a href="#Clusters-配置中常用参数" class="headerlink" title="Clusters 配置中常用参数"></a>Clusters 配置中常用参数</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">clusters:</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">...</span>                   <span class="hljs-comment"># 集群的唯一名称，且未提供alt_stat_name时将会被用于统计信息中；</span><br>  <span class="hljs-attr">alt_state_name:</span> <span class="hljs-string">...</span>         <span class="hljs-comment"># 统计信息中使用的集群代名称；</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">...</span>                   <span class="hljs-comment"># 用于解析集群（生成集群端点）时使用的服务发现类型，可用值有STATIC、STRICT_DNS、LOGICAL_DNS、ORIGINAL_DST和EDS等；</span><br>  <span class="hljs-attr">connect_timeout:</span> <span class="hljs-string">...</span>        <span class="hljs-comment"># 集群中主机连接超时时长</span><br>  <span class="hljs-attr">lb_policy:</span>                  <span class="hljs-comment"># 负载均衡算法，支持ROUND_ROBIN、LEAST_REQUEST、RING_HASH、RANDOM、MAGLEV和CLUSTER_PROVIDED；</span><br>  <span class="hljs-attr">load_assignment:</span>            <span class="hljs-comment"># 为STATIC、STRICT_DNS或LOGICAL_DNS类型的集群指定成员获取方式；EDS类型的集成要使用eds_cluster_config字段配置；</span><br>    <span class="hljs-attr">cluster_name:</span> <span class="hljs-string">...</span>         <span class="hljs-comment"># 集群名称；</span><br>    <span class="hljs-attr">endpoints:</span>                <span class="hljs-comment"># 端点列表；</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">locality:</span> &#123;&#125;            <span class="hljs-comment"># 标识上游主机所处的位置，通常以region、zone等进行标识；</span><br>      <span class="hljs-attr">lb_endpoints:</span>           <span class="hljs-comment"># 属于指定位置的端点列表；</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">endpoint:</span>             <span class="hljs-comment"># 端点定义；</span><br>          <span class="hljs-attr">address:</span>            <span class="hljs-comment"># 端点地址；</span><br>            <span class="hljs-attr">socket_adddress:</span>  <span class="hljs-comment"># 端点地址标识；</span><br>              <span class="hljs-attr">address:</span> <span class="hljs-string">...</span>    <span class="hljs-comment"># 端点IP地址；</span><br>              <span class="hljs-attr">port_value:</span> <span class="hljs-string">...</span> <span class="hljs-comment"># 端点端口；</span><br>              <span class="hljs-attr">protocol:</span> <span class="hljs-string">...</span>   <span class="hljs-comment"># 协议类型；</span><br></code></pre></td></tr></table></figure><h3 id="Cluster配置示例"><a href="#Cluster配置示例" class="headerlink" title="Cluster配置示例"></a>Cluster配置示例</h3><ul><li>静态Cluster的各Endpoint（端点）可以在配置中直接给出，也可借助DNS服务或EDS Api进行动态发现；</li><li>下面的示例直接给出了两个端点地址</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">clusters:</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">test_cluster</span><br>  <span class="hljs-attr">connect_timeout:</span> <span class="hljs-number">0.</span><span class="hljs-string">25s</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">STATIC</span><br>  <span class="hljs-attr">lb_policy:</span> <span class="hljs-string">ROUND_ROBIN</span><br>  <span class="hljs-attr">load_assignment:</span><br>    <span class="hljs-attr">cluster_name:</span> <span class="hljs-string">test_cluster</span><br>    <span class="hljs-attr">endpoints:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">lb_endpoints:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">endpoint:</span><br>          <span class="hljs-attr">address:</span><br>            <span class="hljs-attr">socket_address:</span> &#123; <span class="hljs-attr">address:</span> <span class="hljs-number">172.17</span><span class="hljs-number">.0</span><span class="hljs-number">.3</span>, <span class="hljs-attr">port_value:</span> <span class="hljs-number">80</span> &#125;<br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">endpoint:</span><br>          <span class="hljs-attr">address:</span><br>            <span class="hljs-attr">socket_address:</span> &#123; <span class="hljs-attr">address:</span> <span class="hljs-number">172.17</span><span class="hljs-number">.0</span><span class="hljs-number">.4</span>, <span class="hljs-attr">port_value:</span> <span class="hljs-number">80</span> &#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Etcd 备份恢复</title>
    <link href="/2019/09/11/etcd-Disaster-recovery/"/>
    <url>/2019/09/11/etcd-Disaster-recovery/</url>
    
    <content type="html"><![CDATA[<h3 id="配置Etcd环境变量"><a href="#配置Etcd环境变量" class="headerlink" title="配置Etcd环境变量"></a>配置Etcd环境变量</h3><p>在<code>/etc/profile.d</code>目录下创建<code>etcd.sh</code>文件将如下内容写入。</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli"><span class="hljs-keyword">alias</span> etcd_v2=&#x27;etcdctl <span class="hljs-params">--cert-file</span> <span class="hljs-string">/etc/kubernetes/pki/etcd/healthcheck-client.crt</span> \<br>              <span class="hljs-params">--key-file</span> <span class="hljs-string">/etc/kubernetes/pki/etcd/healthcheck-client.key</span>  \<br>              <span class="hljs-params">--ca-file</span> <span class="hljs-string">/etc/kubernetes/pki/etcd/ca.crt</span>  \<br>              <span class="hljs-params">--endpoints</span> https:<span class="hljs-string">//10.15.1.3</span><span class="hljs-function">:2379</span>,https:<span class="hljs-string">//10.15.1.4</span><span class="hljs-function">:2379</span>,https:<span class="hljs-string">//10.15.1.5</span><span class="hljs-function">:2379</span>&#x27;<br><br><span class="hljs-keyword">alias</span> etcd_v3=&#x27;ETCDCTL_API=3 \<br>    etcdctl   \<br>   <span class="hljs-params">--cert</span> <span class="hljs-string">/etc/kubernetes/pki/etcd/healthcheck-client.crt</span> \<br>   <span class="hljs-params">--key</span> <span class="hljs-string">/etc/kubernetes/pki/etcd/healthcheck-client.key</span> \<br>   <span class="hljs-params">--cacert</span> <span class="hljs-string">/etc/kubernetes/pki/etcd/ca.crt</span> \<br>    <span class="hljs-params">--endpoints</span> https:<span class="hljs-string">//10.15.1.3</span><span class="hljs-function">:2379</span>,https:<span class="hljs-string">//10.15.1.4</span><span class="hljs-function">:2379</span>,https:<span class="hljs-string">//10.15.1.5</span><span class="hljs-function">:2379</span>&#x27;<br></code></pre></td></tr></table></figure><h3 id="使用命令查看Etcd-API版本"><a href="#使用命令查看Etcd-API版本" class="headerlink" title="使用命令查看Etcd API版本"></a>使用命令查看Etcd API版本</h3><figure class="highlight d"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs d">[root<span class="hljs-keyword">@k8s</span>-m1 profile.d]# etcd_v3 <span class="hljs-keyword">version</span><br>etcdctl <span class="hljs-keyword">version</span>: <span class="hljs-number">3.2</span><span class="hljs-number">.24</span><br>API <span class="hljs-keyword">version</span>: <span class="hljs-number">3.2</span><br></code></pre></td></tr></table></figure><h3 id="Etcd备份"><a href="#Etcd备份" class="headerlink" title="Etcd备份"></a>Etcd备份</h3><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stata">[root@k8s-m1 overlord]# etcd_v3 snapshot <span class="hljs-keyword">save</span> <span class="hljs-keyword">test</span>.<span class="hljs-keyword">db</span><br>Snapshot saved at <span class="hljs-keyword">test</span>.<span class="hljs-keyword">db</span><br></code></pre></td></tr></table></figure><h3 id="Etcd还原"><a href="#Etcd还原" class="headerlink" title="Etcd还原"></a>Etcd还原</h3><h4 id="停止etcd-停止所有的Etcd服务"><a href="#停止etcd-停止所有的Etcd服务" class="headerlink" title="停止etcd(停止所有的Etcd服务)"></a>停止etcd(停止所有的Etcd服务)</h4><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs autoit">[root<span class="hljs-symbol">@k8s</span>-m1 overlord]<span class="hljs-meta"># systemctl stop etcd</span><br></code></pre></td></tr></table></figure><h4 id="删除etcd数据目录"><a href="#删除etcd数据目录" class="headerlink" title="删除etcd数据目录"></a>删除etcd数据目录</h4><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs autoit">[root<span class="hljs-symbol">@k8s</span>-m1 overlord]<span class="hljs-meta"># rm -rf /var/lib/etcd</span><br></code></pre></td></tr></table></figure><h4 id="分发备份文件"><a href="#分发备份文件" class="headerlink" title="分发备份文件"></a>分发备份文件</h4><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs angelscript"><span class="hljs-string">[root@k8s-m1 overlord]</span># scp test.db <span class="hljs-symbol">overlord@</span><span class="hljs-number">10.15</span><span class="hljs-number">.1</span><span class="hljs-number">.3</span>:/home/overlord/<br><span class="hljs-string">[root@k8s-m1 overlord]</span># scp test.db <span class="hljs-symbol">overlord@</span><span class="hljs-number">10.15</span><span class="hljs-number">.1</span><span class="hljs-number">.4</span>:/home/overlord/<br><span class="hljs-string">[root@k8s-m1 overlord]</span># scp test.db <span class="hljs-symbol">overlord@</span><span class="hljs-number">10.15</span><span class="hljs-number">.1</span><span class="hljs-number">.5</span>:/home/overlord/<br></code></pre></td></tr></table></figure><h4 id="恢复备份-在所有Etcd主机执行"><a href="#恢复备份-在所有Etcd主机执行" class="headerlink" title="恢复备份(在所有Etcd主机执行)"></a>恢复备份(在所有Etcd主机执行)</h4><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs awk">ETCDCTL_API=<span class="hljs-number">3</span> etcdctl  \<br>--name k8s-m1 --initial-advertise-peer-urls https:<span class="hljs-regexp">//</span><span class="hljs-number">10.15</span>.<span class="hljs-number">1.3</span>:<span class="hljs-number">2380</span> \<br>--initial-cluster k8s-m1=https:<span class="hljs-regexp">//</span><span class="hljs-number">10.15</span>.<span class="hljs-number">1.3</span>:<span class="hljs-number">2380</span>,k8s-m2=https:<span class="hljs-regexp">//</span><span class="hljs-number">10.15</span>.<span class="hljs-number">1.4</span>:<span class="hljs-number">2380</span>,k8s-m3=https:<span class="hljs-regexp">//</span><span class="hljs-number">10.15</span>.<span class="hljs-number">1.5</span>:<span class="hljs-number">2380</span> \<br>snapshot restore <span class="hljs-regexp">/root/</span>test.db \<br>--data-dir=<span class="hljs-regexp">/var/</span>lib<span class="hljs-regexp">/etcd/</span><br></code></pre></td></tr></table></figure><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs awk">ETCDCTL_API=<span class="hljs-number">3</span> etcdctl  \<br>--name k8s-m2 --initial-advertise-peer-urls https:<span class="hljs-regexp">//</span><span class="hljs-number">10.15</span>.<span class="hljs-number">1.4</span>:<span class="hljs-number">2380</span> \<br>--initial-cluster k8s-m1=https:<span class="hljs-regexp">//</span><span class="hljs-number">10.15</span>.<span class="hljs-number">1.3</span>:<span class="hljs-number">2380</span>,k8s-m2=https:<span class="hljs-regexp">//</span><span class="hljs-number">10.15</span>.<span class="hljs-number">1.4</span>:<span class="hljs-number">2380</span>,k8s-m3=https:<span class="hljs-regexp">//</span><span class="hljs-number">10.15</span>.<span class="hljs-number">1.5</span>:<span class="hljs-number">2380</span> \<br>snapshot restore <span class="hljs-regexp">/root/</span>test.db \<br>--data-dir=<span class="hljs-regexp">/var/</span>lib<span class="hljs-regexp">/etcd/</span><br></code></pre></td></tr></table></figure><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs awk">ETCDCTL_API=<span class="hljs-number">3</span> etcdctl  \<br>--name k8s-m3 --initial-advertise-peer-urls https:<span class="hljs-regexp">//</span><span class="hljs-number">10.15</span>.<span class="hljs-number">1.5</span>:<span class="hljs-number">2380</span> \<br>--initial-cluster k8s-m1=https:<span class="hljs-regexp">//</span><span class="hljs-number">10.15</span>.<span class="hljs-number">1.3</span>:<span class="hljs-number">2380</span>,k8s-m2=https:<span class="hljs-regexp">//</span><span class="hljs-number">10.15</span>.<span class="hljs-number">1.4</span>:<span class="hljs-number">2380</span>,k8s-m3=https:<span class="hljs-regexp">//</span><span class="hljs-number">10.15</span>.<span class="hljs-number">1.5</span>:<span class="hljs-number">2380</span> \<br>snapshot restore <span class="hljs-regexp">/root/</span>test.db \<br>--data-dir=<span class="hljs-regexp">/var/</span>lib<span class="hljs-regexp">/etcd/</span><br></code></pre></td></tr></table></figure><h4 id="启动Etcd服务"><a href="#启动Etcd服务" class="headerlink" title="启动Etcd服务"></a>启动Etcd服务</h4><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">systemctl <span class="hljs-literal">start</span> etcd<br></code></pre></td></tr></table></figure><h4 id="查询Etcd状态"><a href="#查询Etcd状态" class="headerlink" title="查询Etcd状态"></a>查询Etcd状态</h4><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs gherkin">[root<span class="hljs-meta">@k8s-m1</span> lib]<span class="hljs-comment"># etcd_v3 --write-out=table endpoint status</span><br>+------------------------+------------------+---------+---------+-----------+-----------+------------+<br>|<span class="hljs-string">        ENDPOINT        </span>|<span class="hljs-string">        ID        </span>|<span class="hljs-string"> VERSION </span>|<span class="hljs-string"> DB SIZE </span>|<span class="hljs-string"> IS LEADER </span>|<span class="hljs-string"> RAFT TERM </span>|<span class="hljs-string"> RAFT INDEX </span>|<br>+------------------------+------------------+---------+---------+-----------+-----------+------------+<br>|<span class="hljs-string"> https://10.15.1.3:2379 </span>|<span class="hljs-string"> daad158099a5cdca </span>|<span class="hljs-string">  3.2.24 </span>|<span class="hljs-string">  9.7 MB </span>|<span class="hljs-string">      true </span>|<span class="hljs-string">         2 </span>|<span class="hljs-string">        218 </span>|<br>|<span class="hljs-string"> https://10.15.1.4:2379 </span>|<span class="hljs-string"> 2717bbfe0f23b647 </span>|<span class="hljs-string">  3.2.24 </span>|<span class="hljs-string">  9.7 MB </span>|<span class="hljs-string">     false </span>|<span class="hljs-string">         2 </span>|<span class="hljs-string">        218 </span>|<br>|<span class="hljs-string"> https://10.15.1.5:2379 </span>|<span class="hljs-string"> 81183085587ceed2 </span>|<span class="hljs-string">  3.2.24 </span>|<span class="hljs-string">  9.7 MB </span>|<span class="hljs-string">     false </span>|<span class="hljs-string">         2 </span>|<span class="hljs-string">        218 </span>|<br>+------------------------+------------------+---------+---------+-----------+-----------+------------+<br></code></pre></td></tr></table></figure><h4 id="查询Kubernetes集群是否可用"><a href="#查询Kubernetes集群是否可用" class="headerlink" title="查询Kubernetes集群是否可用"></a>查询Kubernetes集群是否可用</h4><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">[root@k8s-m1 lib]<span class="hljs-comment"># kubectl get nodes -o wide</span><br>NAME     STATUS   ROLES    AGE    <span class="hljs-keyword">VERSION</span>   INTERNAL-IP   EXTERNAL-IP   OS-IMAGE                KERNEL-<span class="hljs-keyword">VERSION</span>          CONTAINER-RUNTIME<br>k8s-m1   Ready    <span class="hljs-keyword">master</span>   <span class="hljs-title">112d</span>   v1.<span class="hljs-number">13.5</span>   <span class="hljs-number">10.15</span>.<span class="hljs-number">1.3</span>     <span class="hljs-tag">&lt;none&gt;</span>        CentOS Linux <span class="hljs-number">7</span> (Core)   <span class="hljs-number">3.10</span>.<span class="hljs-number">0</span>-<span class="hljs-number">514</span>.el7.x86_64   docker://<span class="hljs-number">18.6</span>.<span class="hljs-number">3</span><br>k8s-m2   Ready    <span class="hljs-keyword">master</span>   <span class="hljs-title">112d</span>   v1.<span class="hljs-number">13.5</span>   <span class="hljs-number">10.15</span>.<span class="hljs-number">1.4</span>     <span class="hljs-tag">&lt;none&gt;</span>        CentOS Linux <span class="hljs-number">7</span> (Core)   <span class="hljs-number">3.10</span>.<span class="hljs-number">0</span>-<span class="hljs-number">514</span>.el7.x86_64   docker://<span class="hljs-number">18.6</span>.<span class="hljs-number">3</span><br>k8s-m3   Ready    <span class="hljs-keyword">master</span>   <span class="hljs-title">112d</span>   v1.<span class="hljs-number">13.5</span>   <span class="hljs-number">10.15</span>.<span class="hljs-number">1.5</span>     <span class="hljs-tag">&lt;none&gt;</span>        CentOS Linux <span class="hljs-number">7</span> (Core)   <span class="hljs-number">3.10</span>.<span class="hljs-number">0</span>-<span class="hljs-number">514</span>.el7.x86_64   docker://<span class="hljs-number">18.6</span>.<span class="hljs-number">3</span><br>k8s-n1   Ready    <span class="hljs-keyword">node</span>     <span class="hljs-title">112d</span>   v1.<span class="hljs-number">13.5</span>   <span class="hljs-number">10.15</span>.<span class="hljs-number">1.6</span>     <span class="hljs-tag">&lt;none&gt;</span>        CentOS Linux <span class="hljs-number">7</span> (Core)   <span class="hljs-number">3.10</span>.<span class="hljs-number">0</span>-<span class="hljs-number">514</span>.el7.x86_64   docker://<span class="hljs-number">18.6</span>.<span class="hljs-number">3</span><br>k8s-n2   Ready    <span class="hljs-keyword">node</span>     <span class="hljs-title">112d</span>   v1.<span class="hljs-number">13.5</span>   <span class="hljs-number">10.15</span>.<span class="hljs-number">1.7</span>     <span class="hljs-tag">&lt;none&gt;</span>        CentOS Linux <span class="hljs-number">7</span> (Core)   <span class="hljs-number">3.10</span>.<span class="hljs-number">0</span>-<span class="hljs-number">514</span>.el7.x86_64   docker://<span class="hljs-number">18.6</span>.<span class="hljs-number">3</span><br></code></pre></td></tr></table></figure><h3 id="Etcd数据压缩"><a href="#Etcd数据压缩" class="headerlink" title="Etcd数据压缩"></a>Etcd数据压缩</h3><p>etcd默认不会自动进行数据压缩，etcd保存了keys的历史信息，数据频繁的改动会导致数据版本越来越多，相对应的数据库就会越来越大。etcd数据库大小默认2GB,当在etcd出现以下日志时，说明数据库空间占满，需要进行数据压缩腾出空间。</p><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs subunit"><span class="hljs-keyword">Error </span>from server: etcdserver: mvcc: database space exceeded<br></code></pre></td></tr></table></figure><h4 id="获取历史版本号-在Etcd主机执行以下命令"><a href="#获取历史版本号-在Etcd主机执行以下命令" class="headerlink" title="获取历史版本号:(在Etcd主机执行以下命令)"></a>获取历史版本号:(在Etcd主机执行以下命令)</h4><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-literal">[<span class="hljs-identifier">root</span>@<span class="hljs-identifier">k8s</span>-<span class="hljs-identifier">m1</span> <span class="hljs-identifier">overlord</span>]</span># ver=<span class="hljs-constructor">$(ETCDCTL_API=3 <span class="hljs-params">etcdctl</span> --<span class="hljs-params">write</span>-<span class="hljs-params">out</span>=<span class="hljs-string">&quot;json&quot;</span> <span class="hljs-params">endpoint</span> <span class="hljs-params">status</span> | <span class="hljs-params">egrep</span> -<span class="hljs-params">o</span> &#x27;<span class="hljs-string">&quot;revision&quot;</span>:[0-9]<span class="hljs-operator">*</span>&#x27; | <span class="hljs-params">egrep</span> -<span class="hljs-params">o</span> &#x27;[0-9].<span class="hljs-operator">*</span>&#x27;)</span><br></code></pre></td></tr></table></figure><h4 id="压缩旧版本-在所有Etcd主机执行"><a href="#压缩旧版本-在所有Etcd主机执行" class="headerlink" title="压缩旧版本(在所有Etcd主机执行)"></a>压缩旧版本(在所有Etcd主机执行)</h4><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">[root@k8s-m1 overlord]# <span class="hljs-attribute">ETCDCTL_API</span>=3 etcdctl compact <span class="hljs-variable">$ver</span><br></code></pre></td></tr></table></figure><h4 id="清理碎片-在所有Etcd主机执行"><a href="#清理碎片-在所有Etcd主机执行" class="headerlink" title="清理碎片(在所有Etcd主机执行)"></a>清理碎片(在所有Etcd主机执行)</h4><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs autoit">[root<span class="hljs-symbol">@k8s</span>-m1 overlord]<span class="hljs-meta"># ETCDCTL_API=3 etcdctl defrag</span><br></code></pre></td></tr></table></figure><h4 id="查看下压缩后的大小"><a href="#查看下压缩后的大小" class="headerlink" title="查看下压缩后的大小"></a>查看下压缩后的大小</h4><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs gherkin">[root<span class="hljs-meta">@k8s-m1</span> overlord]<span class="hljs-comment"># etcd_v3 -w=table endpoint status</span><br>+------------------------+------------------+---------+---------+-----------+-----------+------------+<br>|<span class="hljs-string">        ENDPOINT        </span>|<span class="hljs-string">        ID        </span>|<span class="hljs-string"> VERSION </span>|<span class="hljs-string"> DB SIZE </span>|<span class="hljs-string"> IS LEADER </span>|<span class="hljs-string"> RAFT TERM </span>|<span class="hljs-string"> RAFT INDEX </span>|<br>+------------------------+------------------+---------+---------+-----------+-----------+------------+<br>|<span class="hljs-string"> https://10.15.1.3:2379 </span>|<span class="hljs-string"> daad158099a5cdca </span>|<span class="hljs-string">  3.2.24 </span>|<span class="hljs-string">  4.1 MB </span>|<span class="hljs-string">      true </span>|<span class="hljs-string">         2 </span>|<span class="hljs-string">       9044 </span>|<br>|<span class="hljs-string"> https://10.15.1.4:2379 </span>|<span class="hljs-string"> 2717bbfe0f23b647 </span>|<span class="hljs-string">  3.2.24 </span>|<span class="hljs-string">  5.6 MB </span>|<span class="hljs-string">     false </span>|<span class="hljs-string">         2 </span>|<span class="hljs-string">       9044 </span>|<br>|<span class="hljs-string"> https://10.15.1.5:2379 </span>|<span class="hljs-string"> 81183085587ceed2 </span>|<span class="hljs-string">  3.2.24 </span>|<span class="hljs-string">  5.5 MB </span>|<span class="hljs-string">     false </span>|<span class="hljs-string">         2 </span>|<span class="hljs-string">       9044 </span>|<br>+------------------------+------------------+---------+---------+-----------+-----------+------------+<br></code></pre></td></tr></table></figure><h4 id="忽略etcd告警"><a href="#忽略etcd告警" class="headerlink" title="忽略etcd告警"></a>忽略etcd告警</h4><p>通过执行<code>ETCDCTL_API=3 etcdctl alarm list</code>可以查看etcd的告警情况，如果存在告警，即使释放了etcd空间，etcd也处于只读状态。在确定以上的操作均执行完毕后在任意一个etcd主机中执行以下命令忽略告警:</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs autoit">[root<span class="hljs-symbol">@k8s</span>-m1 overlord]<span class="hljs-meta"># ETCDCTL_API=3 etcdctl alarm disarm</span><br></code></pre></td></tr></table></figure><h3 id="故障排查"><a href="#故障排查" class="headerlink" title="故障排查"></a>故障排查</h3><p>在本实验中还原后可能会出现如下故障，所有Pod在删除后重新创建全部为Pengding状态。</p><p><img src="/images/etcd-1.png" alt="etcd-1"></p><p>通过查看<code>describe pod</code>看到<code>Events</code>并没有任何事件。<br><img src="/images/etcd-2.png" alt="etcd-2"></p><p>查看scheduler日志信息发现连接api server报错<br><img src="/images/etcd-3.png" alt="etcd-3"></p><p>查看api server日志发现报如下错误<code>the object has been modified,please apply your change to the latest versionand try again</code> 删除metrics server API server即可恢复，此时执行<code>kubectl api-resources</code>直接hang住无任何反应。<br><img src="/images/etcd-4.png" alt="etcd-4"></p><h3 id="Namespaces名称空间无法删除"><a href="#Namespaces名称空间无法删除" class="headerlink" title="Namespaces名称空间无法删除"></a>Namespaces名称空间无法删除</h3><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs x86asm">[root@k8s-m1 ~]# kubectl get ns<br>NAME                STATUS        AGE<br>cattle-prometheus   Active        <span class="hljs-number">29d</span><br>cattle-system       Terminating   <span class="hljs-number">29d</span><br>cj-<span class="hljs-keyword">test</span>             Active        <span class="hljs-number">14d</span><br>cxx1                Active        <span class="hljs-number">79d</span><br><span class="hljs-meta">default</span>             Active        <span class="hljs-number">118d</span><br>ingress-nginx       Active        <span class="hljs-number">39d</span><br>iov-paas            Active        <span class="hljs-number">78d</span><br>iov-<span class="hljs-keyword">test</span>            Active        <span class="hljs-number">104d</span><br>istio-app-<span class="hljs-keyword">test</span>      Active        <span class="hljs-number">35d</span><br>istio-system        Active        <span class="hljs-number">54d</span><br></code></pre></td></tr></table></figure><h4 id="开启api-server-HTTP代理"><a href="#开启api-server-HTTP代理" class="headerlink" title="开启api server HTTP代理"></a>开启api server HTTP代理</h4><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs livescript">[root@k8s-m1 ~]<span class="hljs-comment"># kubectl proxy</span><br>Starting <span class="hljs-keyword">to</span> serve <span class="hljs-literal">on</span> <span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>:<span class="hljs-number">8001</span><br></code></pre></td></tr></table></figure><h4 id="克隆终端并在终端中声明一个变量"><a href="#克隆终端并在终端中声明一个变量" class="headerlink" title="克隆终端并在终端中声明一个变量"></a>克隆终端并在终端中声明一个变量</h4><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs autoit">[root<span class="hljs-symbol">@k8s</span>-m1 overlord]<span class="hljs-meta"># NAMESPACE=cattle-system</span><br></code></pre></td></tr></table></figure><h4 id="将无法删除的namespaces以Json格式输出"><a href="#将无法删除的namespaces以Json格式输出" class="headerlink" title="将无法删除的namespaces以Json格式输出"></a>将无法删除的namespaces以Json格式输出</h4><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">kubectl <span class="hljs-built_in">get</span> namespace <span class="hljs-variable">$NAMESPACE</span> -o json |jq <span class="hljs-string">&#x27;.spec = &#123;&quot;finalizers&quot;:[]&#125;&#x27;</span> &gt;temp.json<br></code></pre></td></tr></table></figure><h4 id="编辑temp-json文件"><a href="#编辑temp-json文件" class="headerlink" title="编辑temp.json文件"></a>编辑temp.json文件</h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs swift">&#123;<br>  <span class="hljs-string">&quot;apiVersion&quot;</span>: <span class="hljs-string">&quot;v1&quot;</span>,<br>  <span class="hljs-string">&quot;kind&quot;</span>: <span class="hljs-string">&quot;Namespace&quot;</span>,<br>  <span class="hljs-string">&quot;metadata&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;annotations&quot;</span>: &#123;<br>      <span class="hljs-string">&quot;cattle.io/status&quot;</span>: <span class="hljs-string">&quot;&#123;<span class="hljs-subst">\&quot;</span>Conditions<span class="hljs-subst">\&quot;</span>:[&#123;<span class="hljs-subst">\&quot;</span>Type<span class="hljs-subst">\&quot;</span>:<span class="hljs-subst">\&quot;</span>ResourceQuotaInit<span class="hljs-subst">\&quot;</span>,<span class="hljs-subst">\&quot;</span>Status<span class="hljs-subst">\&quot;</span>:<span class="hljs-subst">\&quot;</span>True<span class="hljs-subst">\&quot;</span>,<span class="hljs-subst">\&quot;</span>Message<span class="hljs-subst">\&quot;</span>:<span class="hljs-subst">\&quot;</span><span class="hljs-subst">\&quot;</span>,<span class="hljs-subst">\&quot;</span>LastUpdateTime<span class="hljs-subst">\&quot;</span>:<span class="hljs-subst">\&quot;</span>2019-08-19T08:21:42Z<span class="hljs-subst">\&quot;</span>&#125;,&#123;<span class="hljs-subst">\&quot;</span>Type<span class="hljs-subst">\&quot;</span>:<span class="hljs-subst">\&quot;</span>InitialRolesPopulated<span class="hljs-subst">\&quot;</span>,<span class="hljs-subst">\&quot;</span>Status<span class="hljs-subst">\&quot;</span>:<span class="hljs-subst">\&quot;</span>True<span class="hljs-subst">\&quot;</span>,<span class="hljs-subst">\&quot;</span>Message<span class="hljs-subst">\&quot;</span>:<span class="hljs-subst">\&quot;</span><span class="hljs-subst">\&quot;</span>,<span class="hljs-subst">\&quot;</span>LastUpdateTime<span class="hljs-subst">\&quot;</span>:<span class="hljs-subst">\&quot;</span>2019-08-19T08:21:47Z<span class="hljs-subst">\&quot;</span>&#125;]&#125;&quot;</span>,<br>      <span class="hljs-string">&quot;field.cattle.io/projectId&quot;</span>: <span class="hljs-string">&quot;c-zcf9v:p-lwgnw&quot;</span>,<br>      <span class="hljs-string">&quot;kubectl.kubernetes.io/last-applied-configuration&quot;</span>: <span class="hljs-string">&quot;&#123;<span class="hljs-subst">\&quot;</span>apiVersion<span class="hljs-subst">\&quot;</span>:<span class="hljs-subst">\&quot;</span>v1<span class="hljs-subst">\&quot;</span>,<span class="hljs-subst">\&quot;</span>kind<span class="hljs-subst">\&quot;</span>:<span class="hljs-subst">\&quot;</span>Namespace<span class="hljs-subst">\&quot;</span>,<span class="hljs-subst">\&quot;</span>metadata<span class="hljs-subst">\&quot;</span>:&#123;<span class="hljs-subst">\&quot;</span>annotations<span class="hljs-subst">\&quot;</span>:&#123;&#125;,<span class="hljs-subst">\&quot;</span>name<span class="hljs-subst">\&quot;</span>:<span class="hljs-subst">\&quot;</span>cattle-system<span class="hljs-subst">\&quot;</span>&#125;&#125;<span class="hljs-subst">\n</span>&quot;</span>,<br>      <span class="hljs-string">&quot;lifecycle.cattle.io/create.namespace-auth&quot;</span>: <span class="hljs-string">&quot;true&quot;</span><br>    &#125;,<br>    <span class="hljs-string">&quot;creationTimestamp&quot;</span>: <span class="hljs-string">&quot;2019-08-19T08:21:31Z&quot;</span>,<br>    <span class="hljs-string">&quot;deletionGracePeriodSeconds&quot;</span>: <span class="hljs-number">0</span>,<br>    <span class="hljs-string">&quot;deletionTimestamp&quot;</span>: <span class="hljs-string">&quot;2019-09-17T10:15:32Z&quot;</span>,<br>    <span class="hljs-string">&quot;finalizers&quot;</span>: [<br>      <span class="hljs-string">&quot;controller.cattle.io/namespace-auth&quot;</span><br>    ],<br>    <span class="hljs-string">&quot;labels&quot;</span>: &#123;<br>      <span class="hljs-string">&quot;field.cattle.io/projectId&quot;</span>: <span class="hljs-string">&quot;p-lwgnw&quot;</span><br>    &#125;,<br>    <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;cattle-system&quot;</span>,<br>    <span class="hljs-string">&quot;resourceVersion&quot;</span>: <span class="hljs-string">&quot;16595026&quot;</span>,<br>    <span class="hljs-string">&quot;selfLink&quot;</span>: <span class="hljs-string">&quot;/api/v1/namespaces/cattle-system&quot;</span>,<br>    <span class="hljs-string">&quot;uid&quot;</span>: <span class="hljs-string">&quot;59412a0d-c25a-11e9-ba0d-00505680cc08&quot;</span><br>  &#125;,<br>  <span class="hljs-string">&quot;spec&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;finalizers&quot;</span>: []<br>  &#125;,<br>  <span class="hljs-string">&quot;status&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;phase&quot;</span>: <span class="hljs-string">&quot;Terminating&quot;</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>删除：<code>&quot;resourceVersion&quot;: &quot;16595026&quot;,</code>整行内容，删除：<code>&quot;finalizers&quot;</code> <code>[]</code>中的内容。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs swift">&#123;<br>  <span class="hljs-string">&quot;apiVersion&quot;</span>: <span class="hljs-string">&quot;v1&quot;</span>,<br>  <span class="hljs-string">&quot;kind&quot;</span>: <span class="hljs-string">&quot;Namespace&quot;</span>,<br>  <span class="hljs-string">&quot;metadata&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;annotations&quot;</span>: &#123;<br>      <span class="hljs-string">&quot;cattle.io/status&quot;</span>: <span class="hljs-string">&quot;&#123;<span class="hljs-subst">\&quot;</span>Conditions<span class="hljs-subst">\&quot;</span>:[&#123;<span class="hljs-subst">\&quot;</span>Type<span class="hljs-subst">\&quot;</span>:<span class="hljs-subst">\&quot;</span>ResourceQuotaInit<span class="hljs-subst">\&quot;</span>,<span class="hljs-subst">\&quot;</span>Status<span class="hljs-subst">\&quot;</span>:<span class="hljs-subst">\&quot;</span>True<span class="hljs-subst">\&quot;</span>,<span class="hljs-subst">\&quot;</span>Message<span class="hljs-subst">\&quot;</span>:<span class="hljs-subst">\&quot;</span><span class="hljs-subst">\&quot;</span>,<span class="hljs-subst">\&quot;</span>LastUpdateTime<span class="hljs-subst">\&quot;</span>:<span class="hljs-subst">\&quot;</span>2019-08-19T08:21:42Z<span class="hljs-subst">\&quot;</span>&#125;,&#123;<span class="hljs-subst">\&quot;</span>Type<span class="hljs-subst">\&quot;</span>:<span class="hljs-subst">\&quot;</span>InitialRolesPopulated<span class="hljs-subst">\&quot;</span>,<span class="hljs-subst">\&quot;</span>Status<span class="hljs-subst">\&quot;</span>:<span class="hljs-subst">\&quot;</span>True<span class="hljs-subst">\&quot;</span>,<span class="hljs-subst">\&quot;</span>Message<span class="hljs-subst">\&quot;</span>:<span class="hljs-subst">\&quot;</span><span class="hljs-subst">\&quot;</span>,<span class="hljs-subst">\&quot;</span>LastUpdateTime<span class="hljs-subst">\&quot;</span>:<span class="hljs-subst">\&quot;</span>2019-08-19T08:21:47Z<span class="hljs-subst">\&quot;</span>&#125;]&#125;&quot;</span>,<br>      <span class="hljs-string">&quot;field.cattle.io/projectId&quot;</span>: <span class="hljs-string">&quot;c-zcf9v:p-lwgnw&quot;</span>,<br>      <span class="hljs-string">&quot;kubectl.kubernetes.io/last-applied-configuration&quot;</span>: <span class="hljs-string">&quot;&#123;<span class="hljs-subst">\&quot;</span>apiVersion<span class="hljs-subst">\&quot;</span>:<span class="hljs-subst">\&quot;</span>v1<span class="hljs-subst">\&quot;</span>,<span class="hljs-subst">\&quot;</span>kind<span class="hljs-subst">\&quot;</span>:<span class="hljs-subst">\&quot;</span>Namespace<span class="hljs-subst">\&quot;</span>,<span class="hljs-subst">\&quot;</span>metadata<span class="hljs-subst">\&quot;</span>:&#123;<span class="hljs-subst">\&quot;</span>annotations<span class="hljs-subst">\&quot;</span>:&#123;&#125;,<span class="hljs-subst">\&quot;</span>name<span class="hljs-subst">\&quot;</span>:<span class="hljs-subst">\&quot;</span>cattle-system<span class="hljs-subst">\&quot;</span>&#125;&#125;<span class="hljs-subst">\n</span>&quot;</span>,<br>      <span class="hljs-string">&quot;lifecycle.cattle.io/create.namespace-auth&quot;</span>: <span class="hljs-string">&quot;true&quot;</span><br>    &#125;,<br>    <span class="hljs-string">&quot;creationTimestamp&quot;</span>: <span class="hljs-string">&quot;2019-08-19T08:21:31Z&quot;</span>,<br>    <span class="hljs-string">&quot;deletionGracePeriodSeconds&quot;</span>: <span class="hljs-number">0</span>,<br>    <span class="hljs-string">&quot;deletionTimestamp&quot;</span>: <span class="hljs-string">&quot;2019-09-17T10:15:32Z&quot;</span>,<br>    <span class="hljs-string">&quot;finalizers&quot;</span>: [],<br>    <span class="hljs-string">&quot;labels&quot;</span>: &#123;<br>      <span class="hljs-string">&quot;field.cattle.io/projectId&quot;</span>: <span class="hljs-string">&quot;p-lwgnw&quot;</span><br>    &#125;,<br>    <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;cattle-system&quot;</span>,<br>    <span class="hljs-string">&quot;selfLink&quot;</span>: <span class="hljs-string">&quot;/api/v1/namespaces/cattle-system&quot;</span>,<br>    <span class="hljs-string">&quot;uid&quot;</span>: <span class="hljs-string">&quot;59412a0d-c25a-11e9-ba0d-00505680cc08&quot;</span><br>  &#125;,<br>  <span class="hljs-string">&quot;spec&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;finalizers&quot;</span>: []<br>  &#125;,<br>  <span class="hljs-string">&quot;status&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;phase&quot;</span>: <span class="hljs-string">&quot;Terminating&quot;</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="执行如下操作"><a href="#执行如下操作" class="headerlink" title="执行如下操作"></a>执行如下操作</h4><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">curl -k -H <span class="hljs-string">&quot;Content-Type: application/json&quot;</span> -X PUT --data-binary @temp.json <span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>:<span class="hljs-number">8001</span><span class="hljs-regexp">/api/</span>v1<span class="hljs-regexp">/namespaces/</span><span class="hljs-variable">$NAMESPACE</span>/finalize<br></code></pre></td></tr></table></figure><h4 id="执行kubectl查看结果"><a href="#执行kubectl查看结果" class="headerlink" title="执行kubectl查看结果"></a>执行kubectl查看结果</h4><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs x86asm">[root@k8s-m1 overlord]#kubectl get ns<br>NAME                STATUS   AGE<br>cattle-prometheus   Active   <span class="hljs-number">29d</span><br>cj-<span class="hljs-keyword">test</span>             Active   <span class="hljs-number">14d</span><br>cxx1                Active   <span class="hljs-number">79d</span><br><span class="hljs-meta">default</span>             Active   <span class="hljs-number">118d</span><br>ingress-nginx       Active   <span class="hljs-number">39d</span><br>iov-paas            Active   <span class="hljs-number">78d</span><br>iov-<span class="hljs-keyword">test</span>            Active   <span class="hljs-number">104d</span><br>istio-app-<span class="hljs-keyword">test</span>      Active   <span class="hljs-number">35d</span><br>istio-system        Active   <span class="hljs-number">54d</span><br>kube-<span class="hljs-meta">public</span>         Active   <span class="hljs-number">118d</span><br>kube-system         Active   <span class="hljs-number">118d</span><br></code></pre></td></tr></table></figure><h4 id="若以上方法无法删除，可使用第二种方法，直接从ETCD中删除源数据"><a href="#若以上方法无法删除，可使用第二种方法，直接从ETCD中删除源数据" class="headerlink" title="若以上方法无法删除，可使用第二种方法，直接从ETCD中删除源数据"></a>若以上方法无法删除，可使用第二种方法，直接从ETCD中删除源数据</h4><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-comment"># 删除default namespace下的pod名为pod-to-be-deleted-0</span><br>ETCDCTL_API=<span class="hljs-number">3</span> etcdctl del <span class="hljs-regexp">/registry/</span>pods<span class="hljs-regexp">/default/</span>pod-to-be-deleted-<span class="hljs-number">0</span><br><br><span class="hljs-comment"># 删除需要删除的NAMESPACE</span><br>ETCDCTL_API=<span class="hljs-number">3</span> etcdctl del <span class="hljs-regexp">/registry/</span>namespaces/NAMESPACENAME<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>kubernetes中的Local Persistent Volume</title>
    <link href="/2019/08/26/kubernetes-local-persistent-volume/"/>
    <url>/2019/08/26/kubernetes-local-persistent-volume/</url>
    
    <content type="html"><![CDATA[<h2 id="什么是Local-Persistent-Volumes"><a href="#什么是Local-Persistent-Volumes" class="headerlink" title="什么是Local Persistent Volumes"></a>什么是Local Persistent Volumes</h2><p>kubernetes支持多种卷类型，主要分两种。一种是远端存储，一种是本地存储。大部分情况业务使用远端存储，这是为了让持久化的数据与计算节点彼此独立，即使计算节点宕机也不会影响到数据。但本地存储相比远端存储可以避免网络 <code>IO</code> 开销，拥有更高的读写性能。这里的 <code>Local PV</code> 指的就是利用机器上的磁盘来存放业务需要持久化的数据。（分布式文件系统和数据库一直是 Local PV 的主要用例）</p><h2 id="这跟hostPath有什么区别"><a href="#这跟hostPath有什么区别" class="headerlink" title="这跟hostPath有什么区别"></a>这跟hostPath有什么区别</h2><p>hostPath是一种volume，可以让pod挂载宿主机上的一个文件或目录（如果挂载路径不存在，则创建为目录或文件并挂载）。</p><p>最大的不同在于调度器是否能理解磁盘和node的对应关系，一个使用hostPath的pod，当他被重新调度时，很有可能被调度到与原先不同的node上，这就导致pod内数据丢失了。而使用Local PV的pod，总会被调度到同一个node上（否则就调度失败）。</p><h2 id="如何使用Local-PV"><a href="#如何使用Local-PV" class="headerlink" title="如何使用Local PV"></a>如何使用Local PV</h2><h3 id="首先-需要创建StorageClass"><a href="#首先-需要创建StorageClass" class="headerlink" title="首先 需要创建StorageClass"></a>首先 需要创建StorageClass</h3><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">kind:</span> StorageClass<br><span class="hljs-symbol">apiVersion:</span> storage.k8s.io/v1<br><span class="hljs-symbol">metadata:</span><br><span class="hljs-symbol">  name:</span> local-storage<br><span class="hljs-symbol">provisioner:</span> kubernetes.io/no-provisioner<br><span class="hljs-symbol">volumeBindingMode:</span> WaitForFirstConsumer<br></code></pre></td></tr></table></figure><p>注意到这里<code>volumeBindingMode</code>字段的值是<code>WaitForFirstConsumer</code>。这意味着kubernetes的pv控制器会将这类pv的binding延迟，直到有一个使用了对应PVC的Pod被创建出来且该Pod被调度完毕。这时候才会将PV和PVC进行binding，并且这时候pv的选择会结合调度的node和pv的NodeAffinity。</p><p>手动创建PV。但是必须要注意的是，Local PV必须要填写NodeAffinity</p><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-attribute">apiVersion</span><span class="hljs-punctuation">:</span> <span class="hljs-string">v1</span><br><span class="hljs-attribute">kind</span><span class="hljs-punctuation">:</span> <span class="hljs-string">PersistentVolume</span><br><span class="hljs-attribute">metadata</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">example-pv</span><br><span class="hljs-attribute">spec</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">capacity</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-attribute">storage</span><span class="hljs-punctuation">:</span> <span class="hljs-string">100Gi</span><br>  <span class="hljs-attribute">volumeMode</span><span class="hljs-punctuation">:</span> <span class="hljs-string">Filesystem</span><br>  <span class="hljs-attribute">accessModes</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">ReadWriteOnce</span><br>  <span class="hljs-attribute">persistentVolumeReclaimPolicy</span><span class="hljs-punctuation">:</span> <span class="hljs-string">Delete</span><br>  <span class="hljs-attribute">storageClassName</span><span class="hljs-punctuation">:</span> <span class="hljs-string">local-storage</span><br>  <span class="hljs-attribute">local</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-attribute">path</span><span class="hljs-punctuation">:</span> <span class="hljs-string">/mnt/disks/ssd1</span><br>  <span class="hljs-attribute">nodeAffinity</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-attribute">required</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-attribute">nodeSelectorTerms</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">matchExpressions:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">key: kubernetes.io/hostname</span><br>          <span class="hljs-attribute">operator</span><span class="hljs-punctuation">:</span> <span class="hljs-string">In</span><br>          <span class="hljs-attribute">values</span><span class="hljs-punctuation">:</span><br>          <span class="hljs-bullet">-</span> <span class="hljs-string">k8s-n1</span><br></code></pre></td></tr></table></figure><p>上面定义的local字段，指定了它是一个Local Persistent Volume；而path字段，指定的是这个PV对应的磁盘的路径。而这个磁盘存在于k8s-n1节点上，也就意味着pod使用这个pv就必须运行在这个节点上。</p><p>注意：目前，Local PV 的本地持久存储允许我们直接使用节点上的一块磁盘、一个分区或者一个目录作为持久卷的存储后端，但暂时还不提供动态配置支持，也就是说：你得先把 PV 准备好。（一台主机就创建一个PV，在nodeAffinity写不同的节点 k8s-n1、 k8s-n2、 k8s-n3），其他内容和一个普通 PV 无异，只是多了一个 nodeAffinity。</p><p>接下来可以创建各种workload，记得要在workload的模板中声明<code>volumeClaimTemplates</code>。</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">apiVersion:</span> apps/v1<br><span class="hljs-symbol">kind:</span> StatefulSet<br><span class="hljs-symbol">metadata:</span><br><span class="hljs-symbol">  name:</span> local-test<br><span class="hljs-symbol">spec:</span><br><span class="hljs-symbol">  serviceName:</span> <span class="hljs-string">&quot;local-service&quot;</span><br><span class="hljs-symbol">  replicas:</span> <span class="hljs-number">3</span><br><span class="hljs-symbol">  selector:</span><br><span class="hljs-symbol">    matchLabels:</span><br><span class="hljs-symbol">      app:</span> local-test<br><span class="hljs-symbol">  template:</span><br><span class="hljs-symbol">    metadata:</span><br><span class="hljs-symbol">      labels:</span><br><span class="hljs-symbol">        app:</span> local-test<br><span class="hljs-symbol">    spec:</span><br><span class="hljs-symbol">      containers:</span><br>      - name: test-container<br><span class="hljs-symbol">        image:</span> k8s.gcr.io/busybox<br><span class="hljs-symbol">        command:</span><br>        - <span class="hljs-string">&quot;/bin/sh&quot;</span><br><span class="hljs-symbol">        args:</span><br>        - <span class="hljs-string">&quot;-c&quot;</span><br>        - <span class="hljs-string">&quot;sleep 100000&quot;</span><br><span class="hljs-symbol">        volumeMounts:</span><br>        - name: local-vol<br><span class="hljs-symbol">          mountPath:</span> <span class="hljs-keyword">/usr/</span>test-pod<br><span class="hljs-symbol">  volumeClaimTemplates:</span><br>  - metadata:<br><span class="hljs-symbol">      name:</span> local-vol<br><span class="hljs-symbol">    spec:</span><br><span class="hljs-symbol">      accessModes:</span> [ <span class="hljs-string">&quot;ReadWriteOnce&quot;</span> ]<br><span class="hljs-symbol">      storageClassName:</span> <span class="hljs-string">&quot;local-storage&quot;</span><br><span class="hljs-symbol">      resources:</span><br><span class="hljs-symbol">        requests:</span><br><span class="hljs-symbol">          storage:</span> <span class="hljs-number">100</span>Gi<br></code></pre></td></tr></table></figure><p>注意到这里<code>volumeClaimTemplates.spec.storageClassName</code>是<code>local-storage</code>，即我们一开始创建的storageclass实例的名字。</p><h3 id="使用Local-PV的pod的调度流程"><a href="#使用Local-PV的pod的调度流程" class="headerlink" title="使用Local PV的pod的调度流程"></a>使用Local PV的pod的调度流程</h3><p>上面这个statefulset创建后，控制器会为其创建对应的PVC，并且会为PVC查找符合条件的PV,但是由于我们在<code>local-storage</code>中配置了<code>WaitForFirstConsumer</code>，所以控制器不会处理pvc和pv的bind，此时pvc状态处于pending状态；</p><p>同时，调度器在调度该pod时，predicate算法中也会根据PVC的要求去找到可用的PV,并且会过滤掉“与Local PV的nodeAffinity”不匹配的node。最终，调度器发现：</p><ul><li>pv：<code>example-pv</code>满足了pvc的要求；</li><li>node:<code>k8s-n1</code>节点满足了pv:<code>example-pv</code>的nodeAffinity要求。</li><li>于是乎调度器尝试将pv和pvc bind起来，并且对pod进行重新调度。</li></ul><p>重新调度pod时调度器发现pod的pvc资源得到了满足（都bound了pv），且bound的pv的nodeAffinity与node：<code>k8s-n1</code>匹配。于是将pod调度到node：<code>k8s-n1</code>上。完成调度。</p><h3 id="延迟绑定的问题"><a href="#延迟绑定的问题" class="headerlink" title="延迟绑定的问题"></a>延迟绑定的问题</h3><p>当创建一个PVC后，一般来说<code>kube-controller-manager</code>会立即为它寻找一个合适的PV进行绑定。但是，这种即时绑定对于Local-PV会有一些问题。</p><p>我们来看这样子的一个场景：假设k8s集群有三台主机A、B、C，每台主机上有一块空磁盘，我们创建了三个Local-PV pv-a、pv-b和pv-c，分别关联到主机A、B、C的磁盘。然后我们要发布一个Pod，而且限制了这个Pod只能调度到B、C主机上。Pod中使用了一个PVC，假设是即时绑定，那么在创建Pod前，该PVC就已经绑定好了一个PV，而假设该PVC绑定的PV所关联的磁盘刚好又在A主机上，那么根据Local-PV的<code>NodeAffinity</code>，该Pod只能被调度到A主机上。那么这个时候，Pod就会找不到合适的主机，最终的结果就是调度失败。</p><p>所以，为了解决这个问题。我们可以为Local-PV定义一个<code>StorageClass</code>，声明绑定策略为延迟绑定，如下：</p><p>上面的<code>WaitForFirstConsumer</code>的意思是：当创建一个local类型的PVC时，不马上进行绑定，而是等待第一个使用它的Pod被创建后等待调度时，由kube-scheduler对PVC进行绑定。</p><p>接下来，我们再来看上面的场景：</p><p>当创建一个local类型的PVC后，<code>kube-controller-manager</code>不会为PVC绑定一个PV。然后我们再创建Pod，使用该PVC。此时，<code>kube-scheduler</code>准备对这个Pod进行调度，但发现它使用了一个local类型的PVC，于是<code>kube-scheduler</code>会先为这个PVC绑定一个PV。<code>kube-scheduler</code>发现Pod中限制了其只能被调度到B、C主机中，于是会为该PVC在pv-b与pv-c中选择一个进行绑定，假设为pv-b。绑定后，那么Pod也会被调度到主机B上。</p><p>通过这种延迟绑定机制，可以尽量避免Pod调度失败的机率。</p><h3 id="如何创建Local-PV"><a href="#如何创建Local-PV" class="headerlink" title="如何创建Local PV"></a>如何创建Local PV</h3><ul><li>在机器上创建目录： <code>mkdir -p /mnt/disks/ssd1</code></li><li>在机器上执行命令，将某个卷挂载到该目录：<code>mount -t /dev/vdc /mnt/disks/ssd1</code></li><li>在集群中创建对应的storageClass. 参见上文。</li><li>手动创建本地卷的PV，或者通过provisioner去自动创建。手动创建的模板见上文。</li></ul><h3 id="如何删除Local-PV"><a href="#如何删除Local-PV" class="headerlink" title="如何删除Local PV"></a>如何删除Local PV</h3><p>对于已经被bind并被pod使用的Local PV,删除一定要按照流程来 , 要不然会删除失败：</p><ul><li>删除使用这个pv的pod</li><li>从node上移除这个磁盘(按照一个pv一块盘)</li><li>删除pvc</li><li>删除pv</li></ul><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><ul><li>使用local pv时必须定义nodeAffinity，Kubernetes Scheduler需要使用PV的nodeAffinity描述信息来保证Pod能够调度到有对应local volume的Node上。</li><li>创建local PV之前，你需要先保证有对应的storageClass已经创建。并且该storageClass的<code>volumeBindingMode</code>必须是<code>WaitForFirstConsumer</code>以标识延迟Volume Binding。</li><li>节点上local volume的初始化需要我们人为去完成（比如local disk需要pre-partitioned, formatted, and mounted. 共享存储对应的Directories也需要pre-created），并且人工创建这个local PV，当Pod结束，我们还需要手动的清理local volume，然后手动删除该local PV对象。因此，<code>persistentVolumeReclaimPolicy</code>只能是<code>Retain</code>。</li><li>Local PV在生产中使用，也是需要谨慎的，毕竟它本质上还是使用的是节点上的本地存储，如果没有相应的存储副本机制，那意味着一旦节点或者磁盘异常，使用该volume的Pod也会异常，甚至出现数据丢失，除非你明确知道这个风险不会对你的应用造成很大影响或者允许数据丢失。</li></ul><h3 id="Local-volumes的最佳实践"><a href="#Local-volumes的最佳实践" class="headerlink" title="Local volumes的最佳实践"></a>Local volumes的最佳实践</h3><ul><li>对于需要强 IO 隔离的场景，推荐使用整块磁盘作为 Volume</li><li>对于需要容量隔离的场景，推荐使用分区作为 Volume</li><li>避免在集群中重新创建同名的Node（无法避免时需要先删除通过 Affinity 引用该 Node 的 PV）</li><li>对于文件系统类型的本地存储，推荐使用 UUID （如 ls -l &#x2F;dev&#x2F;disk&#x2F;by-uuid）作为系统挂载点</li><li>对于无文件系统的块存储，推荐生成一个唯一 ID 作软链接（如 &#x2F;dev&#x2F;dis&#x2F;by-id）。这可以保证 Volume 名字唯一，并不会与其他 Node 上面的同名 Volume 混淆</li></ul><h3 id="一个关于local-volume功能局限性问题的讨论"><a href="#一个关于local-volume功能局限性问题的讨论" class="headerlink" title="一个关于local volume功能局限性问题的讨论"></a>一个关于local volume功能局限性问题的讨论</h3><p>通过实验发现一处问题，就是我们在定义PVC时是指定的申请50Mi的空间，而实际挂载到测试容器上的存储空间是495.8M，刚好是我们在某个node节点上挂载的一个文件系统的全部空间。</p><p>为什么会这样呢？这就是我们所使用的这个local persistent volume外部静态配置器的功能局限性所在了。它不支持动态的PV空间申请管理。</p><p>也就是说，虽然我们可以通过local volume manager配置PV，我们省去了手写PV YAML文件的痛苦。但是我们任然不会分配到自己理想的磁盘大小，如果node是500G的磁盘空间，在申请PVC申请50M那个任然会挂在500G的磁盘上来，这样导致磁盘空间浪费。如果申请的磁盘空间小了，当使用一段时候后发现不够又怎么办呢？这里推荐采用LVM方式；</p><h3 id="那如果以前给某容器分配的一个存储空间不够用了怎么办？"><a href="#那如果以前给某容器分配的一个存储空间不够用了怎么办？" class="headerlink" title="那如果以前给某容器分配的一个存储空间不够用了怎么办？"></a>那如果以前给某容器分配的一个存储空间不够用了怎么办？</h3><ul><li>给大家的一个建议是使用Linux下的LVM（逻辑分区管理）来管理每个node节点上的本地磁盘存储空间。</li><li>创建一个大的VG分组，把一个node节点上可以使用的存储空间都放进去；</li><li>按未来一段时间内的容器存储空间使用预期，提前批量创建出一部分逻辑卷LVs，都挂载到自动发现目录下去；</li><li>不要把VG中的存储资源全部用尽，预留少部分用于未来给个别容器扩容存储空间的资源；</li><li>使用lvextend为特定容器使用的存储卷进行扩容；</li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>二进制安装 kubernetes v1.13.5（二）</title>
    <link href="/2019/08/26/deploy-kubernets-1.13/"/>
    <url>/2019/08/26/deploy-kubernets-1.13/</url>
    
    <content type="html"><![CDATA[<p>注意：适合有基础的观看，没有太详细的说明；服务器初始化请看上一篇文章<code>二进制部署Kubernetes v1.13.5（一）</code></p><h2 id="节点初始化"><a href="#节点初始化" class="headerlink" title="节点初始化"></a>节点初始化</h2><p>三个 master 节点，三个 woker 节点</p><table><thead><tr><th>hostname</th><th>os</th><th>vip</th><th>ip</th></tr></thead><tbody><tr><td>k8s-master1</td><td>centos7</td><td>10.0.7.100</td><td>10.0.7.101</td></tr><tr><td>k8s-master2</td><td>centos7</td><td>10.0.7.100</td><td>10.0.7.102</td></tr><tr><td>k8s-master3</td><td>centos7</td><td>10.0.7.100</td><td>10.0.7.103</td></tr><tr><td>k8s-worker1</td><td>centos7</td><td>无</td><td>10.0.7.104</td></tr><tr><td>k8s-worker2</td><td>centos7</td><td>无</td><td>10.0.7.105</td></tr><tr><td>k8s-worker3</td><td>centos7</td><td>无</td><td>10.0.7.106</td></tr></tbody></table><h2 id="配置每台主机的hosts文件，添加到-x2F-etc-x2F-hosts文件中"><a href="#配置每台主机的hosts文件，添加到-x2F-etc-x2F-hosts文件中" class="headerlink" title="配置每台主机的hosts文件，添加到&#x2F;etc&#x2F;hosts文件中"></a>配置每台主机的hosts文件，添加到&#x2F;etc&#x2F;hosts文件中</h2><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs accesslog"><span class="hljs-number">10.0.7.101</span> k8s-master1<br><span class="hljs-number">10.0.7.102</span> k8s-master2<br><span class="hljs-number">10.0.7.103</span> k8s-master3<br><span class="hljs-number">10.0.7.104</span> k8s-worker1<br><span class="hljs-number">10.0.7.105</span> k8s-worker2<br><span class="hljs-number">10.0.7.106</span> k8s-worker3<br></code></pre></td></tr></table></figure><p>安装 kubernetes 二进制</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">wget https:<span class="hljs-regexp">//</span>storage.googleapis.com<span class="hljs-regexp">/kubernetes-release/</span>release<span class="hljs-regexp">/v1.13.5/</span>kubernetes-server-linux-amd64.tar.gz<br>tar xf kubernetes-server-linux-amd64.tar.gz<br>cp kubernetes<span class="hljs-regexp">/server/</span>bin<span class="hljs-regexp">/kube&#123;-apiserver,-controller-manager,-scheduler,ctl,-proxy,let&#125; /u</span>sr<span class="hljs-regexp">/local/</span>bin/<br></code></pre></td></tr></table></figure><p>发送到其他节点</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">scp  -r  <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/bin root@k8s-master2:/u</span>sr/local<br>scp  -r  <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/bin root@k8s-master3:/u</span>sr/local<br>scp  -r  <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/bin root@k8s-worker1:/u</span>sr/local<br></code></pre></td></tr></table></figure><h2 id="准备证书"><a href="#准备证书" class="headerlink" title="准备证书"></a>准备证书</h2><p>openssl 证书配置文件</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs makefile">mkdir -p /etc/kubernetes/pki/etcd<br>cd /etc/kubernetes/pki<br><br>cat &lt;&lt;EOF&gt; /etc/kubernetes/pki/openssl.cnf<br>[ req ]<br>default_bits = 2048<br>default_md = sha256<br>distinguished_name = req_distinguished_name<br><br>[req_distinguished_name]<br><br>[ v3_ca ]<br>basicConstraints = critical, CA:TRUE<br>keyUsage = critical, digitalSignature, keyEncipherment, keyCertSign<br><br>[ v3_req_server ]<br>basicConstraints = CA:FALSE<br>keyUsage = critical, digitalSignature, keyEncipherment<br>extendedKeyUsage = serverAuth<br><br>[ v3_req_client ]<br>basicConstraints = CA:FALSE<br>keyUsage = critical, digitalSignature, keyEncipherment<br>extendedKeyUsage = clientAuth<br><br>[ v3_req_apiserver ]<br>basicConstraints = CA:FALSE<br>keyUsage = critical, digitalSignature, keyEncipherment<br>extendedKeyUsage = serverAuth<br>subjectAltName = @alt_names_cluster<br><br>[ v3_req_etcd ]<br>basicConstraints = CA:FALSE<br>keyUsage = critical, digitalSignature, keyEncipherment<br>extendedKeyUsage = serverAuth, clientAuth<br>subjectAltName = @alt_names_etcd<br><br>[ alt_names_cluster ]<br>DNS.1 = kubernetes<br>DNS.2 = kubernetes.default<br>DNS.3 = kubernetes.default.svc<br>DNS.4 = kubernetes.default.svc.cluster.local<br>DNS.5 = k8s-master1<br>DNS.6 = k8s-master2<br>DNS.7 = k8s-master3<br>DNS.8 = localhost<br>IP.1 = 10.96.0.1<br>IP.2 = 127.0.0.1<br>IP.3 = 10.0.7.100<br>IP.4 = 10.0.7.101<br>IP.5 = 10.0.7.102<br>IP.6 = 10.0.7.103<br><br>[ alt_names_etcd ]<br>DNS.1 = localhost<br>IP.1 = 10.0.7.101<br>IP.2 = 10.0.7.102<br>IP.3 = 10.0.7.103<br>IP.4 = 127.0.0.1<br>EOF<br></code></pre></td></tr></table></figure><p>生成 CA 证书</p><table><thead><tr><th>path</th><th>Default CN</th><th>description</th></tr></thead><tbody><tr><td>ca.crt,key</td><td>kubernetes-ca</td><td>Kubernetes general CA</td></tr><tr><td>etcd&#x2F;ca.crt,key</td><td>etcd-ca</td><td>For all etcd-related functions</td></tr><tr><td>front-proxy-ca.crt,key</td><td>kubernetes-front-proxy-ca</td><td>For the front-end proxy</td></tr></tbody></table><p>kubernetes-ca</p><figure class="highlight sas"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sas">openssl genrsa -<span class="hljs-keyword">out</span> ca.<span class="hljs-keyword">key</span> 2048<br>openssl req -x509 -new -nodes -<span class="hljs-keyword">key</span> ca.<span class="hljs-keyword">key</span> -config openssl.cnf -subj <span class="hljs-string">&quot;/CN=kubernetes-ca&quot;</span> -extensions v3_ca -<span class="hljs-keyword">out</span> ca.crt -days 10000<br></code></pre></td></tr></table></figure><p>etcd-ca</p><figure class="highlight sas"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sas">openssl genrsa -<span class="hljs-keyword">out</span> etcd/ca.<span class="hljs-keyword">key</span> 2048<br>openssl req -x509 -new -nodes -<span class="hljs-keyword">key</span> etcd/ca.<span class="hljs-keyword">key</span> -config openssl.cnf -subj <span class="hljs-string">&quot;/CN=etcd-ca&quot;</span> -extensions v3_ca -<span class="hljs-keyword">out</span> etcd/ca.crt -days 10000<br></code></pre></td></tr></table></figure><p>front-proxy-ca</p><figure class="highlight sas"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sas">openssl genrsa -<span class="hljs-keyword">out</span> front-proxy-ca.<span class="hljs-keyword">key</span> 2048<br>openssl req -x509 -new -nodes -<span class="hljs-keyword">key</span> front-proxy-ca.<span class="hljs-keyword">key</span> -config openssl.cnf -subj <span class="hljs-string">&quot;/CN=kubernetes-ca&quot;</span> -extensions v3_ca -<span class="hljs-keyword">out</span> front-proxy-ca.crt -days 10000<br></code></pre></td></tr></table></figure><p>生成所有的证书</p><table><thead><tr><th>Default CN</th><th>Parent CA</th><th>O (in Subject)</th><th>kind</th></tr></thead><tbody><tr><td>kube-etcd</td><td>etcd-ca</td><td></td><td>server, client</td></tr><tr><td>kube-etcd-peer</td><td>etcd-ca</td><td></td><td>server, client</td></tr><tr><td>kube-etcd-healthcheck-client</td><td>etcd-ca</td><td></td><td>client</td></tr><tr><td>kube-apiserver-etcd-client</td><td>etcd-ca</td><td>system:masters</td><td>client</td></tr><tr><td>kube-apiserver</td><td>kubernetes-ca</td><td></td><td>server</td></tr><tr><td>kube-apiserver-kubelet-client</td><td>kubernetes-ca</td><td>system:masters</td><td>client</td></tr><tr><td>front-proxy-client</td><td>kubernetes-front-proxy-ca</td><td></td><td>client</td></tr></tbody></table><p>证书路径</p><table><thead><tr><th>Default CN</th><th>recommend key path</th><th>recommended cert path</th><th>command</th><th>key argument</th><th>cert argument</th></tr></thead><tbody><tr><td>etcd-ca</td><td></td><td>etcd&#x2F;ca.crt</td><td>kube-apiserver</td><td></td><td>–etcd-cafile</td></tr><tr><td>etcd-client</td><td>apiserver-etcd-client.key</td><td>apiserver-etcd-client.crt</td><td>kube-apiserver</td><td>–etcd-keyfile</td><td>–etcd-certfile</td></tr><tr><td>kubernetes-ca</td><td></td><td>ca.crt</td><td>kube-apiserver</td><td></td><td>–client-ca-file</td></tr><tr><td>kube-apiserver</td><td>apiserver.key</td><td>apiserver.crt</td><td>kube-apiserver</td><td>–tls-private-key-file</td><td>–tls-cert-file</td></tr><tr><td>apiserver-kubelet-client</td><td></td><td>apiserver-kubelet-client.crt</td><td>kube-apiserver</td><td></td><td>–kubelet-client-certificate</td></tr><tr><td>front-proxy-ca</td><td></td><td>front-proxy-ca.crt</td><td>kube-apiserver</td><td></td><td>–requestheader-client-ca-file</td></tr><tr><td>front-proxy-client</td><td>front-proxy-client.key</td><td>front-proxy-client.crt</td><td>kube-apiserver</td><td>–proxy-client-key-file</td><td>–proxy-client-cert-file</td></tr><tr><td>etcd-ca</td><td></td><td>etcd&#x2F;ca.crt</td><td>etcd</td><td></td><td>–trusted-ca-file, –peer-trusted-ca-file</td></tr><tr><td>kube-etcd</td><td>etcd&#x2F;server.key</td><td>etcd&#x2F;server.crt</td><td>etcd</td><td>–key-file</td><td>–cert-file</td></tr><tr><td>kube-etcd-peer</td><td>etcd&#x2F;peer.key</td><td>etcd&#x2F;peer.crt</td><td>etcd</td><td>–peer-key-file</td><td>–peer-cert-file</td></tr><tr><td>etcd-ca</td><td></td><td>etcd&#x2F;ca.crt</td><td>etcdctl</td><td></td><td>–cacert</td></tr><tr><td>kube-etcd-healthcheck-client</td><td>etcd&#x2F;healthcheck-client.key</td><td>etcd&#x2F;healthcheck-client.crt</td><td>etcdctl</td><td>–key</td><td>–cert</td></tr></tbody></table><p>生成证书</p><p>apiserver-etcd-client</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs stylus">openssl genrsa -out apiserver-etcd-client<span class="hljs-selector-class">.key</span> <span class="hljs-number">2048</span><br>openssl req -new -key apiserver-etcd-client<span class="hljs-selector-class">.key</span> -subj <span class="hljs-string">&quot;/CN=apiserver-etcd-client/O=system:masters&quot;</span> -out apiserver-etcd-client<span class="hljs-selector-class">.csr</span><br>openssl x509 -<span class="hljs-keyword">in</span> apiserver-etcd-client<span class="hljs-selector-class">.csr</span> -req -CA etcd/ca<span class="hljs-selector-class">.crt</span> -CAkey etcd/ca<span class="hljs-selector-class">.key</span> -CAcreateserial -extensions v3_req_etcd -extfile openssl<span class="hljs-selector-class">.cnf</span> -out apiserver-etcd-client<span class="hljs-selector-class">.crt</span> -days <span class="hljs-number">10000</span><br></code></pre></td></tr></table></figure><p>kube-etcd</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">openssl genrsa -<span class="hljs-keyword">out</span> etcd/<span class="hljs-keyword">server</span>.key <span class="hljs-number">2048</span><br>openssl req -<span class="hljs-built_in">new</span> -key etcd/<span class="hljs-keyword">server</span>.key -subj &quot;/CN=etcd-server&quot; -<span class="hljs-keyword">out</span> etcd/<span class="hljs-keyword">server</span>.csr<br>openssl x509 -<span class="hljs-keyword">in</span> etcd/<span class="hljs-keyword">server</span>.csr -req -CA etcd/ca.crt -CAkey etcd/ca.key -CAcreateserial -extensions v3_req_etcd -extfile openssl.cnf -<span class="hljs-keyword">out</span> etcd/<span class="hljs-keyword">server</span>.crt -days <span class="hljs-number">10000</span><br></code></pre></td></tr></table></figure><p>kube-etcd-peer</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs stylus">openssl genrsa -out etcd/peer<span class="hljs-selector-class">.key</span> <span class="hljs-number">2048</span><br>openssl req -new -key etcd/peer<span class="hljs-selector-class">.key</span> -subj <span class="hljs-string">&quot;/CN=etcd-peer&quot;</span> -out etcd/peer<span class="hljs-selector-class">.csr</span><br>openssl x509 -<span class="hljs-keyword">in</span> etcd/peer<span class="hljs-selector-class">.csr</span> -req -CA etcd/ca<span class="hljs-selector-class">.crt</span> -CAkey etcd/ca<span class="hljs-selector-class">.key</span> -CAcreateserial -extensions v3_req_etcd -extfile openssl<span class="hljs-selector-class">.cnf</span> -out etcd/peer<span class="hljs-selector-class">.crt</span> -days <span class="hljs-number">10000</span><br></code></pre></td></tr></table></figure><p>kube-etcd-healthcheck-client</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs stylus">openssl genrsa -out etcd/healthcheck-client<span class="hljs-selector-class">.key</span> <span class="hljs-number">2048</span><br>openssl req -new -key etcd/healthcheck-client<span class="hljs-selector-class">.key</span> -subj <span class="hljs-string">&quot;/CN=etcd-client&quot;</span> -out etcd/healthcheck-client<span class="hljs-selector-class">.csr</span><br>openssl x509 -<span class="hljs-keyword">in</span> etcd/healthcheck-client<span class="hljs-selector-class">.csr</span> -req -CA etcd/ca<span class="hljs-selector-class">.crt</span> -CAkey etcd/ca<span class="hljs-selector-class">.key</span> -CAcreateserial -extensions v3_req_etcd -extfile openssl<span class="hljs-selector-class">.cnf</span> -out etcd/healthcheck-client<span class="hljs-selector-class">.crt</span> -days <span class="hljs-number">10000</span><br></code></pre></td></tr></table></figure><p>kube-apiserver</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs stylus">openssl genrsa -out apiserver<span class="hljs-selector-class">.key</span> <span class="hljs-number">2048</span><br>openssl req -new -key apiserver<span class="hljs-selector-class">.key</span> -subj <span class="hljs-string">&quot;/CN=kube-apiserver&quot;</span> -config openssl<span class="hljs-selector-class">.cnf</span> -out apiserver<span class="hljs-selector-class">.csr</span><br>openssl x509 -req -<span class="hljs-keyword">in</span> apiserver<span class="hljs-selector-class">.csr</span> -CA ca<span class="hljs-selector-class">.crt</span> -CAkey ca<span class="hljs-selector-class">.key</span> -CAcreateserial -days <span class="hljs-number">10000</span> -extensions v3_req_apiserver -extfile openssl<span class="hljs-selector-class">.cnf</span> -out apiserver.crt<br></code></pre></td></tr></table></figure><p>apiserver-kubelet-client</p><figure class="highlight sas"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sas">openssl genrsa -<span class="hljs-keyword">out</span>  apiserver-kubelet-client.<span class="hljs-keyword">key</span> 2048<br>openssl req -new -<span class="hljs-keyword">key</span> apiserver-kubelet-client.<span class="hljs-keyword">key</span> -subj <span class="hljs-string">&quot;/CN=apiserver-kubelet-client/O=system:masters&quot;</span> -<span class="hljs-keyword">out</span> apiserver-kubelet-client.csr<br>openssl x509 -req -<span class="hljs-keyword">in</span> apiserver-kubelet-client.csr -CA ca.crt -CAkey ca.<span class="hljs-keyword">key</span> -CAcreateserial -days 10000 -extensions v3_req_client -extfile openssl.cnf -<span class="hljs-keyword">out</span> apiserver-kubelet-client.crt<br></code></pre></td></tr></table></figure><p>front-proxy-client</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs applescript">openssl genrsa -out  <span class="hljs-keyword">front</span>-proxy-client.key <span class="hljs-number">2048</span><br>openssl req -new -key <span class="hljs-keyword">front</span>-proxy-client.key -subj <span class="hljs-string">&quot;/CN=front-proxy-client&quot;</span> -out <span class="hljs-keyword">front</span>-proxy-client.csr<br>openssl x509 -req -<span class="hljs-keyword">in</span> <span class="hljs-keyword">front</span>-proxy-client.csr -CA <span class="hljs-keyword">front</span>-proxy-ca.crt -CAkey <span class="hljs-keyword">front</span>-proxy-ca.key -CAcreateserial -days <span class="hljs-number">10000</span> -extensions v3_req_client -extfile openssl.cnf -out <span class="hljs-keyword">front</span>-proxy-client.crt<br></code></pre></td></tr></table></figure><p>kube-scheduler 证书</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">openssl genrsa -out  kube-<span class="hljs-keyword">scheduler.key </span><span class="hljs-number">2048</span><br>openssl req -new -key kube-<span class="hljs-keyword">scheduler.key </span>-<span class="hljs-keyword">subj </span><span class="hljs-string">&quot;/CN=system:kube-scheduler&quot;</span> -out kube-<span class="hljs-keyword">scheduler.csr</span><br><span class="hljs-keyword"></span>openssl x509 -req -in kube-<span class="hljs-keyword">scheduler.csr </span>-CA ca.crt -CAkey ca.key -CAcreateserial -days <span class="hljs-number">10000</span> -<span class="hljs-keyword">extensions </span>v3_req_client -<span class="hljs-keyword">extfile </span>openssl.cnf -out kube-<span class="hljs-keyword">scheduler.crt</span><br></code></pre></td></tr></table></figure><p>sa.pub sa.key</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs stata">openssl genrsa -<span class="hljs-keyword">out</span>  <span class="hljs-keyword">sa</span>.key 2048<br>openssl ecparam -name secp521r1 -genkey -noout -<span class="hljs-keyword">out</span> <span class="hljs-keyword">sa</span>.key<br>openssl ec -<span class="hljs-keyword">in</span> <span class="hljs-keyword">sa</span>.key -outform PEM -pubout -<span class="hljs-keyword">out</span> <span class="hljs-keyword">sa</span>.pub<br>openssl req -new -sha256 -key <span class="hljs-keyword">sa</span>.key -subj <span class="hljs-string">&quot;/CN=system:kube-controller-manager&quot;</span> -<span class="hljs-keyword">out</span> <span class="hljs-keyword">sa</span>.csr<br>openssl x509 -req -<span class="hljs-keyword">in</span> <span class="hljs-keyword">sa</span>.csr -<span class="hljs-keyword">CA</span> <span class="hljs-keyword">ca</span>.crt -CAkey <span class="hljs-keyword">ca</span>.key -CAcreateserial -days 10000 -extensions v3_req_client -extfile openssl.cnf -<span class="hljs-keyword">out</span> <span class="hljs-keyword">sa</span>.crt<br></code></pre></td></tr></table></figure><p>admin 证书</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">openssl genrsa -<span class="hljs-keyword">out</span>  <span class="hljs-keyword">admin</span>.key <span class="hljs-number">2048</span><br>openssl req -<span class="hljs-built_in">new</span> -key <span class="hljs-keyword">admin</span>.key -subj &quot;/CN=kubernetes-admin/O=system:masters&quot; -<span class="hljs-keyword">out</span> <span class="hljs-keyword">admin</span>.csr<br>openssl x509 -req -<span class="hljs-keyword">in</span> <span class="hljs-keyword">admin</span>.csr -CA ca.crt -CAkey ca.key -CAcreateserial -days <span class="hljs-number">10000</span> -extensions v3_req_client -extfile openssl.cnf -<span class="hljs-keyword">out</span> <span class="hljs-keyword">admin</span>.crt<br></code></pre></td></tr></table></figure><p>清理 csr srl</p><figure class="highlight sqf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sqf"><span class="hljs-built_in">find</span> . -<span class="hljs-built_in">name</span> <span class="hljs-string">&quot;*.csr&quot;</span> -o -<span class="hljs-built_in">name</span> <span class="hljs-string">&quot;*.srl&quot;</span>|xargs  rm -f<br></code></pre></td></tr></table></figure><h2 id="准备-kubeconfig"><a href="#准备-kubeconfig" class="headerlink" title="准备 kubeconfig"></a>准备 kubeconfig</h2><table><thead><tr><th>filename</th><th>credential name</th><th>Default CN</th><th>O (in Subject)</th></tr></thead><tbody><tr><td>admin.conf</td><td>default-admin</td><td>kubernetes-admin</td><td>system:masters</td></tr><tr><td>controller-manager.conf</td><td>default-controller-manager</td><td>system:kube-controller-manager</td><td></td></tr><tr><td>scheduler.conf</td><td>default-manager</td><td>system:kube-scheduler</td><td></td></tr></tbody></table><p>kube-controller-manager</p><figure class="highlight dsconfig"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs dsconfig"><span class="hljs-string">CLUSTER_NAME</span>=<span class="hljs-string">&quot;kubernetes&quot;</span><br><span class="hljs-string">KUBE_APISERVER</span>=<span class="hljs-string">&quot;https://10.0.7.100:8443&quot;</span><br><span class="hljs-string">KUBE_USER</span>=<span class="hljs-string">&quot;system:kube-controller-manager&quot;</span><br><span class="hljs-string">KUBE_CERT</span>=<span class="hljs-string">&quot;sa&quot;</span><br><span class="hljs-string">KUBE_CONFIG</span>=<span class="hljs-string">&quot;controller-manager.conf&quot;</span><br><br><span class="hljs-comment"># 设置集群参数</span><br><span class="hljs-string">kubectl</span> <span class="hljs-string">config</span> <span class="hljs-built_in">set-cluster</span> $&#123;<span class="hljs-string">CLUSTER_NAME</span>&#125; \<br>  <span class="hljs-built_in">--certificate-authority=/etc/kubernetes/pki/ca.crt</span> \<br>  <span class="hljs-built_in">--embed-certs=true</span> \<br>  <span class="hljs-built_in">--server=$&#123;KUBE_APISERVER&#125;</span> \<br>  <span class="hljs-built_in">--kubeconfig=/etc/kubernetes/$&#123;KUBE_CONFIG&#125;</span><br><br><span class="hljs-comment"># 设置客户端认证参数</span><br><span class="hljs-string">kubectl</span> <span class="hljs-string">config</span> <span class="hljs-built_in">set-credentials</span> $&#123;<span class="hljs-string">KUBE_USER</span>&#125; \<br>  <span class="hljs-built_in">--client-certificate=/etc/kubernetes/pki/$&#123;KUBE_CERT&#125;.crt</span> \<br>  <span class="hljs-built_in">--client-key=/etc/kubernetes/pki/$&#123;KUBE_CERT&#125;.key</span> \<br>  <span class="hljs-built_in">--embed-certs=true</span> \<br>  <span class="hljs-built_in">--kubeconfig=/etc/kubernetes/$&#123;KUBE_CONFIG&#125;</span><br><br><span class="hljs-comment"># 设置上下文参数</span><br><span class="hljs-string">kubectl</span> <span class="hljs-string">config</span> <span class="hljs-built_in">set-context</span> $&#123;<span class="hljs-string">KUBE_USER</span>&#125;@$&#123;<span class="hljs-string">CLUSTER_NAME</span>&#125; \<br>  <span class="hljs-built_in">--cluster=$&#123;CLUSTER_NAME&#125;</span> \<br>  <span class="hljs-built_in">--user=$&#123;KUBE_USER&#125;</span> \<br>  <span class="hljs-built_in">--kubeconfig=/etc/kubernetes/$&#123;KUBE_CONFIG&#125;</span><br><br><span class="hljs-comment"># 设置当前使用的上下文</span><br><span class="hljs-string">kubectl</span> <span class="hljs-string">config</span> <span class="hljs-string">use-context</span> $&#123;<span class="hljs-string">KUBE_USER</span>&#125;@$&#123;<span class="hljs-string">CLUSTER_NAME</span>&#125; <span class="hljs-built_in">--kubeconfig=/etc/kubernetes/$&#123;KUBE_CONFIG&#125;</span><br><br><span class="hljs-comment"># 查看生成的配置文件</span><br><span class="hljs-string">kubectl</span> <span class="hljs-string">config</span> <span class="hljs-string">view</span> <span class="hljs-built_in">--kubeconfig=/etc/kubernetes/$&#123;KUBE_CONFIG&#125;</span><br></code></pre></td></tr></table></figure><p>kube-scheduler</p><figure class="highlight dsconfig"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs dsconfig"><span class="hljs-string">CLUSTER_NAME</span>=<span class="hljs-string">&quot;kubernetes&quot;</span><br><span class="hljs-string">KUBE_APISERVER</span>=<span class="hljs-string">&quot;https://10.0.7.100:8443&quot;</span><br><span class="hljs-string">KUBE_USER</span>=<span class="hljs-string">&quot;system:kube-scheduler&quot;</span><br><span class="hljs-string">KUBE_CERT</span>=<span class="hljs-string">&quot;kube-scheduler&quot;</span><br><span class="hljs-string">KUBE_CONFIG</span>=<span class="hljs-string">&quot;scheduler.conf&quot;</span><br><br><span class="hljs-comment"># 设置集群参数</span><br><span class="hljs-string">kubectl</span> <span class="hljs-string">config</span> <span class="hljs-built_in">set-cluster</span> $&#123;<span class="hljs-string">CLUSTER_NAME</span>&#125; \<br>  <span class="hljs-built_in">--certificate-authority=/etc/kubernetes/pki/ca.crt</span> \<br>  <span class="hljs-built_in">--embed-certs=true</span> \<br>  <span class="hljs-built_in">--server=$&#123;KUBE_APISERVER&#125;</span> \<br>  <span class="hljs-built_in">--kubeconfig=/etc/kubernetes/$&#123;KUBE_CONFIG&#125;</span><br><br><span class="hljs-comment"># 设置客户端认证参数</span><br><span class="hljs-string">kubectl</span> <span class="hljs-string">config</span> <span class="hljs-built_in">set-credentials</span> $&#123;<span class="hljs-string">KUBE_USER</span>&#125; \<br>  <span class="hljs-built_in">--client-certificate=/etc/kubernetes/pki/$&#123;KUBE_CERT&#125;.crt</span> \<br>  <span class="hljs-built_in">--client-key=/etc/kubernetes/pki/$&#123;KUBE_CERT&#125;.key</span> \<br>  <span class="hljs-built_in">--embed-certs=true</span> \<br>  <span class="hljs-built_in">--kubeconfig=/etc/kubernetes/$&#123;KUBE_CONFIG&#125;</span><br><br><span class="hljs-comment"># 设置上下文参数</span><br><span class="hljs-string">kubectl</span> <span class="hljs-string">config</span> <span class="hljs-built_in">set-context</span> $&#123;<span class="hljs-string">KUBE_USER</span>&#125;@$&#123;<span class="hljs-string">CLUSTER_NAME</span>&#125; \<br>  <span class="hljs-built_in">--cluster=$&#123;CLUSTER_NAME&#125;</span> \<br>  <span class="hljs-built_in">--user=$&#123;KUBE_USER&#125;</span> \<br>  <span class="hljs-built_in">--kubeconfig=/etc/kubernetes/$&#123;KUBE_CONFIG&#125;</span><br><br><span class="hljs-comment"># 设置当前使用的上下文</span><br><span class="hljs-string">kubectl</span> <span class="hljs-string">config</span> <span class="hljs-string">use-context</span> $&#123;<span class="hljs-string">KUBE_USER</span>&#125;@$&#123;<span class="hljs-string">CLUSTER_NAME</span>&#125; <span class="hljs-built_in">--kubeconfig=/etc/kubernetes/$&#123;KUBE_CONFIG&#125;</span><br><br><span class="hljs-comment"># 查看生成的配置文件</span><br><span class="hljs-string">kubectl</span> <span class="hljs-string">config</span> <span class="hljs-string">view</span> <span class="hljs-built_in">--kubeconfig=/etc/kubernetes/$&#123;KUBE_CONFIG&#125;</span><br></code></pre></td></tr></table></figure><p>admin</p><figure class="highlight dsconfig"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs dsconfig"><span class="hljs-string">CLUSTER_NAME</span>=<span class="hljs-string">&quot;kubernetes&quot;</span><br><span class="hljs-string">KUBE_APISERVER</span>=<span class="hljs-string">&quot;https://10.0.7.100:8443&quot;</span><br><span class="hljs-string">KUBE_USER</span>=<span class="hljs-string">&quot;kubernetes-admin&quot;</span><br><span class="hljs-string">KUBE_CERT</span>=<span class="hljs-string">&quot;admin&quot;</span><br><span class="hljs-string">KUBE_CONFIG</span>=<span class="hljs-string">&quot;admin.conf&quot;</span><br><br><span class="hljs-comment"># 设置集群参数</span><br><span class="hljs-string">kubectl</span> <span class="hljs-string">config</span> <span class="hljs-built_in">set-cluster</span> $&#123;<span class="hljs-string">CLUSTER_NAME</span>&#125; \<br>  <span class="hljs-built_in">--certificate-authority=/etc/kubernetes/pki/ca.crt</span> \<br>  <span class="hljs-built_in">--embed-certs=true</span> \<br>  <span class="hljs-built_in">--server=$&#123;KUBE_APISERVER&#125;</span> \<br>  <span class="hljs-built_in">--kubeconfig=/etc/kubernetes/$&#123;KUBE_CONFIG&#125;</span><br><br><span class="hljs-comment"># 设置客户端认证参数</span><br><span class="hljs-string">kubectl</span> <span class="hljs-string">config</span> <span class="hljs-built_in">set-credentials</span> $&#123;<span class="hljs-string">KUBE_USER</span>&#125; \<br>  <span class="hljs-built_in">--client-certificate=/etc/kubernetes/pki/$&#123;KUBE_CERT&#125;.crt</span> \<br>  <span class="hljs-built_in">--client-key=/etc/kubernetes/pki/$&#123;KUBE_CERT&#125;.key</span> \<br>  <span class="hljs-built_in">--embed-certs=true</span> \<br>  <span class="hljs-built_in">--kubeconfig=/etc/kubernetes/$&#123;KUBE_CONFIG&#125;</span><br><br><span class="hljs-comment"># 设置上下文参数</span><br><span class="hljs-string">kubectl</span> <span class="hljs-string">config</span> <span class="hljs-built_in">set-context</span> $&#123;<span class="hljs-string">KUBE_USER</span>&#125;@$&#123;<span class="hljs-string">CLUSTER_NAME</span>&#125; \<br>  <span class="hljs-built_in">--cluster=$&#123;CLUSTER_NAME&#125;</span> \<br>  <span class="hljs-built_in">--user=$&#123;KUBE_USER&#125;</span> \<br>  <span class="hljs-built_in">--kubeconfig=/etc/kubernetes/$&#123;KUBE_CONFIG&#125;</span><br><br><span class="hljs-comment"># 设置当前使用的上下文</span><br><span class="hljs-string">kubectl</span> <span class="hljs-string">config</span> <span class="hljs-string">use-context</span> $&#123;<span class="hljs-string">KUBE_USER</span>&#125;@$&#123;<span class="hljs-string">CLUSTER_NAME</span>&#125; <span class="hljs-built_in">--kubeconfig=/etc/kubernetes/$&#123;KUBE_CONFIG&#125;</span><br><br><span class="hljs-comment"># 查看生成的配置文件</span><br><span class="hljs-string">kubectl</span> <span class="hljs-string">config</span> <span class="hljs-string">view</span> <span class="hljs-built_in">--kubeconfig=/etc/kubernetes/$&#123;KUBE_CONFIG&#125;</span><br></code></pre></td></tr></table></figure><h2 id="分发证书"><a href="#分发证书" class="headerlink" title="分发证书"></a>分发证书</h2><p>分发到 config 及证书其他 master 节点</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">scp  -r <span class="hljs-regexp">/etc/</span>kubernetes root@k8s-master2:/etc<br>scp  -r <span class="hljs-regexp">/etc/</span>kubernetes root@k8s-master3:/etc<br></code></pre></td></tr></table></figure><h2 id="配置-HA"><a href="#配置-HA" class="headerlink" title="配置 HA"></a>配置 HA</h2><p>master 节点，配置 envoy</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">mkdir</span> <span class="hljs-string">-p</span> <span class="hljs-string">/etc/envoy</span><br><span class="hljs-string">cat</span> <span class="hljs-string">&lt;&lt;EOF&gt;</span> <span class="hljs-string">/etc/envoy/envoy.yaml</span><br><span class="hljs-attr">static_resources:</span><br>  <span class="hljs-attr">listeners:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">address:</span><br>      <span class="hljs-attr">socket_address:</span><br>        <span class="hljs-attr">address:</span> <span class="hljs-number">0.0</span><span class="hljs-number">.0</span><span class="hljs-number">.0</span><br>        <span class="hljs-attr">port_value:</span> <span class="hljs-number">8443</span><br>    <span class="hljs-attr">filter_chains:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">filters:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">envoy.tcp_proxy</span><br>        <span class="hljs-attr">config:</span><br>          <span class="hljs-attr">stat_prefix:</span> <span class="hljs-string">ingress_tcp</span><br>          <span class="hljs-attr">cluster:</span> <span class="hljs-string">kube_apiserver</span><br>          <span class="hljs-attr">access_log:</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">envoy.file_access_log</span><br>              <span class="hljs-attr">config:</span><br>                <span class="hljs-attr">path:</span> <span class="hljs-string">/dev/stdout</span><br>  <span class="hljs-attr">clusters:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">kube_apiserver</span><br>    <span class="hljs-attr">connect_timeout:</span> <span class="hljs-number">0.</span><span class="hljs-string">25s</span><br>    <span class="hljs-attr">type:</span> <span class="hljs-string">strict_dns</span><br>    <span class="hljs-attr">lb_policy:</span> <span class="hljs-string">round_robin</span><br>    <span class="hljs-attr">hosts:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">socket_address:</span><br>        <span class="hljs-attr">address:</span> <span class="hljs-number">10.0</span><span class="hljs-number">.7</span><span class="hljs-number">.101</span><br>        <span class="hljs-attr">port_value:</span> <span class="hljs-number">6443</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">socket_address:</span><br>        <span class="hljs-attr">address:</span> <span class="hljs-number">10.0</span><span class="hljs-number">.7</span><span class="hljs-number">.102</span><br>        <span class="hljs-attr">port_value:</span> <span class="hljs-number">6443</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">socket_address:</span><br>        <span class="hljs-attr">address:</span> <span class="hljs-number">10.0</span><span class="hljs-number">.7</span><span class="hljs-number">.103</span><br>        <span class="hljs-attr">port_value:</span> <span class="hljs-number">6443</span><br><br><span class="hljs-attr">admin:</span><br>  <span class="hljs-attr">access_log_path:</span> <span class="hljs-string">&quot;/dev/null&quot;</span><br>  <span class="hljs-attr">address:</span><br>    <span class="hljs-attr">socket_address:</span><br>      <span class="hljs-attr">address:</span> <span class="hljs-number">0.0</span><span class="hljs-number">.0</span><span class="hljs-number">.0</span><br>      <span class="hljs-attr">port_value:</span> <span class="hljs-number">8001</span><br><span class="hljs-string">EOF</span><br></code></pre></td></tr></table></figure><p>envoy unit file</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs routeros">cat&lt;&lt;EOF&gt; /lib/systemd/system/envoy.service<br>[Unit]<br><span class="hljs-attribute">Description</span>=Envoy Container<br><span class="hljs-attribute">After</span>=docker.service<br><span class="hljs-attribute">Requires</span>=docker.service<br><br>[Service]<br><span class="hljs-attribute">TimeoutStartSec</span>=0<br><span class="hljs-attribute">Restart</span>=always<br><span class="hljs-attribute">ExecStartPre</span>=-/usr/bin/docker stop %n<br><span class="hljs-attribute">ExecStartPre</span>=-/usr/bin/docker rm %n<br><span class="hljs-attribute">ExecStartPre</span>=/usr/bin/docker pull envoyproxy/envoy:latest<br><span class="hljs-attribute">ExecStart</span>=/usr/bin/docker <span class="hljs-built_in">run</span> --rm -v /etc/envoy/envoy.yaml:/etc/envoy/envoy.yaml --network host --name %n envoyproxy/envoy:latest<br><br>[Install]<br><span class="hljs-attribute">WantedBy</span>=multi-user.target<br>EOF<br><br>systemctl restart envoy.service<br>systemctl <span class="hljs-built_in">enable</span> envoy.service<br>systemctl status envoy.service -l<br></code></pre></td></tr></table></figure><p>master 配置 keepalived</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">apt-<span class="hljs-built_in">get</span> install keepalived -y<br></code></pre></td></tr></table></figure><p>keepalived 健康检查脚本</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">cat</span> &lt;&lt;<span class="hljs-string">&#x27;EOF&#x27;</span>&gt; /etc/keepalived/ha_check.sh<br><span class="hljs-comment">#!/bin/sh</span><br>VIRTUAL_IP=<span class="hljs-number">10.0.7.100</span><br><br><span class="hljs-literal">error</span>Exit() &#123;<br>    <span class="hljs-attribute">echo</span> <span class="hljs-string">&quot;*** $*&quot;</span> <span class="hljs-number">1</span>&gt;&amp;<span class="hljs-number">2</span><br>    exit <span class="hljs-number">1</span><br>&#125;<br><br>if ip addr | grep -q <span class="hljs-variable">$VIRTUAL_IP</span> ; <span class="hljs-attribute">then</span><br>    curl -s --max-time <span class="hljs-number">2</span> --insecure https://<span class="hljs-variable">$&#123;VIRTUAL_IP&#125;</span>:8443/ -o /dev/null || <span class="hljs-literal">error</span>Exit <span class="hljs-string">&quot;Error GET https://<span class="hljs-variable">$&#123;VIRTUAL_IP&#125;</span>:8443/&quot;</span><br>fi<br>EOF<br></code></pre></td></tr></table></figure><p>keepalived 配置文件</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">cat &lt;&lt;EOF&gt; /etc/keepalived/keepalived.conf<br>vrrp_script ha-check &#123;<br>    script <span class="hljs-string">&quot;/bin/bash /etc/keepalived/ha_check.sh&quot;</span><br>    <span class="hljs-built_in">int</span>erval <span class="hljs-number">3</span><br>    weight <span class="hljs-number">-2</span><br>    fall <span class="hljs-number">10</span><br>    rise <span class="hljs-number">2</span><br>&#125;<br><br>vrrp_instance k8s-vip &#123;<br>    state BACKUP<br>    priority <span class="hljs-number">101</span><br>    <span class="hljs-keyword">interface</span> <span class="hljs-symbol">enp0s8</span><br>    <span class="hljs-symbol">virtual_router_id</span> <span class="hljs-symbol">47</span><br>    <span class="hljs-symbol">advert_int</span> <span class="hljs-symbol">3</span><br><br>    <span class="hljs-symbol">unicast_peer</span> &#123;<br>        <span class="hljs-number">10.0</span><span class="hljs-number">.7</span><span class="hljs-number">.101</span><br>        <span class="hljs-number">10.0</span><span class="hljs-number">.7</span><span class="hljs-number">.102</span><br>        <span class="hljs-number">10.0</span><span class="hljs-number">.7</span><span class="hljs-number">.103</span><br>    &#125;<br><br>    virtual_ipaddress &#123;<br>        <span class="hljs-number">10.0</span><span class="hljs-number">.7</span><span class="hljs-number">.100</span><br>    &#125;<br><br>    track_script &#123;<br>        ha-check<br>    &#125;<br>&#125;<br>EOF<br><br>systemctl restart  keepalived.service<br>systemctl enable  keepalived.service<br></code></pre></td></tr></table></figure><h2 id="配置-etcd"><a href="#配置-etcd" class="headerlink" title="配置 etcd"></a>配置 etcd</h2><p>安装 etcd 二进制</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs awk">mkdir -p <span class="hljs-regexp">/var/</span>lib/etcd<br>ETCD_VER=v3.<span class="hljs-number">3.10</span><br>wget https:<span class="hljs-regexp">//</span>storage.googleapis.com<span class="hljs-regexp">/etcd/</span><span class="hljs-variable">$&#123;ETCD_VER&#125;</span>/etcd-<span class="hljs-variable">$&#123;ETCD_VER&#125;</span>-linux-amd64.tar.gz<br>tar xf etcd-<span class="hljs-variable">$&#123;ETCD_VER&#125;</span>-linux-amd64.tar.gz  --strip-components=<span class="hljs-number">1</span> -C <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/bin etcd-$&#123;ETCD_VER&#125;-linux-amd64/</span>&#123;etcd,etcdctl&#125;<br>mkdir -p <span class="hljs-regexp">/usr/</span>lib<span class="hljs-regexp">/systemd/</span>system/<br></code></pre></td></tr></table></figure><p>设置 unit file 并启动 etcd,其他节点修改对应 ETCD_NAME 为 etcd1 和 etcd2，ip 改为节点 IP。</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs awk">ETCD_NAME=etcd0<br>ETCD_IP=<span class="hljs-string">&quot;10.0.7.101&quot;</span><br>ETCD_IPS=(<span class="hljs-number">10.0</span>.<span class="hljs-number">7.101</span> <span class="hljs-number">10.0</span>.<span class="hljs-number">7.102</span> <span class="hljs-number">10.0</span>.<span class="hljs-number">7.103</span>)<br><br>cat&lt;&lt;EOF&gt; <span class="hljs-regexp">/usr/</span>lib<span class="hljs-regexp">/systemd/</span>system/etcd.service <br>[Unit]<br>Description=etcd<br>Documentation=https:<span class="hljs-regexp">//</span>coreos.com<span class="hljs-regexp">/etcd/</span>docs<span class="hljs-regexp">/latest/</span><br>After=network.target<br><br>[Service]<br>Type=notify<br>WorkingDirectory=<span class="hljs-regexp">/var/</span>lib/etcd<br>ExecStart=<span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/bin/</span>etcd \\<br>    --name=<span class="hljs-variable">$&#123;ETCD_NAME&#125;</span> \\<br>    --data-dir=<span class="hljs-regexp">/var/</span>lib/etcd \\<br>    --listen-client-urls=https:<span class="hljs-regexp">//</span><span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>:<span class="hljs-number">2379</span>,https:<span class="hljs-regexp">//</span><span class="hljs-variable">$&#123;ETCD_IP&#125;</span>:<span class="hljs-number">2379</span> \\<br>    --advertise-client-urls=https:<span class="hljs-regexp">//</span><span class="hljs-variable">$&#123;ETCD_IP&#125;</span>:<span class="hljs-number">2379</span> \\<br>    --listen-peer-urls=https:<span class="hljs-regexp">//</span><span class="hljs-variable">$&#123;ETCD_IP&#125;</span>:<span class="hljs-number">2380</span> \\<br>    --initial-advertise-peer-urls=https:<span class="hljs-regexp">//</span><span class="hljs-variable">$&#123;ETCD_IP&#125;</span>:<span class="hljs-number">2380</span> \\<br>    --cert-file=<span class="hljs-regexp">/etc/</span>kubernetes<span class="hljs-regexp">/pki/</span>etcd/server.crt \\<br>    --key-file=<span class="hljs-regexp">/etc/</span>kubernetes<span class="hljs-regexp">/pki/</span>etcd/server.key \\<br>    --client-cert-auth \\<br>    --trusted-ca-file=<span class="hljs-regexp">/etc/</span>kubernetes<span class="hljs-regexp">/pki/</span>etcd/ca.crt \\<br>    --peer-cert-file=<span class="hljs-regexp">/etc/</span>kubernetes<span class="hljs-regexp">/pki/</span>etcd/peer.crt \\<br>    --peer-key-file=<span class="hljs-regexp">/etc/</span>kubernetes<span class="hljs-regexp">/pki/</span>etcd/peer.key \\<br>    --peer-client-cert-auth \\<br>    --peer-trusted-ca-file=<span class="hljs-regexp">/etc/</span>kubernetes<span class="hljs-regexp">/pki/</span>etcd/ca.crt \\<br>    --initial-cluster=etcd0=https:<span class="hljs-regexp">//</span><span class="hljs-variable">$&#123;ETCD_IPS[0]&#125;</span>:<span class="hljs-number">2380</span>,etcd1=https:<span class="hljs-regexp">//</span><span class="hljs-variable">$&#123;ETCD_IPS[1]&#125;</span>:<span class="hljs-number">2380</span>,etcd2=https:<span class="hljs-regexp">//</span><span class="hljs-variable">$&#123;ETCD_IPS[2]&#125;</span>:<span class="hljs-number">2380</span> \\<br>    --initial-cluster-token=my-etcd-token \\<br>    --initial-cluster-state=new \\<br>    --heartbeat-interval <span class="hljs-number">1000</span> \\<br>    --election-timeout <span class="hljs-number">5000</span><br><br>Restart=always<br>RestartSec=<span class="hljs-number">10</span>s<br>LimitNOFILE=<span class="hljs-number">65535</span><br><br>[Install]<br>WantedBy=multi-user.target<br>EOF<br>systemctl daemon-reload<br>systemctl restart etcd<br>systemctl enable etcd<br></code></pre></td></tr></table></figure><p>检查 </p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs gradle">etcdctl \<br> --cert-<span class="hljs-keyword">file</span> <span class="hljs-regexp">/etc/</span>kubernetes<span class="hljs-regexp">/pki/</span>etcd/healthcheck-client.crt \<br> --key-<span class="hljs-keyword">file</span> <span class="hljs-regexp">/etc/</span>kubernetes<span class="hljs-regexp">/pki/</span>etcd/healthcheck-client.key \<br> --ca-<span class="hljs-keyword">file</span> <span class="hljs-regexp">/etc/</span>kubernetes<span class="hljs-regexp">/pki/</span>etcd/ca.crt \<br> --endpoints https:<span class="hljs-comment">//10.0.7.101:2379 cluster-health</span><br></code></pre></td></tr></table></figure><h2 id="配置-master-组件"><a href="#配置-master-组件" class="headerlink" title="配置 master 组件"></a>配置 master 组件</h2><p>启动 api-server</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-attribute">NODE_IP</span>=<span class="hljs-string">&quot;10.0.7.101&quot;</span><br><br>cat &lt;&lt;EOF&gt; /usr/lib/systemd/system/kube-apiserver.service<br>[Unit]<br><span class="hljs-attribute">Description</span>=Kubernetes API<span class="hljs-built_in"> Server</span><br><span class="hljs-built_in"></span><span class="hljs-attribute">Documentation</span>=https://github.com/kubernetes/kubernetes<br><span class="hljs-attribute">After</span>=network.target<br><br>[Service]<br><span class="hljs-attribute">ExecStart</span>=/usr/local/bin/kube-apiserver \\<br>  <span class="hljs-attribute">--authorization-mode</span>=Node,RBAC \\<br>  <span class="hljs-attribute">--enable-admission-plugins</span>=Initializers,DefaultStorageClass,DefaultTolerationSeconds,LimitRanger,NamespaceLifecycle,NodeRestriction,PersistentVolumeClaimResize,ResourceQuota,ServiceAccount,MutatingAdmissionWebhook,ValidatingAdmissionWebhook,Priority \\<br>  <span class="hljs-attribute">--advertise-address</span>=<span class="hljs-variable">$&#123;NODE_IP&#125;</span> \\<br>  <span class="hljs-attribute">--bind-address</span>=<span class="hljs-variable">$&#123;NODE_IP&#125;</span>  \\<br>  <span class="hljs-attribute">--insecure-port</span>=0 \\<br>  <span class="hljs-attribute">--secure-port</span>=6443 \\<br>  <span class="hljs-attribute">--allow-privileged</span>=<span class="hljs-literal">true</span> \\<br>  <span class="hljs-attribute">--apiserver-count</span>=3 \\<br>  <span class="hljs-attribute">--audit-log-maxage</span>=30 \\<br>  <span class="hljs-attribute">--audit-log-maxbackup</span>=3 \\<br>  <span class="hljs-attribute">--audit-log-maxsize</span>=100 \\<br>  <span class="hljs-attribute">--audit-log-path</span>=/var/log/audit.log \\<br>  <span class="hljs-attribute">--enable-swagger-ui</span>=<span class="hljs-literal">true</span> \\<br>  <span class="hljs-attribute">--storage-backend</span>=etcd3 \\<br>  <span class="hljs-attribute">--etcd-cafile</span>=/etc/kubernetes/pki/etcd/ca.crt \\<br>  <span class="hljs-attribute">--etcd-certfile</span>=/etc/kubernetes/pki/apiserver-etcd-client.crt \\<br>  <span class="hljs-attribute">--etcd-keyfile</span>=/etc/kubernetes/pki/apiserver-etcd-client.key \\<br>  <span class="hljs-attribute">--etcd-servers</span>=https://10.0.7.101:2379,https://10.0.7.102:2379,https://10.0.7.103:2379 \\<br>  <span class="hljs-attribute">--event-ttl</span>=1h \\<br>  --enable-bootstrap-token-auth \\<br>  <span class="hljs-attribute">--client-ca-file</span>=/etc/kubernetes/pki/ca.crt \\<br>  --kubelet-https \\<br>  <span class="hljs-attribute">--kubelet-client-certificate</span>=/etc/kubernetes/pki/apiserver-kubelet-client.crt \\<br>  <span class="hljs-attribute">--kubelet-client-key</span>=/etc/kubernetes/pki/apiserver-kubelet-client.key \\<br>  <span class="hljs-attribute">--kubelet-preferred-address-types</span>=InternalIP,ExternalIP,Hostname \\<br>  <span class="hljs-attribute">--runtime-config</span>=api/all \\<br>  <span class="hljs-attribute">--service-cluster-ip-range</span>=10.96.0.0/12 \\<br>  <span class="hljs-attribute">--service-node-port-range</span>=30000-32767 \\<br>  <span class="hljs-attribute">--service-account-key-file</span>=/etc/kubernetes/pki/sa.pub \\<br>  <span class="hljs-attribute">--tls-cert-file</span>=/etc/kubernetes/pki/apiserver.crt \\<br>  <span class="hljs-attribute">--tls-private-key-file</span>=/etc/kubernetes/pki/apiserver.key \\<br>  <span class="hljs-attribute">--requestheader-client-ca-file</span>=/etc/kubernetes/pki/front-proxy-ca.crt \\<br>  <span class="hljs-attribute">--requestheader-username-headers</span>=X-Remote-User \\<br>  <span class="hljs-attribute">--requestheader-group-headers</span>=X-Remote-Group \\<br>  <span class="hljs-attribute">--requestheader-allowed-names</span>=front-proxy-client \\<br>  <span class="hljs-attribute">--requestheader-extra-headers-prefix</span>=X-Remote-Extra- \\<br>  <span class="hljs-attribute">--proxy-client-cert-file</span>=/etc/kubernetes/pki/front-proxy-client.crt \\<br>  <span class="hljs-attribute">--proxy-client-key-file</span>=/etc/kubernetes/pki/front-proxy-client.key \\<br>  <span class="hljs-attribute">--feature-gates</span>=PodShareProcessNamespace=true \\<br>  <span class="hljs-attribute">--v</span>=2<br><br><span class="hljs-attribute">Restart</span>=on-failure<br><span class="hljs-attribute">RestartSec</span>=10s<br><span class="hljs-attribute">LimitNOFILE</span>=65535<br><br>[Install]<br><span class="hljs-attribute">WantedBy</span>=multi-user.target<br>EOF<br><br>systemctl daemon-reload<br>systemctl <span class="hljs-built_in">enable</span> kube-apiserver<br>systemctl restart kube-apiserver<br>systemctl status kube-apiserver -l<br></code></pre></td></tr></table></figure><p>启动 controller-manager</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs routeros">cat&lt;&lt;EOF&gt; /usr/lib/systemd/system/kube-controller-manager.service <br>[Unit]<br><span class="hljs-attribute">Description</span>=Kubernetes Controller Manager<br><span class="hljs-attribute">Documentation</span>=https://github.com/kubernetes/kubernetes<br><span class="hljs-attribute">After</span>=network.target<br><br>[Service]<br><span class="hljs-attribute">ExecStart</span>=/usr/local/bin/kube-controller-manager \\<br>  <span class="hljs-attribute">--allocate-node-cidrs</span>=<span class="hljs-literal">true</span> \\<br>  <span class="hljs-attribute">--kubeconfig</span>=/etc/kubernetes/controller-manager.conf \\<br>  <span class="hljs-attribute">--authentication-kubeconfig</span>=/etc/kubernetes/controller-manager.conf \\<br>  <span class="hljs-attribute">--authorization-kubeconfig</span>=/etc/kubernetes/controller-manager.conf \\<br>  <span class="hljs-attribute">--client-ca-file</span>=/etc/kubernetes/pki/ca.crt \\<br>  <span class="hljs-attribute">--cluster-signing-cert-file</span>=/etc/kubernetes/pki/ca.crt \\<br>  <span class="hljs-attribute">--cluster-signing-key-file</span>=/etc/kubernetes/pki/ca.key \\<br>  <span class="hljs-attribute">--bind-address</span>=127.0.0.1 \\<br>  <span class="hljs-attribute">--leader-elect</span>=<span class="hljs-literal">true</span> \\<br>  <span class="hljs-attribute">--cluster-cidr</span>=10.244.0.0/16 \\<br>  <span class="hljs-attribute">--service-cluster-ip-range</span>=10.96.0.0/12 \\<br>  <span class="hljs-attribute">--requestheader-client-ca-file</span>=/etc/kubernetes/pki/front-proxy-ca.crt \\<br>  <span class="hljs-attribute">--service-account-private-key-file</span>=/etc/kubernetes/pki/sa.key \\<br>  <span class="hljs-attribute">--root-ca-file</span>=/etc/kubernetes/pki/ca.crt \\<br>  <span class="hljs-attribute">--use-service-account-credentials</span>=<span class="hljs-literal">true</span> \\<br>  <span class="hljs-attribute">--controllers</span>=*,bootstrapsigner,tokencleaner \\<br>  <span class="hljs-attribute">--experimental-cluster-signing-duration</span>=86700h \\<br>  <span class="hljs-attribute">--feature-gates</span>=RotateKubeletClientCertificate=true \\<br>  <span class="hljs-attribute">--v</span>=2<br><span class="hljs-attribute">Restart</span>=always<br><span class="hljs-attribute">RestartSec</span>=10s<br><br>[Install]<br><span class="hljs-attribute">WantedBy</span>=multi-user.target<br>EOF<br><br>systemctl daemon-reload<br>systemctl <span class="hljs-built_in">enable</span> kube-controller-manager<br>systemctl restart kube-controller-manager<br>systemctl status kube-controller-manager -l<br></code></pre></td></tr></table></figure><p>启动 scheduler</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs routeros">cat &gt; /usr/lib/systemd/system/kube-scheduler.service &lt;&lt; EOF<br>[Unit]<br><span class="hljs-attribute">Description</span>=Kubernetes<span class="hljs-built_in"> Scheduler</span><br><span class="hljs-built_in"></span><span class="hljs-attribute">Documentation</span>=https://github.com/kubernetes/kubernetes<br><span class="hljs-attribute">After</span>=network.target<br><br>[Service]<br><span class="hljs-attribute">ExecStart</span>=/usr/local/bin/kube-scheduler \\<br>  <span class="hljs-attribute">--leader-elect</span>=<span class="hljs-literal">true</span> \\<br>  <span class="hljs-attribute">--kubeconfig</span>=/etc/kubernetes/scheduler.conf \\<br>  <span class="hljs-attribute">--address</span>=127.0.0.1 \\<br>  <span class="hljs-attribute">--v</span>=2<br><span class="hljs-attribute">Restart</span>=always<br><span class="hljs-attribute">RestartSec</span>=10s<br><br>[Install]<br><span class="hljs-attribute">WantedBy</span>=multi-user.target<br>EOF<br><br>systemctl daemon-reload<br>systemctl <span class="hljs-built_in">enable</span> kube-scheduler<br>systemctl restart kube-scheduler<br>systemctl status kube-scheduler -l<br></code></pre></td></tr></table></figure><p>验证组件是否正常</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-built_in">export</span> <span class="hljs-attribute">KUBECONFIG</span>=/etc/kubernetes/admin.conf<br>kubectl <span class="hljs-built_in">get</span> cs<br></code></pre></td></tr></table></figure><h2 id="配置-bootstrap"><a href="#配置-bootstrap" class="headerlink" title="配置 bootstrap"></a>配置 bootstrap</h2><p>设置 bootstrap , 创建 bootstrap 令牌</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-attribute">TOKEN_PUB</span>=$(openssl rand -hex 3)<br><span class="hljs-attribute">TOKEN_SECRET</span>=$(openssl rand -hex 8)<br><span class="hljs-attribute">BOOTSTRAP_TOKEN</span>=<span class="hljs-string">&quot;<span class="hljs-variable">$&#123;TOKEN_PUB&#125;</span>.<span class="hljs-variable">$&#123;TOKEN_SECRET&#125;</span>&quot;</span><br><br>kubectl -n kube-system create<span class="hljs-built_in"> secret </span>generic bootstrap-token-<span class="hljs-variable">$&#123;TOKEN_PUB&#125;</span> \<br>        --type <span class="hljs-string">&#x27;bootstrap.kubernetes.io/token&#x27;</span> \<br>        --from-literal <span class="hljs-attribute">description</span>=<span class="hljs-string">&quot;cluster bootstrap token&quot;</span> \<br>        --from-literal <span class="hljs-attribute">token-id</span>=<span class="hljs-variable">$&#123;TOKEN_PUB&#125;</span> \<br>        --from-literal <span class="hljs-attribute">token-secret</span>=<span class="hljs-variable">$&#123;TOKEN_SECRET&#125;</span> \<br>        --from-literal <span class="hljs-attribute">usage-bootstrap-authentication</span>=<span class="hljs-literal">true</span> \<br>        --from-literal <span class="hljs-attribute">usage-bootstrap-signing</span>=<span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><p>创建 bootstrap kubeconfig 文件</p><figure class="highlight dsconfig"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs dsconfig"><span class="hljs-string">CLUSTER_NAME</span>=<span class="hljs-string">&quot;kubernetes&quot;</span><br><span class="hljs-string">KUBE_APISERVER</span>=<span class="hljs-string">&quot;https://10.0.7.101:6443&quot;</span><br><span class="hljs-string">KUBE_USER</span>=<span class="hljs-string">&quot;kubelet-bootstrap&quot;</span><br><span class="hljs-string">KUBE_CONFIG</span>=<span class="hljs-string">&quot;bootstrap.conf&quot;</span><br><br><span class="hljs-comment"># 设置集群参数</span><br><span class="hljs-string">kubectl</span> <span class="hljs-string">config</span> <span class="hljs-built_in">set-cluster</span> $&#123;<span class="hljs-string">CLUSTER_NAME</span>&#125; \<br>  <span class="hljs-built_in">--certificate-authority=/etc/kubernetes/pki/ca.crt</span> \<br>  <span class="hljs-built_in">--embed-certs=true</span> \<br>  <span class="hljs-built_in">--server=$&#123;KUBE_APISERVER&#125;</span> \<br>  <span class="hljs-built_in">--kubeconfig=/etc/kubernetes/$&#123;KUBE_CONFIG&#125;</span><br><br><span class="hljs-comment"># 设置上下文参数</span><br><span class="hljs-string">kubectl</span> <span class="hljs-string">config</span> <span class="hljs-built_in">set-context</span> $&#123;<span class="hljs-string">KUBE_USER</span>&#125;@$&#123;<span class="hljs-string">CLUSTER_NAME</span>&#125; \<br>  <span class="hljs-built_in">--cluster=$&#123;CLUSTER_NAME&#125;</span> \<br>  <span class="hljs-built_in">--user=$&#123;KUBE_USER&#125;</span> \<br>  <span class="hljs-built_in">--kubeconfig=/etc/kubernetes/$&#123;KUBE_CONFIG&#125;</span><br><br><span class="hljs-comment"># 设置客户端认证参数</span><br><span class="hljs-string">kubectl</span> <span class="hljs-string">config</span> <span class="hljs-built_in">set-credentials</span> $&#123;<span class="hljs-string">KUBE_USER</span>&#125; \<br>  <span class="hljs-built_in">--token=$&#123;BOOTSTRAP_TOKEN&#125;</span> \<br>  <span class="hljs-built_in">--kubeconfig=/etc/kubernetes/$&#123;KUBE_CONFIG&#125;</span><br><br><span class="hljs-comment"># 设置当前使用的上下文</span><br><span class="hljs-string">kubectl</span> <span class="hljs-string">config</span> <span class="hljs-string">use-context</span> $&#123;<span class="hljs-string">KUBE_USER</span>&#125;@$&#123;<span class="hljs-string">CLUSTER_NAME</span>&#125; <span class="hljs-built_in">--kubeconfig=/etc/kubernetes/$&#123;KUBE_CONFIG&#125;</span><br><br><span class="hljs-comment"># 查看生成的配置文件</span><br><span class="hljs-string">kubectl</span> <span class="hljs-string">config</span> <span class="hljs-string">view</span> <span class="hljs-built_in">--kubeconfig=/etc/kubernetes/$&#123;KUBE_CONFIG&#125;</span><br></code></pre></td></tr></table></figure><p>授权 kubelet 可以创建 csr</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">kubectl create clusterrolebinding kubeadm:kubelet-bootstrap \<br>        --clusterrole system:<span class="hljs-keyword">node</span><span class="hljs-title">-bootstrapper</span> --<span class="hljs-keyword">group</span> <span class="hljs-title">system</span>:bootstrappers<br></code></pre></td></tr></table></figure><p>批准 csr 请求</p><blockquote><p>允许 system:bootstrappers 组的所有 csr</p></blockquote><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext">cat &lt;&lt;EOF | kubectl apply -f -<br><span class="hljs-comment"># Approve all CSRs for the group &quot;system:bootstrappers&quot;</span><br><span class="hljs-attribute">kind</span><span class="hljs-punctuation">:</span> <span class="hljs-string">ClusterRoleBinding</span><br><span class="hljs-attribute">apiVersion</span><span class="hljs-punctuation">:</span> <span class="hljs-string">rbac.authorization.k8s.io/v1</span><br><span class="hljs-attribute">metadata</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">auto-approve-csrs-for-group</span><br><span class="hljs-attribute">subjects</span><span class="hljs-punctuation">:</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">kind: Group</span><br>  <span class="hljs-attribute">name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">system:bootstrappers</span><br>  <span class="hljs-attribute">apiGroup</span><span class="hljs-punctuation">:</span> <span class="hljs-string">rbac.authorization.k8s.io</span><br><span class="hljs-attribute">roleRef</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">kind</span><span class="hljs-punctuation">:</span> <span class="hljs-string">ClusterRole</span><br>  <span class="hljs-attribute">name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">system:certificates.k8s.io:certificatesigningrequests:nodeclient</span><br>  <span class="hljs-attribute">apiGroup</span><span class="hljs-punctuation">:</span> <span class="hljs-string">rbac.authorization.k8s.io</span><br>EOF<br></code></pre></td></tr></table></figure><p>允许 kubelet 能够更新自己的证书</p><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext">cat &lt;&lt;EOF | kubectl apply -f -<br><span class="hljs-comment"># Approve renewal CSRs for the group &quot;system:nodes&quot;</span><br><span class="hljs-attribute">kind</span><span class="hljs-punctuation">:</span> <span class="hljs-string">ClusterRoleBinding</span><br><span class="hljs-attribute">apiVersion</span><span class="hljs-punctuation">:</span> <span class="hljs-string">rbac.authorization.k8s.io/v1</span><br><span class="hljs-attribute">metadata</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">auto-approve-renewals-for-nodes</span><br><span class="hljs-attribute">subjects</span><span class="hljs-punctuation">:</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">kind: Group</span><br>  <span class="hljs-attribute">name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">system:nodes</span><br>  <span class="hljs-attribute">apiGroup</span><span class="hljs-punctuation">:</span> <span class="hljs-string">rbac.authorization.k8s.io</span><br><span class="hljs-attribute">roleRef</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">kind</span><span class="hljs-punctuation">:</span> <span class="hljs-string">ClusterRole</span><br>  <span class="hljs-attribute">name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">system:certificates.k8s.io:certificatesigningrequests:selfnodeclient</span><br>  <span class="hljs-attribute">apiGroup</span><span class="hljs-punctuation">:</span> <span class="hljs-string">rbac.authorization.k8s.io</span><br>EOF<br></code></pre></td></tr></table></figure><p>创建所需的 clusterrole</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">cat</span> <span class="hljs-string">&lt;&lt;EOF</span> <span class="hljs-string">|</span> <span class="hljs-string">kubectl</span> <span class="hljs-string">apply</span> <span class="hljs-string">-f</span> <span class="hljs-bullet">-</span><br><span class="hljs-comment"># A ClusterRole which instructs the CSR approver to approve a user requesting</span><br><span class="hljs-comment"># node client credentials.</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">ClusterRole</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">rbac.authorization.k8s.io/v1</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">system:certificates.k8s.io:certificatesigningrequests:nodeclient</span><br><span class="hljs-attr">rules:</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">apiGroups:</span> [<span class="hljs-string">&quot;certificates.k8s.io&quot;</span>]<br>  <span class="hljs-attr">resources:</span> [<span class="hljs-string">&quot;certificatesigningrequests/nodeclient&quot;</span>]<br>  <span class="hljs-attr">verbs:</span> [<span class="hljs-string">&quot;create&quot;</span>]<br><span class="hljs-meta">---</span><br><span class="hljs-comment"># A ClusterRole which instructs the CSR approver to approve a node renewing its</span><br><span class="hljs-comment"># own client credentials.</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">ClusterRole</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">rbac.authorization.k8s.io/v1</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">system:certificates.k8s.io:certificatesigningrequests:selfnodeclient</span><br><span class="hljs-attr">rules:</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">apiGroups:</span> [<span class="hljs-string">&quot;certificates.k8s.io&quot;</span>]<br>  <span class="hljs-attr">resources:</span> [<span class="hljs-string">&quot;certificatesigningrequests/selfnodeclient&quot;</span>]<br>  <span class="hljs-attr">verbs:</span> [<span class="hljs-string">&quot;create&quot;</span>]<br><span class="hljs-string">EOF</span><br></code></pre></td></tr></table></figure><h2 id="配置-worker-组件"><a href="#配置-worker-组件" class="headerlink" title="配置 worker 组件"></a>配置 worker 组件</h2><p>将 ca.crt 和  bootstrap.conf 发送至需要运行 worker 的节点</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">mkdir -p <span class="hljs-regexp">/etc/</span>kubernetes/pki<br>scp root@k8s-master1:<span class="hljs-regexp">/etc/</span>kubernetes<span class="hljs-regexp">/pki/</span>ca.crt <span class="hljs-regexp">/etc/</span>kubernetes<span class="hljs-regexp">/pki/</span>ca.crt<br>scp root@k8s-master1:<span class="hljs-regexp">/etc/</span>kubernetes<span class="hljs-regexp">/bootstrap.conf /</span>etc<span class="hljs-regexp">/kubernetes/</span>bootstrap.conf<br></code></pre></td></tr></table></figure><p>kubelet 的 yaml 配置文件</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">mkdir</span> <span class="hljs-string">-p</span> <span class="hljs-string">/var/lib/kubelet/</span><br><span class="hljs-string">cat</span> <span class="hljs-string">&lt;&lt;EOF&gt;</span> <span class="hljs-string">/var/lib/kubelet/config.yaml</span><br><span class="hljs-attr">address:</span> <span class="hljs-number">0.0</span><span class="hljs-number">.0</span><span class="hljs-number">.0</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">kubelet.config.k8s.io/v1beta1</span><br><span class="hljs-attr">authentication:</span><br>  <span class="hljs-attr">anonymous:</span><br>    <span class="hljs-attr">enabled:</span> <span class="hljs-literal">false</span><br>  <span class="hljs-attr">webhook:</span><br>    <span class="hljs-attr">cacheTTL:</span> <span class="hljs-string">2m0s</span><br>    <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">x509:</span><br>    <span class="hljs-attr">clientCAFile:</span> <span class="hljs-string">/etc/kubernetes/pki/ca.crt</span><br><span class="hljs-attr">authorization:</span><br>  <span class="hljs-attr">mode:</span> <span class="hljs-string">Webhook</span><br>  <span class="hljs-attr">webhook:</span><br>    <span class="hljs-attr">cacheAuthorizedTTL:</span> <span class="hljs-string">5m0s</span><br>    <span class="hljs-attr">cacheUnauthorizedTTL:</span> <span class="hljs-string">30s</span><br><span class="hljs-attr">cgroupDriver:</span> <span class="hljs-string">systemd</span><br><span class="hljs-attr">cgroupsPerQOS:</span> <span class="hljs-literal">true</span><br><span class="hljs-attr">clusterDNS:</span><br><span class="hljs-bullet">-</span> <span class="hljs-number">10.96</span><span class="hljs-number">.0</span><span class="hljs-number">.10</span><br><span class="hljs-attr">clusterDomain:</span> <span class="hljs-string">cluster.local</span><br><span class="hljs-attr">configMapAndSecretChangeDetectionStrategy:</span> <span class="hljs-string">Watch</span><br><span class="hljs-attr">containerLogMaxFiles:</span> <span class="hljs-number">5</span><br><span class="hljs-attr">containerLogMaxSize:</span> <span class="hljs-string">10Mi</span><br><span class="hljs-attr">contentType:</span> <span class="hljs-string">application/vnd.kubernetes.protobuf</span><br><span class="hljs-attr">cpuCFSQuota:</span> <span class="hljs-literal">true</span><br><span class="hljs-attr">cpuCFSQuotaPeriod:</span> <span class="hljs-string">100ms</span><br><span class="hljs-attr">cpuManagerPolicy:</span> <span class="hljs-string">none</span><br><span class="hljs-attr">cpuManagerReconcilePeriod:</span> <span class="hljs-string">10s</span><br><span class="hljs-attr">enableControllerAttachDetach:</span> <span class="hljs-literal">true</span><br><span class="hljs-attr">enableDebuggingHandlers:</span> <span class="hljs-literal">true</span><br><span class="hljs-attr">enforceNodeAllocatable:</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">pods</span><br><span class="hljs-attr">eventBurst:</span> <span class="hljs-number">10</span><br><span class="hljs-attr">eventRecordQPS:</span> <span class="hljs-number">5</span><br><span class="hljs-attr">evictionHard:</span><br>  <span class="hljs-attr">imagefs.available:</span> <span class="hljs-number">15</span><span class="hljs-string">%</span><br>  <span class="hljs-attr">memory.available:</span> <span class="hljs-string">100Mi</span><br>  <span class="hljs-attr">nodefs.available:</span> <span class="hljs-number">10</span><span class="hljs-string">%</span><br>  <span class="hljs-attr">nodefs.inodesFree:</span> <span class="hljs-number">5</span><span class="hljs-string">%</span><br><span class="hljs-attr">evictionPressureTransitionPeriod:</span> <span class="hljs-string">5m0s</span><br><span class="hljs-attr">failSwapOn:</span> <span class="hljs-literal">true</span><br><span class="hljs-attr">fileCheckFrequency:</span> <span class="hljs-string">20s</span><br><span class="hljs-attr">hairpinMode:</span> <span class="hljs-string">promiscuous-bridge</span><br><span class="hljs-attr">healthzBindAddress:</span> <span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span><br><span class="hljs-attr">healthzPort:</span> <span class="hljs-number">10248</span><br><span class="hljs-attr">httpCheckFrequency:</span> <span class="hljs-string">20s</span><br><span class="hljs-attr">imageGCHighThresholdPercent:</span> <span class="hljs-number">85</span><br><span class="hljs-attr">imageGCLowThresholdPercent:</span> <span class="hljs-number">80</span><br><span class="hljs-attr">imageMinimumGCAge:</span> <span class="hljs-string">2m0s</span><br><span class="hljs-attr">iptablesDropBit:</span> <span class="hljs-number">15</span><br><span class="hljs-attr">iptablesMasqueradeBit:</span> <span class="hljs-number">14</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">KubeletConfiguration</span><br><span class="hljs-attr">kubeAPIBurst:</span> <span class="hljs-number">10</span><br><span class="hljs-attr">kubeAPIQPS:</span> <span class="hljs-number">5</span><br><span class="hljs-attr">makeIPTablesUtilChains:</span> <span class="hljs-literal">true</span><br><span class="hljs-attr">maxOpenFiles:</span> <span class="hljs-number">1000000</span><br><span class="hljs-attr">maxPods:</span> <span class="hljs-number">110</span><br><span class="hljs-attr">nodeLeaseDurationSeconds:</span> <span class="hljs-number">40</span><br><span class="hljs-attr">nodeStatusReportFrequency:</span> <span class="hljs-string">1m0s</span><br><span class="hljs-attr">nodeStatusUpdateFrequency:</span> <span class="hljs-string">10s</span><br><span class="hljs-attr">oomScoreAdj:</span> <span class="hljs-number">-999</span><br><span class="hljs-attr">podPidsLimit:</span> <span class="hljs-number">-1</span><br><span class="hljs-attr">port:</span> <span class="hljs-number">10250</span><br><span class="hljs-attr">registryBurst:</span> <span class="hljs-number">10</span><br><span class="hljs-attr">registryPullQPS:</span> <span class="hljs-number">5</span><br><span class="hljs-attr">resolvConf:</span> <span class="hljs-string">/etc/resolv.conf</span><br><span class="hljs-attr">rotateCertificates:</span> <span class="hljs-literal">true</span><br><span class="hljs-attr">runtimeRequestTimeout:</span> <span class="hljs-string">2m0s</span><br><span class="hljs-attr">serializeImagePulls:</span> <span class="hljs-literal">true</span><br><span class="hljs-attr">staticPodPath:</span> <span class="hljs-string">/etc/kubernetes/manifests</span><br><span class="hljs-attr">streamingConnectionIdleTimeout:</span> <span class="hljs-string">4h0m0s</span><br><span class="hljs-attr">syncFrequency:</span> <span class="hljs-string">1m0s</span><br><span class="hljs-attr">volumeStatsAggPeriod:</span> <span class="hljs-string">1m0s</span><br><span class="hljs-string">EOF</span><br></code></pre></td></tr></table></figure><p>启动 kubelet </p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs routeros">mkdir -p /usr/lib/systemd<span class="hljs-built_in">/system</span><br><span class="hljs-built_in"></span>mkdir -p /etc/kubernetes/manifests<br>cat &gt; /usr/lib/systemd/system/kubelet.service &lt;&lt; EOF<br>[Unit]<br><span class="hljs-attribute">Description</span>=Kubernetes Kubelet<br><span class="hljs-attribute">Documentation</span>=https://github.com/kubernetes/kubernetes<br><span class="hljs-attribute">After</span>=docker.service<br><span class="hljs-attribute">Requires</span>=docker.service<br><br>[Service]<br><span class="hljs-attribute">ExecStart</span>=/usr/local/bin/kubelet \\<br>  <span class="hljs-attribute">--bootstrap-kubeconfig</span>=/etc/kubernetes/bootstrap.conf \\<br>  <span class="hljs-attribute">--kubeconfig</span>=/etc/kubernetes/kubelet.conf \\<br>  <span class="hljs-attribute">--config</span>=/var/lib/kubelet/config.yaml \\<br>  <span class="hljs-attribute">--cgroup-driver</span>=systemd \\<br>  <span class="hljs-attribute">--pod-infra-container-image</span>=kuops/pause-amd64:3.1 \\<br>  <span class="hljs-attribute">--allow-privileged</span>=<span class="hljs-literal">true</span> \\<br>  <span class="hljs-attribute">--network-plugin</span>=cni \\<br>  <span class="hljs-attribute">--cni-conf-dir</span>=/etc/cni/net.d \\<br>  <span class="hljs-attribute">--cni-bin-dir</span>=/opt/cni/bin \\<br>  <span class="hljs-attribute">--cert-dir</span>=/etc/kubernetes/pki \\<br>  <span class="hljs-attribute">--v</span>=2<br><br><span class="hljs-attribute">Restart</span>=always<br><span class="hljs-attribute">RestartSec</span>=10s<br><br>[Install]<br><span class="hljs-attribute">WantedBy</span>=multi-user.target<br>EOF<br><br>systemctl daemon-reload<br>systemctl <span class="hljs-built_in">enable</span> kubelet<br>systemctl restart kubelet<br>systemctl status kubelet -l<br></code></pre></td></tr></table></figure><p>创建 kube-proxy 的 serviceaccount</p><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gauss">kubectl -n kube-<span class="hljs-keyword">system</span> <span class="hljs-keyword">create</span> serviceaccount kube-proxy<br></code></pre></td></tr></table></figure><p>创建 kube-proxy 的 cluster rolebinding</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">kubectl create clusterrolebinding kubeadm:<span class="hljs-keyword">node</span><span class="hljs-title">-proxier</span> \<br>        --clusterrole system:<span class="hljs-keyword">node</span><span class="hljs-title">-proxier</span> \<br>        --serviceaccount kube-system:kube-proxy<br></code></pre></td></tr></table></figure><p>创建 kube-proxy 的 kubeconfig</p><figure class="highlight dsconfig"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs dsconfig"><span class="hljs-string">CLUSTER_NAME</span>=<span class="hljs-string">&quot;kubernetes&quot;</span><br><span class="hljs-string">KUBE_APISERVER</span>=<span class="hljs-string">&quot;https://10.0.7.100:8443&quot;</span><br><span class="hljs-string">KUBE_CONFIG</span>=<span class="hljs-string">&quot;kube-proxy.conf&quot;</span><br><br><span class="hljs-string">SECRET</span>=$(<span class="hljs-string">kubectl</span> -<span class="hljs-string">n</span> <span class="hljs-string">kube-system</span> <span class="hljs-string">get</span> <span class="hljs-string">sa</span>/<span class="hljs-string">kube-proxy</span> \<br>                 <span class="hljs-built_in">--output=jsonpath=&#x27;&#123;.secrets[0].name&#125;&#x27;)</span><br><br><span class="hljs-string">JWT_TOKEN</span>=$(<span class="hljs-string">kubectl</span> -<span class="hljs-string">n</span> <span class="hljs-string">kube-system</span> <span class="hljs-string">get</span> <span class="hljs-string">secret</span>/$<span class="hljs-string">SECRET</span> \<br>                    <span class="hljs-built_in">--output=jsonpath=&#x27;&#123;.data.token&#125;&#x27;</span> | <span class="hljs-string">base64</span> -<span class="hljs-string">d</span>)<br><br><span class="hljs-string">kubectl</span> <span class="hljs-string">config</span> <span class="hljs-built_in">set-cluster</span> $&#123;<span class="hljs-string">CLUSTER_NAME</span>&#125; \<br>  <span class="hljs-built_in">--certificate-authority=/etc/kubernetes/pki/ca.crt</span> \<br>  <span class="hljs-built_in">--embed-certs=true</span> \<br>  <span class="hljs-built_in">--server=$&#123;KUBE_APISERVER&#125;</span> \<br>  <span class="hljs-built_in">--kubeconfig=/etc/kubernetes/$&#123;KUBE_CONFIG&#125;</span><br><br><span class="hljs-string">kubectl</span> <span class="hljs-string">config</span> <span class="hljs-built_in">set-context</span> $&#123;<span class="hljs-string">CLUSTER_NAME</span>&#125; \<br>  <span class="hljs-built_in">--cluster=$&#123;CLUSTER_NAME&#125;</span> \<br>  <span class="hljs-built_in">--user=$&#123;CLUSTER_NAME&#125;</span> \<br>  <span class="hljs-built_in">--kubeconfig=/etc/kubernetes/$&#123;KUBE_CONFIG&#125;</span><br><br><span class="hljs-string">kubectl</span> <span class="hljs-string">config</span> <span class="hljs-built_in">set-credentials</span> $&#123;<span class="hljs-string">CLUSTER_NAME</span>&#125; \<br>  <span class="hljs-built_in">--token=$&#123;JWT_TOKEN&#125;</span> \<br>  <span class="hljs-built_in">--kubeconfig=/etc/kubernetes/$&#123;KUBE_CONFIG&#125;</span><br><br><span class="hljs-string">kubectl</span> <span class="hljs-string">config</span> <span class="hljs-string">use-context</span> $&#123;<span class="hljs-string">CLUSTER_NAME</span>&#125; <span class="hljs-built_in">--kubeconfig=/etc/kubernetes/$&#123;KUBE_CONFIG&#125;</span><br><span class="hljs-string">kubectl</span> <span class="hljs-string">config</span> <span class="hljs-string">view</span> <span class="hljs-built_in">--kubeconfig=/etc/kubernetes/$&#123;KUBE_CONFIG&#125;</span><br></code></pre></td></tr></table></figure><p>其他节点拉取</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">scp root@k8s-master1:<span class="hljs-regexp">/etc/</span>kubernetes<span class="hljs-regexp">/kube-proxy.conf /</span>etc<span class="hljs-regexp">/kubernetes/</span>kube-proxy.conf<br></code></pre></td></tr></table></figure><p>kube-proxy 的 yaml 配置</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs dts">mkdir -p <span class="hljs-keyword">/var/</span>lib/kube-proxy<br>cat <span class="hljs-params">&lt;&lt;EOF&gt;</span> <span class="hljs-keyword">/var/</span>lib<span class="hljs-keyword">/kube-proxy/</span>config.conf<br><span class="hljs-symbol">apiVersion:</span> kubeproxy.config.k8s.io/v1alpha1<br><span class="hljs-symbol">bindAddress:</span> <span class="hljs-number">0.0</span><span class="hljs-number">.0</span><span class="hljs-number">.0</span><br><span class="hljs-symbol">clientConnection:</span><br><span class="hljs-symbol">    acceptContentTypes:</span> <span class="hljs-string">&quot;&quot;</span><br><span class="hljs-symbol">    burst:</span> <span class="hljs-number">10</span><br><span class="hljs-symbol">    contentType:</span> application/vnd.kubernetes.protobuf<br><span class="hljs-symbol">    kubeconfig:</span> <span class="hljs-keyword">/etc/</span>kubernetes/kube-proxy.conf<br><span class="hljs-symbol">    qps:</span> <span class="hljs-number">5</span><br><span class="hljs-symbol">clusterCIDR:</span> <span class="hljs-string">&quot;10.244.0.0/16&quot;</span><br><span class="hljs-symbol">configSyncPeriod:</span> <span class="hljs-number">15</span>m0s<br><span class="hljs-symbol">conntrack:</span><br><span class="hljs-symbol">    max:</span> null<br><span class="hljs-symbol">    maxPerCore:</span> <span class="hljs-number">32768</span><br><span class="hljs-symbol">    min:</span> <span class="hljs-number">131072</span><br><span class="hljs-symbol">    tcpCloseWaitTimeout:</span> <span class="hljs-number">1</span>h0m0s<br><span class="hljs-symbol">    tcpEstablishedTimeout:</span> <span class="hljs-number">24</span>h0m0s<br><span class="hljs-symbol">enableProfiling:</span> false<br><span class="hljs-symbol">healthzBindAddress:</span> <span class="hljs-number">0.0</span><span class="hljs-number">.0</span><span class="hljs-number">.0</span>:<span class="hljs-number">10256</span><br><span class="hljs-symbol">hostnameOverride:</span> <span class="hljs-string">&quot;&quot;</span><br><span class="hljs-symbol">iptables:</span><br><span class="hljs-symbol">    masqueradeAll:</span> true<br><span class="hljs-symbol">    masqueradeBit:</span> <span class="hljs-number">14</span><br><span class="hljs-symbol">    minSyncPeriod:</span> <span class="hljs-number">0</span>s<br><span class="hljs-symbol">    syncPeriod:</span> <span class="hljs-number">30</span>s<br><span class="hljs-symbol">ipvs:</span><br><span class="hljs-symbol">    excludeCIDRs:</span> null<br><span class="hljs-symbol">    minSyncPeriod:</span> <span class="hljs-number">0</span>s<br><span class="hljs-symbol">    scheduler:</span> <span class="hljs-string">&quot;&quot;</span><br><span class="hljs-symbol">    syncPeriod:</span> <span class="hljs-number">30</span>s<br><span class="hljs-symbol">kind:</span> KubeProxyConfiguration<br><span class="hljs-symbol">metricsBindAddress:</span> <span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">10249</span><br><span class="hljs-symbol">mode:</span> <span class="hljs-string">&quot;iptables&quot;</span><br><span class="hljs-symbol">nodePortAddresses:</span> null<br><span class="hljs-symbol">oomScoreAdj:</span> <span class="hljs-number">-999</span><br><span class="hljs-symbol">portRange:</span> <span class="hljs-string">&quot;&quot;</span><br><span class="hljs-symbol">resourceContainer:</span> /kube-proxy<br><span class="hljs-symbol">udpIdleTimeout:</span> <span class="hljs-number">250</span>ms<br>EOF<br></code></pre></td></tr></table></figure><p>启动 kube-proxy</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs routeros">mkdir /var/lib/kube-proxy<br><br>cat &gt; /usr/lib/systemd/system/kube-proxy.service &lt;&lt; EOF<br>[Unit]<br><span class="hljs-attribute">Description</span>=Kubernetes Kube<span class="hljs-built_in"> Proxy</span><br><span class="hljs-built_in"></span><span class="hljs-attribute">Documentation</span>=https://github.com/kubernetes/kubernetes<br><span class="hljs-attribute">After</span>=network.target<br><br>[Service]<br><span class="hljs-attribute">ExecStart</span>=/usr/local/bin/kube-proxy \\<br>  <span class="hljs-attribute">--config</span>=/var/lib/kube-proxy/config.conf \\<br>  <span class="hljs-attribute">--conntrack-max</span>=0 \\<br>  <span class="hljs-attribute">--conntrack-max-per-core</span>=0 \\<br>  <span class="hljs-attribute">--v</span>=2<br><span class="hljs-attribute">Restart</span>=always<br><span class="hljs-attribute">RestartSec</span>=10s<br><br>[Install]<br><span class="hljs-attribute">WantedBy</span>=multi-user.target<br>EOF<br><br>systemctl daemon-reload<br>systemctl <span class="hljs-built_in">enable</span> kube-proxy<br>systemctl restart kube-proxy<br>systemctl status kube-proxy -l<br></code></pre></td></tr></table></figure><h2 id="节点标签"><a href="#节点标签" class="headerlink" title="节点标签"></a>节点标签</h2><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">kubectl label <span class="hljs-keyword">node</span> <span class="hljs-title">k8s-master1</span> <span class="hljs-keyword">node</span><span class="hljs-title">-role</span>.kubernetes.io/<span class="hljs-attr">master=</span><span class="hljs-string">&quot;&quot;</span><br>kubectl label <span class="hljs-keyword">node</span> <span class="hljs-title">k8s-master2</span> <span class="hljs-keyword">node</span><span class="hljs-title">-role</span>.kubernetes.io/<span class="hljs-attr">master=</span><span class="hljs-string">&quot;&quot;</span><br>kubectl label <span class="hljs-keyword">node</span> <span class="hljs-title">k8s-master3</span> <span class="hljs-keyword">node</span><span class="hljs-title">-role</span>.kubernetes.io/<span class="hljs-attr">master=</span><span class="hljs-string">&quot;&quot;</span><br>kubectl label <span class="hljs-keyword">node</span> <span class="hljs-title">k8s-worker1</span> <span class="hljs-keyword">node</span><span class="hljs-title">-role</span>.kubernetes.io/<span class="hljs-attr">worker=</span>worker<br></code></pre></td></tr></table></figure><h2 id="安装-flannel"><a href="#安装-flannel" class="headerlink" title="安装 flannel"></a>安装 flannel</h2><p>安装 cni</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">curl -LO https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/containernetworking/</span>plugins<span class="hljs-regexp">/releases/</span>download<span class="hljs-regexp">/v0.7.4/</span>cni-plugins-amd64-v0.<span class="hljs-number">7.4</span>.tgz<br>mkdir -p <span class="hljs-regexp">/opt/</span>cni/bin<br>tar -xf cni-plugins-amd64-v0.<span class="hljs-number">7.4</span>.tgz -C <span class="hljs-regexp">/opt/</span>cni/bin<br></code></pre></td></tr></table></figure><p>安装 flannel</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">cat</span> <span class="hljs-string">&lt;&lt;EOF&gt;</span> <span class="hljs-string">kube-flannel.yaml</span><br><span class="hljs-meta">---</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">extensions/v1beta1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">PodSecurityPolicy</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">psp.flannel.unprivileged</span><br>  <span class="hljs-attr">annotations:</span><br>    <span class="hljs-attr">seccomp.security.alpha.kubernetes.io/allowedProfileNames:</span> <span class="hljs-string">docker/default</span><br>    <span class="hljs-attr">seccomp.security.alpha.kubernetes.io/defaultProfileName:</span> <span class="hljs-string">docker/default</span><br>    <span class="hljs-attr">apparmor.security.beta.kubernetes.io/allowedProfileNames:</span> <span class="hljs-string">runtime/default</span><br>    <span class="hljs-attr">apparmor.security.beta.kubernetes.io/defaultProfileName:</span> <span class="hljs-string">runtime/default</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">privileged:</span> <span class="hljs-literal">false</span><br>  <span class="hljs-attr">volumes:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">configMap</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">secret</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">emptyDir</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">hostPath</span><br>  <span class="hljs-attr">allowedHostPaths:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">pathPrefix:</span> <span class="hljs-string">&quot;/etc/cni/net.d&quot;</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">pathPrefix:</span> <span class="hljs-string">&quot;/etc/kube-flannel&quot;</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">pathPrefix:</span> <span class="hljs-string">&quot;/run/flannel&quot;</span><br>  <span class="hljs-attr">readOnlyRootFilesystem:</span> <span class="hljs-literal">false</span><br>  <span class="hljs-comment"># Users and groups</span><br>  <span class="hljs-attr">runAsUser:</span><br>    <span class="hljs-attr">rule:</span> <span class="hljs-string">RunAsAny</span><br>  <span class="hljs-attr">supplementalGroups:</span><br>    <span class="hljs-attr">rule:</span> <span class="hljs-string">RunAsAny</span><br>  <span class="hljs-attr">fsGroup:</span><br>    <span class="hljs-attr">rule:</span> <span class="hljs-string">RunAsAny</span><br>  <span class="hljs-comment"># Privilege Escalation</span><br>  <span class="hljs-attr">allowPrivilegeEscalation:</span> <span class="hljs-literal">false</span><br>  <span class="hljs-attr">defaultAllowPrivilegeEscalation:</span> <span class="hljs-literal">false</span><br>  <span class="hljs-comment"># Capabilities</span><br>  <span class="hljs-attr">allowedCapabilities:</span> [<span class="hljs-string">&#x27;NET_ADMIN&#x27;</span>]<br>  <span class="hljs-attr">defaultAddCapabilities:</span> []<br>  <span class="hljs-attr">requiredDropCapabilities:</span> []<br>  <span class="hljs-comment"># Host namespaces</span><br>  <span class="hljs-attr">hostPID:</span> <span class="hljs-literal">false</span><br>  <span class="hljs-attr">hostIPC:</span> <span class="hljs-literal">false</span><br>  <span class="hljs-attr">hostNetwork:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">hostPorts:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">min:</span> <span class="hljs-number">0</span><br>    <span class="hljs-attr">max:</span> <span class="hljs-number">65535</span><br>  <span class="hljs-comment"># SELinux</span><br>  <span class="hljs-attr">seLinux:</span><br>    <span class="hljs-comment"># SELinux is unsed in CaaSP</span><br>    <span class="hljs-attr">rule:</span> <span class="hljs-string">&#x27;RunAsAny&#x27;</span><br><span class="hljs-meta">---</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">ClusterRole</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">rbac.authorization.k8s.io/v1beta1</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">flannel</span><br><span class="hljs-attr">rules:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">apiGroups:</span> [<span class="hljs-string">&#x27;extensions&#x27;</span>]<br>    <span class="hljs-attr">resources:</span> [<span class="hljs-string">&#x27;podsecuritypolicies&#x27;</span>]<br>    <span class="hljs-attr">verbs:</span> [<span class="hljs-string">&#x27;use&#x27;</span>]<br>    <span class="hljs-attr">resourceNames:</span> [<span class="hljs-string">&#x27;psp.flannel.unprivileged&#x27;</span>]<br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">apiGroups:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;&quot;</span><br>    <span class="hljs-attr">resources:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">pods</span><br>    <span class="hljs-attr">verbs:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">get</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">apiGroups:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;&quot;</span><br>    <span class="hljs-attr">resources:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">nodes</span><br>    <span class="hljs-attr">verbs:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">list</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">watch</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">apiGroups:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;&quot;</span><br>    <span class="hljs-attr">resources:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">nodes/status</span><br>    <span class="hljs-attr">verbs:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">patch</span><br><span class="hljs-meta">---</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">ClusterRoleBinding</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">rbac.authorization.k8s.io/v1beta1</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">flannel</span><br><span class="hljs-attr">roleRef:</span><br>  <span class="hljs-attr">apiGroup:</span> <span class="hljs-string">rbac.authorization.k8s.io</span><br>  <span class="hljs-attr">kind:</span> <span class="hljs-string">ClusterRole</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">flannel</span><br><span class="hljs-attr">subjects:</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">kind:</span> <span class="hljs-string">ServiceAccount</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">flannel</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">kube-system</span><br><span class="hljs-meta">---</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">ServiceAccount</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">flannel</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">kube-system</span><br><span class="hljs-meta">---</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">ConfigMap</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">kube-flannel-cfg</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">kube-system</span><br>  <span class="hljs-attr">labels:</span><br>    <span class="hljs-attr">tier:</span> <span class="hljs-string">node</span><br>    <span class="hljs-attr">app:</span> <span class="hljs-string">flannel</span><br><span class="hljs-attr">data:</span><br>  <span class="hljs-attr">cni-conf.json:</span> <span class="hljs-string">|</span><br><span class="hljs-string">    &#123;</span><br><span class="hljs-string">      &quot;name&quot;: &quot;cbr0&quot;,</span><br><span class="hljs-string">      &quot;plugins&quot;: [</span><br><span class="hljs-string">        &#123;</span><br><span class="hljs-string">          &quot;type&quot;: &quot;flannel&quot;,</span><br><span class="hljs-string">          &quot;delegate&quot;: &#123;</span><br><span class="hljs-string">            &quot;hairpinMode&quot;: true,</span><br><span class="hljs-string">            &quot;isDefaultGateway&quot;: true</span><br><span class="hljs-string">          &#125;</span><br><span class="hljs-string">        &#125;,</span><br><span class="hljs-string">        &#123;</span><br><span class="hljs-string">          &quot;type&quot;: &quot;portmap&quot;,</span><br><span class="hljs-string">          &quot;capabilities&quot;: &#123;</span><br><span class="hljs-string">            &quot;portMappings&quot;: true</span><br><span class="hljs-string">          &#125;</span><br><span class="hljs-string">        &#125;</span><br><span class="hljs-string">      ]</span><br><span class="hljs-string">    &#125;</span><br><span class="hljs-string"></span>  <span class="hljs-attr">net-conf.json:</span> <span class="hljs-string">|</span><br><span class="hljs-string">    &#123;</span><br><span class="hljs-string">      &quot;Network&quot;: &quot;10.244.0.0/16&quot;,</span><br><span class="hljs-string">      &quot;Backend&quot;: &#123;</span><br><span class="hljs-string">        &quot;Type&quot;: &quot;vxlan&quot;</span><br><span class="hljs-string">      &#125;</span><br><span class="hljs-string">    &#125;</span><br><span class="hljs-string"></span><span class="hljs-meta">---</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">extensions/v1beta1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">DaemonSet</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">kube-flannel-ds-amd64</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">kube-system</span><br>  <span class="hljs-attr">labels:</span><br>    <span class="hljs-attr">tier:</span> <span class="hljs-string">node</span><br>    <span class="hljs-attr">app:</span> <span class="hljs-string">flannel</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">template:</span><br>    <span class="hljs-attr">metadata:</span><br>      <span class="hljs-attr">labels:</span><br>        <span class="hljs-attr">tier:</span> <span class="hljs-string">node</span><br>        <span class="hljs-attr">app:</span> <span class="hljs-string">flannel</span><br>    <span class="hljs-attr">spec:</span><br>      <span class="hljs-attr">hostNetwork:</span> <span class="hljs-literal">true</span><br>      <span class="hljs-attr">nodeSelector:</span><br>        <span class="hljs-attr">beta.kubernetes.io/arch:</span> <span class="hljs-string">amd64</span><br>      <span class="hljs-attr">tolerations:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">operator:</span> <span class="hljs-string">Exists</span><br>        <span class="hljs-attr">effect:</span> <span class="hljs-string">NoSchedule</span><br>      <span class="hljs-attr">serviceAccountName:</span> <span class="hljs-string">flannel</span><br>      <span class="hljs-attr">initContainers:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">install-cni</span><br>        <span class="hljs-attr">image:</span> <span class="hljs-string">kuopsquay/coreos.flannel:v0.11.0-amd64</span><br>        <span class="hljs-attr">command:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">cp</span><br>        <span class="hljs-attr">args:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">-f</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">/etc/kube-flannel/cni-conf.json</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">/etc/cni/net.d/10-flannel.conflist</span><br>        <span class="hljs-attr">volumeMounts:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">cni</span><br>          <span class="hljs-attr">mountPath:</span> <span class="hljs-string">/etc/cni/net.d</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">flannel-cfg</span><br>          <span class="hljs-attr">mountPath:</span> <span class="hljs-string">/etc/kube-flannel/</span><br>      <span class="hljs-attr">containers:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">kube-flannel</span><br>        <span class="hljs-attr">image:</span> <span class="hljs-string">kuopsquay/coreos.flannel:v0.11.0-amd64</span><br>        <span class="hljs-attr">command:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">/opt/bin/flanneld</span><br>        <span class="hljs-attr">args:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">--ip-masq</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">--kube-subnet-mgr</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">--iface=enp0s8</span><br>        <span class="hljs-attr">resources:</span><br>          <span class="hljs-attr">requests:</span><br>            <span class="hljs-attr">cpu:</span> <span class="hljs-string">&quot;100m&quot;</span><br>            <span class="hljs-attr">memory:</span> <span class="hljs-string">&quot;50Mi&quot;</span><br>          <span class="hljs-attr">limits:</span><br>            <span class="hljs-attr">cpu:</span> <span class="hljs-string">&quot;100m&quot;</span><br>            <span class="hljs-attr">memory:</span> <span class="hljs-string">&quot;50Mi&quot;</span><br>        <span class="hljs-attr">securityContext:</span><br>          <span class="hljs-attr">privileged:</span> <span class="hljs-literal">false</span><br>          <span class="hljs-attr">capabilities:</span><br>             <span class="hljs-attr">add:</span> [<span class="hljs-string">&quot;NET_ADMIN&quot;</span>]<br>        <span class="hljs-attr">env:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">POD_NAME</span><br>          <span class="hljs-attr">valueFrom:</span><br>            <span class="hljs-attr">fieldRef:</span><br>              <span class="hljs-attr">fieldPath:</span> <span class="hljs-string">metadata.name</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">POD_NAMESPACE</span><br>          <span class="hljs-attr">valueFrom:</span><br>            <span class="hljs-attr">fieldRef:</span><br>              <span class="hljs-attr">fieldPath:</span> <span class="hljs-string">metadata.namespace</span><br>        <span class="hljs-attr">volumeMounts:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">run</span><br>          <span class="hljs-attr">mountPath:</span> <span class="hljs-string">/run/flannel</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">flannel-cfg</span><br>          <span class="hljs-attr">mountPath:</span> <span class="hljs-string">/etc/kube-flannel/</span><br>      <span class="hljs-attr">volumes:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">run</span><br>          <span class="hljs-attr">hostPath:</span><br>            <span class="hljs-attr">path:</span> <span class="hljs-string">/run/flannel</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">cni</span><br>          <span class="hljs-attr">hostPath:</span><br>            <span class="hljs-attr">path:</span> <span class="hljs-string">/etc/cni/net.d</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">flannel-cfg</span><br>          <span class="hljs-attr">configMap:</span><br>            <span class="hljs-attr">name:</span> <span class="hljs-string">kube-flannel-cfg</span><br><span class="hljs-string">EOF</span><br><br><br><span class="hljs-string">kubectl</span> <span class="hljs-string">apply</span> <span class="hljs-string">-f</span> <span class="hljs-string">kube-flannel.yaml</span><br></code></pre></td></tr></table></figure><h2 id="安装-coredns"><a href="#安装-coredns" class="headerlink" title="安装 coredns"></a>安装 coredns</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">cat</span> <span class="hljs-string">&lt;&lt;EOF&gt;</span> <span class="hljs-string">coredns.yaml</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">ServiceAccount</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">coredns</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">kube-system</span><br>  <span class="hljs-attr">labels:</span><br>      <span class="hljs-attr">kubernetes.io/cluster-service:</span> <span class="hljs-string">&quot;true&quot;</span><br>      <span class="hljs-attr">addonmanager.kubernetes.io/mode:</span> <span class="hljs-string">Reconcile</span><br><span class="hljs-meta">---</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">rbac.authorization.k8s.io/v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">ClusterRole</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">labels:</span><br>    <span class="hljs-attr">kubernetes.io/bootstrapping:</span> <span class="hljs-string">rbac-defaults</span><br>    <span class="hljs-attr">addonmanager.kubernetes.io/mode:</span> <span class="hljs-string">Reconcile</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">system:coredns</span><br><span class="hljs-attr">rules:</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">apiGroups:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;&quot;</span><br>  <span class="hljs-attr">resources:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">endpoints</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">services</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">pods</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">namespaces</span><br>  <span class="hljs-attr">verbs:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">list</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">watch</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">apiGroups:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;&quot;</span><br>  <span class="hljs-attr">resources:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">nodes</span><br>  <span class="hljs-attr">verbs:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">get</span><br><span class="hljs-meta">---</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">rbac.authorization.k8s.io/v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">ClusterRoleBinding</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">annotations:</span><br>    <span class="hljs-attr">rbac.authorization.kubernetes.io/autoupdate:</span> <span class="hljs-string">&quot;true&quot;</span><br>  <span class="hljs-attr">labels:</span><br>    <span class="hljs-attr">kubernetes.io/bootstrapping:</span> <span class="hljs-string">rbac-defaults</span><br>    <span class="hljs-attr">addonmanager.kubernetes.io/mode:</span> <span class="hljs-string">EnsureExists</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">system:coredns</span><br><span class="hljs-attr">roleRef:</span><br>  <span class="hljs-attr">apiGroup:</span> <span class="hljs-string">rbac.authorization.k8s.io</span><br>  <span class="hljs-attr">kind:</span> <span class="hljs-string">ClusterRole</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">system:coredns</span><br><span class="hljs-attr">subjects:</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">kind:</span> <span class="hljs-string">ServiceAccount</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">coredns</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">kube-system</span><br><span class="hljs-meta">---</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">ConfigMap</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">coredns</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">kube-system</span><br>  <span class="hljs-attr">labels:</span><br>      <span class="hljs-attr">addonmanager.kubernetes.io/mode:</span> <span class="hljs-string">EnsureExists</span><br><span class="hljs-attr">data:</span><br>  <span class="hljs-attr">Corefile:</span> <span class="hljs-string">|</span><br><span class="hljs-string">    .:53 &#123;</span><br><span class="hljs-string">        errors</span><br><span class="hljs-string">        health</span><br><span class="hljs-string">        kubernetes cluster.local in-addr.arpa ip6.arpa &#123;</span><br><span class="hljs-string">            pods insecure</span><br><span class="hljs-string">            upstream</span><br><span class="hljs-string">            fallthrough in-addr.arpa ip6.arpa</span><br><span class="hljs-string">        &#125;</span><br><span class="hljs-string">        prometheus :9153</span><br><span class="hljs-string">        forward . /etc/resolv.conf</span><br><span class="hljs-string">        cache 30</span><br><span class="hljs-string">        loop</span><br><span class="hljs-string">        reload</span><br><span class="hljs-string">        loadbalance</span><br><span class="hljs-string">    &#125;</span><br><span class="hljs-string"></span><span class="hljs-meta">---</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">apps/v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Deployment</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">coredns</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">kube-system</span><br>  <span class="hljs-attr">labels:</span><br>    <span class="hljs-attr">k8s-app:</span> <span class="hljs-string">kube-dns</span><br>    <span class="hljs-attr">kubernetes.io/cluster-service:</span> <span class="hljs-string">&quot;true&quot;</span><br>    <span class="hljs-attr">addonmanager.kubernetes.io/mode:</span> <span class="hljs-string">Reconcile</span><br>    <span class="hljs-attr">kubernetes.io/name:</span> <span class="hljs-string">&quot;CoreDNS&quot;</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-comment"># replicas: not specified here:</span><br>  <span class="hljs-comment"># 1. In order to make Addon Manager do not reconcile this replicas parameter.</span><br>  <span class="hljs-comment"># 2. Default is 1.</span><br>  <span class="hljs-comment"># 3. Will be tuned in real time if DNS horizontal auto-scaling is turned on.</span><br>  <span class="hljs-attr">strategy:</span><br>    <span class="hljs-attr">type:</span> <span class="hljs-string">RollingUpdate</span><br>    <span class="hljs-attr">rollingUpdate:</span><br>      <span class="hljs-attr">maxUnavailable:</span> <span class="hljs-number">1</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">matchLabels:</span><br>      <span class="hljs-attr">k8s-app:</span> <span class="hljs-string">kube-dns</span><br>  <span class="hljs-attr">template:</span><br>    <span class="hljs-attr">metadata:</span><br>      <span class="hljs-attr">labels:</span><br>        <span class="hljs-attr">k8s-app:</span> <span class="hljs-string">kube-dns</span><br>      <span class="hljs-attr">annotations:</span><br>        <span class="hljs-attr">seccomp.security.alpha.kubernetes.io/pod:</span> <span class="hljs-string">&#x27;docker/default&#x27;</span><br>    <span class="hljs-attr">spec:</span><br>      <span class="hljs-attr">priorityClassName:</span> <span class="hljs-string">system-cluster-critical</span><br>      <span class="hljs-attr">serviceAccountName:</span> <span class="hljs-string">coredns</span><br>      <span class="hljs-attr">tolerations:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">key:</span> <span class="hljs-string">&quot;CriticalAddonsOnly&quot;</span><br>          <span class="hljs-attr">operator:</span> <span class="hljs-string">&quot;Exists&quot;</span><br>      <span class="hljs-attr">nodeSelector:</span><br>        <span class="hljs-attr">beta.kubernetes.io/os:</span> <span class="hljs-string">linux</span><br>      <span class="hljs-attr">containers:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">coredns</span><br>        <span class="hljs-attr">image:</span> <span class="hljs-string">coredns/coredns:1.3.1</span><br>        <span class="hljs-attr">imagePullPolicy:</span> <span class="hljs-string">IfNotPresent</span><br>        <span class="hljs-attr">resources:</span><br>          <span class="hljs-attr">limits:</span><br>            <span class="hljs-attr">memory:</span> <span class="hljs-string">170Mi</span><br>          <span class="hljs-attr">requests:</span><br>            <span class="hljs-attr">cpu:</span> <span class="hljs-string">100m</span><br>            <span class="hljs-attr">memory:</span> <span class="hljs-string">70Mi</span><br>        <span class="hljs-attr">args:</span> [ <span class="hljs-string">&quot;-conf&quot;</span>, <span class="hljs-string">&quot;/etc/coredns/Corefile&quot;</span> ]<br>        <span class="hljs-attr">volumeMounts:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">config-volume</span><br>          <span class="hljs-attr">mountPath:</span> <span class="hljs-string">/etc/coredns</span><br>          <span class="hljs-attr">readOnly:</span> <span class="hljs-literal">true</span><br>        <span class="hljs-attr">ports:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">containerPort:</span> <span class="hljs-number">53</span><br>          <span class="hljs-attr">name:</span> <span class="hljs-string">dns</span><br>          <span class="hljs-attr">protocol:</span> <span class="hljs-string">UDP</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">containerPort:</span> <span class="hljs-number">53</span><br>          <span class="hljs-attr">name:</span> <span class="hljs-string">dns-tcp</span><br>          <span class="hljs-attr">protocol:</span> <span class="hljs-string">TCP</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">containerPort:</span> <span class="hljs-number">9153</span><br>          <span class="hljs-attr">name:</span> <span class="hljs-string">metrics</span><br>          <span class="hljs-attr">protocol:</span> <span class="hljs-string">TCP</span><br>        <span class="hljs-attr">livenessProbe:</span><br>          <span class="hljs-attr">httpGet:</span><br>            <span class="hljs-attr">path:</span> <span class="hljs-string">/health</span><br>            <span class="hljs-attr">port:</span> <span class="hljs-number">8080</span><br>            <span class="hljs-attr">scheme:</span> <span class="hljs-string">HTTP</span><br>          <span class="hljs-attr">initialDelaySeconds:</span> <span class="hljs-number">60</span><br>          <span class="hljs-attr">timeoutSeconds:</span> <span class="hljs-number">5</span><br>          <span class="hljs-attr">successThreshold:</span> <span class="hljs-number">1</span><br>          <span class="hljs-attr">failureThreshold:</span> <span class="hljs-number">5</span><br>        <span class="hljs-attr">readinessProbe:</span><br>          <span class="hljs-attr">httpGet:</span><br>            <span class="hljs-attr">path:</span> <span class="hljs-string">/health</span><br>            <span class="hljs-attr">port:</span> <span class="hljs-number">8080</span><br>            <span class="hljs-attr">scheme:</span> <span class="hljs-string">HTTP</span><br>        <span class="hljs-attr">securityContext:</span><br>          <span class="hljs-attr">allowPrivilegeEscalation:</span> <span class="hljs-literal">false</span><br>          <span class="hljs-attr">capabilities:</span><br>            <span class="hljs-attr">add:</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">NET_BIND_SERVICE</span><br>            <span class="hljs-attr">drop:</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">all</span><br>          <span class="hljs-attr">readOnlyRootFilesystem:</span> <span class="hljs-literal">true</span><br>      <span class="hljs-attr">dnsPolicy:</span> <span class="hljs-string">Default</span><br>      <span class="hljs-attr">volumes:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">config-volume</span><br>          <span class="hljs-attr">configMap:</span><br>            <span class="hljs-attr">name:</span> <span class="hljs-string">coredns</span><br>            <span class="hljs-attr">items:</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-attr">key:</span> <span class="hljs-string">Corefile</span><br>              <span class="hljs-attr">path:</span> <span class="hljs-string">Corefile</span><br><span class="hljs-meta">---</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Service</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">kube-dns</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">kube-system</span><br>  <span class="hljs-attr">annotations:</span><br>    <span class="hljs-attr">prometheus.io/port:</span> <span class="hljs-string">&quot;9153&quot;</span><br>    <span class="hljs-attr">prometheus.io/scrape:</span> <span class="hljs-string">&quot;true&quot;</span><br>  <span class="hljs-attr">labels:</span><br>    <span class="hljs-attr">k8s-app:</span> <span class="hljs-string">kube-dns</span><br>    <span class="hljs-attr">kubernetes.io/cluster-service:</span> <span class="hljs-string">&quot;true&quot;</span><br>    <span class="hljs-attr">addonmanager.kubernetes.io/mode:</span> <span class="hljs-string">Reconcile</span><br>    <span class="hljs-attr">kubernetes.io/name:</span> <span class="hljs-string">&quot;CoreDNS&quot;</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">k8s-app:</span> <span class="hljs-string">kube-dns</span><br>  <span class="hljs-attr">clusterIP:</span> <span class="hljs-number">10.96</span><span class="hljs-number">.0</span><span class="hljs-number">.10</span><br>  <span class="hljs-attr">ports:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">dns</span><br>    <span class="hljs-attr">port:</span> <span class="hljs-number">53</span><br>    <span class="hljs-attr">protocol:</span> <span class="hljs-string">UDP</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">dns-tcp</span><br>    <span class="hljs-attr">port:</span> <span class="hljs-number">53</span><br>    <span class="hljs-attr">protocol:</span> <span class="hljs-string">TCP</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">metrics</span><br>    <span class="hljs-attr">port:</span> <span class="hljs-number">9153</span><br>    <span class="hljs-attr">protocol:</span> <span class="hljs-string">TCP</span><br><span class="hljs-string">EOF</span><br></code></pre></td></tr></table></figure><h2 id="kubectl-设置"><a href="#kubectl-设置" class="headerlink" title="kubectl 设置"></a>kubectl 设置</h2><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs gradle">echo <span class="hljs-string">&quot;source &lt;(kubectl completion bash)&quot;</span> &gt;&gt; <span class="hljs-regexp">/etc/</span>profile.d/kubernetes.sh<br><span class="hljs-keyword">source</span> <span class="hljs-regexp">/etc/</span>profile.d/bash_completion.sh<br><span class="hljs-keyword">source</span> <span class="hljs-regexp">/etc/</span>profile.d/kubernetes.sh<br>mkdir -p ~<span class="hljs-regexp">/.kube/</span><br>cp -f <span class="hljs-regexp">/etc/</span>kubernetes<span class="hljs-regexp">/admin.conf ~/</span>.kube/config<br></code></pre></td></tr></table></figure><h2 id="安装-helm"><a href="#安装-helm" class="headerlink" title="安装 helm"></a>安装 helm</h2><p>安装 helm</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs awk">apt-get install socat -y<br>curl -LO https:<span class="hljs-regexp">//</span>storage.googleapis.com<span class="hljs-regexp">/kubernetes-helm/</span>helm-v2.<span class="hljs-number">12.3</span>-linux-amd64.tar.gz<br>tar xf helm-v2.<span class="hljs-number">12.3</span>-linux-amd64.tar.gz<br>mv linux-amd64<span class="hljs-regexp">/helm  /u</span>sr<span class="hljs-regexp">/local/</span>bin/<br>mv linux-amd64<span class="hljs-regexp">/tiller  /u</span>sr<span class="hljs-regexp">/local/</span>bin/<br></code></pre></td></tr></table></figure><p>初始化 helm</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">kubectl  create  serviceaccount tiller -n kube-system<br><br>kubectl  create  clusterrolebinding tiller \<br>    <span class="hljs-params">--clusterrole=cluster-admin</span> <span class="hljs-params">--serviceaccount=kube-system</span><span class="hljs-function">:tiller</span><br><br>helm init <span class="hljs-params">--upgrade</span> <span class="hljs-params">--service-account</span> tiller \<br>    <span class="hljs-params">--skip-refresh</span> -i kuops/tiller<span class="hljs-function">:v2.12.3</span> \<br>    <span class="hljs-params">--stable-repo-url</span> https:<span class="hljs-string">//kuops.com/helm-charts-mirror</span><br><br>helm repo update<br><br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;source &lt;(helm completion bash)&quot;</span> &gt; <span class="hljs-string">/etc/profile.d/helm.sh</span><br>source  <span class="hljs-string">/etc/profile.d/helm.sh</span><br></code></pre></td></tr></table></figure><h2 id="安装-istio"><a href="#安装-istio" class="headerlink" title="安装 istio"></a>安装 istio</h2><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs awk">curl -LO https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/istio/i</span>stio<span class="hljs-regexp">/releases/</span>download<span class="hljs-regexp">/1.0.6/i</span>stio-<span class="hljs-number">1.0</span>.<span class="hljs-number">6</span>-linux.tar.gz<br>tar xf istio-<span class="hljs-number">1.0</span>.<span class="hljs-number">6</span>-linux.tar.gz<br>cp istio-<span class="hljs-number">1.0</span>.<span class="hljs-number">6</span><span class="hljs-regexp">/bin/i</span>stioctl  <span class="hljs-regexp">/usr/</span>local/bin<br><br>helm template istio-<span class="hljs-number">1.0</span>.<span class="hljs-number">6</span><span class="hljs-regexp">/install/</span>kubernetes<span class="hljs-regexp">/helm/i</span>stio --name istio \<br>    --namespace istio-system \<br>    --set global.mtls.enabled=true \<br>    --set tracing.enabled=true \<br>    --set servicegraph.enabled=true \<br>    --set prometheus.enabled=true \<br>    --set grafana.enabled=true &gt; istio.yaml<br><br>kubectl create namespace istio-system<br>kubectl apply -f istio.yaml<br></code></pre></td></tr></table></figure><h2 id="Kubernetes-日志管理"><a href="#Kubernetes-日志管理" class="headerlink" title="Kubernetes 日志管理"></a>Kubernetes 日志管理</h2><p>在Kubernetes每个组件中添加如下配置，须注意<code>--log-dir=</code>每个组件不同后面的目录不同</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">--logtostderr</span>=<span class="hljs-literal">false</span> \<br><span class="hljs-attr">--log-dir</span>=/var/log/kubernetes/kubelet \<br><span class="hljs-attr">--v</span>=<span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><h3 id="使用-logrotate-切割日志"><a href="#使用-logrotate-切割日志" class="headerlink" title="使用 logrotate 切割日志"></a>使用 logrotate 切割日志</h3><p>在<code>/etc/logrotate.d</code>创建kubelet文件并写入一下内容，其他组件需做相应的修改。</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs gradle"><span class="hljs-regexp">/var/</span>log<span class="hljs-regexp">/kubernetes/</span>kubelet/kubelet.*.log.* &#123;<br>    olddir <span class="hljs-regexp">/var/</span>log<span class="hljs-regexp">/kubernetes/</span>kubelet/logrotate<br>    rotate <span class="hljs-number">7</span><br>    <span class="hljs-keyword">size</span> <span class="hljs-number">200</span>M<br>    missingok<br>    compress<br>    nodelaycompress<br>    copytruncate<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Kubernetes主机多网卡"><a href="#Kubernetes主机多网卡" class="headerlink" title="Kubernetes主机多网卡"></a>Kubernetes主机多网卡</h2><p>考虑到部署Kubernetes主机可能有多网卡，这里需要注意一些小细节。如果是采用kubeadm部署的，那么很多组件默认是bind的<code>0.0.0.0</code>这样会导致所有网卡的ip的请求都会监听。但是在API server中<code>--bind-address</code>必须设置为固定IP，<code>--advertise-address</code>是用于向群集成员通告apiserver的IP地址，集群的其他部分必须能够访问这个地址。如果<code>--advertise-address</code>为空，则使用<code>--bind-address</code>但前提是<code>--bind-address</code>bind不是<code>0.0.0.0</code>。如果是<code>0.0.0.0</code>那么Kubelet认为apiserver是哪个ip呢？这里是个问题。</p><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs dns">[root@k8s-m1 ~]# kubectl get ep  <br>NAME             ENDPOINTS                                      AGE<br>kubernetes       <span class="hljs-number">10.15.1.3</span>:<span class="hljs-number">6443,10.15</span>.<span class="hljs-number">1.4:6443</span>,<span class="hljs-number">10.15.1.5</span>:<span class="hljs-number">6443</span>   <span class="hljs-number">119d</span><br></code></pre></td></tr></table></figure><p>API server参数设置（必须设置具体的IP地址）：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">--advertise-address</span>=<span class="hljs-number">10.15</span>.<span class="hljs-number">1.5</span> \<br><span class="hljs-attr">--bind-address</span>=<span class="hljs-number">10.15</span>.<span class="hljs-number">1.5</span>  \<br></code></pre></td></tr></table></figure><h3 id="Flannel网卡设置"><a href="#Flannel网卡设置" class="headerlink" title="Flannel网卡设置"></a>Flannel网卡设置</h3><p>由于flannel使用默认路由的网卡接口，导致使用了外网网卡，在多网卡的时候致使pod之间无法访问。所以需要指定使用相应网卡。在command参数增加<code>--iface=eth1</code>和<code>--public-ip=10.15.1.4</code>即可，具体配置如下:</p><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-attribute">containers</span><span class="hljs-punctuation">:</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">name: kube-flannel</span><br>  <span class="hljs-attribute">image</span><span class="hljs-punctuation">:</span> <span class="hljs-string">quay.io/coreos/flannel:v0.10.0-amd64</span><br>  <span class="hljs-attribute">command</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">/opt/bin/flanneld</span><br>  <span class="hljs-attribute">args</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">--ip-masq</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">--kube-subnet-mgr</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">--iface=eth1</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">--public-ip=10.15.1.4</span><br></code></pre></td></tr></table></figure><h2 id="Kubelet认证-x2F-授权"><a href="#Kubelet认证-x2F-授权" class="headerlink" title="Kubelet认证&#x2F;授权"></a>Kubelet认证&#x2F;授权</h2><p><code>apiserver-kubelet-client</code> 证书是 <code>apiserver</code> 反向连接 <code>kubelet</code> 组件 <code>10250</code> 端口需要使用的证书(例如执行 <code>kubectl logs</code>)。如果这里配置有误将导致 <code>kubectl logs</code> 无法获取日志，提示证书问题。</p><p>Kubelet认证配置段：</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">authentication:</span><br><span class="hljs-symbol">  anonymous:</span><br><span class="hljs-symbol">    enabled:</span> false<br><span class="hljs-symbol">  webhook:</span><br><span class="hljs-symbol">    cacheTTL:</span> <span class="hljs-number">2</span>m0s<br><span class="hljs-symbol">    enabled:</span> true<br><span class="hljs-symbol">  x509:</span><br><span class="hljs-symbol">    clientCAFile:</span> <span class="hljs-keyword">/etc/</span>kubernetes<span class="hljs-keyword">/pki/</span>ca.crt<br><span class="hljs-symbol">authorization:</span><br><span class="hljs-symbol">  mode:</span> Webhook<br><span class="hljs-symbol">  webhook:</span><br><span class="hljs-symbol">    cacheAuthorizedTTL:</span> <span class="hljs-number">5</span>m0s<br><span class="hljs-symbol">    cacheUnauthorizedTTL:</span> <span class="hljs-number">30</span>s<br></code></pre></td></tr></table></figure><h3 id="Kubelet-认证"><a href="#Kubelet-认证" class="headerlink" title="Kubelet 认证"></a>Kubelet 认证</h3><p>默认情况下，所有未被配置的其他身份验证方法拒绝的，对 <code>kubelet</code> 的 HTTPS 端点的请求将被视为匿名请求，并被授予 <code>system:anonymous</code> 用户名和 <code>system:unauthenticated</code> 组。</p><p>如果要禁用匿名访问并发送 <code>401 Unauthorized</code> 的未经身份验证的请求的响应：</p><ul><li>启动 <code>kubelet</code> 时指定 <code>--anonymous-auth=false</code> 标志</li></ul><p>如果要对 kubelet 的 HTTPS 端点启用 X509 客户端证书身份验证：</p><ul><li>启动 <code>kubelet</code> 时指定 <code>--client-ca-file</code> 标志，提供 CA bundle 以验证客户端证书</li><li>启动 <code>apiserver</code> 时指定 <code>--kubelet-client-certificate</code> 和 <code>--kubelet-client-key</code> 标志</li></ul><p>启用 API bearer token（包括 service account token）用于向 kubelet 的 HTTPS 端点进行身份验证：</p><ul><li>确保在 API server 中开启了 <code>authentication.k8s.io/v1beta1</code> API 组。</li><li>启动 kubelet 时指定 <code>--authentication-token-webhook</code> 和 <code>--kubeconfig</code> 标志</li><li>Kubelet 在配置的 API server 上调用 <code>TokenReview API</code> 以确定来自 <code>bearer token</code> 的用户信息</li></ul><h3 id="Kubelet-授权"><a href="#Kubelet-授权" class="headerlink" title="Kubelet 授权"></a>Kubelet 授权</h3><p>接着对任何成功验证的请求（包括匿名请求）授权。默认授权模式为 <code>AlwaysAllow</code>，允许所有请求。</p><p>细分访问 kubelet API 有很多原因：</p><ul><li>启用匿名认证，但匿名用户调用 kubelet API 的能力应受到限制</li><li>启动 bearer token 认证，但是 API 用户（如 service account）调用 kubelet API 的能力应受到限制</li><li>客户端证书身份验证已启用，但只有那些配置了 CA 签名的客户端证书的用户才可以使用 kubelet API</li></ul><p>如果要细分访问 kubelet API，将授权委托给 API server：</p><ul><li>确保 API server 中启用了 <code>authorization.k8s.io/v1beta1 API</code> 组</li><li>启动 kubelet 时指定 <code>--authorization-mode=Webhook</code>、 <code>--kubeconfig</code> 标志（指定 –authorization-mode&#x3D;Webhook 后 10250 端口 RBAC 授权将会委托给 apiserver）</li><li>kubelet 在配置的 API server 上调用 <code>SubjectAccessReview API</code>，以确定每个请求是否被授权</li></ul><p>kubelet 使用与 apiserver 相同的 请求属性 方法来授权 API 请求。</p><p>Verb（动词）是根据传入的请求的 HTTP 动词确定的：</p><table><thead><tr><th>HTTP 动词</th><th align="center">request 动词</th></tr></thead><tbody><tr><td>POST</td><td align="center">create</td></tr><tr><td>GET, HEAD</td><td align="center">get</td></tr><tr><td>PUT</td><td align="center">update</td></tr><tr><td>PATCH</td><td align="center">patch</td></tr><tr><td>DELETE</td><td align="center">delete</td></tr></tbody></table><p>资源和子资源根据传入请求的路径确定：</p><table><thead><tr><th>Kubelet API</th><th align="center">资源</th><th align="right">子资源</th></tr></thead><tbody><tr><td>&#x2F;stats&#x2F;*</td><td align="center">nodes</td><td align="right">stats</td></tr><tr><td>&#x2F;metrics&#x2F;*</td><td align="center">nodes</td><td align="right">metrics</td></tr><tr><td>&#x2F;logs&#x2F;*</td><td align="center">nodes</td><td align="right">log</td></tr><tr><td>&#x2F;spec&#x2F;*</td><td align="center">nodes</td><td align="right">spec</td></tr><tr><td>all others</td><td align="center">nodes</td><td align="right">proxy</td></tr></tbody></table><p>Namespace 和 API 组属性总是空字符串，资源的名字总是 kubelet 的 Node API 对象的名字。</p><p>当以该模式运行时，请确保用户为 apiserver 指定了 <code>--kubelet-client-certificate</code> 和 <code>--kubelet-client-key</code> 标志并授权了如下属性：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-attribute">verb</span>=*, <span class="hljs-attribute">resource</span>=nodes, <span class="hljs-attribute">subresource</span>=proxy<br><span class="hljs-attribute">verb</span>=*, <span class="hljs-attribute">resource</span>=nodes, <span class="hljs-attribute">subresource</span>=stats<br><span class="hljs-attribute">verb</span>=*, <span class="hljs-attribute">resource</span>=nodes, <span class="hljs-attribute">subresource</span>=log<br><span class="hljs-attribute">verb</span>=*, <span class="hljs-attribute">resource</span>=nodes, <span class="hljs-attribute">subresource</span>=spec<br><span class="hljs-attribute">verb</span>=*, <span class="hljs-attribute">resource</span>=nodes, <span class="hljs-attribute">subresource</span>=metrics<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Kubernetes</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>二进制部署Kubernetes v1.13.5（一）</title>
    <link href="/2019/08/26/installation-Kubernetes-v1-13-5/"/>
    <url>/2019/08/26/installation-Kubernetes-v1-13-5/</url>
    
    <content type="html"><![CDATA[<h3 id="节点信息"><a href="#节点信息" class="headerlink" title="节点信息"></a>节点信息</h3><p>本文章将以下列节点数与规格来进行部署Kubernetes集群,系统采用CentOS 7.X，另外使用<code>keepalived+haproxy</code>来做<code>master</code>高可用 。其中VIP地址为<code>192.168.0.240</code>；</p><ul><li>所有操作全部用root权限</li><li>高可用一般建议大于等于3台的奇数台,我使用3台master来做高可用</li></ul><table><thead><tr><th>IP</th><th>Hostname</th><th>CPU</th><th>Memory</th></tr></thead><tbody><tr><td>192.168.0.200</td><td>K8S-M1</td><td>4</td><td>8G</td></tr><tr><td>192.168.0.201</td><td>K8S-M1</td><td>4</td><td>8G</td></tr><tr><td>192.168.0.202</td><td>K8S-M1</td><td>4</td><td>8G</td></tr><tr><td>192.168.0.203</td><td>K8S-N1</td><td>4</td><td>8G</td></tr><tr><td>192.168.0.204</td><td>K8S-N2</td><td>4</td><td>8G</td></tr></tbody></table><h3 id="事前准备"><a href="#事前准备" class="headerlink" title="事前准备"></a>事前准备</h3><blockquote><p>所有防火墙与SELinux 已关闭。如CentOS：否则后续 K8S 挂载目录时可能报错 Permission denied</p></blockquote><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">systemctl disable --now firewalld NetworkManager<br>setenforce <span class="hljs-number">0</span><br>sed -ri <span class="hljs-string">&#x27;/^[^#]*SELINUX=/s#=.+$#=disabled#&#x27;</span> <span class="hljs-regexp">/etc/</span>selinux/config<br></code></pre></td></tr></table></figure><blockquote><p>关闭 dnsmasq (可选) linux 系统开启了 dnsmasq 后(如 GUI 环境)，将系统 DNS Server 设置为 127.0.0.1，这会导致 docker 容器无法解析域名，需要关闭它</p></blockquote><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">systemctl <span class="hljs-keyword">disable</span> <span class="hljs-comment">--now dnsmasq</span><br></code></pre></td></tr></table></figure><blockquote><p>Kubernetes v1.8+要求关闭系统Swap,若不关闭则需要修改kubelet设定参数( –fail-swap-on 设置为 false 来忽略 swap on),在所有机器使用以下指令关闭swap并注释掉&#x2F;etc&#x2F;fstab中swap的行：</p></blockquote><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">swapoff -a &amp;&amp; sysctl -w vm.swappiness=<span class="hljs-number">0</span><br>sed -ri <span class="hljs-string">&#x27;/^[^#]*swap/s@^@#@&#x27;</span> <span class="hljs-regexp">/etc/</span>fstab<br></code></pre></td></tr></table></figure><blockquote><p>如果是centos的话不想升级到最新内核可以忽略更新kernel</p></blockquote><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">yum <span class="hljs-keyword">install </span>epel-release -y<br>yum <span class="hljs-keyword">install </span>wget git  <span class="hljs-keyword">jq </span>psmisc socat -y<br>yum update -y --exclude=kernel*<br></code></pre></td></tr></table></figure><blockquote><p>如果上面yum update加入–exclude&#x3D;kernel*就重启下加载保守内核</p></blockquote><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">reboot</span><br></code></pre></td></tr></table></figure><blockquote><p>因为目前市面上包管理下内核版本会很低,安装docker后无论centos还是ubuntu会有如下bug,4.15的内核依然存在<br>kernel:unregister_netdevice: waiting for lo to become free. Usage count &#x3D; 1</p></blockquote><blockquote><p>所以建议先升级内核，perl是内核的依赖包,如果没有就安装下</p></blockquote><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">[ ! -f <span class="hljs-regexp">/usr/</span>bin/perl ] &amp;&amp; yum install perl -y<br></code></pre></td></tr></table></figure><blockquote><p>升级内核需要使用 elrepo 的yum 源,首先我们导入 elrepo 的 key并安装 elrepo 源</p></blockquote><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">rpm --import https:<span class="hljs-regexp">//</span>www.elrepo.org/RPM-GPG-KEY-elrepo.org<br>rpm -Uvh http:<span class="hljs-regexp">//</span>www.elrepo.org/elrepo-release-<span class="hljs-number">7.0</span>-<span class="hljs-number">3</span>.el7.elrepo.noarch.rpm<br></code></pre></td></tr></table></figure><blockquote><p>查看可用的内核</p></blockquote><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">yum <span class="hljs-params">--disablerepo=</span><span class="hljs-string">&quot;*&quot;</span> <span class="hljs-params">--enablerepo=</span><span class="hljs-string">&quot;elrepo-kernel&quot;</span> list available  <span class="hljs-params">--showduplicates</span><br></code></pre></td></tr></table></figure><blockquote><p>在yum的ELRepo源中,mainline 为最新版本的内核,安装kernel<br>ipvs依赖于nf_conntrack_ipv4内核模块,4.19包括之后内核里改名为nf_conntrack,1.13.1之前的kube-proxy的代码里没有加判断一直用的nf_conntrack_ipv4,好像是1.13.1后的kube-proxy代码里增加了判断,我测试了是会去load nf_conntrack使用ipvs正常</p></blockquote><blockquote><p>下面是ml的内核和上面归档内核版本任选其一的安装方法</p></blockquote><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">export Kernel_Version=<span class="hljs-number">4.18</span>.<span class="hljs-number">9</span>-<span class="hljs-number">1</span><br>wget  http:<span class="hljs-regexp">//mi</span>rror.rc.usf.edu<span class="hljs-regexp">/compute_lock/</span>elrepo<span class="hljs-regexp">/kernel/</span>el7<span class="hljs-regexp">/x86_64/</span>RPMS/kernel-ml&#123;,-devel&#125;-<span class="hljs-variable">$&#123;Kernel_Version&#125;</span>.el7.elrepo.x86_64.rpm<br>yum localinstall -y kernel-ml*<br></code></pre></td></tr></table></figure><blockquote><p>最新内核安装(也是我使用的)</p></blockquote><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros">yum <span class="hljs-attribute">--disablerepo</span>=<span class="hljs-string">&quot;*&quot;</span> <span class="hljs-attribute">--enablerepo</span>=<span class="hljs-string">&quot;elrepo-kernel&quot;</span> list available  --showduplicates | grep -Po <span class="hljs-string">&#x27;^kernel-ml.x86_64\s+\K\S+(?=.el7)&#x27;</span><br>yum <span class="hljs-attribute">--disablerepo</span>=<span class="hljs-string">&quot;*&quot;</span> <span class="hljs-attribute">--enablerepo</span>=elrepo-kernel install -y kernel-ml&#123;,-devel&#125;<br></code></pre></td></tr></table></figure><blockquote><p>修改内核启动顺序,默认启动的顺序应该为1,升级以后内核是往前面插入,为0（如果每次启动时需要手动选择哪个内核,该步骤可以省略）</p></blockquote><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gams">grub2-<span class="hljs-keyword">set</span>-default  <span class="hljs-comment">0 &amp;&amp; grub2-mkconfig -o</span> /etc/<span class="hljs-comment">grub2.cfg</span><br></code></pre></td></tr></table></figure><blockquote><p>使用下面命令看看确认下是否启动默认内核指向上面安装的内核</p></blockquote><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs actionscript">grubby --<span class="hljs-keyword">default</span>-kernel<br></code></pre></td></tr></table></figure><blockquote><p>docker官方的内核检查脚本建议(RHEL7&#x2F;CentOS7: User namespaces disabled; add ‘user_namespace.enable&#x3D;1’ to boot command line),使用下面命令开启</p></blockquote><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">grubby <span class="hljs-attribute">--args</span>=<span class="hljs-string">&quot;user_namespace.enable=1&quot;</span> <span class="hljs-attribute">--update-kernel</span>=<span class="hljs-string">&quot;<span class="hljs-variable">$(grubby --default-kernel)</span>&quot;</span><br></code></pre></td></tr></table></figure><blockquote><p>重启加载新内核</p></blockquote><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">reboot</span><br></code></pre></td></tr></table></figure><blockquote><p>所有机器安装ipvs(ipvs性能甩iptables几条街并且排错更直观)在每台机器上安装依赖包：</p></blockquote><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">yum <span class="hljs-keyword">install</span> ipvsadm ipset sysstat conntrack libseccomp -y<br></code></pre></td></tr></table></figure><blockquote><p>所有机器选择需要开机加载的内核模块,以下是 ipvs 模式需要加载的模块并设置开机自动加载</p></blockquote><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs awk">:&gt; <span class="hljs-regexp">/etc/m</span>odules-load.d/ipvs.conf<br>module=(<br>ip_vs<br>ip_vs_rr<br>ip_vs_wrr<br>ip_vs_sh<br>nf_conntrack<br>br_netfilter<br>  )<br><span class="hljs-keyword">for</span> kernel_module <span class="hljs-keyword">in</span> <span class="hljs-variable">$&#123;module[@]&#125;</span>;<span class="hljs-keyword">do</span><br>    <span class="hljs-regexp">/sbin/m</span>odinfo -F filename <span class="hljs-variable">$kernel_module</span> |&amp; grep -qv ERROR &amp;&amp; echo <span class="hljs-variable">$kernel_module</span> &gt;&gt; <span class="hljs-regexp">/etc/m</span>odules-load.d/ipvs.conf || :<br>done<br>systemctl enable --now systemd-modules-load.service<br></code></pre></td></tr></table></figure><blockquote><p>上面如果systemctl enable命令报错可以systemctl status -l systemd-modules-load.service看看哪个内核模块加载不了,在&#x2F;etc&#x2F;modules-load.d&#x2F;ipvs.conf里注释掉它再enable试试</p></blockquote><blockquote><p>所有机器需要设定&#x2F;etc&#x2F;sysctl.d&#x2F;k8s.conf的系统参数。</p></blockquote><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">cat</span> &lt;&lt;EOF &gt; /etc/sysctl.d/k8s.conf<br><span class="hljs-comment"># https://github.com/moby/moby/issues/31208 </span><br><span class="hljs-comment"># ipvsadm -l --timout</span><br><span class="hljs-comment"># 修复ipvs模式下长连接timeout问题 小于900即可</span><br><span class="hljs-attribute">net</span>.ipv4.tcp_keepalive_time = <span class="hljs-number">600</span><br><span class="hljs-attribute">net</span>.ipv4.tcp_keepalive_intvl = <span class="hljs-number">30</span><br><span class="hljs-attribute">net</span>.ipv4.tcp_keepalive_probes = <span class="hljs-number">10</span><br><br><span class="hljs-comment"># 关闭IPV6防止触发BUG</span><br><span class="hljs-attribute">net</span>.ipv6.conf.<span class="hljs-literal">all</span>.disable_ipv6 = <span class="hljs-number">1</span><br><span class="hljs-attribute">net</span>.ipv6.conf.default.disable_ipv6 = <span class="hljs-number">1</span><br><span class="hljs-attribute">net</span>.ipv6.conf.lo.disable_ipv6 = <span class="hljs-number">1</span><br><br><span class="hljs-attribute">net</span>.ipv4.neigh.default.gc_stale_time = <span class="hljs-number">120</span><br><span class="hljs-attribute">net</span>.ipv4.conf.<span class="hljs-literal">all</span>.rp_filter = <span class="hljs-number">0</span><br><span class="hljs-attribute">net</span>.ipv4.conf.default.rp_filter = <span class="hljs-number">0</span><br><span class="hljs-attribute">net</span>.ipv4.conf.default.arp_announce = <span class="hljs-number">2</span><br><span class="hljs-attribute">net</span>.ipv4.conf.lo.arp_announce = <span class="hljs-number">2</span><br><span class="hljs-attribute">net</span>.ipv4.conf.<span class="hljs-literal">all</span>.arp_announce = <span class="hljs-number">2</span><br><span class="hljs-attribute">net</span>.ipv4.ip_forward = <span class="hljs-number">1</span><br><span class="hljs-attribute">net</span>.ipv4.tcp_max_tw_buckets = <span class="hljs-number">5000</span><br><span class="hljs-attribute">net</span>.ipv4.tcp_syncookies = <span class="hljs-number">1</span><br><span class="hljs-attribute">net</span>.ipv4.tcp_max_syn_backlog = <span class="hljs-number">1024</span><br><span class="hljs-attribute">net</span>.ipv4.tcp_synack_retries = <span class="hljs-number">2</span><br><span class="hljs-comment"># 要求iptables不对bridge的数据进行处理</span><br><span class="hljs-attribute">net</span>.bridge.bridge-nf-call-ip6tables = <span class="hljs-number">1</span><br><span class="hljs-attribute">net</span>.bridge.bridge-nf-call-iptables = <span class="hljs-number">1</span><br><span class="hljs-attribute">net</span>.bridge.bridge-nf-call-arptables = <span class="hljs-number">1</span><br><span class="hljs-attribute">net</span>.netfilter.nf_conntrack_max = <span class="hljs-number">2310720</span><br><span class="hljs-attribute">fs</span>.inotify.max_user_watches=<span class="hljs-number">89100</span><br><span class="hljs-attribute">fs</span>.may_detach_mounts = <span class="hljs-number">1</span><br><span class="hljs-attribute">fs</span>.file-max = <span class="hljs-number">52706963</span><br><span class="hljs-attribute">fs</span>.nr_open = <span class="hljs-number">52706963</span><br><span class="hljs-attribute">vm</span>.swappiness = <span class="hljs-number">0</span><br><span class="hljs-attribute">vm</span>.overcommit_memory=<span class="hljs-number">1</span><br><span class="hljs-attribute">vm</span>.panic_on_oom=<span class="hljs-number">0</span><br><span class="hljs-attribute">EOF</span><br><br><span class="hljs-attribute">sysctl</span> --system<br></code></pre></td></tr></table></figure><blockquote><p>所有机器需要安装Docker CE 版本的容器引擎,推荐使用年份命名版本的docker ce：<br>在官方查看K8s支持的docker版本 <a href="https://github.com/kubernetes/kubernetes">https://github.com/kubernetes/kubernetes</a> 里进对应版本的<code>changelog</code>里搜<code>The list of validated docker versions remain</code></p></blockquote><blockquote><p>建议使用yum安装docker版本,这里我使用的是18.06.03，并为所有机器配置加速源并配置docker的启动参数使用systemd,使用systemd是官方的建议,详见 <a href="https://kubernetes.io/docs/setup/cri/">https://kubernetes.io/docs/setup/cri/</a></p></blockquote><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs awk">mkdir -p <span class="hljs-regexp">/etc/</span>docker/<br>cat&gt;<span class="hljs-regexp">/etc/</span>docker/daemon.json&lt;&lt;EOF<br>&#123;<br>  <span class="hljs-string">&quot;exec-opts&quot;</span>: [<span class="hljs-string">&quot;native.cgroupdriver=systemd&quot;</span>],<br>  <span class="hljs-string">&quot;registry-mirrors&quot;</span>: [<span class="hljs-string">&quot;https://fz5yth0r.mirror.aliyuncs.com&quot;</span>],<br>  <span class="hljs-string">&quot;storage-driver&quot;</span>: <span class="hljs-string">&quot;overlay2&quot;</span>,<br>  <span class="hljs-string">&quot;storage-opts&quot;</span>: [<br>    <span class="hljs-string">&quot;overlay2.override_kernel_check=true&quot;</span><br>  ],<br>  <span class="hljs-string">&quot;log-driver&quot;</span>: <span class="hljs-string">&quot;json-file&quot;</span>,<br>  <span class="hljs-string">&quot;log-opts&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;max-size&quot;</span>: <span class="hljs-string">&quot;100m&quot;</span>,<br>    <span class="hljs-string">&quot;max-file&quot;</span>: <span class="hljs-string">&quot;3&quot;</span><br>  &#125;<br>&#125;<br>EOF<br></code></pre></td></tr></table></figure><blockquote><p>设置docker开机启动,CentOS安装完成后docker需要手动设置docker命令补全：</p></blockquote><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">yum install -y epel-release bash-completion &amp;&amp; cp <span class="hljs-regexp">/usr/</span>share<span class="hljs-regexp">/bash-completion/</span>completions<span class="hljs-regexp">/docker /</span>etc<span class="hljs-regexp">/bash_completion.d/</span><br>systemctl enable --now docker<br></code></pre></td></tr></table></figure><blockquote><p>切记所有机器需要自行设定ntp,否则不只HA下apiserver通信有问题,各种千奇百怪的问题。</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>Kubernetes</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>kube-proxy 工作模式分析</title>
    <link href="/2019/08/26/kube-proxy/"/>
    <url>/2019/08/26/kube-proxy/</url>
    
    <content type="html"><![CDATA[<blockquote><p>我们知道kube-proxy支持 iptables 和 ipvs 两种模式， 在kubernetes v1.8 中引入了 ipvs 模式，在 v1.9 中处于 beta 阶段，在 v1.11 中已经正式可用了。iptables 模式在 v1.1 中就添加支持了，从 v1.2 版本开始 iptables 就是 kube-proxy 默认的操作模式，ipvs 和 iptables 都是基于netfilter的，那么 ipvs 模式和 iptables 模式之间有哪些差异呢？</p></blockquote><ul><li>ipvs 为大型集群提供了更好的可扩展性和性能</li><li>ipvs 支持比 iptables 更复杂的复制均衡算法（最小负载、最少连接、加权等等）</li><li>ipvs 支持服务器健康检查和连接重试等功能</li><li>可以动态修改ipset集合。即使iptables的规则正在使用这个集合。</li></ul><h3 id="ipvs-依赖-iptables"><a href="#ipvs-依赖-iptables" class="headerlink" title="ipvs 依赖 iptables"></a>ipvs 依赖 iptables</h3><blockquote><p>由于ipvs 无法提供包过滤、SNAT、masquared(伪装)等功能。因此在某些场景（如Nodeport的实现）下还是要与iptables搭配使用，ipvs 将使用ipset来存储需要DROP或masquared的流量的源或目标地址，以确保 iptables 规则的数量是恒定的。假设要禁止上万个IP访问我们的服务器，则用iptables的话，就需要一条一条地添加规则，会在iptables中生成大量的规则；但是使用ipset的话，只需要将相关的IP地址（网段）加入到ipset集合中即可，这样只需要设置少量的iptables规则即可实现目标。</p></blockquote><h3 id="kube-proxy使用ipvs模式"><a href="#kube-proxy使用ipvs模式" class="headerlink" title="kube-proxy使用ipvs模式"></a>kube-proxy使用ipvs模式</h3><h4 id="在每台机器上安装依赖包："><a href="#在每台机器上安装依赖包：" class="headerlink" title="在每台机器上安装依赖包："></a>在每台机器上安装依赖包：</h4><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript">[root@k8s-m1 ~]<span class="hljs-comment"># yum install ipvsadm ipset sysstat conntrack libseccomp -y</span><br></code></pre></td></tr></table></figure><h4 id="所有机器选择需要开机加载的内核模块-以下是-ipvs-模式需要加载的模块并设置开机自动加载"><a href="#所有机器选择需要开机加载的内核模块-以下是-ipvs-模式需要加载的模块并设置开机自动加载" class="headerlink" title="所有机器选择需要开机加载的内核模块,以下是 ipvs 模式需要加载的模块并设置开机自动加载"></a>所有机器选择需要开机加载的内核模块,以下是 ipvs 模式需要加载的模块并设置开机自动加载</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@k8s-m1 ~]<span class="hljs-comment"># :&gt; /etc/modules-load.d/ipvs.conf</span><br>module=(<br>ip_vs<br>ip_vs_rr<br>ip_vs_wrr<br>ip_vs_sh<br>nf_conntrack<br>br_netfilter<br>  )<br><span class="hljs-keyword">for</span> kernel_module <span class="hljs-keyword">in</span> <span class="hljs-variable">$&#123;module[@]&#125;</span>;<span class="hljs-keyword">do</span><br>    /sbin/modinfo -F filename <span class="hljs-variable">$kernel_module</span> |&amp; grep -qv ERROR &amp;&amp; <span class="hljs-built_in">echo</span> <span class="hljs-variable">$kernel_module</span> &gt;&gt; /etc/modules-load.d/ipvs.conf || :<br><span class="hljs-keyword">done</span><br>systemctl <span class="hljs-built_in">enable</span> --now systemd-modules-load.service<br></code></pre></td></tr></table></figure><blockquote><p>上面如果<code>systemctl enable</code>命令报错可以<code>systemctl status -l systemd-modules-load.service</code>看看哪个内核模块加载不了,在<code>/etc/modules-load.d/ipvs.conf</code>里注释掉它再enable试试</p></blockquote><h4 id="所有机器需要设定-x2F-etc-x2F-sysctl-d-x2F-k8s-conf的系统参数。"><a href="#所有机器需要设定-x2F-etc-x2F-sysctl-d-x2F-k8s-conf的系统参数。" class="headerlink" title="所有机器需要设定&#x2F;etc&#x2F;sysctl.d&#x2F;k8s.conf的系统参数。"></a>所有机器需要设定&#x2F;etc&#x2F;sysctl.d&#x2F;k8s.conf的系统参数。</h4><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs vim">[root@k8s-m1 ~]# <span class="hljs-keyword">cat</span> &lt;&lt;EOF &gt; /etc/sysctl.d/k8s.<span class="hljs-keyword">conf</span><br># https://github.<span class="hljs-keyword">com</span>/moby/moby/issues/<span class="hljs-number">31208</span> <br># ipvsadm -<span class="hljs-keyword">l</span> --timout<br># 修复ipvs模式下长连接timeout问题 小于<span class="hljs-number">900</span>即可<br>net.ipv4.tcp_keepalive_time = <span class="hljs-number">600</span><br>net.ipv4.tcp_keepalive_intvl = <span class="hljs-number">30</span><br>net.ipv4.tcp_keepalive_probes = <span class="hljs-number">10</span><br>net.ipv6.<span class="hljs-keyword">conf</span>.<span class="hljs-keyword">all</span>.disable_ipv6 = <span class="hljs-number">1</span><br>net.ipv6.<span class="hljs-keyword">conf</span>.default.disable_ipv6 = <span class="hljs-number">1</span><br>net.ipv6.<span class="hljs-keyword">conf</span>.<span class="hljs-keyword">lo</span>.disable_ipv6 = <span class="hljs-number">1</span><br>net.ipv4.neigh.default.gc_stale_time = <span class="hljs-number">120</span><br>net.ipv4.<span class="hljs-keyword">conf</span>.<span class="hljs-keyword">all</span>.rp_filter = <span class="hljs-number">0</span><br>net.ipv4.<span class="hljs-keyword">conf</span>.default.rp_filter = <span class="hljs-number">0</span><br>net.ipv4.<span class="hljs-keyword">conf</span>.default.arp_announce = <span class="hljs-number">2</span><br>net.ipv4.<span class="hljs-keyword">conf</span>.<span class="hljs-keyword">lo</span>.arp_announce = <span class="hljs-number">2</span><br>net.ipv4.<span class="hljs-keyword">conf</span>.<span class="hljs-keyword">all</span>.arp_announce = <span class="hljs-number">2</span><br>net.ipv4.ip_forward = <span class="hljs-number">1</span><br>net.ipv4.tcp_max_tw_buckets = <span class="hljs-number">5000</span><br>net.ipv4.tcp_syncookies = <span class="hljs-number">1</span><br>net.ipv4.tcp_max_syn_backlog = <span class="hljs-number">1024</span><br>net.ipv4.tcp_synack_retries = <span class="hljs-number">2</span><br># 要求iptables不对bridge的数据进行处理<br>net.bridge.bridge-nf-<span class="hljs-keyword">call</span>-ip6tables = <span class="hljs-number">1</span><br>net.bridge.bridge-nf-<span class="hljs-keyword">call</span>-iptables = <span class="hljs-number">1</span><br>net.bridge.bridge-nf-<span class="hljs-keyword">call</span>-arptables = <span class="hljs-number">1</span><br>net.netfilter.nf_conntrack_max = <span class="hljs-number">2310720</span><br>fs.inotify.max_user_watches=<span class="hljs-number">89100</span><br>fs.may_detach_mounts = <span class="hljs-number">1</span><br>fs.<span class="hljs-keyword">file</span>-<span class="hljs-built_in">max</span> = <span class="hljs-number">52706963</span><br>fs.nr_open = <span class="hljs-number">52706963</span><br><span class="hljs-keyword">vm</span>.swappiness = <span class="hljs-number">0</span><br><span class="hljs-keyword">vm</span>.overcommit_memory=<span class="hljs-number">1</span><br><span class="hljs-keyword">vm</span>.panic_on_oom=<span class="hljs-number">0</span><br>EOF<br><br><br>[root@k8s-m1 ~]# sysctl --<span class="hljs-built_in">system</span><br></code></pre></td></tr></table></figure><h3 id="修改Kube-proxy配置文件将mode设置为ipvs"><a href="#修改Kube-proxy配置文件将mode设置为ipvs" class="headerlink" title="修改Kube-proxy配置文件将mode设置为ipvs"></a>修改Kube-proxy配置文件将mode设置为ipvs</h3><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">hostnameOverride:</span> k8s-m1<br><span class="hljs-symbol">iptables:</span><br><span class="hljs-symbol">    masqueradeAll:</span> true<br><span class="hljs-symbol">    masqueradeBit:</span> <span class="hljs-number">14</span><br><span class="hljs-symbol">    minSyncPeriod:</span> <span class="hljs-number">0</span>s<br><span class="hljs-symbol">    syncPeriod:</span> <span class="hljs-number">30</span>s<br><span class="hljs-symbol">ipvs:</span><br><span class="hljs-symbol">    excludeCIDRs:</span> null<br><span class="hljs-symbol">    minSyncPeriod:</span> <span class="hljs-number">0</span>s<br><span class="hljs-symbol">    scheduler:</span> <span class="hljs-string">&quot;&quot;</span><br><span class="hljs-symbol">    syncPeriod:</span> <span class="hljs-number">30</span>s<br><span class="hljs-symbol">kind:</span> KubeProxyConfiguration<br><span class="hljs-symbol">metricsBindAddress:</span> <span class="hljs-number">192.168</span><span class="hljs-number">.0</span><span class="hljs-number">.200</span>:<span class="hljs-number">10249</span><br><span class="hljs-symbol">mode:</span> <span class="hljs-string">&quot;ipvs&quot;</span><br><span class="hljs-symbol">nodePortAddresses:</span> null<br><span class="hljs-symbol">oomScoreAdj:</span> <span class="hljs-number">-999</span><br><span class="hljs-symbol">portRange:</span> <span class="hljs-string">&quot;&quot;</span><br><span class="hljs-symbol">resourceContainer:</span> /kube-proxy<br><span class="hljs-symbol">udpIdleTimeout:</span> <span class="hljs-number">250</span>ms<br></code></pre></td></tr></table></figure><blockquote><h3 id="创建-ClusterIP-类型服务时，IPVS-proxier-将执行以下三项操作："><a href="#创建-ClusterIP-类型服务时，IPVS-proxier-将执行以下三项操作：" class="headerlink" title="创建 ClusterIP 类型服务时，IPVS proxier 将执行以下三项操作："></a>创建 ClusterIP 类型服务时，IPVS proxier 将执行以下三项操作：</h3></blockquote><ul><li>确保节点中存在虚拟接口，默认为 kube-ipvs0</li><li>将Service IP 地址绑定到虚拟接口</li><li>分别为每个Service IP 地址创建 IPVS virtual servers</li></ul><h4 id="这是一个例子"><a href="#这是一个例子" class="headerlink" title="这是一个例子:"></a>这是一个例子:</h4><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs makefile">[root@k8s-m1 ~]<span class="hljs-comment"># kubectl describe svc tomcat-service</span><br><span class="hljs-section">Name:              tomcat-service</span><br><span class="hljs-section">Namespace:         default</span><br><span class="hljs-section">Labels:            &lt;none&gt;</span><br><span class="hljs-section">Annotations:       kubectl.kubernetes.io/last-applied-configuration:</span><br>                     &#123;<span class="hljs-string">&quot;apiVersion&quot;</span>:<span class="hljs-string">&quot;v1&quot;</span>,<span class="hljs-string">&quot;kind&quot;</span>:<span class="hljs-string">&quot;Service&quot;</span>,<span class="hljs-string">&quot;metadata&quot;</span>:&#123;<span class="hljs-string">&quot;annotations&quot;</span>:&#123;&#125;,<span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;tomcat-service&quot;</span>,<span class="hljs-string">&quot;namespace&quot;</span>:<span class="hljs-string">&quot;default&quot;</span>&#125;,<span class="hljs-string">&quot;spec&quot;</span>:&#123;<span class="hljs-string">&quot;ports&quot;</span>:[&#123;<span class="hljs-string">&quot;port&quot;</span>:8...<br><span class="hljs-section">Selector:          app=tomcat</span><br><span class="hljs-section">Type:              ClusterIP</span><br><span class="hljs-section">IP:                10.106.88.77</span><br><span class="hljs-section">Port:              &lt;unset&gt;  8080/TCP</span><br><span class="hljs-section">TargetPort:        8080/TCP</span><br><span class="hljs-section">Endpoints:         10.244.0.48:8080</span><br>Session Affinity:  None<br><span class="hljs-section">Events:            &lt;none&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight pf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs pf">[root@k8s-m1 ~]<span class="hljs-comment"># ip -4 a</span><br><span class="hljs-number">8</span>: kube-ipvs0: <span class="hljs-variable">&lt;BROADCAST,NOARP&gt;</span> mtu <span class="hljs-number">1500</span> qdisc noop <span class="hljs-keyword">state</span> DOWN <span class="hljs-keyword">group</span> <span class="hljs-keyword">default</span><br>    <span class="hljs-keyword">inet</span> <span class="hljs-number">10.96</span>.<span class="hljs-number">0.10</span>/<span class="hljs-number">32</span> brd <span class="hljs-number">10.96</span>.<span class="hljs-number">0.10</span> scope <span class="hljs-keyword">global</span> kube-ipvs0<br>       valid_lft forever preferred_lft forever<br>    <span class="hljs-keyword">inet</span> <span class="hljs-number">10.101</span>.<span class="hljs-number">68.42</span>/<span class="hljs-number">32</span> brd <span class="hljs-number">10.101</span>.<span class="hljs-number">68.42</span> scope <span class="hljs-keyword">global</span> kube-ipvs0<br>       valid_lft forever preferred_lft forever<br>    <span class="hljs-keyword">inet</span> <span class="hljs-number">10.96</span>.<span class="hljs-number">0.1</span>/<span class="hljs-number">32</span> brd <span class="hljs-number">10.96</span>.<span class="hljs-number">0.1</span> scope <span class="hljs-keyword">global</span> kube-ipvs0<br>       valid_lft forever preferred_lft forever<br>    <span class="hljs-keyword">inet</span> <span class="hljs-number">10.107</span>.<span class="hljs-number">7.203</span>/<span class="hljs-number">32</span> brd <span class="hljs-number">10.107</span>.<span class="hljs-number">7.203</span> scope <span class="hljs-keyword">global</span> kube-ipvs0<br>       valid_lft forever preferred_lft forever<br>    <span class="hljs-keyword">inet</span> <span class="hljs-number">10.106</span>.<span class="hljs-number">88.77</span>/<span class="hljs-number">32</span> brd <span class="hljs-number">10.106</span>.<span class="hljs-number">88.77</span> scope <span class="hljs-keyword">global</span> kube-ipvs0<br>       valid_lft forever preferred_lft forever<br>    <span class="hljs-keyword">inet</span> <span class="hljs-number">10.98</span>.<span class="hljs-number">230.124</span>/<span class="hljs-number">32</span> brd <span class="hljs-number">10.98</span>.<span class="hljs-number">230.124</span> scope <span class="hljs-keyword">global</span> kube-ipvs0<br>       valid_lft forever preferred_lft forever<br>    <span class="hljs-keyword">inet</span> <span class="hljs-number">10.103</span>.<span class="hljs-number">49.63</span>/<span class="hljs-number">32</span> brd <span class="hljs-number">10.103</span>.<span class="hljs-number">49.63</span> scope <span class="hljs-keyword">global</span> kube-ipvs0<br>       valid_lft forever preferred_lft forever<br></code></pre></td></tr></table></figure><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs tap">[root@k8s-m1 ~]<span class="hljs-comment"># ipvsadm -ln</span><br>IP Virtual Server version 1.2.1 (size=4096)<br>Prot LocalAddress:Port Scheduler Flags<br>  -&gt; RemoteAddress:Port           Forward Weight ActiveConn InActConn<br>TCP  172.17.0.1:30024 rr<br>  -&gt; 10.244.4.21:3000             Masq   <span class="hljs-number"> 1 </span>    <span class="hljs-number"> 0 </span>         0<br>TCP  192.168.0.200:30024 rr<br>  -&gt; 10.244.4.21:3000             Masq   <span class="hljs-number"> 1 </span>    <span class="hljs-number"> 0 </span>         0<br>TCP  192.168.0.200:30040 rr<br>  -&gt; 10.244.4.28:9090             Masq   <span class="hljs-number"> 1 </span>    <span class="hljs-number"> 0 </span>         0<br>TCP  10.96.0.1:443 rr<br>  -&gt; 192.168.0.200:6443           Masq   <span class="hljs-number"> 1 </span>    <span class="hljs-number"> 0 </span>         0<br>  -&gt; 192.168.0.201:6443           Masq   <span class="hljs-number"> 1 </span>    <span class="hljs-number"> 1 </span>         0<br>  -&gt; 192.168.0.202:6443           Masq   <span class="hljs-number"> 1 </span>    <span class="hljs-number"> 0 </span>         0<br></code></pre></td></tr></table></figure><blockquote><p>删除 Kubernetes Service将触发删除相应的 IPVS 虚拟服务器，IPVS 物理服务器及其绑定到虚拟接口的 IP 地址。</p></blockquote><h3 id="端口映射："><a href="#端口映射：" class="headerlink" title="端口映射："></a>端口映射：</h3><blockquote><p>IPVS 中有三种代理模式：NAT（masq），IPIP 和 DR。 只有 NAT 模式支持端口映射。 Kube-proxy 利用 NAT 模式进行端口映射。 以下示例显示 IPVS 服务端口8080到Pod端口80的映射。</p></blockquote><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs tap">TCP  10.107.7.203:8080 rr<br>  -&gt; 10.244.4.14:80               Masq   <span class="hljs-number"> 1 </span>    <span class="hljs-number"> 0 </span>         0<br>  -&gt; 10.244.4.15:80               Masq   <span class="hljs-number"> 1 </span>    <span class="hljs-number"> 0 </span>         0<br>  -&gt; 10.244.4.16:80               Masq   <span class="hljs-number"> 1 </span>    <span class="hljs-number"> 0 </span>         0<br>  -&gt; 10.244.4.20:80               Masq   <span class="hljs-number"> 1 </span>    <span class="hljs-number"> 0 </span>         0<br>  -&gt; 10.244.4.22:80               Masq   <span class="hljs-number"> 1 </span>    <span class="hljs-number"> 0 </span>         0<br>  -&gt; 10.244.4.23:80               Masq   <span class="hljs-number"> 1 </span>    <span class="hljs-number"> 0 </span>         0<br>  -&gt; 10.244.4.24:80               Masq   <span class="hljs-number"> 1 </span>    <span class="hljs-number"> 0 </span>         0<br></code></pre></td></tr></table></figure><h3 id="会话关系："><a href="#会话关系：" class="headerlink" title="会话关系："></a>会话关系：</h3><blockquote><p>IPVS 支持客户端 IP 会话关联（持久连接）。 当服务指定会话关系时，IPVS 代理将在 IPVS 虚拟服务器中设置超时值（默认为180分钟&#x3D; 10800秒）。 例如：</p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs yaml">[<span class="hljs-string">root@k8s-m1</span> <span class="hljs-string">~</span>]<span class="hljs-comment"># kubectl describe svc nginx-service</span><br><span class="hljs-attr">Name:</span>           <span class="hljs-string">nginx-service</span><br><span class="hljs-string">...</span><br><span class="hljs-attr">IP:</span>             <span class="hljs-number">10.102</span><span class="hljs-number">.128</span><span class="hljs-number">.4</span><br><span class="hljs-attr">Port:</span>           <span class="hljs-string">http</span>    <span class="hljs-number">3080</span><span class="hljs-string">/TCP</span><br><span class="hljs-attr">Session Affinity:</span>   <span class="hljs-string">ClientIP</span><br><br><br>[<span class="hljs-string">root@k8s-m1</span> <span class="hljs-string">~</span>]<span class="hljs-comment"># ipvsadm -ln</span><br><span class="hljs-string">IP</span> <span class="hljs-string">Virtual</span> <span class="hljs-string">Server</span> <span class="hljs-string">version</span> <span class="hljs-number">1.2</span><span class="hljs-number">.1</span> <span class="hljs-string">(size=4096)</span><br><span class="hljs-string">Prot</span> <span class="hljs-string">LocalAddress:Port</span> <span class="hljs-string">Scheduler</span> <span class="hljs-string">Flags</span><br>  <span class="hljs-string">-&gt;</span> <span class="hljs-string">RemoteAddress:Port</span>           <span class="hljs-string">Forward</span> <span class="hljs-string">Weight</span> <span class="hljs-string">ActiveConn</span> <span class="hljs-string">InActConn</span><br><span class="hljs-string">TCP</span>  <span class="hljs-number">10.102</span><span class="hljs-number">.128</span><span class="hljs-number">.4</span><span class="hljs-string">:3080</span> <span class="hljs-string">rr</span> <span class="hljs-string">persistent</span> <span class="hljs-number">10800</span><br></code></pre></td></tr></table></figure><blockquote><h3 id="ipvs-proxier-将在以下5种情况下依赖于-iptables："><a href="#ipvs-proxier-将在以下5种情况下依赖于-iptables：" class="headerlink" title="ipvs proxier 将在以下5种情况下依赖于 iptables："></a>ipvs proxier 将在以下5种情况下依赖于 iptables：</h3></blockquote><ul><li>kube-proxy 设置 <code>--masquerade-all = true </code></li><li>kube-proxy 设置 <code>--cluster-cidr=&lt;cidr&gt;</code></li><li>Load Balancer 类型的 Service</li><li>NodePort 类型的 Service</li><li>指定 externalIPs 的 Service</li></ul><h3 id="kube-proxy-配置参数-–masquerade-all-x3D-true"><a href="#kube-proxy-配置参数-–masquerade-all-x3D-true" class="headerlink" title="kube-proxy 配置参数 –masquerade-all&#x3D;true"></a>kube-proxy 配置参数 –masquerade-all&#x3D;true</h3><blockquote><p>如果 kube-proxy 配置了<code>--masquerade-all=true</code>参数，则 ipvs 将伪装所有访问 Service 的 Cluster IP 的流量，此时的行为和 iptables 是一致的，由 ipvs 添加的 iptables 规则如下：</p></blockquote><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs gradle"><br>[root@k8s-m1 ~]# iptables -t nat -nL<br><br>Chain PREROUTING (policy ACCEPT)<br>target     prot opt <span class="hljs-keyword">source</span>               destination<br>KUBE-SERVICES  all  --  <span class="hljs-number">0.0</span>.<span class="hljs-number">0.0</span><span class="hljs-regexp">/0            0.0.0.0/</span><span class="hljs-number">0</span>            <span class="hljs-comment">/* kubernetes service portals */</span><br><br>Chain OUTPUT (policy ACCEPT)<br>target     prot opt <span class="hljs-keyword">source</span>               destination<br>KUBE-SERVICES  all  --  <span class="hljs-number">0.0</span>.<span class="hljs-number">0.0</span><span class="hljs-regexp">/0            0.0.0.0/</span><span class="hljs-number">0</span>            <span class="hljs-comment">/* kubernetes service portals */</span><br><br>Chain POSTROUTING (policy ACCEPT)<br>target     prot opt <span class="hljs-keyword">source</span>               destination<br>KUBE-POSTROUTING  all  --  <span class="hljs-number">0.0</span>.<span class="hljs-number">0.0</span><span class="hljs-regexp">/0            0.0.0.0/</span><span class="hljs-number">0</span>            <span class="hljs-comment">/* kubernetes postrouting rules */</span><br><br>Chain KUBE-MARK-MASQ (<span class="hljs-number">2</span> references)<br>target     prot opt <span class="hljs-keyword">source</span>               destination<br>MARK       all  --  <span class="hljs-number">0.0</span>.<span class="hljs-number">0.0</span><span class="hljs-regexp">/0            0.0.0.0/</span><span class="hljs-number">0</span>            MARK or <span class="hljs-number">0</span>x4000<br><br>Chain KUBE-POSTROUTING (<span class="hljs-number">1</span> references)<br>target     prot opt <span class="hljs-keyword">source</span>               destination<br>MASQUERADE  all  --  <span class="hljs-number">0.0</span>.<span class="hljs-number">0.0</span><span class="hljs-regexp">/0            0.0.0.0/</span><span class="hljs-number">0</span>            <span class="hljs-comment">/* kubernetes service traffic requiring SNAT */</span> mark match <span class="hljs-number">0</span>x4000/<span class="hljs-number">0</span>x4000<br>MASQUERADE  all  --  <span class="hljs-number">0.0</span>.<span class="hljs-number">0.0</span><span class="hljs-regexp">/0            0.0.0.0/</span><span class="hljs-number">0</span>            match-set KUBE-LOOP-BACK dst,dst,src<br><br>Chain KUBE-SERVICES (<span class="hljs-number">2</span> references)<br>target     prot opt <span class="hljs-keyword">source</span>               destination<br>KUBE-MARK-MASQ  all  --  <span class="hljs-number">0.0</span>.<span class="hljs-number">0.0</span><span class="hljs-regexp">/0            0.0.0.0/</span><span class="hljs-number">0</span>            match-set KUBE-CLUSTER-IP dst,dst<br>ACCEPT     all  --  <span class="hljs-number">0.0</span>.<span class="hljs-number">0.0</span><span class="hljs-regexp">/0            0.0.0.0/</span><span class="hljs-number">0</span>            match-set KUBE-CLUSTER-IP dst,dst<br></code></pre></td></tr></table></figure><h3 id="在-kube-proxy-启动时指定集群-CIDR"><a href="#在-kube-proxy-启动时指定集群-CIDR" class="headerlink" title="在 kube-proxy 启动时指定集群 CIDR"></a>在 kube-proxy 启动时指定集群 CIDR</h3><blockquote><p>如果 kube-proxy 配置了–cluster-cidr&#x3D;<cidr>参数，则 ipvs 会伪装所有访问 Service Cluster IP 的外部流量，其行为和 iptables 相同，假设 kube-proxy 提供的集群 CIDR 值为：10.244.16.0&#x2F;24，那么 ipvs 添加的 iptables 规则应该如下所示：</p></blockquote><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs gradle">[root@k8s-m1 ~]# iptables -t nat -nL<br><br>Chain PREROUTING (policy ACCEPT)<br>target     prot opt <span class="hljs-keyword">source</span>               destination<br>KUBE-SERVICES  all  --  <span class="hljs-number">0.0</span>.<span class="hljs-number">0.0</span><span class="hljs-regexp">/0            0.0.0.0/</span><span class="hljs-number">0</span>            <span class="hljs-comment">/* kubernetes service portals */</span><br><br>Chain OUTPUT (policy ACCEPT)<br>target     prot opt <span class="hljs-keyword">source</span>               destination<br>KUBE-SERVICES  all  --  <span class="hljs-number">0.0</span>.<span class="hljs-number">0.0</span><span class="hljs-regexp">/0            0.0.0.0/</span><span class="hljs-number">0</span>            <span class="hljs-comment">/* kubernetes service portals */</span><br><br>Chain POSTROUTING (policy ACCEPT)<br>target     prot opt <span class="hljs-keyword">source</span>               destination<br>KUBE-POSTROUTING  all  --  <span class="hljs-number">0.0</span>.<span class="hljs-number">0.0</span><span class="hljs-regexp">/0            0.0.0.0/</span><span class="hljs-number">0</span>            <span class="hljs-comment">/* kubernetes postrouting rules */</span><br><br>Chain KUBE-MARK-MASQ (<span class="hljs-number">3</span> references)<br>target     prot opt <span class="hljs-keyword">source</span>               destination<br>MARK       all  --  <span class="hljs-number">0.0</span>.<span class="hljs-number">0.0</span><span class="hljs-regexp">/0            0.0.0.0/</span><span class="hljs-number">0</span>            MARK or <span class="hljs-number">0</span>x4000<br><br>Chain KUBE-POSTROUTING (<span class="hljs-number">1</span> references)<br>target     prot opt <span class="hljs-keyword">source</span>               destination<br>MASQUERADE  all  --  <span class="hljs-number">0.0</span>.<span class="hljs-number">0.0</span><span class="hljs-regexp">/0            0.0.0.0/</span><span class="hljs-number">0</span>            <span class="hljs-comment">/* kubernetes service traffic requiring SNAT */</span> mark match <span class="hljs-number">0</span>x4000/<span class="hljs-number">0</span>x4000<br>MASQUERADE  all  --  <span class="hljs-number">0.0</span>.<span class="hljs-number">0.0</span><span class="hljs-regexp">/0            0.0.0.0/</span><span class="hljs-number">0</span>            match-set KUBE-LOOP-BACK dst,dst,src<br><br>Chain KUBE-SERVICES (<span class="hljs-number">2</span> references)<br>target     prot opt <span class="hljs-keyword">source</span>               destination<br>KUBE-MARK-MASQ  all  -- !<span class="hljs-number">10.244</span>.<span class="hljs-number">16.0</span><span class="hljs-regexp">/24       0.0.0.0/</span><span class="hljs-number">0</span>            match-set KUBE-CLUSTER-IP dst,dst<br>ACCEPT     all  --  <span class="hljs-number">0.0</span>.<span class="hljs-number">0.0</span><span class="hljs-regexp">/0            0.0.0.0/</span><span class="hljs-number">0</span>            match-set KUBE-CLUSTER-IP dst,dst<br></code></pre></td></tr></table></figure><h3 id="Load-Balancer-类型的-Service"><a href="#Load-Balancer-类型的-Service" class="headerlink" title="Load Balancer 类型的 Service"></a>Load Balancer 类型的 Service</h3><blockquote><p>对于loadBalancer类型的服务，ipvs 将安装匹配 KUBE-LOAD-BALANCER 的 ipset 的 iptables 规则。特别当服务的 LoadBalancerSourceRanges 被指定或指定 externalTrafficPolicy&#x3D;local 的时候，ipvs 将创建 ipset 集合KUBE-LOAD-BALANCER-LOCAL&#x2F;KUBE-LOAD-BALANCER-FW&#x2F;KUBE-LOAD-BALANCER-SOURCE-CIDR，并添加相应的 iptables 规则，如下所示规则：</p></blockquote><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs apache"><br><span class="hljs-comment"># iptables -t nat -nL</span><br><br><span class="hljs-attribute">Chain</span> PREROUTING (policy ACCEPT)<br><span class="hljs-attribute">target</span>     prot opt source               destination<br><span class="hljs-attribute">KUBE</span>-SERVICES  <span class="hljs-literal">all</span>  --  <span class="hljs-number">0.0.0.0</span>/<span class="hljs-number">0</span>            <span class="hljs-number">0.0.0.0</span>/<span class="hljs-number">0</span>            /* kubernetes service portals */<br><br><span class="hljs-attribute">Chain</span> OUTPUT (policy ACCEPT)<br><span class="hljs-attribute">target</span>     prot opt source               destination<br><span class="hljs-attribute">KUBE</span>-SERVICES  <span class="hljs-literal">all</span>  --  <span class="hljs-number">0.0.0.0</span>/<span class="hljs-number">0</span>            <span class="hljs-number">0.0.0.0</span>/<span class="hljs-number">0</span>            /* kubernetes service portals */<br><br><span class="hljs-attribute">Chain</span> POSTROUTING (policy ACCEPT)<br><span class="hljs-attribute">target</span>     prot opt source               destination<br><span class="hljs-attribute">KUBE</span>-POSTROUTING  <span class="hljs-literal">all</span>  --  <span class="hljs-number">0.0.0.0</span>/<span class="hljs-number">0</span>            <span class="hljs-number">0.0.0.0</span>/<span class="hljs-number">0</span>            /* kubernetes postrouting rules */<br><br><span class="hljs-attribute">Chain</span> KUBE-FIREWALL (<span class="hljs-number">1</span> references)<br><span class="hljs-attribute">target</span>     prot opt source               destination<br><span class="hljs-attribute">RETURN</span>     <span class="hljs-literal">all</span>  --  <span class="hljs-number">0.0.0.0</span>/<span class="hljs-number">0</span>            <span class="hljs-number">0.0.0.0</span>/<span class="hljs-number">0</span>            match-set KUBE-LOAD-BALANCER-SOURCE-CIDR dst,dst,src<br><span class="hljs-attribute">KUBE</span>-MARK-DROP  <span class="hljs-literal">all</span>  --  <span class="hljs-number">0.0.0.0</span>/<span class="hljs-number">0</span>            <span class="hljs-number">0.0.0.0</span>/<span class="hljs-number">0</span><br><br><span class="hljs-attribute">Chain</span> KUBE-LOAD-BALANCER (<span class="hljs-number">1</span> references)<br><span class="hljs-attribute">target</span>     prot opt source               destination<br><span class="hljs-attribute">KUBE</span>-FIREWALL  <span class="hljs-literal">all</span>  --  <span class="hljs-number">0.0.0.0</span>/<span class="hljs-number">0</span>            <span class="hljs-number">0.0.0.0</span>/<span class="hljs-number">0</span>            match-set KUBE-LOAD-BALANCER-FW dst,dst<br><span class="hljs-attribute">RETURN</span>     <span class="hljs-literal">all</span>  --  <span class="hljs-number">0.0.0.0</span>/<span class="hljs-number">0</span>            <span class="hljs-number">0.0.0.0</span>/<span class="hljs-number">0</span>            match-set KUBE-LOAD-BALANCER-LOCAL dst,dst<br><span class="hljs-attribute">KUBE</span>-MARK-MASQ  <span class="hljs-literal">all</span>  --  <span class="hljs-number">0.0.0.0</span>/<span class="hljs-number">0</span>            <span class="hljs-number">0.0.0.0</span>/<span class="hljs-number">0</span><br><br><span class="hljs-attribute">Chain</span> KUBE-MARK-DROP (<span class="hljs-number">1</span> references)<br><span class="hljs-attribute">target</span>     prot opt source               destination<br><span class="hljs-attribute">MARK</span>       <span class="hljs-literal">all</span>  --  <span class="hljs-number">0.0.0.0</span>/<span class="hljs-number">0</span>            <span class="hljs-number">0.0.0.0</span>/<span class="hljs-number">0</span>            MARK or <span class="hljs-number">0</span>x8000<br><br><span class="hljs-attribute">Chain</span> KUBE-MARK-MASQ (<span class="hljs-number">2</span> references)<br><span class="hljs-attribute">target</span>     prot opt source               destination<br><span class="hljs-attribute">MARK</span>       <span class="hljs-literal">all</span>  --  <span class="hljs-number">0.0.0.0</span>/<span class="hljs-number">0</span>            <span class="hljs-number">0.0.0.0</span>/<span class="hljs-number">0</span>            MARK or <span class="hljs-number">0</span>x4000<br><br><span class="hljs-attribute">Chain</span> KUBE-POSTROUTING (<span class="hljs-number">1</span> references)<br><span class="hljs-attribute">target</span>     prot opt source               destination<br><span class="hljs-attribute">MASQUERADE</span>  <span class="hljs-literal">all</span>  --  <span class="hljs-number">0.0.0.0</span>/<span class="hljs-number">0</span>            <span class="hljs-number">0.0.0.0</span>/<span class="hljs-number">0</span>            /* kubernetes service traffic requiring SNAT */ mark match <span class="hljs-number">0</span>x4000/<span class="hljs-number">0</span>x4000<br><span class="hljs-attribute">MASQUERADE</span>  <span class="hljs-literal">all</span>  --  <span class="hljs-number">0.0.0.0</span>/<span class="hljs-number">0</span>            <span class="hljs-number">0.0.0.0</span>/<span class="hljs-number">0</span>            match-set KUBE-LOOP-BACK dst,dst,src<br><br><span class="hljs-attribute">Chain</span> KUBE-SERVICES (<span class="hljs-number">2</span> references)<br><span class="hljs-attribute">target</span>     prot opt source               destination<br><span class="hljs-attribute">KUBE</span>-LOAD-BALANCER  <span class="hljs-literal">all</span>  --  <span class="hljs-number">0.0.0.0</span>/<span class="hljs-number">0</span>            <span class="hljs-number">0.0.0.0</span>/<span class="hljs-number">0</span>            match-set KUBE-LOAD-BALANCER dst,dst<br><span class="hljs-attribute">ACCEPT</span>     <span class="hljs-literal">all</span>  --  <span class="hljs-number">0.0.0.0</span>/<span class="hljs-number">0</span>            <span class="hljs-number">0.0.0.0</span>/<span class="hljs-number">0</span>            match-set KUBE-LOAD-BALANCER dst,dst<br></code></pre></td></tr></table></figure><h3 id="NodePort-类型的-Service"><a href="#NodePort-类型的-Service" class="headerlink" title="NodePort 类型的 Service"></a>NodePort 类型的 Service</h3><blockquote><p>对于 NodePort 类型的服务，ipvs 将添加匹配KUBE-NODE-PORT-TCP&#x2F;KUBE-NODE-PORT-UDP的 ipset 的iptables 规则。当指定externalTrafficPolicy&#x3D;local时，ipvs 将创建 ipset 集KUBE-NODE-PORT-LOCAL-TC&#x2F;KUBE-NODE-PORT-LOCAL-UDP并安装相应的 iptables 规则，如下所示：(假设服务使用 TCP 类型 nodePort)</p></blockquote><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-comment"># iptables -t nat -nL</span><br><br><span class="hljs-attribute">Chain</span> PREROUTING (policy ACCEPT)<br><span class="hljs-attribute">target</span>     prot opt source               destination<br><span class="hljs-attribute">KUBE</span>-SERVICES  <span class="hljs-literal">all</span>  --  <span class="hljs-number">0.0.0.0</span>/<span class="hljs-number">0</span>            <span class="hljs-number">0.0.0.0</span>/<span class="hljs-number">0</span>            /* kubernetes service portals */<br><br><span class="hljs-attribute">Chain</span> OUTPUT (policy ACCEPT)<br><span class="hljs-attribute">target</span>     prot opt source               destination<br><span class="hljs-attribute">KUBE</span>-SERVICES  <span class="hljs-literal">all</span>  --  <span class="hljs-number">0.0.0.0</span>/<span class="hljs-number">0</span>            <span class="hljs-number">0.0.0.0</span>/<span class="hljs-number">0</span>            /* kubernetes service portals */<br><br><span class="hljs-attribute">Chain</span> POSTROUTING (policy ACCEPT)<br><span class="hljs-attribute">target</span>     prot opt source               destination<br><span class="hljs-attribute">KUBE</span>-POSTROUTING  <span class="hljs-literal">all</span>  --  <span class="hljs-number">0.0.0.0</span>/<span class="hljs-number">0</span>            <span class="hljs-number">0.0.0.0</span>/<span class="hljs-number">0</span>            /* kubernetes postrouting rules */<br><br><span class="hljs-attribute">Chain</span> KUBE-MARK-MASQ (<span class="hljs-number">2</span> references)<br><span class="hljs-attribute">target</span>     prot opt source               destination<br><span class="hljs-attribute">MARK</span>       <span class="hljs-literal">all</span>  --  <span class="hljs-number">0.0.0.0</span>/<span class="hljs-number">0</span>            <span class="hljs-number">0.0.0.0</span>/<span class="hljs-number">0</span>            MARK or <span class="hljs-number">0</span>x4000<br><br><span class="hljs-attribute">Chain</span> KUBE-NODE-PORT (<span class="hljs-number">1</span> references)<br><span class="hljs-attribute">target</span>     prot opt source               destination<br><span class="hljs-attribute">RETURN</span>     <span class="hljs-literal">all</span>  --  <span class="hljs-number">0.0.0.0</span>/<span class="hljs-number">0</span>            <span class="hljs-number">0.0.0.0</span>/<span class="hljs-number">0</span>            match-set KUBE-NODE-PORT-LOCAL-TCP dst<br><span class="hljs-attribute">KUBE</span>-MARK-MASQ  <span class="hljs-literal">all</span>  --  <span class="hljs-number">0.0.0.0</span>/<span class="hljs-number">0</span>            <span class="hljs-number">0.0.0.0</span>/<span class="hljs-number">0</span><br><br><span class="hljs-attribute">Chain</span> KUBE-POSTROUTING (<span class="hljs-number">1</span> references)<br><span class="hljs-attribute">target</span>     prot opt source               destination<br><span class="hljs-attribute">MASQUERADE</span>  <span class="hljs-literal">all</span>  --  <span class="hljs-number">0.0.0.0</span>/<span class="hljs-number">0</span>            <span class="hljs-number">0.0.0.0</span>/<span class="hljs-number">0</span>            /* kubernetes service traffic requiring SNAT */ mark match <span class="hljs-number">0</span>x4000/<span class="hljs-number">0</span>x4000<br><span class="hljs-attribute">MASQUERADE</span>  <span class="hljs-literal">all</span>  --  <span class="hljs-number">0.0.0.0</span>/<span class="hljs-number">0</span>            <span class="hljs-number">0.0.0.0</span>/<span class="hljs-number">0</span>            match-set KUBE-LOOP-BACK dst,dst,src<br><br><span class="hljs-attribute">Chain</span> KUBE-SERVICES (<span class="hljs-number">2</span> references)<br><span class="hljs-attribute">target</span>     prot opt source               destination<br><span class="hljs-attribute">KUBE</span>-NODE-PORT  <span class="hljs-literal">all</span>  --  <span class="hljs-number">0.0.0.0</span>/<span class="hljs-number">0</span>            <span class="hljs-number">0.0.0.0</span>/<span class="hljs-number">0</span>            match-set KUBE-NODE-PORT-TCP dst<br></code></pre></td></tr></table></figure><h3 id="指定-externalIPs-的-Service"><a href="#指定-externalIPs-的-Service" class="headerlink" title="指定 externalIPs 的 Service"></a>指定 externalIPs 的 Service</h3><blockquote><p>对于指定了externalIPs的 Service，ipvs 会安装匹配KUBE-EXTERNAL-IP ipset 集的 iptables 规则，假设我们有指定了 externalIPs 的 Service，则 iptables 规则应该如下所示：</p></blockquote><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-comment"># iptables -t nat -nL</span><br><br><span class="hljs-attribute">Chain</span> PREROUTING (policy ACCEPT)<br><span class="hljs-attribute">target</span>     prot opt source               destination<br><span class="hljs-attribute">KUBE</span>-SERVICES  <span class="hljs-literal">all</span>  --  <span class="hljs-number">0.0.0.0</span>/<span class="hljs-number">0</span>            <span class="hljs-number">0.0.0.0</span>/<span class="hljs-number">0</span>            /* kubernetes service portals */<br><br><span class="hljs-attribute">Chain</span> OUTPUT (policy ACCEPT)<br><span class="hljs-attribute">target</span>     prot opt source               destination<br><span class="hljs-attribute">KUBE</span>-SERVICES  <span class="hljs-literal">all</span>  --  <span class="hljs-number">0.0.0.0</span>/<span class="hljs-number">0</span>            <span class="hljs-number">0.0.0.0</span>/<span class="hljs-number">0</span>            /* kubernetes service portals */<br><br><span class="hljs-attribute">Chain</span> POSTROUTING (policy ACCEPT)<br><span class="hljs-attribute">target</span>     prot opt source               destination<br><span class="hljs-attribute">KUBE</span>-POSTROUTING  <span class="hljs-literal">all</span>  --  <span class="hljs-number">0.0.0.0</span>/<span class="hljs-number">0</span>            <span class="hljs-number">0.0.0.0</span>/<span class="hljs-number">0</span>            /* kubernetes postrouting rules */<br><br><span class="hljs-attribute">Chain</span> KUBE-MARK-MASQ (<span class="hljs-number">2</span> references)<br><span class="hljs-attribute">target</span>     prot opt source               destination<br><span class="hljs-attribute">MARK</span>       <span class="hljs-literal">all</span>  --  <span class="hljs-number">0.0.0.0</span>/<span class="hljs-number">0</span>            <span class="hljs-number">0.0.0.0</span>/<span class="hljs-number">0</span>            MARK or <span class="hljs-number">0</span>x4000<br><br><span class="hljs-attribute">Chain</span> KUBE-POSTROUTING (<span class="hljs-number">1</span> references)<br><span class="hljs-attribute">target</span>     prot opt source               destination<br><span class="hljs-attribute">MASQUERADE</span>  <span class="hljs-literal">all</span>  --  <span class="hljs-number">0.0.0.0</span>/<span class="hljs-number">0</span>            <span class="hljs-number">0.0.0.0</span>/<span class="hljs-number">0</span>            /* kubernetes service traffic requiring SNAT */ mark match <span class="hljs-number">0</span>x4000/<span class="hljs-number">0</span>x4000<br><span class="hljs-attribute">MASQUERADE</span>  <span class="hljs-literal">all</span>  --  <span class="hljs-number">0.0.0.0</span>/<span class="hljs-number">0</span>            <span class="hljs-number">0.0.0.0</span>/<span class="hljs-number">0</span>            match-set KUBE-LOOP-BACK dst,dst,src<br><br><span class="hljs-attribute">Chain</span> KUBE-SERVICES (<span class="hljs-number">2</span> references)<br><span class="hljs-attribute">target</span>     prot opt source               destination<br><span class="hljs-attribute">KUBE</span>-MARK-MASQ  <span class="hljs-literal">all</span>  --  <span class="hljs-number">0.0.0.0</span>/<span class="hljs-number">0</span>            <span class="hljs-number">0.0.0.0</span>/<span class="hljs-number">0</span>            match-set KUBE-EXTERNAL-IP dst,dst<br><span class="hljs-attribute">ACCEPT</span>     <span class="hljs-literal">all</span>  --  <span class="hljs-number">0.0.0.0</span>/<span class="hljs-number">0</span>            <span class="hljs-number">0.0.0.0</span>/<span class="hljs-number">0</span>            match-set KUBE-EXTERNAL-IP dst,dst PHYSDEV match ! --physdev-is-in ADDRTYPE match src-type !LOCAL<br><span class="hljs-attribute">ACCEPT</span>     <span class="hljs-literal">all</span>  --  <span class="hljs-number">0.0.0.0</span>/<span class="hljs-number">0</span>            <span class="hljs-number">0.0.0.0</span>/<span class="hljs-number">0</span>            match-set KUBE-EXTERNAL-IP dst,dst ADDRTYPE match dst-type LOCAL<br></code></pre></td></tr></table></figure><h3 id="IPVS-模式"><a href="#IPVS-模式" class="headerlink" title="IPVS 模式"></a>IPVS 模式</h3><h4 id="入流量"><a href="#入流量" class="headerlink" title="入流量"></a>入流量</h4><blockquote><p>入流量是指由集群外部访问 service 的流量。<br>Iptables 入流量的 chain 路径是 PREROUTING@nat -&gt; INPUT@nat。</p></blockquote><h4 id="ClusterIP"><a href="#ClusterIP" class="headerlink" title="ClusterIP"></a>ClusterIP</h4><blockquote><p>Iptables 入流量的 chain 路径是 PREROUTING@nat -&gt; INPUT@nat。<br>在 PREROUTING 阶段，流量跳转到 KUBE-SERVICES target chain:</p></blockquote><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs ada">[root@k8s-n-<span class="hljs-number">1920168091021</span> overlord]# iptables -L -n -t nat<br>Chain PREROUTING (policy <span class="hljs-keyword">ACCEPT</span>)<br>target     prot opt source               destination         <br>KUBE-SERVICES  <span class="hljs-keyword">all</span>  <span class="hljs-comment">--  0.0.0.0/0            0.0.0.0/0            /* kubernetes service portals */</span><br>DOCKER     <span class="hljs-keyword">all</span>  <span class="hljs-comment">--  0.0.0.0/0            0.0.0.0/0            ADDRTYPE match dst-type LOCAL</span><br></code></pre></td></tr></table></figure><h4 id="KUBE-SERVICES-chain-如下："><a href="#KUBE-SERVICES-chain-如下：" class="headerlink" title="KUBE-SERVICES chain 如下："></a>KUBE-SERVICES chain 如下：</h4><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">Chain</span> KUBE-SERVICES (<span class="hljs-number">2</span> references)<br><span class="hljs-attribute">target</span>     prot opt source               destination         <br><span class="hljs-attribute">KUBE</span>-MARK-MASQ  <span class="hljs-literal">all</span>  -- !<span class="hljs-number">10.244.0.0</span>/<span class="hljs-number">16</span>        <span class="hljs-number">0.0.0.0</span>/<span class="hljs-number">0</span>            /* Kubernetes service cluster ip + port for masquerade purpose */ match-set KUBE-CLUSTER-IP dst,dst<br><span class="hljs-attribute">KUBE</span>-NODE-PORT  <span class="hljs-literal">all</span>  --  <span class="hljs-number">0.0.0.0</span>/<span class="hljs-number">0</span>            <span class="hljs-number">0.0.0.0</span>/<span class="hljs-number">0</span>            ADDRTYPE match dst-type LOCAL<br><span class="hljs-attribute">ACCEPT</span>     <span class="hljs-literal">all</span>  --  <span class="hljs-number">0.0.0.0</span>/<span class="hljs-number">0</span>            <span class="hljs-number">0.0.0.0</span>/<span class="hljs-number">0</span>            match-set KUBE-CLUSTER-IP dst,dst<br></code></pre></td></tr></table></figure><blockquote><p>ClusterIP service 的访问流量会交由 KUBE-MARK-MASQ处理，其匹配规则是匹配内核中名为 KUBE-CLUSTER-IP 的 ipset（将源地址不是10.244.0.0&#x2F;16的IP交由KUBE-MARK-MASQ）。</p></blockquote><h4 id="下一步就是为这些包打上标记："><a href="#下一步就是为这些包打上标记：" class="headerlink" title="下一步就是为这些包打上标记："></a>下一步就是为这些包打上标记：</h4><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">Chain</span> KUBE-MARK-MASQ (<span class="hljs-number">3</span> references)<br><span class="hljs-attribute">target</span>     prot opt source               destination         <br><span class="hljs-attribute">MARK</span>       <span class="hljs-literal">all</span>  --  <span class="hljs-number">0.0.0.0</span>/<span class="hljs-number">0</span>            <span class="hljs-number">0.0.0.0</span>/<span class="hljs-number">0</span>            MARK or <span class="hljs-number">0</span>x4000<br></code></pre></td></tr></table></figure><blockquote><p>此时封包在 iptables 的路径已经走完，并没有后续的 DNAT 到后端 endpoint 的流程，这一步的工作交由 IPVS 来完成。（这步是仅仅给ipset list中的KUBE-CLUSTER-IP 添加了一个标签0x4000，有此标记的数据包会在KUBE-POSTROUTING chain中统一做MASQUERADE）</p></blockquote><h4 id="检查-ipvs-代理规则"><a href="#检查-ipvs-代理规则" class="headerlink" title="检查 ipvs 代理规则"></a>检查 ipvs 代理规则</h4><blockquote><p>用户可以使用ipvsadm工具检查 kube-proxy 是否维护正确的 ipvs 规则，比如，我们在集群中有以下一些服务：</p></blockquote><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"># kubectl <span class="hljs-keyword">get</span> svc <span class="hljs-comment">--all-namespaces</span><br>NAMESPACE     <span class="hljs-type">NAME</span>         <span class="hljs-keyword">TYPE</span>        <span class="hljs-keyword">CLUSTER</span>-IP   <span class="hljs-keyword">EXTERNAL</span>-IP   PORT(S)         AGE<br><span class="hljs-keyword">default</span>       kubernetes   ClusterIP   <span class="hljs-number">10.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>     &lt;<span class="hljs-keyword">none</span>&gt;        <span class="hljs-number">443</span>/TCP         <span class="hljs-number">1</span>d<br>kube-<span class="hljs-keyword">system</span>   kube-dns     ClusterIP   <span class="hljs-number">10.0</span><span class="hljs-number">.0</span><span class="hljs-number">.10</span>    &lt;<span class="hljs-keyword">none</span>&gt;        <span class="hljs-number">53</span>/UDP,<span class="hljs-number">53</span>/TCP   <span class="hljs-number">1</span>d<br></code></pre></td></tr></table></figure><h4 id="我们可以得到如下的一些-ipvs-代理规则："><a href="#我们可以得到如下的一些-ipvs-代理规则：" class="headerlink" title="我们可以得到如下的一些 ipvs 代理规则："></a>我们可以得到如下的一些 ipvs 代理规则：</h4><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs nginx"> <span class="hljs-comment"># ipvsadm -ln</span><br><span class="hljs-attribute">IP</span> Virtual Server version <span class="hljs-number">1</span>.<span class="hljs-number">2</span>.<span class="hljs-number">1</span> (size=<span class="hljs-number">4096</span>)<br>Prot LocalAddress:Port Scheduler Flags<br>  -&gt; RemoteAddress:Port           Forward Weight ActiveConn InActConn<br>TCP  <span class="hljs-number">10.0.0.1:443</span> rr persistent <span class="hljs-number">10800</span><br>  -&gt; <span class="hljs-number">192.168.0.1:6443</span>             Masq    <span class="hljs-number">1</span>      <span class="hljs-number">1</span>          <span class="hljs-number">0</span><br>TCP  <span class="hljs-number">10.0.0.10:53</span> rr<br>  -&gt; <span class="hljs-number">172.17.0.2:53</span>                Masq    <span class="hljs-number">1</span>      <span class="hljs-number">0</span>          <span class="hljs-number">0</span><br>UDP  <span class="hljs-number">10.0.0.10:53</span> rr<br>  -&gt; <span class="hljs-number">172.17.0.2:53</span>                Masq    <span class="hljs-number">1</span>      <span class="hljs-number">0</span>          <span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><h3 id="出流量"><a href="#出流量" class="headerlink" title="出流量"></a>出流量</h3><blockquote><p>出流量是指由集群内的 pod 访问 service 的流量。<br>Iptables 出流量的 chain 路径是 OUTPUT@nat -&gt; POSTROUTING@nat。<br>OUTPUT chain 如下，与入流量情形一样，也是所有流量跳转到 KUBE-SERVICES chain：</p></blockquote><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs ada">[root@k8s-n-<span class="hljs-number">1920168091021</span> overlord]# iptables -L -n -t nat<br>Chain OUTPUT (policy <span class="hljs-keyword">ACCEPT</span>)<br>target     prot opt source               destination         <br>KUBE-SERVICES  <span class="hljs-keyword">all</span>  <span class="hljs-comment">--  0.0.0.0/0            0.0.0.0/0            /* kubernetes service portals */</span><br>DOCKER     <span class="hljs-keyword">all</span>  <span class="hljs-comment">--  0.0.0.0/0           !127.0.0.0/8          ADDRTYPE match dst-type LOCAL</span><br></code></pre></td></tr></table></figure><blockquote><p>而后的动作与入流量一致，不论 ClusterIP service 还是 NodePort service，都是为封包打上 0x4000 的标记。区别是至此入流量的 iptables 流程走完，而出流量还需要经过 nat 表的 POSTROUTING chain，其定义如下：</p></blockquote><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs gradle">[root@k8s-n-<span class="hljs-number">1920168091021</span> overlord]# iptables -L -n -t nat<br>Chain POSTROUTING (policy ACCEPT)<br>target     prot opt <span class="hljs-keyword">source</span>               destination         <br>KUBE-POSTROUTING  all  --  <span class="hljs-number">0.0</span>.<span class="hljs-number">0.0</span><span class="hljs-regexp">/0            0.0.0.0/</span><span class="hljs-number">0</span>            <span class="hljs-comment">/* kubernetes postrouting rules */</span><br>MASQUERADE  all  --  <span class="hljs-number">172.17</span>.<span class="hljs-number">0.0</span><span class="hljs-regexp">/16        0.0.0.0/</span><span class="hljs-number">0</span>           <br>MASQUERADE  all  --  <span class="hljs-number">233.233</span>.<span class="hljs-number">5.0</span><span class="hljs-regexp">/24       0.0.0.0/</span><span class="hljs-number">0</span>           <br><span class="hljs-keyword">RETURN</span>     all  --  <span class="hljs-number">10.244</span>.<span class="hljs-number">0.0</span><span class="hljs-regexp">/16        10.244.0.0/</span><span class="hljs-number">16</span>       <br>MASQUERADE  all  --  <span class="hljs-number">10.244</span>.<span class="hljs-number">0.0</span><span class="hljs-regexp">/16       !224.0.0.0/</span><span class="hljs-number">4</span>         <br><span class="hljs-keyword">RETURN</span>     all  -- !<span class="hljs-number">10.244</span>.<span class="hljs-number">0.0</span><span class="hljs-regexp">/16        10.244.16.0/</span><span class="hljs-number">24</span>      <br>MASQUERADE  all  -- !<span class="hljs-number">10.244</span>.<span class="hljs-number">0.0</span><span class="hljs-regexp">/16        10.244.0.0/</span><span class="hljs-number">16</span>       <br></code></pre></td></tr></table></figure><blockquote><p>进一步跳转到 KUBE-POSTROUTING chain：Chain KUBE-POSTROUTING (1 references)</p></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-attr">[root@k8s-n-1920168091021 overlord]</span># iptables -L -n -t nat<br>Chain KUBE-POSTROUTING (<span class="hljs-number">1</span> references)<br>target     prot opt source               destination         <br>MASQUERADE  <span class="hljs-attribute">all</span>  --  <span class="hljs-number">0.0</span>.<span class="hljs-number">0.0</span>/<span class="hljs-number">0</span>            <span class="hljs-number">0.0</span>.<span class="hljs-number">0.0</span>/<span class="hljs-number">0</span>            <span class="hljs-comment">/* kubernetes service traffic requiring SNAT */</span> <span class="hljs-selector-tag">mark</span> match <span class="hljs-number">0</span>x4000/<span class="hljs-number">0</span>x4000<br>MASQUERADE  <span class="hljs-attribute">all</span>  --  <span class="hljs-number">0.0</span>.<span class="hljs-number">0.0</span>/<span class="hljs-number">0</span>            <span class="hljs-number">0.0</span>.<span class="hljs-number">0.0</span>/<span class="hljs-number">0</span>            <span class="hljs-comment">/* Kubernetes endpoints dst ip:port, source ip for solving hairpin purpose */</span> match-set KUBE-LOOP-BACK dst,dst,<span class="hljs-attribute">src</span><br></code></pre></td></tr></table></figure><blockquote><p>在这里，会为之前打上 0x4000 标记的出流量封包执行 MASQUERADE target，即类似于 SNAT 的一种操作，将其来源 IP 变更为 ClusterIP 或 Node ip。</p></blockquote><h3 id="被打了标记的流量处理方式"><a href="#被打了标记的流量处理方式" class="headerlink" title="被打了标记的流量处理方式"></a>被打了标记的流量处理方式</h3><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs gradle">[root@k8s-n-<span class="hljs-number">1920168091021</span> overlord]# iptables -L -n<br>       <br>Chain KUBE-FIREWALL (<span class="hljs-number">2</span> references)<br>target     prot opt <span class="hljs-keyword">source</span>               destination         <br>DROP       all  --  <span class="hljs-number">0.0</span>.<span class="hljs-number">0.0</span><span class="hljs-regexp">/0            0.0.0.0/</span><span class="hljs-number">0</span>            <span class="hljs-comment">/* kubernetes firewall for dropping marked packets */</span> mark match <span class="hljs-number">0</span>x8000/<span class="hljs-number">0</span>x8000<br><br>Chain KUBE-FORWARD (<span class="hljs-number">1</span> references)<br>target     prot opt <span class="hljs-keyword">source</span>               destination         <br>ACCEPT     all  --  <span class="hljs-number">0.0</span>.<span class="hljs-number">0.0</span><span class="hljs-regexp">/0            0.0.0.0/</span><span class="hljs-number">0</span>            <span class="hljs-comment">/* kubernetes forwarding rules */</span> mark match <span class="hljs-number">0</span>x4000/<span class="hljs-number">0</span>x4000<br>ACCEPT     all  --  <span class="hljs-number">10.244</span>.<span class="hljs-number">0.0</span><span class="hljs-regexp">/16        0.0.0.0/</span><span class="hljs-number">0</span>            <span class="hljs-comment">/* kubernetes forwarding conntrack pod source rule */</span> ctstate RELATED,ESTABLISHED<br>ACCEPT     all  --  <span class="hljs-number">0.0</span>.<span class="hljs-number">0.0</span><span class="hljs-regexp">/0            10.244.0.0/</span><span class="hljs-number">16</span>        <span class="hljs-comment">/* kubernetes forwarding conntrack pod destination rule */</span> ctstate RELATED,ESTABLISHED<br></code></pre></td></tr></table></figure><h3 id="ipset命令使用（iptables-中-match-set-匹配的就是就这里的地址-）"><a href="#ipset命令使用（iptables-中-match-set-匹配的就是就这里的地址-）" class="headerlink" title="ipset命令使用（iptables 中 match-set 匹配的就是就这里的地址 ）"></a>ipset命令使用（iptables 中 match-set 匹配的就是就这里的地址 ）</h3><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs accesslog"><span class="hljs-string">[root@k8s-n-1920168091021 overlord]</span># ipset list<br>Name: KUBE-CLUSTER-IP<br>Type: hash:ip,port<br>Revision: <span class="hljs-number">2</span><br>Header: family inet hashsize <span class="hljs-number">1024</span> maxelem <span class="hljs-number">65536</span><br>Size in memory: <span class="hljs-number">17584</span><br>References: <span class="hljs-number">2</span><br>Members:<br><span class="hljs-number">10.105.97.136</span>,tcp:<span class="hljs-number">80</span><br><span class="hljs-number">10.105.235.100</span>,tcp:<span class="hljs-number">8452</span><br><span class="hljs-number">10.98.53.160</span>,tcp:<span class="hljs-number">80</span><br><span class="hljs-number">10.97.204.141</span>,tcp:<span class="hljs-number">80</span><br><span class="hljs-number">10.108.115.91</span>,tcp:<span class="hljs-number">80</span><br><span class="hljs-number">10.98.118.117</span>,tcp:<span class="hljs-number">80</span><br><span class="hljs-number">10.96.0.1</span>,tcp:<span class="hljs-number">443</span><br><span class="hljs-number">10.101.26.124</span>,tcp:<span class="hljs-number">443</span><br><span class="hljs-number">10.98.88.140</span>,tcp:<span class="hljs-number">8080</span><br><span class="hljs-number">10.108.210.26</span>,tcp:<span class="hljs-number">3306</span><br><span class="hljs-number">10.96.0.10</span>,tcp:<span class="hljs-number">9153</span><br><span class="hljs-number">10.96.164.37</span>,tcp:<span class="hljs-number">443</span><br><span class="hljs-number">10.109.162.103</span>,tcp:<span class="hljs-number">80</span><br><span class="hljs-number">10.110.237.2</span>,tcp:<span class="hljs-number">80</span><br><span class="hljs-number">10.101.206.6</span>,tcp:<span class="hljs-number">7030</span><br><span class="hljs-number">10.111.154.57</span>,tcp:<span class="hljs-number">8451</span><br><span class="hljs-number">10.110.94.131</span>,tcp:<span class="hljs-number">1111</span><br><span class="hljs-number">10.98.146.210</span>,tcp:<span class="hljs-number">7020</span><br><span class="hljs-number">10.103.144.159</span>,tcp:<span class="hljs-number">44134</span><br><span class="hljs-number">10.96.0.10</span>,tcp:<span class="hljs-number">53</span><br><span class="hljs-number">10.98.88.140</span>,tcp:<span class="hljs-number">8081</span><br><span class="hljs-number">10.100.77.215</span>,tcp:<span class="hljs-number">80</span><br><span class="hljs-number">10.111.2.26</span>,tcp:<span class="hljs-number">80</span><br><span class="hljs-number">10.104.58.177</span>,tcp:<span class="hljs-number">2181</span><br><span class="hljs-number">10.97.58.7</span>,tcp:<span class="hljs-number">80</span><br><span class="hljs-number">10.111.11.67</span>,tcp:<span class="hljs-number">8080</span><br><span class="hljs-number">10.109.196.230</span>,tcp:<span class="hljs-number">9090</span><br><span class="hljs-number">10.98.39.12</span>,tcp:<span class="hljs-number">5672</span><br><span class="hljs-number">10.98.254.44</span>,tcp:<span class="hljs-number">6379</span><br><span class="hljs-number">10.96.0.10</span>,udp:<span class="hljs-number">53</span><br><span class="hljs-number">10.100.189.66</span>,tcp:<span class="hljs-number">80</span><br><span class="hljs-number">10.96.160.63</span>,tcp:<span class="hljs-number">7010</span><br><span class="hljs-number">10.97.217.217</span>,tcp:<span class="hljs-number">3306</span><br></code></pre></td></tr></table></figure><blockquote><p>官方文档：<a href="https://github.com/kubernetes/kubernetes/blob/master/pkg/proxy/ipvs/README.md">https://github.com/kubernetes/kubernetes/blob/master/pkg/proxy/ipvs/README.md</a></p></blockquote><h3 id="网友们遇到的坑："><a href="#网友们遇到的坑：" class="headerlink" title="网友们遇到的坑："></a>网友们遇到的坑：</h3><blockquote><p>使用ab测试性能进行测试。结果ab跑了没几个请求，K8S的机器就报错了。<br>kernel: nf_conntrack: table full, dropping packet</p></blockquote><blockquote><p>这也算经典的错误了，查了下nf_conntrack_max只有131072，肯定是不够的，CentOS7.3默认应该是65536*4&#x3D;262144。肯定是有地方改动这个值了，查了一圈没找到，最后看了下Kube-proxy的日志，结果还真是它改的！</p></blockquote><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs routeros">[root@k8s-m-1 ~]# kubectl logs kube-proxy-q2s4h -n kube-system<br>W0110 09:32:36.679540      1 server_others.go:263] Flag <span class="hljs-attribute">proxy-mode</span>=<span class="hljs-string">&quot;&quot;</span> unknown, assuming iptables<span class="hljs-built_in"> proxy</span><br><span class="hljs-built_in"></span>I0110 09:32:36.681946      1 server_others.go:117] Using iptables Proxier.<br>I0110 09:32:36.699112      1 server_others.go:152] Tearing down inactive rules.<br>I0110 09:32:36.860064      1 conntrack.go:98] <span class="hljs-built_in">Set</span> sysctl <span class="hljs-string">&#x27;net/netfilter/nf_conntrack_max&#x27;</span> <span class="hljs-keyword">to</span> 131072<br>I0110 09:32:36.860138      1 conntrack.go:52] Setting nf_conntrack_max <span class="hljs-keyword">to</span> 131072<br>I0110 09:32:36.860192      1 conntrack.go:98] <span class="hljs-built_in">Set</span> sysctl <span class="hljs-string">&#x27;net/netfilter/nf_conntrack_tcp_timeout_established&#x27;</span> <span class="hljs-keyword">to</span> 86400<br>I0110 09:32:36.860230      1 conntrack.go:98] <span class="hljs-built_in">Set</span> sysctl <span class="hljs-string">&#x27;net/netfilter/nf_conntrack_tcp_timeout_close_wait&#x27;</span> <span class="hljs-keyword">to</span> 3600<br>I0110 09:32:36.860480      1 config.go:102] Starting endpoints<span class="hljs-built_in"> config </span>controller<br></code></pre></td></tr></table></figure><h3 id="寻找罪魁祸首"><a href="#寻找罪魁祸首" class="headerlink" title="寻找罪魁祸首"></a>寻找罪魁祸首</h3><blockquote><p>翻看了一下源代码，发现这是一个预设值，在kube-proxy的参数里可以找到。</p></blockquote><ul><li>–conntrack-max-per-core int32                Maximum number of NAT connections to track per CPU core (0 to leave the limit as-is and ignore conntrack-min). (default 32768) 每个核默认32768个，总数就是32768*CPU核数</li><li>–conntrack-min int32                          Minimum number of conntrack entries to allocate, regardless of conntrack-max-per-core (set conntrack-max-per-core&#x3D;0 to leave the limit as-is). (default 131072) 最小值是131072个，CPU核数低于或者等于4，默认是131072</li></ul><h3 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h3><blockquote><ul><li>找到原因了，如何修改kube-proxy的参数呢？（kube-proxy参数）<br>–conntrack-min&#x3D;1048576</li></ul></blockquote><ul><li>增加如下值到 sysctl.conf中,kube-proxy 默认会调整到 131072（系统内核参数）<br>net.netfilter.nf_conntrack_max&#x3D;1048576<br>net.nf_conntrack_max&#x3D;1048576</li></ul><h3 id="IPVS引发的TCP超时问题定位"><a href="#IPVS引发的TCP超时问题定位" class="headerlink" title="IPVS引发的TCP超时问题定位"></a>IPVS引发的TCP超时问题定位</h3><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs dns">[root@k8s-n-<span class="hljs-number">192016801100151</span> overlord]# ipvsadm -Lnc       <br>IPVS connection entries<br>pro expire state       source             virtual            destination<br>TCP <span class="hljs-number">14</span>:<span class="hljs-number">46</span>  ESTABLISHED <span class="hljs-number">192.168.20.163</span>:<span class="hljs-number">38150 192.168</span>.<span class="hljs-number">110.151:30401</span> <span class="hljs-number">10.244.17.24</span>:<span class="hljs-number">80</span><br>TCP <span class="hljs-number">01</span>:<span class="hljs-number">46</span>  TIME_WAIT   <span class="hljs-number">192.168.20.163</span>:<span class="hljs-number">37798 192.168</span>.<span class="hljs-number">110.151:30401</span> <span class="hljs-number">10.244.17.24</span>:<span class="hljs-number">80</span><br>TCP <span class="hljs-number">00</span>:<span class="hljs-number">01</span>  TIME_WAIT   <span class="hljs-number">192.168.20.163</span>:<span class="hljs-number">37150 192.168</span>.<span class="hljs-number">110.151:30401</span> <span class="hljs-number">10.244.18.30</span>:<span class="hljs-number">80</span><br>TCP <span class="hljs-number">13</span>:<span class="hljs-number">57</span>  ESTABLISHED <span class="hljs-number">192.168.20.163</span>:<span class="hljs-number">37890 192.168</span>.<span class="hljs-number">110.151:30401</span> <span class="hljs-number">10.244.18.30</span>:<span class="hljs-number">80</span><br>TCP <span class="hljs-number">14</span>:<span class="hljs-number">59</span>  ESTABLISHED <span class="hljs-number">192.168.20.163</span>:<span class="hljs-number">38218 192.168</span>.<span class="hljs-number">110.151:30401</span> <span class="hljs-number">10.244.18.30</span>:<span class="hljs-number">80</span><br>TCP <span class="hljs-number">00</span>:<span class="hljs-number">51</span>  TIME_WAIT   <span class="hljs-number">192.168.20.163</span>:<span class="hljs-number">37442 192.168</span>.<span class="hljs-number">110.151:30401</span> <span class="hljs-number">10.244.18.30</span>:<span class="hljs-number">80</span><br>TCP <span class="hljs-number">00</span>:<span class="hljs-number">46</span>  TIME_WAIT   <span class="hljs-number">192.168.20.163</span>:<span class="hljs-number">37424 192.168</span>.<span class="hljs-number">110.151:30401</span> <span class="hljs-number">10.244.17.24</span>:<span class="hljs-number">80</span><br></code></pre></td></tr></table></figure><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs scss"><span class="hljs-selector-attr">[root@k8s-n-192016801100151 overlord]</span># ipvsadm -l <span class="hljs-attr">--timeout</span><br>Timeout (tcp tcpfin udp): <span class="hljs-number">900</span> <span class="hljs-number">120</span> <span class="hljs-number">300</span><br></code></pre></td></tr></table></figure><blockquote><p>基本确定了问题， 看起来是 ipvs 维护 VIP的这条链接存在15min左右的超时阈值设定，这个值是否跟系统默认的tcp_keepalive_timeout 有协同影响？ 那么系统的默认tcp超时时间是多少呢？<br>ipvs维护链接有个超时时间，默认为900s为15分钟；然后操作系统默认的tcp_keepalive_timeout 默认为7200s，当一个空闲 tcp连接达到900s时，首先他被ipvs断了，但是操作系统认为该链接还没有到保活超时，所以客户端还会使用之前的连接去发送查询请求，但是ipvs已经不维护该链接了，所以 Lost Connection。。所以只要减小系统的tcp_keepalive_timeout时间，比如到600，后发送一个心跳包，让tcp保活， 这样， ipvs的连接超时也会被重置计数为15min。</p></blockquote><h3 id="新增如下参数"><a href="#新增如下参数" class="headerlink" title="新增如下参数"></a>新增如下参数</h3><blockquote><ul><li>表示当Keepalive起用的时候，TCP发送keepalive消息的频繁度。预设值是2小时，这里我改为5分钟。<br>net.ipv4.tcp_keepalive_time &#x3D; 600</li></ul></blockquote><ul><li>总共发送keepalive的次数<br>net.ipv4.tcp_keepalive_probes &#x3D; 10</li><li>每次发送keepalive间隔单位S<br>net.ipv4.tcp_keepalive_intvl &#x3D; 30</li></ul><blockquote><p>当启用与内核参数或守护程序端配置或客户端配置相关的选项时，它将根据这些选项终止tcp会话。例如，当您将以上述内核参数选项视为示例时，首先将在600秒后开始发送keepalive数据包，之后每隔30秒发送一次下一个数据包10次。当客户端或服务器在这段时间内根本没有应答时，tcp会话将被视为已损坏，并将终止。为什么我们要设置为600s呢， 其实只要比 ipvs的默认值900小即可！</p></blockquote>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>K8s集群中pause容器是干嘛的</title>
    <link href="/2019/08/26/pause/"/>
    <url>/2019/08/26/pause/</url>
    
    <content type="html"><![CDATA[<blockquote><p>当我们在检查k8s集群状态的时候会发现有很多 <code>pause</code> 容器运行于服务器上面，然后每次启动一个容器，都会伴随一个pause容器的启动。那它究竟是干啥子的？</p></blockquote><blockquote><p>Pause容器，又叫Infra容器，下面通过实验来理解它。我们知道在搭建k8s集群的时候，kubelet的配置中有这样一个参数：</p></blockquote><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-attr">--pod-infra-container-image</span>=registry<span class="hljs-selector-class">.cn-hangzhou</span><span class="hljs-selector-class">.aliyuncs</span>.com/google_containers/<span class="hljs-attribute">pause</span>-amd64:<span class="hljs-number">3.1</span><br></code></pre></td></tr></table></figure><blockquote><p>Pause容器，是可以自己来定义，官方使用的gcr.io&#x2F;google_containers&#x2F;pause-amd64:3.0容器的代码见Github，使用C语言编写。</p></blockquote><h3 id="Pause容器的作用："><a href="#Pause容器的作用：" class="headerlink" title="Pause容器的作用："></a>Pause容器的作用：</h3><blockquote><p>我们检查nod节点的时候会发现每个node上都运行了很多的pause容器，例如如下。</p></blockquote><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs llvm">[root<span class="hljs-title">@linux-node1</span> cfg]# docker ps<br>······<br>······<br>CONTAINER ID        IMAGE                                    COMMAND                  CREATED             STATUS              PORTS               NAMES<br>a<span class="hljs-number">007</span><span class="hljs-keyword">c</span><span class="hljs-number">18</span>b<span class="hljs-number">8</span>dc<span class="hljs-number">0</span>        <span class="hljs-number">568</span><span class="hljs-keyword">c</span><span class="hljs-number">4670</span>fa<span class="hljs-number">80</span>                             <span class="hljs-string">&quot;nginx -g &#x27;daemon of…&quot;</span>   <span class="hljs-number">42</span> hours ago        Up <span class="hljs-number">42</span> hours                             k<span class="hljs-number">8</span>s_nginx_nginx-pod<span class="hljs-number">-7</span>d<span class="hljs-number">9</span>f<span class="hljs-number">9876</span><span class="hljs-keyword">cc</span><span class="hljs-number">-75</span>sf<span class="hljs-number">7</span>_default_a<span class="hljs-number">688</span>bb<span class="hljs-number">46</span>-f<span class="hljs-number">872</span><span class="hljs-number">-11e8</span>-ae<span class="hljs-number">6</span>b<span class="hljs-number">-000</span><span class="hljs-keyword">c</span><span class="hljs-number">29</span><span class="hljs-keyword">c</span><span class="hljs-number">6</span>d<span class="hljs-number">12</span>b_<span class="hljs-number">1</span><br><span class="hljs-number">9866</span><span class="hljs-keyword">c</span><span class="hljs-number">08</span>d<span class="hljs-number">1</span>f<span class="hljs-number">4</span>b        <span class="hljs-number">568</span><span class="hljs-keyword">c</span><span class="hljs-number">4670</span>fa<span class="hljs-number">80</span>                             <span class="hljs-string">&quot;nginx -g &#x27;daemon of…&quot;</span>   <span class="hljs-number">42</span> hours ago        Up <span class="hljs-number">42</span> hours                             k<span class="hljs-number">8</span>s_nginx_nginx-pod<span class="hljs-number">-7</span>d<span class="hljs-number">9</span>f<span class="hljs-number">9876</span><span class="hljs-keyword">cc</span>-wpv<span class="hljs-number">4</span>h_default_a<span class="hljs-number">6</span>a<span class="hljs-number">899</span><span class="hljs-keyword">c</span><span class="hljs-number">0</span>-f<span class="hljs-number">872</span><span class="hljs-number">-11e8</span>-ae<span class="hljs-number">6</span>b<span class="hljs-number">-000</span><span class="hljs-keyword">c</span><span class="hljs-number">29</span><span class="hljs-keyword">c</span><span class="hljs-number">6</span>d<span class="hljs-number">12</span>b_<span class="hljs-number">1</span><br>aafef<span class="hljs-number">6727026</span>        mirrorgooglecontainers/pause-amd<span class="hljs-number">64</span>:<span class="hljs-number">3.0</span>   <span class="hljs-string">&quot;/pause&quot;</span>                 <span class="hljs-number">42</span> hours ago        Up <span class="hljs-number">42</span> hours                             k<span class="hljs-number">8</span>s_POD_flask-app<span class="hljs-number">-6</span>f<span class="hljs-number">5</span>b<span class="hljs-number">6</span><span class="hljs-keyword">cc</span><span class="hljs-number">447</span>-kbxks_flask-app-extions-stage_<span class="hljs-number">374</span>b<span class="hljs-number">8</span>aa<span class="hljs-number">0</span>-f<span class="hljs-number">873</span><span class="hljs-number">-11e8</span>-ae<span class="hljs-number">6</span>b<span class="hljs-number">-000</span><span class="hljs-keyword">c</span><span class="hljs-number">29</span><span class="hljs-keyword">c</span><span class="hljs-number">6</span>d<span class="hljs-number">12</span>b_<span class="hljs-number">1</span><br><span class="hljs-keyword">c</span><span class="hljs-number">4</span>f<span class="hljs-number">48</span>f<span class="hljs-number">90</span>b<span class="hljs-number">27</span>f        mirrorgooglecontainers/pause-amd<span class="hljs-number">64</span>:<span class="hljs-number">3.0</span>   <span class="hljs-string">&quot;/pause&quot;</span>                 <span class="hljs-number">42</span> hours ago        Up <span class="hljs-number">42</span> hours                             k<span class="hljs-number">8</span>s_POD_flask-app<span class="hljs-number">-6</span>f<span class="hljs-number">5</span>b<span class="hljs-number">6</span><span class="hljs-keyword">cc</span><span class="hljs-number">447</span>-f<span class="hljs-number">9</span>wjn_flask-app-extions-stage_<span class="hljs-number">373</span>be<span class="hljs-number">9</span>db-f<span class="hljs-number">873</span><span class="hljs-number">-11e8</span>-ae<span class="hljs-number">6</span>b<span class="hljs-number">-000</span><span class="hljs-keyword">c</span><span class="hljs-number">29</span><span class="hljs-keyword">c</span><span class="hljs-number">6</span>d<span class="hljs-number">12</span>b_<span class="hljs-number">1</span><br><span class="hljs-number">9</span>f<span class="hljs-number">452e6961</span>f<span class="hljs-number">6</span>        mirrorgooglecontainers/pause-amd<span class="hljs-number">64</span>:<span class="hljs-number">3.0</span>   <span class="hljs-string">&quot;/pause&quot;</span>                 <span class="hljs-number">42</span> hours ago        Up <span class="hljs-number">42</span> hours                             k<span class="hljs-number">8</span>s_POD_nginx-pod<span class="hljs-number">-7</span>d<span class="hljs-number">9</span>f<span class="hljs-number">9876</span><span class="hljs-keyword">cc</span>-ccx<span class="hljs-number">94</span>_default_a<span class="hljs-number">6</span>a<span class="hljs-number">8</span><span class="hljs-keyword">c</span><span class="hljs-number">440</span>-f<span class="hljs-number">872</span><span class="hljs-number">-11e8</span>-ae<span class="hljs-number">6</span>b<span class="hljs-number">-000</span><span class="hljs-keyword">c</span><span class="hljs-number">29</span><span class="hljs-keyword">c</span><span class="hljs-number">6</span>d<span class="hljs-number">12</span>b_<span class="hljs-number">1</span><br><span class="hljs-number">7e68043469</span>d<span class="hljs-number">1</span>        mirrorgooglecontainers/pause-amd<span class="hljs-number">64</span>:<span class="hljs-number">3.0</span>   <span class="hljs-string">&quot;/pause&quot;</span>                 <span class="hljs-number">42</span> hours ago        Up <span class="hljs-number">42</span> hours                             k<span class="hljs-number">8</span>s_POD_nginx-pod<span class="hljs-number">-7</span>d<span class="hljs-number">9</span>f<span class="hljs-number">9876</span><span class="hljs-keyword">cc</span>-sskpk_default_a<span class="hljs-number">6</span>ac<span class="hljs-number">43</span>bd-f<span class="hljs-number">872</span><span class="hljs-number">-11e8</span>-ae<span class="hljs-number">6</span>b<span class="hljs-number">-000</span><span class="hljs-keyword">c</span><span class="hljs-number">29</span><span class="hljs-keyword">c</span><span class="hljs-number">6</span>d<span class="hljs-number">12</span>b_<span class="hljs-number">1</span><br>······<br>······<br></code></pre></td></tr></table></figure><blockquote><p>每个Pod都有一个特殊的被称为“根容器”的Pause 容器。 Pause容器对应的镜像属于Kubernetes平台的一部分，除了Pause容器，每个Pod还包含一个或者多个紧密相关的用户业务容器。</p></blockquote><p><img src="/images/pause-1.png" alt="pause-1"></p><h3 id="Kubernetes设计这样的Pod概念和特殊组成结构有什么用意"><a href="#Kubernetes设计这样的Pod概念和特殊组成结构有什么用意" class="headerlink" title="Kubernetes设计这样的Pod概念和特殊组成结构有什么用意"></a>Kubernetes设计这样的Pod概念和特殊组成结构有什么用意</h3><blockquote><ul><li>原因一：在多个Container作为一个Pod的情况下，难以对整体的容器简单地进行判断及有效地进行行动。比如，一个容器死亡了，此时是算整体挂了么？那么引入与业务无关的Pause容器作为Pod的根容器，以它的状态代表着整个容器组的状态，这样就可以解决该问题。</li></ul></blockquote><ul><li>原因二：Pod里的多个业务容器共享Pause容器的IP，共享Pause容器挂载的Volume，这样简化了业务容器之间的通信问题，也解决了容器之间的文件共享问题。</li></ul><h3 id="kubernetes中的pause容器主要为每个业务容器提供以下功能："><a href="#kubernetes中的pause容器主要为每个业务容器提供以下功能：" class="headerlink" title="kubernetes中的pause容器主要为每个业务容器提供以下功能："></a>kubernetes中的pause容器主要为每个业务容器提供以下功能：</h3><blockquote><ul><li>在pod里担任与其他容器<code>namespace</code>共享的基础；</li></ul></blockquote><ul><li>启用pid命名空间，开启init进程，负责处理僵尸进程。<br>（注意：这里虽然开启了PID名称空间共享，但是在Kubelet中<code>--docker-disable-shared-pid=true</code>关闭了PID共享，所以Pod中的每个容器都将具有自己的PID 1，并且每个容器将需要自己处理僵尸进程）</li></ul><h3 id="1-我们首先在节点上运行一个pause容器。"><a href="#1-我们首先在节点上运行一个pause容器。" class="headerlink" title="1.我们首先在节点上运行一个pause容器。"></a>1.我们首先在节点上运行一个pause容器。</h3><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mel">[root@k8s-node1 ~]# docker run -d --name <span class="hljs-keyword">pause</span> -p <span class="hljs-number">8880</span>:<span class="hljs-number">80</span> registry.cn-hangzhou.aliyuncs.com/google_containers/<span class="hljs-keyword">pause</span>-amd64:<span class="hljs-number">3.1</span><br><span class="hljs-number">38</span>d2aa8366d5aa6fe4c57aa0d879de4b5259c67c83d17428dd4d9f8937205c02<br><br>[root@k8s-node1 ~]# docker ps | grep <span class="hljs-keyword">pause</span><br><span class="hljs-number">38</span>d2aa8366d5        registry.cn-hangzhou.aliyuncs.com/google_containers/<span class="hljs-keyword">pause</span>-amd64:<span class="hljs-number">3.1</span>   <span class="hljs-string">&quot;/pause&quot;</span>                 <span class="hljs-number">14</span> seconds ago      Up <span class="hljs-number">13</span> seconds       <span class="hljs-number">0.0</span><span class="hljs-number">.0</span><span class="hljs-number">.0</span>:<span class="hljs-number">8880</span>-&gt;<span class="hljs-number">80</span>/tcp   <span class="hljs-keyword">pause</span><br></code></pre></td></tr></table></figure><h3 id="2-然后再运行一个nginx容器，nginx将为localhost-2368创建一个代理。"><a href="#2-然后再运行一个nginx容器，nginx将为localhost-2368创建一个代理。" class="headerlink" title="2.然后再运行一个nginx容器，nginx将为localhost:2368创建一个代理。"></a>2.然后再运行一个nginx容器，nginx将为localhost:2368创建一个代理。</h3><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">[root@k8s-node1 ~]# cat <span class="hljs-symbol">&lt;&lt;EOF &gt;&gt;</span> nginx.conf<br>error_log stderr;<br>events &#123; worker_connections  <span class="hljs-number">1024</span>; &#125;<br>http &#123;<br>    access_log /dev/stdout combined;<br>    <span class="hljs-keyword">server</span> &#123;<br>        <span class="hljs-keyword">listen</span> <span class="hljs-number">80</span> default_server;<br>        server_name example.com www.example.com;<br>        <span class="hljs-keyword">location</span> / &#123;<br>            proxy_pass http://<span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">2368</span>;<br>        &#125;<br>    &#125;<br>&#125;<br>EOF<br><br>[root@k8s-node1 ~]# docker run -d <span class="hljs-comment">--name nginx -v `pwd`/nginx.conf:/etc/nginx/nginx.conf --net=container:pause --ipc=container:pause --pid=container:pause nginx</span><br>fa078473c01e040db795004ad16db525dea8a113893d3052cc6ab1c5e117ba10<br></code></pre></td></tr></table></figure><h3 id="3-然后再为ghost创建一个应用容器，这是一款博客软件。"><a href="#3-然后再为ghost创建一个应用容器，这是一款博客软件。" class="headerlink" title="3.然后再为ghost创建一个应用容器，这是一款博客软件。"></a>3.然后再为ghost创建一个应用容器，这是一款博客软件。</h3><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs mel">[root@linux-node2 ~]# docker run -d --name ghost --net=<span class="hljs-keyword">container</span>:<span class="hljs-keyword">pause</span> --ipc=<span class="hljs-keyword">container</span>:<span class="hljs-keyword">pause</span> --pid=<span class="hljs-keyword">container</span>:<span class="hljs-keyword">pause</span> ghost<br><br><br># 查看结果：<br>[root@k8s-node1 ~]# docker ps | grep -E <span class="hljs-string">&quot;pause|nginx|ghost&quot;</span><br><span class="hljs-number">9</span>b796efd95a5        ghost                                                                 <span class="hljs-string">&quot;docker-entrypoint...&quot;</span>   <span class="hljs-number">47</span> seconds ago       Up <span class="hljs-number">46</span> seconds                              ghost<br>fa078473c01e        nginx                                                                 <span class="hljs-string">&quot;nginx -g &#x27;daemon ...&quot;</span>   About a minute ago   Up About a minute                          nginx<br><span class="hljs-number">38</span>d2aa8366d5        registry.cn-hangzhou.aliyuncs.com/google_containers/<span class="hljs-keyword">pause</span>-amd64:<span class="hljs-number">3.1</span>   <span class="hljs-string">&quot;/pause&quot;</span>                 <span class="hljs-number">3</span> minutes ago        Up <span class="hljs-number">3</span> minutes        <span class="hljs-number">0.0</span><span class="hljs-number">.0</span><span class="hljs-number">.0</span>:<span class="hljs-number">8880</span>-&gt;<span class="hljs-number">80</span>/tcp   <span class="hljs-keyword">pause</span><br>[root@k8s-node1 ~]#<br><br><br><br># 现在访问http:<span class="hljs-comment">//119.3.198.128:8880/就可以看到ghost博客的界面了吗</span><br># 这里我直接curl 然后浏览器访问也是正常的<br>[root@k8s-node1 ~]# curl -I http:<span class="hljs-comment">//119.3.198.128:8880/</span><br>HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">200</span> OK<br>Server: nginx/<span class="hljs-number">1.15</span><span class="hljs-number">.5</span><br>Date: Fri, <span class="hljs-number">07</span> Dec <span class="hljs-number">2018</span> <span class="hljs-number">08</span>:<span class="hljs-number">35</span>:<span class="hljs-number">49</span> GMT<br>Content-Type: <span class="hljs-keyword">text</span>/html; charset=utf<span class="hljs-number">-8</span><br>Content-Length: <span class="hljs-number">17381</span><br>Connection: keep-alive<br>X-Powered-By: Express<br>Cache-Control: public, <span class="hljs-keyword">max</span>-age=<span class="hljs-number">0</span><br>ETag: W/<span class="hljs-string">&quot;43e5-ELHSnbaoapp3YOyz+PU502oJo5E&quot;</span><br>Vary: Accept-Encoding<br><br>[root@k8s-node1 ~]#<br></code></pre></td></tr></table></figure><p><img src="/images/pause-2.png" alt="pause-2"></p><h3 id="解析"><a href="#解析" class="headerlink" title="解析:"></a>解析:</h3><blockquote><ul><li>pause 容器将内部的80端口映射到了宿主机的8880端口;</li></ul></blockquote><ul><li>pause容器在宿主机上设置好了网络namespace后，nginx容器加入到该网络namespace中;</li><li>nginx容器启动的时候指定了–net&#x3D;container:pause;</li><li>ghost容器启动的时候同样加入到了该网络namespace中;</li><li>这样三个容器就共享了网络，互相之间就可以使用localhost直接通信，</li><li>–ipc&#x3D;contianer:pause –pid&#x3D;container:pause就是三个容器的ipc和pid处于同一个namespace中，init进程为pause;</li></ul><h3 id="我们到ghost容器中查看一下"><a href="#我们到ghost容器中查看一下" class="headerlink" title="我们到ghost容器中查看一下:"></a>我们到ghost容器中查看一下:</h3><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs tap">[root@k8s-node1 ~]<span class="hljs-comment"># docker exec -it ghost /bin/bash</span><br>root@38d2aa8366d5:/var/lib/ghost<span class="hljs-comment"># ps aux</span><br>USER       PID %CPU %MEM    VSZ   RSS TTY      STAT START   TIME COMMAND<br>root        <span class="hljs-number"> 1 </span> 0.0  0.0  <span class="hljs-number"> 1012 </span>   <span class="hljs-number"> 4 </span>?        Ss   08:27   0:00 /pause<br>root        <span class="hljs-number"> 5 </span> 0.0  0.0 <span class="hljs-number"> 32472 </span><span class="hljs-number"> 3168 </span>?        Ss   08:29   0:00 nginx: master process nginx -g daemon off;<br>systemd+    <span class="hljs-number"> 9 </span> 0.0  0.0 <span class="hljs-number"> 32932 </span><span class="hljs-number"> 1812 </span>?        S    08:29   0:00 nginx: worker process<br>node       <span class="hljs-number"> 10 </span> 0.5  2.1<span class="hljs-number"> 1262748 </span>84688 ?       Ssl  08:30   0:03 node current/index.js<br>root       <span class="hljs-number"> 83 </span> 0.2  0.0 <span class="hljs-number"> 20240 </span><span class="hljs-number"> 1912 </span>pts/0    Ss   08:41   0:00 /bin/bash<br>root       <span class="hljs-number"> 87 </span> 0.0  0.0 <span class="hljs-number"> 17496 </span><span class="hljs-number"> 1148 </span>pts/0    R+   08:41   0:00 ps aux<br>root@38d2aa8366d5:/var/lib/ghost<span class="hljs-comment">#</span><br></code></pre></td></tr></table></figure><blockquote><p>在ghost容器中同时可以看到pause和nginx容器的进程，并且pause容器的PID是1。而在kubernetes中容器的PID&#x3D;1的进程即为容器本身的业务进程。</p></blockquote><h3 id="Pod中共享的名称空间："><a href="#Pod中共享的名称空间：" class="headerlink" title="Pod中共享的名称空间："></a>Pod中共享的名称空间：</h3><blockquote><ul><li>PID命名空间：Pod中的不同应用程序可以看到其他应用程序的进程ID；</li><li>网络命名空间：Pod中的多个容器能够访问同一个IP和端口范围；</li></ul></blockquote><ul><li>IPC命名空间：Pod中的多个容器能够使用SystemV IPC或POSIX消息队列进行通信；</li><li>UTS命名空间：Pod中的多个容器共享一个主机名；Volumes（共享存储卷）：</li><li>Pod中的各个容器可以访问在Pod级别定义的Volumes；</li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>ingress-nginx多实例部署</title>
    <link href="/2019/08/26/ingress-nginx-Multi-instance/"/>
    <url>/2019/08/26/ingress-nginx-Multi-instance/</url>
    
    <content type="html"><![CDATA[<blockquote><p>由于业务需求希望一个项目一个ingress-nginx以方便后期管理。为此我把ingress-nginx的所有Yaml文件读了一遍了解了其中的创建过程以及权限设置。想要实现多实例我们需要对如下几个地方做出适当的修改。</p></blockquote><blockquote><h4 id="此段主要是允许访问一个叫ingress-controller-leader-iov-iov的configmap（通过RoleBinding绑定从而限制针对某一个命名空间中定义的一个ConfigMap实例的访问）"><a href="#此段主要是允许访问一个叫ingress-controller-leader-iov-iov的configmap（通过RoleBinding绑定从而限制针对某一个命名空间中定义的一个ConfigMap实例的访问）" class="headerlink" title="此段主要是允许访问一个叫ingress-controller-leader-iov-iov的configmap（通过RoleBinding绑定从而限制针对某一个命名空间中定义的一个ConfigMap实例的访问）"></a>此段主要是允许访问一个叫ingress-controller-leader-iov-iov的configmap（通过RoleBinding绑定从而限制针对某一个命名空间中定义的一个ConfigMap实例的访问）</h4></blockquote><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext">  <span class="hljs-bullet">-</span> <span class="hljs-string">apiGroups:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;&quot;</span><br>    <span class="hljs-attribute">resources</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">configmaps</span><br>    <span class="hljs-attribute">resourceNames</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-comment"># Defaults to &quot;&lt;election-id&gt;-&lt;ingress-class&gt;&quot;</span><br>      <span class="hljs-comment"># Here: &quot;&lt;ingress-controller-leader&gt;-&lt;nginx&gt;&quot;</span><br>      <span class="hljs-comment"># This has to be adapted if you change either parameter</span><br>      <span class="hljs-comment"># when launching the nginx-ingress-controller.</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;ingress-controller-leader-iov-iov&quot;</span><br>    <span class="hljs-attribute">verbs</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">get</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">update</span><br><br><span class="hljs-comment">#注意：这里的名称是&lt;election-id&gt;-&lt;ingress-class&gt;拼接而成</span><br><br></code></pre></td></tr></table></figure><blockquote><h4 id="在如下args段中我们新增了几个参数："><a href="#在如下args段中我们新增了几个参数：" class="headerlink" title="在如下args段中我们新增了几个参数："></a>在如下args段中我们新增了几个参数：</h4></blockquote><ul><li><code>--ingress-class=iov </code>          当设置这个参数后只会Watch Ingress class为 iov的</li><li><code>--election-id=ingress-controller-leader-iov </code>  用于Ingress状态更新的选举ID。（默认<code>ingress-controller-leader</code>）</li><li><code> --report-node-internal-ip-address</code>    默认情况下是–publish-service但是在裸机部署的时候要使用<code>kubectl get ingress</code>无法显示<code>ADDRESS</code>，所以我们需要使用–report-node-internal-ip-address参数</li></ul><blockquote><h4 id="删除删除："><a href="#删除删除：" class="headerlink" title="删除删除："></a>删除删除：</h4></blockquote><ul><li><code>--publish-service=$(POD_NAMESPACE)/ingress-nginx</code>   非公有云情况下使用<code>kubectl get ingress</code>无法显示<code>ADDRESS</code></li></ul><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-attribute">serviceAccountName</span><span class="hljs-punctuation">:</span> <span class="hljs-string">nginx-ingress-serviceaccount</span><br><span class="hljs-attribute">nodeSelector</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">node</span><span class="hljs-punctuation">:</span> <span class="hljs-string">IOV</span><br><span class="hljs-attribute">containers</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">name: nginx-ingress-iov-controller</span><br>    <span class="hljs-attribute">image</span><span class="hljs-punctuation">:</span> <span class="hljs-string">quay.io/kubernetes-ingress-controller/nginx-ingress-controller:0.24.1</span><br>    <span class="hljs-attribute">args</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">/nginx-ingress-controller</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">--configmap=$(POD_NAMESPACE)/nginx-configuration</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">--tcp-services-configmap=$(POD_NAMESPACE)/tcp-services</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">--udp-services-configmap=$(POD_NAMESPACE)/udp-services</span><br>     <span class="hljs-comment"># - --publish-service=$(POD_NAMESPACE)/ingress-nginx</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">--report-node-internal-ip-address</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">--annotations-prefix=nginx.ingress.kubernetes.io</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">--ingress-class=iov</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">--election-id=ingress-controller-leader-iov</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">--v=2</span><br></code></pre></td></tr></table></figure><h3 id="在创建ingress时我们需要注意"><a href="#在创建ingress时我们需要注意" class="headerlink" title="在创建ingress时我们需要注意"></a>在创建ingress时我们需要注意</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">extensions/v1beta1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Ingress</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">ingress-myapp</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">default</span><br>  <span class="hljs-attr">annotations:</span><br>    <span class="hljs-attr">kubernetes.io/ingress.class:</span> <span class="hljs-string">&quot;iov&quot;</span>                    <span class="hljs-comment"># 指定class类不然无法被ingress所选取到</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">rules:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">host:</span> <span class="hljs-string">nginx.testdomain.com</span><br>    <span class="hljs-attr">http:</span><br>      <span class="hljs-attr">paths:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">path:</span><br>        <span class="hljs-attr">backend:</span><br>          <span class="hljs-attr">serviceName:</span> <span class="hljs-string">nginx-service</span><br>          <span class="hljs-attr">servicePort:</span> <span class="hljs-number">8080</span><br></code></pre></td></tr></table></figure><h3 id="Ingress-nginx使用："><a href="#Ingress-nginx使用：" class="headerlink" title="Ingress-nginx使用："></a>Ingress-nginx使用：</h3><blockquote><h4 id="有三种方法可以自定义NGINX："><a href="#有三种方法可以自定义NGINX：" class="headerlink" title="有三种方法可以自定义NGINX："></a>有三种方法可以自定义NGINX：</h4></blockquote><ul><li>ConfigMap：使用Configmap在NGINX中设置全局配置。</li><li>Annotations: 如果需要特定Ingress规则的特定配置，请使用此选项。</li><li>自定义模板：当需要更具体的设置时，比如open_file_cache，将listen选项调整为rcvbuf，或者当无法通过ConfigMap更改配置时。</li></ul><h4 id="Annotations："><a href="#Annotations：" class="headerlink" title="Annotations："></a>Annotations：</h4><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs axapta">将配置添加到<span class="hljs-keyword">server</span>作用域中：<br>nginx.ingress.kubernetes.io/<span class="hljs-keyword">server</span>-snippet: <br></code></pre></td></tr></table></figure><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stylus">将配置添加到location作用域：<br>nginx<span class="hljs-selector-class">.ingress</span><span class="hljs-selector-class">.kubernetes</span>.io/configuration-snippet: <br></code></pre></td></tr></table></figure><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stylus">指示Ingress上定义的路径是否使用正则表达式：<br>nginx<span class="hljs-selector-class">.ingress</span><span class="hljs-selector-class">.kubernetes</span>.io/use-regex:<br></code></pre></td></tr></table></figure><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stylus">必须重定向流量的目标URI：<br>nginx<span class="hljs-selector-class">.ingress</span><span class="hljs-selector-class">.kubernetes</span>.io/rewrite-target:<br></code></pre></td></tr></table></figure><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stylus">设置upstream server  proxy_set_header Host <span class="hljs-variable">$host</span>：<br>nginx<span class="hljs-selector-class">.ingress</span><span class="hljs-selector-class">.kubernetes</span>.io/upstream-vhost:<br></code></pre></td></tr></table></figure><h4 id="ConfigMaps："><a href="#ConfigMaps：" class="headerlink" title="ConfigMaps："></a>ConfigMaps：</h4><blockquote><p>使用ConfigMap配置NGINX将是对整个Nginx进行全局配置</p></blockquote><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs tap">[root@k8s-m-19201680111034 overlord]<span class="hljs-comment"># kubectl get configmap -n ingress-nginx</span><br>NAME                              DATA   AGE<br>ingress-controller-leader-nginx  <span class="hljs-number"> 0 </span>     22d<br>nginx-configuration              <span class="hljs-number"> 0 </span>     22d<br>tcp-services                     <span class="hljs-number"> 0 </span>     22d<br>udp-services                     <span class="hljs-number"> 0 </span>     22d<br></code></pre></td></tr></table></figure><blockquote><p>例如，如果我们想改变超时，我们需要创建一个ConfigMap:</p></blockquote><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs dts">[root@k8s-m<span class="hljs-number">-19201680111034</span> overlord]<span class="hljs-meta"># cat configmap.yaml</span><br><span class="hljs-symbol">apiVersion:</span> v1<br><span class="hljs-symbol">data:</span><br>  proxy-connect-timeout: <span class="hljs-string">&quot;10&quot;</span><br>  proxy-read-timeout: <span class="hljs-string">&quot;120&quot;</span><br>  proxy-send-timeout: <span class="hljs-string">&quot;120&quot;</span><br><span class="hljs-symbol">kind:</span> ConfigMap<br><span class="hljs-symbol">metadata:</span><br><span class="hljs-symbol">  name:</span> nginx-configuration<br><br>[root@k8s-m<span class="hljs-number">-19201680111034</span> overlord]<span class="hljs-meta"># kubectl apply -f configmap.yaml</span><br></code></pre></td></tr></table></figure><h3 id="自定义标题"><a href="#自定义标题" class="headerlink" title="自定义标题"></a>自定义标题</h3><blockquote><p>本例演示了通过ConfigMap配置nginx ingress控制器，以便将自定义头列表传递给上游服务器。</p></blockquote><blockquote><p>首先我们在ingress-nginx名称空间创建一个ConfigMap其中包含几个自定义的 X-prefixed HTTP头部。内容如下：</p></blockquote><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-attribute">apiVersion</span><span class="hljs-punctuation">:</span> <span class="hljs-string">v1</span><br><span class="hljs-attribute">data</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">X-Different-Name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;true&quot;</span><br>  <span class="hljs-attribute">X-Request-Start</span><span class="hljs-punctuation">:</span> <span class="hljs-string">t=$&#123;msec&#125;</span><br>  <span class="hljs-attribute">X-Using-Nginx-Controller</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;true&quot;</span><br><span class="hljs-attribute">kind</span><span class="hljs-punctuation">:</span> <span class="hljs-string">ConfigMap</span><br><span class="hljs-attribute">metadata</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">custom-headers</span><br>  <span class="hljs-attribute">namespace</span><span class="hljs-punctuation">:</span> <span class="hljs-string">ingress-nginx</span><br></code></pre></td></tr></table></figure><blockquote><p>第二步我们修改ingres-nginx名称空间中一个名为nginx-configuration的ConfigMap。它控制ingress-controller的全局配置。nginx-ingress控制器将读取ingres-nginx&#x2F;nginx-configuration ConfigMap，找到proxy-set-headers键，然后从ingres-nginx&#x2F;custom-headers ConfigMap读取HTTP头部，并将这些HTTP头部包含在从nginx流到后端所有请求中。</p></blockquote><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-attribute">apiVersion</span><span class="hljs-punctuation">:</span> <span class="hljs-string">v1</span><br><span class="hljs-attribute">data</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">proxy-set-headers</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;ingress-nginx/custom-headers&quot;</span><br><span class="hljs-attribute">kind</span><span class="hljs-punctuation">:</span> <span class="hljs-string">ConfigMap</span><br><span class="hljs-attribute">metadata</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">nginx-configuration</span><br>  <span class="hljs-attribute">namespace</span><span class="hljs-punctuation">:</span> <span class="hljs-string">ingress-nginx</span><br>  <span class="hljs-attribute">labels</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-attribute">app.kubernetes.io/name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">ingress-nginx</span><br>    <span class="hljs-attribute">app.kubernetes.io/part-of</span><span class="hljs-punctuation">:</span> <span class="hljs-string">ingress-nginx</span><br></code></pre></td></tr></table></figure><h3 id="设置日志格式："><a href="#设置日志格式：" class="headerlink" title="设置日志格式："></a>设置日志格式：</h3><blockquote><p>设置nginx日志格式，以json格式输出:</p></blockquote><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs julia">[root<span class="hljs-meta">@k8s</span>-m1 ~]<span class="hljs-comment"># cat log.yaml</span><br>apiVersion: v1<br>data:<br>  log-format-upstream: &#x27;&#123; <span class="hljs-string">&quot;time&quot;</span>: <span class="hljs-string">&quot;<span class="hljs-variable">$time_iso8601</span>&quot;</span>, <span class="hljs-string">&quot;remote_addr&quot;</span>: <span class="hljs-string">&quot;<span class="hljs-variable">$proxy_protocol_addr</span>&quot;</span>,<span class="hljs-string">&quot;x-forward-for&quot;</span>: <span class="hljs-string">&quot;<span class="hljs-variable">$proxy_add_x_forwarded_for</span>&quot;</span>, <span class="hljs-string">&quot;request_id&quot;</span>: <span class="hljs-string">&quot;<span class="hljs-variable">$req_id</span>&quot;</span>, <span class="hljs-string">&quot;remote_user&quot;</span>:<span class="hljs-string">&quot;<span class="hljs-variable">$remote_user</span>&quot;</span>, <span class="hljs-string">&quot;bytes_sent&quot;</span>: $bytes_sent, <span class="hljs-string">&quot;request_time&quot;</span>: $request_time, <span class="hljs-string">&quot;status&quot;</span>:$status, <span class="hljs-string">&quot;vhost&quot;</span>: <span class="hljs-string">&quot;<span class="hljs-variable">$host</span>&quot;</span>, <span class="hljs-string">&quot;request_proto&quot;</span>: <span class="hljs-string">&quot;<span class="hljs-variable">$server_protocol</span>&quot;</span>, <span class="hljs-string">&quot;path&quot;</span>: <span class="hljs-string">&quot;<span class="hljs-variable">$uri</span>&quot;</span>,<span class="hljs-string">&quot;request_query&quot;</span>: <span class="hljs-string">&quot;<span class="hljs-variable">$args</span>&quot;</span>, <span class="hljs-string">&quot;request_length&quot;</span>: $request_length, <span class="hljs-string">&quot;duration&quot;</span>: $request_time,<span class="hljs-string">&quot;method&quot;</span>: <span class="hljs-string">&quot;<span class="hljs-variable">$request_method</span>&quot;</span>, <span class="hljs-string">&quot;http_referrer&quot;</span>: <span class="hljs-string">&quot;<span class="hljs-variable">$http_referer</span>&quot;</span>, <span class="hljs-string">&quot;http_user_agent&quot;</span>:<span class="hljs-string">&quot;<span class="hljs-variable">$http_user_agent</span>&quot;</span> &#125;&#x27;<br>kind: ConfigMap<br>metadata:<br>  name: nginx-configuration<br>  namespace: ingress-nginx<br></code></pre></td></tr></table></figure><h3 id="调整工作进程和内存设置："><a href="#调整工作进程和内存设置：" class="headerlink" title="调整工作进程和内存设置："></a>调整工作进程和内存设置：</h3><blockquote><p>Nginx 具有默认设置worker_processes auto，这意味着工作进程号与宿主机上的 CPU 核心数相同。 请注意，这里提到的是物理主机而不是容器资源！这是因为 Nginx 不是 cgroup-aware，而 Ingress 控制器将忽略以下 2 个约束：</p></blockquote><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stylus">resources<span class="hljs-selector-class">.limits</span><span class="hljs-selector-class">.cpu</span><br>resources<span class="hljs-selector-class">.requests</span>.cpu<br></code></pre></td></tr></table></figure><blockquote><p>当技术人员将集群中的宿主机节点从 4 个 vCPU 核心升级到 16 个 vCPU 核心时，Ingress 控制器的 Pod 在 Ingress 的更改期间会出现故障。这时，登录 Pod 并检查&#x2F;etc&#x2F;nginx&#x2F;nginx.conf后，你会发现每个 Ingress 控制器中的 Pod 有 16 个工作进程而不是 4 个。<br>当频繁的进行 Ingress 更改时，Nginx 将继续为这 16 个工作进程重新加载配置并消耗 Pod 中的所有内存，让他们死于 OOM。</p></blockquote><h4 id="注意：当node节点既有ingress-nginx-Pod，又有其他业务Pod时请限制ingress-nginx的资源利用CPU、mem"><a href="#注意：当node节点既有ingress-nginx-Pod，又有其他业务Pod时请限制ingress-nginx的资源利用CPU、mem" class="headerlink" title="注意：当node节点既有ingress-nginx Pod，又有其他业务Pod时请限制ingress-nginx的资源利用CPU、mem"></a>注意：当node节点既有ingress-nginx Pod，又有其他业务Pod时请限制ingress-nginx的资源利用CPU、mem</h4>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Kubelet 状态更新机制</title>
    <link href="/2019/08/26/Kubelet-Status/"/>
    <url>/2019/08/26/Kubelet-Status/</url>
    
    <content type="html"><![CDATA[<blockquote><p>当 Kubernetes 中 Node 节点出现状态异常的情况下，节点上的 Pod 会被重新调度到其他节点上去，但是有的时候我们会发现节点 Down 掉以后，Pod 并不会立即触发重新调度，这实际上就是和 Kubelet 的状态更新机制密切相关的，Kubernetes 提供了一些参数配置来触发重新调度到node时间，下面我们来分析下 Kubelet 状态更新的基本流程。</p></blockquote><blockquote><h4 id="默认情况下-正常的行为如下"><a href="#默认情况下-正常的行为如下" class="headerlink" title="默认情况下,正常的行为如下:"></a>默认情况下,正常的行为如下:</h4></blockquote><ul><li><code>kubelet</code>定期向<code>apiserver</code>发送其状态,发送周期由<code>--node-status-update-frequency</code>参数指定,默认值是10s</li><li><code>Kubernetes Controller Manager</code>定期的检查<code>kubelet</code>状态,该参数由<code>–-node-monitor-period</code>参数指定,默认值5s</li><li><code>Kubernetes Controller Manager</code>对<code>kubelet</code>状态更新有一个容忍值,如果<code>kubelet</code>在这个容忍值内更新状态,那么<code>Kubernetes Controller Manager</code>认为<code>kubelet</code>状态有效.容忍值参数由<code>--node-monitor-grace-period</code>指定,默认值为40s<br><code>Kubernetes Controller Manager</code>和<code>kubelet</code>异步工作,这意味着延迟可能包含网络延迟,API Server延迟,etcd延迟,节点负载等引起的延迟,所以如果设置<code>--node-status-update-frequency</code>参数为5秒时,那么当etcd无法将数据提交到仲裁节点时,它可能会在etcd中等待6-7秒甚至更长才能被呈现</li></ul><h3 id="失败"><a href="#失败" class="headerlink" title="失败"></a>失败</h3><blockquote><ul><li><code>kubelet</code>将尝试发送<code>nodeStatusUpdateRetry</code> ,当前<code>nodeStatusUpdateRetry</code>在kubelet.go.中设置为5</li></ul></blockquote><ul><li><code>kubelet</code>将使用 <code>tryUpdateNodeStatus</code>方法发送状态.<code>kubelet</code>使用golang的http.Client()方法,但是没指定超时时长,因此当在<code>apiserver</code>过载时TCP连接会造成一些问题.</li><li>因此,这里尝试使用<code>nodeStatusUpdateRetry</code> 乘以 <code>--node-status-update-frequency</code>的值设置node状态.</li><li>在同时<code>Kubernetes Controller Manager</code>每隔<code>--node-monitor-period</code>设置的时间检查<code>nodeStatusUpdateRetry</code>设置的次数,经过<code>--node-monitor-grace-period</code>设定的时间将认为node不健康,通过在 <code>kube-apiserver</code>组件中设置<code>--default-not-ready-toleration-seconds</code> &amp; <code>--default-unreachable-toleration-seconds</code> 这两个默认的容忍参数。<code>Kubernetes</code> 会自动为每个 <code>pod</code> 添加一个默认容忍配置，默认容忍限制为60s。在添加这两个参数后需要重新部署所有 <code>Pod</code> 以确保将容忍添加到所有 <code>Pod</code> 中。除了使用<code>kube-apiserver</code>的参数使其对所有 <code>pod</code> 进行全局更改之外你还可以指定为 <code>pod</code> 设置忍驱逐时间 <a href="https://system51.github.io/2019/08/23/kuburnetes-Taints-Tolerations/">详情请看点击</a>。</li><li>同时<code>Kube-Proxy</code> watch <code>API server</code>,一旦pod被删除,那么集群中所有<code>kube-proxy</code>将更新其节点上的iptables规则,移除相应的<code>endpoint</code>,这使得请求无法被发送到故障节点的pod</li></ul><h3 id="针对不同案例的建议"><a href="#针对不同案例的建议" class="headerlink" title="针对不同案例的建议"></a>针对不同案例的建议</h3><h4 id="社区默认的配置（参数所属组件）"><a href="#社区默认的配置（参数所属组件）" class="headerlink" title="社区默认的配置（参数所属组件）"></a>社区默认的配置（参数所属组件）</h4><table><thead><tr><th>参数</th><th>值</th><th>组件</th></tr></thead><tbody><tr><td><code>--node-status-update-frequency</code></td><td>10s</td><td><code>kubelet</code></td></tr><tr><td><code>--node-monitor-period</code></td><td>5s</td><td><code>controller manager</code></td></tr><tr><td><code>--node-monitor-grace-period</code></td><td>40s</td><td><code>controller manager</code></td></tr></tbody></table><h4 id="快速更新和快速响应"><a href="#快速更新和快速响应" class="headerlink" title="快速更新和快速响应"></a>快速更新和快速响应</h4><table><thead><tr><th>参数</th><th>值</th><th>组件</th></tr></thead><tbody><tr><td><code>--node-status-update-frequency</code></td><td>4s</td><td><code>kubelet</code></td></tr><tr><td><code>--node-monitor-period</code></td><td>2s</td><td><code>controller manager</code></td></tr><tr><td><code>--node-monitor-grace-period</code></td><td>20s</td><td><code>controller manager</code></td></tr></tbody></table><blockquote><p>如果<code>--node-status-update-frequency</code>设置为4s（默认为10s）。 <code>--node-monitor-period</code>设置为2s（默认为5s）。<code>--node-monitor-grace-period</code>设置20s（默认为40s）。<code>--default-not-ready-toleration-seconds</code> &amp; <code>--default-unreachable-toleration-seconds</code> 设置为30（默认为 300 秒）。请注意，这两个值应该是表示秒数的整数。</p></blockquote><blockquote><p>在这种情况下，Pod 将在 50s 后被驱逐，因为节点将在 20s 后被视为Down掉了，<code>--default-not-ready-toleration-seconds</code> 或者 <code>--default-unreachable-toleration-seconds</code> 在 30s 之后开始删除Pod。但是，这种情况会给 etcd 产生很大的开销，因为每个节点都会每 2s 更新一次状态。</p></blockquote><blockquote><p>如果环境有1000个节点，那么每分钟将有15000次节点更新操作，这可能需要大型 etcd 容器甚至是 etcd 的专用节点。</p></blockquote><blockquote><p>如果我们计算尝试次数，则除法将给出5，但实际上每次尝试的 nodeStatusUpdateRetry 尝试将从3到5。 由于所有组件的延迟，尝试总次数将在15到25之间变化。</p></blockquote><h4 id="中等更新和平均响应"><a href="#中等更新和平均响应" class="headerlink" title="中等更新和平均响应"></a>中等更新和平均响应</h4><table><thead><tr><th>参数</th><th>值</th><th>组件</th></tr></thead><tbody><tr><td><code>--node-status-update-frequency</code></td><td>20s</td><td><code>kubelet</code></td></tr><tr><td><code>--node-monitor-period</code></td><td>5s</td><td><code>controller manager</code></td></tr><tr><td><code>--node-monitor-grace-period</code></td><td>2m</td><td><code>controller manager</code></td></tr></tbody></table><blockquote><p>我们设置<code>--node-status-update-frequency</code>设置为20s。<code>--node-monitor-grace-period</code>设置为2m，并将 <code>--default-not-ready-toleration-seconds</code> 和 <code>--default-unreachable-toleration-seconds</code>设置为60s。这种场景下会 20s 更新一次 node 状态，<code>Kubernetes Controller Manager</code> 对 <code>kubelet</code>检测，在2分钟内进行 6 * 5 &#x3D; 30 次尝试如果没有更新节点状态。1m后它将驱逐所有 pod。那么将在一分钟后驱逐所有pod总共耗时3分钟。</p></blockquote><blockquote><p>此处情况适用于中等环境,因为1000个节点每分钟需要对etcd进行3000次更新。</p></blockquote><h4 id="低更新和慢响应"><a href="#低更新和慢响应" class="headerlink" title="低更新和慢响应"></a>低更新和慢响应</h4><table><thead><tr><th>参数</th><th>值</th><th>组件</th></tr></thead><tbody><tr><td><code>--node-status-update-frequency</code></td><td>1m</td><td><code>kubelet</code></td></tr><tr><td><code>--node-monitor-period</code></td><td>5s</td><td><code>controller manager</code></td></tr><tr><td><code>--node-monitor-grace-period</code></td><td>5m</td><td><code>controller manager</code></td></tr></tbody></table><blockquote><p>如果<code>--node-status-update-frequency</code>设置为1m。 <code>--node-monitor-grace-period</code>设置为5m，并将 <code>--default-not-ready-toleration-seconds</code> 和 <code>--default-unreachable-toleration-seconds</code>设置为60s。在这种情况下<code>kubelet</code>将在每分钟上报状态，5分钟内<code>kubelet</code>没有更新节点状态<code>Kubernetes Controller Manager</code>将节点设置为不健康，在一分钟后开始驱逐所有pod总共耗时6分钟。</p></blockquote><h4 id="计算公式"><a href="#计算公式" class="headerlink" title="计算公式"></a>计算公式</h4><p><code>--node-monitor-grace-period</code> + <code>--default-not-ready-toleration-seconds</code> 或 <code>--default-unreachable-toleration-seconds</code> &#x3D; 驱逐时间</p><blockquote><p>可以有不同的组合，例如快速更新和慢反应以满足特定情况。<br>原文链接: <a href="https://github.com/kubernetes-sigs/kubespray/blob/master/docs/kubernetes-reliability.md">https://github.com/kubernetes-sigs/kubespray/blob/master/docs/kubernetes-reliability.md</a></p></blockquote>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>kube-apiserver 高可用方案</title>
    <link href="/2019/08/26/Kubernetes-kube-apiserver-ha/"/>
    <url>/2019/08/26/Kubernetes-kube-apiserver-ha/</url>
    
    <content type="html"><![CDATA[<blockquote><p>Kubernetes的管理层服务包括kube-scheduler和kube-controller-manager。kube-scheduer和kube-controller-manager使用一主多从的高可用方案，在同一时刻只允许一个服务处理具体的任务。Kubernetes中实现了一套简单的选主逻辑，依赖Etcd实现scheduler和controller-manager的选主功能。</p></blockquote><blockquote><p>如果scheduler和controller-manager在启动的时候设置了<code>--leader-elect=true</code>参数，启动后将通过竞争选举机制产生一个 leader 节点，只有在获取leader节点身份后才可以执行具体的业务逻辑。它们分别会在Etcd中创建kube-scheduler和kube-controller-manager的endpoint，endpoint的信息中记录了当前的leader节点信息，以及记录的上次更新时间。leader节点会定期更新endpoint的信息，维护自己的leader身份。每个从节点的服务都会定期检查endpoint的信息，如果endpoint的信息在时间范围内没有更新，它们会尝试更新自己为leader节点。scheduler服务以及controller-manager服务之间不会进行通信，利用Etcd的强一致性，能够保证在分布式高并发情况下leader节点的全局唯一性。</p></blockquote><blockquote><p>当集群中的leader节点服务异常后，其它节点的服务会尝试更新自身为leader节点，当有多个节点同时更新endpoint时，由Etcd保证只有一个服务的更新请求能够成功。通过这种机制sheduler和controller-manager可以保证在leader节点宕机后其它的节点可以顺利选主，保证服务故障后快速恢复。</p></blockquote><blockquote><p>当集群中的网络出现故障时对服务的选主影响不是很大，因为scheduler和controller-manager是依赖Etcd进行选主的，在网络故障后，可以和Etcd通信的主机依然可以按照之前的逻辑进行选主，就算集群被切分，Etcd也可以保证同一时刻只有一个节点的服务处于leader状态。</p></blockquote><h3 id="查看kube-controller-manager当前的-leader"><a href="#查看kube-controller-manager当前的-leader" class="headerlink" title="查看kube-controller-manager当前的 leader"></a>查看kube-controller-manager当前的 leader</h3><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs makefile">[root@k8s-m1 ~]<span class="hljs-comment"># kubectl get endpoints kube-controller-manager --namespace=kube-system  -o yaml</span><br><span class="hljs-section">apiVersion: v1</span><br><span class="hljs-section">kind: Endpoints</span><br><span class="hljs-section">metadata:</span><br>  annotations:<br>    control-plane.alpha.kubernetes.io/leader: &#x27;&#123;<span class="hljs-string">&quot;holderIdentity&quot;</span>:<span class="hljs-string">&quot;m7-autocv-gpu02_084534e2-6cc4-11e8-a418-5254001f5b65&quot;</span>,<span class="hljs-string">&quot;leaseDurationSeconds&quot;</span>:15,<span class="hljs-string">&quot;acquireTime&quot;</span>:<span class="hljs-string">&quot;2018-06-10T15:40:33Z&quot;</span>,<span class="hljs-string">&quot;renewTime&quot;</span>:<span class="hljs-string">&quot;2018-06-10T16:19:08Z&quot;</span>,<span class="hljs-string">&quot;leaderTransitions&quot;</span>:12&#125;&#x27;<br>  creationTimestamp: 2018-06-10T13:59:42Z<br>  name: kube-controller-manager<br>  namespace: kube-system<br>  resourceVersion: <span class="hljs-string">&quot;4540&quot;</span><br>  selfLink: /api/v1/namespaces/kube-system/endpoints/kube-controller-manager<br>  uid: 862cc048-6cb6-11e8-96fa-525400ba84c6<br><br><span class="hljs-comment"># 可见，当前的 leader 为 m7-autocv-gpu02 节点。</span><br></code></pre></td></tr></table></figure><h3 id="查看kube-scheduler当前的-leader"><a href="#查看kube-scheduler当前的-leader" class="headerlink" title="查看kube-scheduler当前的 leader"></a>查看kube-scheduler当前的 leader</h3><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs makefile">[root@k8s-m1 ~]<span class="hljs-comment"># kubectl get endpoints kube-scheduler --namespace=kube-system  -o yaml</span><br><span class="hljs-section">apiVersion: v1</span><br><span class="hljs-section">kind: Endpoints</span><br><span class="hljs-section">metadata:</span><br>  annotations:<br>    control-plane.alpha.kubernetes.io/leader: &#x27;&#123;<span class="hljs-string">&quot;holderIdentity&quot;</span>:<span class="hljs-string">&quot;m7-autocv-gpu01_7295c239-f2e9-11e8-8b5d-0cc47a2afc6a&quot;</span>,<span class="hljs-string">&quot;leaseDurationSeconds&quot;</span>:15,<span class="hljs-string">&quot;acquireTime&quot;</span>:<span class="hljs-string">&quot;2018-11-28T08:41:50Z&quot;</span>,<span class="hljs-string">&quot;renewTime&quot;</span>:<span class="hljs-string">&quot;2018-11-28T08:42:08Z&quot;</span>,<span class="hljs-string">&quot;leaderTransitions&quot;</span>:0&#125;&#x27;<br>  creationTimestamp: 2018-11-28T08:41:50Z<br>  name: kube-scheduler<br>  namespace: kube-system<br>  resourceVersion: <span class="hljs-string">&quot;1013&quot;</span><br>  selfLink: /api/v1/namespaces/kube-system/endpoints/kube-scheduler<br>  uid: 73305545-f2e9-11e8-b65b-0cc47a2afc6a<br><br><span class="hljs-comment"># 可见，当前的 leader 为 m7-autocv-gpu01 节点。</span><br></code></pre></td></tr></table></figure><blockquote><p>随便找一个或两个 master 节点，停掉<code>kube-scheduler</code>或者<code>kube-controller-manager</code>服务，看其它节点是否获取了 leader 权限（systemd 日志）</p></blockquote><h3 id="kube-apiserver高可用"><a href="#kube-apiserver高可用" class="headerlink" title="kube-apiserver高可用"></a>kube-apiserver高可用</h3><blockquote><p>上面我们说到了kube-controller-manager和kube-scheduler的工作机制，现在我们进入正题讲讲如何做kube-apiserver高可用，这里我采用haproxy+keepalived的方式来做高可用（注意：我们在生成证书的时候一定要把VIP地址加入进证书）</p></blockquote><p><img src="/images/kube-apiserver-ha-1.png" alt="kube-apiserver"></p><h3 id="1-1、三台master都安装haproxy-keepalived"><a href="#1-1、三台master都安装haproxy-keepalived" class="headerlink" title="1.1、三台master都安装haproxy+keepalived"></a>1.1、三台master都安装haproxy+keepalived</h3><h4 id="haproxy配置文件"><a href="#haproxy配置文件" class="headerlink" title="haproxy配置文件"></a>haproxy配置文件</h4><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs smali">global<br>  maxconn  2000<br>  ulimit-n  16384<br>  log  127.0.0.1 local0 err<br>  stats timeout 30s<br><br>defaults<br>  log global<br>  mode  http<br>  option  httplog<br>  timeout connect 5000<br>  timeout client  50000<br>  timeout server  50000<br>  timeout http-request 15s<br>  timeout http-keep-alive 15s<br><br>frontend<span class="hljs-built_in"> monitor-in</span><br><span class="hljs-built_in"></span>  bind *:33305<br>  mode http<br>  option httplog<br> <span class="hljs-built_in"> monitor-uri </span>/monitor<br><br>listen stats<br>  bind    *:8006<br>  mode    http<br>  stats   enable<br>  stats   hide-version<br>  stats   uri       /stats<br>  stats   refresh   30s<br>  stats   realm     Haproxy\ Statistics<br>  stats   auth      admin:admin<br><br>frontend k8s-api<br>  bind 0.0.0.0:8443<br>  bind 127.0.0.1:8443<br>  mode tcp<br>  option tcplog<br>  tcp-request inspect-delay 5s<br>  default_backend k8s-api<br><br>backend k8s-api<br>  mode tcp<br>  option tcplog<br>  option httpchk GET /healthz<br>  http-check expect string ok<br>  balance roundrobin<br>  default-server inter 10s downinter 5s rise 2 fall 2 slowstart 60s maxconn 250 maxqueue 256 weight 100<br>    server  api1  192.168.0.200:6443 <span class="hljs-built_in"> check </span>check-ssl verify none<br>    server  api2  192.168.0.201:6443 <span class="hljs-built_in"> check </span>check-ssl verify none<br>    server  api3  192.168.0.202:6443 <span class="hljs-built_in"> check </span>check-ssl verify none<br></code></pre></td></tr></table></figure><h4 id="keepalived配置文件"><a href="#keepalived配置文件" class="headerlink" title="keepalived配置文件"></a>keepalived配置文件</h4><figure class="highlight pf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs pf">global_defs &#123;<br>    enable_script_security<br>&#125;<br><br>vrrp_script haproxy-check &#123;<br>    <span class="hljs-keyword">user</span> root<br>    script <span class="hljs-string">&quot;/bin/bash /etc/keepalived/check_haproxy.sh&quot;</span><br>    interval <span class="hljs-number">3</span><br>    weight -<span class="hljs-number">2</span><br>    fall <span class="hljs-number">10</span><br>    rise <span class="hljs-number">2</span><br>&#125;<br><br>vrrp_instance haproxy-vip &#123;<br>    <span class="hljs-keyword">state</span> BACKUP<br>    priority <span class="hljs-number">101</span><br>    interface eth0<br>    virtual_router_id <span class="hljs-number">47</span><br>    advert_int <span class="hljs-number">3</span><br>    unicast_src_ip <span class="hljs-number">192.168</span>.<span class="hljs-number">0.200</span>           <span class="hljs-comment"># 本机IP</span><br>    unicast_peer &#123;<br>        <span class="hljs-number">192.168</span>.<span class="hljs-number">0.201</span>      <span class="hljs-comment"># 对端IP</span><br>        <span class="hljs-number">192.168</span>.<span class="hljs-number">0.202</span>      <span class="hljs-comment"># 对端IP</span><br>    &#125;<br><br>    virtual_ipaddress &#123;<br>        <span class="hljs-number">192.168</span>.<span class="hljs-number">0.250</span>/<span class="hljs-number">24</span>   <span class="hljs-comment"># VIP地址</span><br>    &#125;<br><br>    track_script &#123;<br>        haproxy-check<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>keeaplived这里需要注意，默认keepalived是采用的组播方式，加上unicast_peer参数后是单播方式，三台keepalived配置文件不一样unicast_src_ipc参数写当前节点IP，unicast_peer参数写另外两个节点IP地址。其他的权重和BACKUP都保持一致</p></blockquote><h4 id="keepalived-健康检查脚本"><a href="#keepalived-健康检查脚本" class="headerlink" title="keepalived 健康检查脚本"></a>keepalived 健康检查脚本</h4><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">cat</span> &lt;&lt;<span class="hljs-string">&#x27;EOF&#x27;</span>&gt; /etc/keepalived/ha_check.sh<br><span class="hljs-comment">#!/bin/sh</span><br>VIRTUAL_IP=<span class="hljs-number">192.168.0.250</span><br><br><span class="hljs-literal">error</span>Exit() &#123;<br>    <span class="hljs-attribute">echo</span> <span class="hljs-string">&quot;*** $*&quot;</span> <span class="hljs-number">1</span>&gt;&amp;<span class="hljs-number">2</span><br>    exit <span class="hljs-number">1</span><br>&#125;<br><br>if ip addr | grep -q <span class="hljs-variable">$VIRTUAL_IP</span> ; <span class="hljs-attribute">then</span><br>    curl -s --max-time <span class="hljs-number">2</span> --insecure https://<span class="hljs-variable">$&#123;VIRTUAL_IP&#125;</span>:8443/ -o /dev/null || <span class="hljs-literal">error</span>Exit <span class="hljs-string">&quot;Error GET https://<span class="hljs-variable">$&#123;VIRTUAL_IP&#125;</span>:8443/&quot;</span><br>fi<br>EOF<br></code></pre></td></tr></table></figure><blockquote><p>到此kube-apiserver高可用就搭建完成，在所有连接apiserver中的地址都填写这个VIP地址尤其是kubectl客服端中连接kubernetes集群的地址。</p></blockquote>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Kubernetes TLS bootstrapping 那点事</title>
    <link href="/2019/08/26/Kubernetes-TLS-bootstrapping/"/>
    <url>/2019/08/26/Kubernetes-TLS-bootstrapping/</url>
    
    <content type="html"><![CDATA[<h3 id="一、TLS-bootstrapping-简介"><a href="#一、TLS-bootstrapping-简介" class="headerlink" title="一、TLS bootstrapping 简介"></a>一、TLS bootstrapping 简介</h3><blockquote><p>当集群开启了 TLS 认证后，每个节点的 kubelet 组件都要使用由 apiserver 使用的 CA 签发的有效证书才能与 apiserver 通讯；此时如果节点多起来，为每个节点单独签署证书将是一件非常繁琐的事情；TLS bootstrapping 功能就是让 kubelet 先使用一个预定的低权限用户连接到 apiserver，然后向 apiserver 申请证书，kubelet 的证书由 apiserver 动态签署；在配合 RBAC 授权模型下的工作流程大致如下所示</p></blockquote><p><img src="/images/bootstarp-1.png" alt="bootstarp-1"></p><h3 id="二、TLS-bootstrapping-相关术语"><a href="#二、TLS-bootstrapping-相关术语" class="headerlink" title="二、TLS bootstrapping 相关术语"></a>二、TLS bootstrapping 相关术语</h3><h4 id="2-1、kubelet"><a href="#2-1、kubelet" class="headerlink" title="2.1、kubelet"></a>2.1、kubelet</h4><blockquote><p>kubelet 组件在工作时，采用主动的查询机制，即定期请求 apiserver 获取自己所应当处理的任务，如哪些 pod 分配到了自己身上，从而去处理这些任务；同时 kubelet 自己还会暴露出两个本身 api 的端口，用于将自己本身的私有 api 暴露出去，这两个端口分别是 10250 与 10255；对于 10250 端口，kubelet 会在其上采用 TLS 加密以提供适当的鉴权功能；对于 10255 端口，kubelet 会以只读形式暴露组件本身的私有 api，并且不做鉴权处理<br>总结一下，就是说 kubelet 上实际上有两个地方用到证书，一个是用于与 API server 通讯所用到的证书，另一个是 kubelet 的 10250 私有 api 端口需要用到的证书</p></blockquote><h4 id="2-2、CSR-请求类型"><a href="#2-2、CSR-请求类型" class="headerlink" title="2.2、CSR 请求类型"></a>2.2、CSR 请求类型</h4><blockquote><p>kubelet 发起的 CSR 请求都是由 <code>kube-controller-manager</code> 来做实际签署的，对于 <code>kube-controller-manager</code> 来说，TLS bootstrapping 下 kubelet 发起的 CSR 请求大致分为以下两种</p></blockquote><ul><li>nodeclient: kubelet 首次创建新证书以 <code>O=system:bootstrappers</code> 和 <code>CN=system:bootstrappers</code> 形式发起的 CSR 请求</li><li>selfnodeclient: kubelet client 更新自己的证书以 <code>O=system:nodes</code> 和 <code>CN=system:nodes</code> 形式发起的 CSR 请求</li></ul><blockquote><p>大白话加自己测试得出的结果: nodeclient 类型的 CSR 仅在第一次启动时会产生，selfnodeclient 类型的 CSR 请求实际上就是 kubelet 更新自己作为 client 跟 apiserver 通讯时使用的证书产生的。</p></blockquote><h3 id="三、TLS-bootstrapping-具体引导过程"><a href="#三、TLS-bootstrapping-具体引导过程" class="headerlink" title="三、TLS bootstrapping 具体引导过程"></a>三、TLS bootstrapping 具体引导过程</h3><h4 id="3-1、Kubernetes-TLS-与-RBAC-认证"><a href="#3-1、Kubernetes-TLS-与-RBAC-认证" class="headerlink" title="3.1、Kubernetes TLS 与 RBAC 认证"></a>3.1、Kubernetes TLS 与 RBAC 认证</h4><blockquote><p>在说具体的引导过程之前先谈一下 TLS 和 RBAC，因为这两个事不整明白下面的都不用谈；</p></blockquote><ul><li>TLS 作用<blockquote><p>众所周知 TLS 的作用就是对通讯加密，防止中间人窃听；同时如果证书不信任的话根本就无法与 apiserver 建立连接，更不用提有没有权限向 apiserver 请求指定内容</p></blockquote></li><li>RBAC 作用<blockquote><p>当 TLS 解决了通讯问题后，那么权限问题就应由 RBAC 解决(可以使用其他权限模型，如 ABAC)；RBAC 中规定了一个用户或者用户组(subject)具有请求哪些 api 的权限；在配合 TLS 加密的时候，实际上 apiserver 读取客户端证书的 CN 字段作为用户名，读取 O 字段作为用户组</p></blockquote></li></ul><blockquote><p>从以上两点上可以总结出两点: 第一，想要与 apiserver 通讯就必须采用由 apiserver CA 签发的证书，这样才能形成信任关系，建立 TLS 连接；第二，可以通过证书的 CN、O 字段来提供 RBAC 所需的用户与用户组</p></blockquote><h4 id="3-2、kubelet-首次启动流程"><a href="#3-2、kubelet-首次启动流程" class="headerlink" title="3.2、kubelet 首次启动流程"></a>3.2、kubelet 首次启动流程</h4><blockquote><p>看完上面的介绍，不知道有没有人想过，既然 TLS bootstrapping 功能是让 kubelet 组件去 apiserver 申请证书，然后用于连接 apiserver；那么第一次启动时没有证书如何连接 apiserver ?</p></blockquote><ul><li>kubelet启动</li><li>kubelet看到它没有kubeconfig文件</li><li>kubelet搜索并查找bootstrap-kubeconfig文件</li><li>kubelet读取它的bootstrap文件，检索API server的URL和一个低权限的“token”</li><li>kubelet连接到API服务器，使用token进行身份验证</li><li>kubelet现在具有创建和检索证书签名请求（CSR）的有限凭据</li><li>kubelet为自己创建了一个CSR</li><li>CSR通过以下两种方式之一获得批准：<ul><li>如果已配置，kube-controller-manager将自动批准CSR</li><li>如果已配置，则外部流程（可能是人员）使用Kubernetes API或通过批准CSR kubectl</li></ul></li><li>为kubelet创建证书</li><li>证书颁发给kubelet</li><li>kubelet检索证书</li><li>kubelet 使用密钥和签名证书创建一个正确的kubeconfig文件</li><li>kubelet开始正常运作</li><li>可选：如果已配置，则当证书接近到期时，kubelet会自动请求更新证书</li></ul><blockquote><p>在有些用户首次启动时，可能与遇到 kubelet 报 401 无权访问 apiserver 的错误；kubelet 通过bootstrap.kubeconfig 中的预设用户 Token 声明了自己的身份，然后创建 CSR 请求；但是不要忘记这个“用户和组”在我们不处理的情况下他没任何权限的，包括创建 CSR 请求；所以需要如下命令创建一个 ClusterRoleBinding，将预设“用户”或“组”与内置的 ClusterRole system:node-bootstrapper 绑定到一起，使其能够发起 CSR 请求（以下是用“组”做绑定）。</p></blockquote><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs crmsh"><span class="hljs-comment"># 组</span><br>kubectl create clusterrolebinding kubeadm:kubelet-bootstrap \<br>        --clusterrole system:<span class="hljs-keyword">node</span><span class="hljs-title">-bootstrapper</span> --<span class="hljs-keyword">group</span> <span class="hljs-title">system</span>:bootstrappers<br></code></pre></td></tr></table></figure><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs gauss"><span class="hljs-meta"># 用户</span><br>kubectl <span class="hljs-keyword">create</span> clusterrolebinding kubelet-bootstrap \<br>  --clusterrole=<span class="hljs-keyword">system</span>:node-bootstrapper \<br>  --user=<span class="hljs-keyword">system</span>:bootstrap:&lt;<span class="hljs-built_in">token</span> id&gt;<br></code></pre></td></tr></table></figure><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc"># 使用kubeadm管理token（在高版本中采用Kubeadm管理token可以不用创建自动批准csr步骤，因为默认已经为这个“组”创建好了自动批准csr请求的权限,接下来只需要生成bootstarp文件即可。）<br>kubeadm token create --groups system:bootstrappers:kubeadm:default-node-token<br><br><br>[root@k8s-m1 kubernetes]# kubeadm token list<br>TOKEN                     TTL         EXPIRES   USAGES                   DESCRIPTION                                                EXTRA GROUPS<br>0c15sx.z41i3lfabbizbqb5   23h         2020-09-16T08:56:30+08:00   authentication,signing   &lt;none&gt;                                                     system:bootstrappers:kubeadm:default-node-token<br><br><br>[root@k8s-m1 kubernetes]# kubectl  get secret -n kube-system<br>NAME                                             TYPE                                  DATA   AGE<br><span class="hljs-code">.....</span><br><span class="hljs-code">bootstrap-token-0c15sx                           bootstrap.kubernetes.io/token         6      19m</span><br><span class="hljs-code">.....</span><br></code></pre></td></tr></table></figure><h4 id="3-3、手动签发证书"><a href="#3-3、手动签发证书" class="headerlink" title="3.3、手动签发证书"></a>3.3、手动签发证书</h4><blockquote><p>在 kubelet 首次启动后，如果用户 Token 没问题，并且 RBAC 也做了相应的设置，那么此时在集群内应该能看到 kubelet 发起的 CSR 请求</p></blockquote><p><img src="/images/bootstarp-2.png" alt="bootstarp-2"></p><blockquote><p>出现 CSR 请求后，可以使用 kubectl 手动签发(允许) kubelet 的证书</p></blockquote><p><img src="/images/bootstarp-3.png" alt="bootstarp-3"></p><blockquote><p>当成功签发证书后，目标节点的 kubelet 会将证书写入到 –cert-dir&#x3D; 选项指定的目录中；注意此时如果不做其他设置应当生成四个文件</p></blockquote><p><img src="/images/bootstarp-4.png" alt="bootstarp-4"></p><blockquote><p>而 kubelet 与 apiserver 通讯所使用的证书为 kubelet-client.crt，剩下的 kubelet.crt 将会被用于 kubelet server(10250) 做鉴权使用；注意，此时 kubelet.crt 这个证书是个独立于 apiserver CA 的自签 CA，并且删除后 kubelet 组件会重新生成它</p></blockquote><h3 id="四、证书文件作用"><a href="#四、证书文件作用" class="headerlink" title="四、证书文件作用"></a>四、证书文件作用</h3><blockquote><ul><li>kubelet-client.crt<br>该文件在 kubelet 完成 TLS bootstrapping 后生成，此证书是由 controller manager 签署的，此后 kubelet 将会加载该证书，用于与 apiserver 建立 TLS 通讯，同时使用该证书的 CN 字段作为用户名，O 字段作为用户组向 apiserver 发起其他请求</li></ul></blockquote><blockquote><ul><li>kubelet-client-current.pem<br>这是一个软连接文件，会在证书总有效期的 70%~90% 的时间内发起续期请求，请求被批准后会生成一个 kubelet-client-时间戳.pem；kubelet-client-current.pem 文件则始终软连接到最新的真实证书文件，除首次启动外，kubelet 一直会使用这个证书同 apiserver 通讯</li></ul></blockquote><blockquote><ul><li>kubelet.crt<br>该文件在 kubelet 完成 TLS bootstrapping 后并且没有配置 <code>--rotate-server-certificates</code> 时才会生成；这种情况下该文件为一个独立于 apiserver CA 的自签 CA 证书，有效期为 1 年；被用作 kubelet 10250 api 端口</li></ul></blockquote><blockquote><ul><li>kubelet-server.crt<br>该文件在 kubelet 完成 TLS bootstrapping 后并且配置了 <code>--rotate-server-certificates</code> 时才会生成；这种情况下该证书由 apiserver CA 签署，默认有效期同样是 1 年，被用作 kubelet 10250 api 端口鉴权</li></ul></blockquote><blockquote><ul><li>kubelet-server-current.pem<br>同样是一个软连接文件，当 kubelet 配置了 <code>--rotate-server-certificates</code> 选项后，会在证书总有效期的 70%~90% 的时间内发起续期请求，请求被批准后会生成一个 kubelet-server-时间戳.pem；kubelet-server-current.pem 文件则始终软连接到最新的真实证书文件，该文件将会一直被用于 kubelet 10250 api 端口鉴权</li></ul></blockquote><h3 id="五、使用-Bootstrap-Token"><a href="#五、使用-Bootstrap-Token" class="headerlink" title="五、使用 Bootstrap Token"></a>五、使用 Bootstrap Token</h3><h4 id="5-1、创建-Bootstrap-Token"><a href="#5-1、创建-Bootstrap-Token" class="headerlink" title="5.1、创建 Bootstrap Token"></a>5.1、创建 Bootstrap Token</h4><blockquote><p>既然整个功能都时刻强调这个 Token，那么第一步肯定是生成一个 token，生成方式如下:</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">➜  ~ <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;<span class="hljs-subst">$(head -c 6 /dev/urandom | md5sum | head -c 6)</span>&quot;</span>.<span class="hljs-string">&quot;<span class="hljs-subst">$(head -c 16 /dev/urandom | md5sum | head -c 16)</span>&quot;</span><br>47f392.d22d04e89a65eb22<br></code></pre></td></tr></table></figure><blockquote><p>这个 <code>47f392.d22d04e89a65eb22</code> 就是生成的 <code>Bootstrap Token</code>，保存好 token，因为后续要用；关于这个 token 解释如下:<br>Token 必须满足 <code>[a-z0-9]&#123;6&#125;\.[a-z0-9]&#123;16&#125;</code> 格式；以<code>.</code>分割，前面的部分被称作 Token ID，Token ID 并不是 “机密信息”，它可以暴露出去；相对的后面的部分称为 Token Secret，它应该是保密的。</p></blockquote><h4 id="5-2、创建-Bootstrap-Token-Secret"><a href="#5-2、创建-Bootstrap-Token-Secret" class="headerlink" title="5.2、创建 Bootstrap Token Secret"></a>5.2、创建 Bootstrap Token Secret</h4><blockquote><p>对于 Kubernetes 来说 Bootstrap Token Secret 也仅仅是一个特殊的 Secret 而已；对于这个特殊的 Secret 样例 yaml 配置如下:</p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Secret</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-comment"># Name MUST be of form &quot;bootstrap-token-&lt;token id&gt;&quot;</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">bootstrap-token-07401b</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">kube-system</span><br><br><span class="hljs-comment"># Type MUST be &#x27;bootstrap.kubernetes.io/token&#x27;</span><br><span class="hljs-attr">type:</span> <span class="hljs-string">bootstrap.kubernetes.io/token</span><br><span class="hljs-attr">stringData:</span><br>  <span class="hljs-comment"># Human readable description. Optional.</span><br>  <span class="hljs-attr">description:</span> <span class="hljs-string">&quot;The default bootstrap token generated by &#x27;kubeadm init&#x27;.&quot;</span><br><br>  <span class="hljs-comment"># Token ID and secret. Required.</span><br>  <span class="hljs-attr">token-id:</span> <span class="hljs-string">47f392</span><br>  <span class="hljs-attr">token-secret:</span> <span class="hljs-string">d22d04e89a65eb22</span><br><br>  <span class="hljs-comment"># Expiration. Optional.</span><br>  <span class="hljs-attr">expiration:</span> <span class="hljs-number">2018-09-10T00:00:11Z</span><br><br>  <span class="hljs-comment"># Allowed usages.</span><br>  <span class="hljs-attr">usage-bootstrap-authentication:</span> <span class="hljs-string">&quot;true&quot;</span><br>  <span class="hljs-attr">usage-bootstrap-signing:</span> <span class="hljs-string">&quot;true&quot;</span><br><br>  <span class="hljs-comment"># Extra groups to authenticate the token as. Must start with &quot;system:bootstrappers:&quot;</span><br>  <span class="hljs-attr">auth-extra-groups:</span> <span class="hljs-string">system:bootstrappers:worker,system:bootstrappers:ingress</span><br></code></pre></td></tr></table></figure><blockquote><h4 id="需要注意几点"><a href="#需要注意几点" class="headerlink" title="需要注意几点:"></a>需要注意几点:</h4></blockquote><ul><li>作为<code>Bootstrap Token Secret</code> 的<code>type</code>必须为<code>bootstrap.kubernetes.io/token</code>，name 必须为<code>bootstrap-token-&lt;token id&gt;</code>(Token ID 就是上一步创建的 Token 前一部分)</li><li><code>usage-bootstrap-authentication</code> 表示令牌可以用于 API 服务器的认证。认证器会以 <code>system:bootstrap:&lt;Token ID&gt;</code> 认证。它被包含在 <code>system:bootstrappers</code> 组中。 命名和组是故意受限制的，以防止用户在启动引导后再使用这些令牌。</li><li><code>usage-bootstrap-signing</code> 表示令牌应该被用于 <code>cluster-info</code> ConfigMap 的签名</li><li><code>expiration</code> 字段是可选的，如果设置则 Secret 到期后将由 Controller Manager 中的 tokencleaner 自动清理</li><li><code>auth-extra-groups</code> 是可选的，令牌的扩展认证组，组必须以 <code>system:bootstrappers:</code> 开头。在1.16后可以设置<code>system:bootstrappers:kubeadm:default-node-token</code>组，后面就不需要创建自动批准csr相关的操作。</li></ul><blockquote><p>最后使用 <code>kubectl create -f bootstrap.secret.yaml</code> 创建即可</p></blockquote><h4 id="5-3、创建-ClusterRoleBinding-将-ClusterRole-绑定到适当的用户组，以完成自动批准相关-CSR-请求"><a href="#5-3、创建-ClusterRoleBinding-将-ClusterRole-绑定到适当的用户组，以完成自动批准相关-CSR-请求" class="headerlink" title="5.3、创建 ClusterRoleBinding 将 ClusterRole 绑定到适当的用户组，以完成自动批准相关 CSR 请求"></a>5.3、创建 ClusterRoleBinding 将 ClusterRole 绑定到适当的用户组，以完成自动批准相关 CSR 请求</h4><blockquote><p>需要注意的是在使用 Bootstrap Token 进行引导时，Kubelet 组件使用 Token 发起的请求其用户名为 <code>system:bootstrap:&lt;token id&gt;</code>，用户组为 <code>system:bootstrappers</code>；所以我们在创建 ClusterRoleBinding 时要绑定到这个用户或者组上；</p></blockquote><ul><li>允许 system:bootstrappers 组用户创建 CSR 请求</li></ul><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">kubectl create clusterrolebinding kubeadm:kubelet-bootstrap \<br>        --clusterrole system:<span class="hljs-keyword">node</span><span class="hljs-title">-bootstrapper</span> --<span class="hljs-keyword">group</span> <span class="hljs-title">system</span>:bootstrappers<br></code></pre></td></tr></table></figure><ul><li>自动批准 system:bootstrappers 组用户 TLS bootstrapping 首次申请证书的 CSR 请求</li></ul><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext">cat &lt;&lt;EOF | kubectl apply -f -<br><span class="hljs-comment"># Approve all CSRs for the group &quot;system:bootstrappers&quot;</span><br><span class="hljs-attribute">kind</span><span class="hljs-punctuation">:</span> <span class="hljs-string">ClusterRoleBinding</span><br><span class="hljs-attribute">apiVersion</span><span class="hljs-punctuation">:</span> <span class="hljs-string">rbac.authorization.k8s.io/v1</span><br><span class="hljs-attribute">metadata</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">auto-approve-csrs-for-group</span><br><span class="hljs-attribute">subjects</span><span class="hljs-punctuation">:</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">kind: Group</span><br>  <span class="hljs-attribute">name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">system:bootstrappers</span><br>  <span class="hljs-attribute">apiGroup</span><span class="hljs-punctuation">:</span> <span class="hljs-string">rbac.authorization.k8s.io</span><br><span class="hljs-attribute">roleRef</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">kind</span><span class="hljs-punctuation">:</span> <span class="hljs-string">ClusterRole</span><br>  <span class="hljs-attribute">name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">system:certificates.k8s.io:certificatesigningrequests:nodeclient</span><br>  <span class="hljs-attribute">apiGroup</span><span class="hljs-punctuation">:</span> <span class="hljs-string">rbac.authorization.k8s.io</span><br>EOF<br></code></pre></td></tr></table></figure><ul><li>自动批准 system:nodes 组用户更新 kubelet 自身与 apiserver 通讯证书的 CSR 请求</li></ul><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext">cat &lt;&lt;EOF | kubectl apply -f -<br><span class="hljs-comment"># Approve renewal CSRs for the group &quot;system:nodes&quot;</span><br><span class="hljs-attribute">kind</span><span class="hljs-punctuation">:</span> <span class="hljs-string">ClusterRoleBinding</span><br><span class="hljs-attribute">apiVersion</span><span class="hljs-punctuation">:</span> <span class="hljs-string">rbac.authorization.k8s.io/v1</span><br><span class="hljs-attribute">metadata</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">auto-approve-renewals-for-nodes</span><br><span class="hljs-attribute">subjects</span><span class="hljs-punctuation">:</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">kind: Group</span><br>  <span class="hljs-attribute">name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">system:nodes</span><br>  <span class="hljs-attribute">apiGroup</span><span class="hljs-punctuation">:</span> <span class="hljs-string">rbac.authorization.k8s.io</span><br><span class="hljs-attribute">roleRef</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">kind</span><span class="hljs-punctuation">:</span> <span class="hljs-string">ClusterRole</span><br>  <span class="hljs-attribute">name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">system:certificates.k8s.io:certificatesigningrequests:selfnodeclient</span><br>  <span class="hljs-attribute">apiGroup</span><span class="hljs-punctuation">:</span> <span class="hljs-string">rbac.authorization.k8s.io</span><br>EOF<br></code></pre></td></tr></table></figure><h3 id="六、调整-Controller-Manager"><a href="#六、调整-Controller-Manager" class="headerlink" title="六、调整 Controller Manager"></a>六、调整 Controller Manager</h3><blockquote><p>根据官方文档描述，Controller Manager 需要启用 tokencleaner 和 bootstrapsigner</p></blockquote><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[Unit]</span><br><span class="hljs-attr">Description</span>=Kubernetes Controller Manager<br><span class="hljs-attr">Documentation</span>=https://github.com/kubernetes/kubernetes<br><span class="hljs-attr">After</span>=network.target<br><br><span class="hljs-section">[Service]</span><br><span class="hljs-attr">ExecStart</span>=/usr/local/bin/kube-controller-manager <br>  <span class="hljs-attr">--allocate-node-cidrs</span>=<span class="hljs-literal">true</span> <br>  <span class="hljs-attr">--kubeconfig</span>=/etc/kubernetes/controller-manager.conf <br>  <span class="hljs-attr">--authentication-kubeconfig</span>=/etc/kubernetes/controller-manager.conf <br>  <span class="hljs-attr">--authorization-kubeconfig</span>=/etc/kubernetes/controller-manager.conf <br>  <span class="hljs-attr">--client-ca-file</span>=/etc/kubernetes/pki/ca.crt <br>  <span class="hljs-attr">--cluster-signing-cert-file</span>=/etc/kubernetes/pki/ca.crt <br>  <span class="hljs-attr">--cluster-signing-key-file</span>=/etc/kubernetes/pki/ca.key <br>  <span class="hljs-attr">--bind-address</span>=<span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span> <br>  <span class="hljs-attr">--leader-elect</span>=<span class="hljs-literal">true</span> <br>  <span class="hljs-attr">--cluster-cidr</span>=<span class="hljs-number">10.244</span>.<span class="hljs-number">0.0</span>/<span class="hljs-number">16</span> <br>  <span class="hljs-attr">--service-cluster-ip-range</span>=<span class="hljs-number">10.96</span>.<span class="hljs-number">0.0</span>/<span class="hljs-number">12</span> <br>  <span class="hljs-attr">--requestheader-client-ca-file</span>=/etc/kubernetes/pki/front-proxy-ca.crt <br>  <span class="hljs-attr">--service-account-private-key-file</span>=/etc/kubernetes/pki/sa.key <br>  <span class="hljs-attr">--root-ca-file</span>=/etc/kubernetes/pki/ca.crt <br>  <span class="hljs-attr">--use-service-account-credentials</span>=<span class="hljs-literal">true</span> <br>  <span class="hljs-attr">--controllers</span>=*,bootstrapsigner,tokencleaner <br>  <span class="hljs-attr">--experimental-cluster-signing-duration</span>=<span class="hljs-number">86700</span>h <br>  <span class="hljs-attr">--v</span>=<span class="hljs-number">2</span><br><span class="hljs-attr">Restart</span>=always<br><span class="hljs-attr">RestartSec</span>=<span class="hljs-number">10</span>s<br><br><span class="hljs-section">[Install]</span><br><span class="hljs-attr">WantedBy</span>=multi-user.target<br></code></pre></td></tr></table></figure><h3 id="七、生成-bootstrap-kubeconfig"><a href="#七、生成-bootstrap-kubeconfig" class="headerlink" title="七、生成 bootstrap.kubeconfig"></a>七、生成 bootstrap.kubeconfig</h3><blockquote><p>前面所有步骤实际上都是在处理 Api Server、Controller Manager 这一块，为的就是 “老子启动后 TLS Bootstarpping 发证书申请你两个要立马允许，不能拒绝老子”；接下来就是比较重要的 bootstrap.kubeconfig 配置生成，这个 bootstrap.kubeconfig 是最终被 Kubelet 使用的，里面包含了相关的 Token，以帮助 Kubelet 在第一次通讯时能成功沟通 Api Server；生成方式如下:</p></blockquote><h4 id="7-1、设置-bootstrap-创建-bootstrap-令牌（此步骤上面已执行，这里只是讲另外一种创建方法）"><a href="#7-1、设置-bootstrap-创建-bootstrap-令牌（此步骤上面已执行，这里只是讲另外一种创建方法）" class="headerlink" title="7.1、设置 bootstrap , 创建 bootstrap 令牌（此步骤上面已执行，这里只是讲另外一种创建方法）"></a>7.1、设置 bootstrap , 创建 bootstrap 令牌（此步骤上面已执行，这里只是讲另外一种创建方法）</h4><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-attribute">TOKEN_PUB</span>=$(openssl rand -hex 3)<br><span class="hljs-attribute">TOKEN_SECRET</span>=$(openssl rand -hex 8)<br><span class="hljs-attribute">BOOTSTRAP_TOKEN</span>=<span class="hljs-string">&quot;<span class="hljs-variable">$&#123;TOKEN_PUB&#125;</span>.<span class="hljs-variable">$&#123;TOKEN_SECRET&#125;</span>&quot;</span><br><br>kubectl -n kube-system create<span class="hljs-built_in"> secret </span>generic bootstrap-token-<span class="hljs-variable">$&#123;TOKEN_PUB&#125;</span> \<br>        --type <span class="hljs-string">&#x27;bootstrap.kubernetes.io/token&#x27;</span> \<br>        --from-literal <span class="hljs-attribute">description</span>=<span class="hljs-string">&quot;cluster bootstrap token&quot;</span> \<br>        --from-literal <span class="hljs-attribute">token-id</span>=<span class="hljs-variable">$&#123;TOKEN_PUB&#125;</span> \<br>        --from-literal <span class="hljs-attribute">token-secret</span>=<span class="hljs-variable">$&#123;TOKEN_SECRET&#125;</span> \<br>        --from-literal <span class="hljs-attribute">usage-bootstrap-authentication</span>=<span class="hljs-literal">true</span> \<br>        --from-literal <span class="hljs-attribute">usage-bootstrap-signing</span>=<span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><h4 id="7-2、创建-bootstrap-kubeconfig-文件"><a href="#7-2、创建-bootstrap-kubeconfig-文件" class="headerlink" title="7.2、创建 bootstrap kubeconfig 文件"></a>7.2、创建 bootstrap kubeconfig 文件</h4><figure class="highlight dsconfig"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs dsconfig"><span class="hljs-string">CLUSTER_NAME</span>=<span class="hljs-string">&quot;kubernetes&quot;</span><br><span class="hljs-string">KUBE_APISERVER</span>=<span class="hljs-string">&quot;https://10.0.7.101:6443&quot;</span><br><span class="hljs-string">KUBE_USER</span>=<span class="hljs-string">&quot;kubelet-bootstrap&quot;</span><br><span class="hljs-string">KUBE_CONFIG</span>=<span class="hljs-string">&quot;bootstrap.conf&quot;</span><br><br><span class="hljs-comment"># 设置集群参数</span><br><span class="hljs-string">kubectl</span> <span class="hljs-string">config</span> <span class="hljs-built_in">set-cluster</span> $&#123;<span class="hljs-string">CLUSTER_NAME</span>&#125; \<br>  <span class="hljs-built_in">--certificate-authority=/etc/kubernetes/pki/ca.crt</span> \<br>  <span class="hljs-built_in">--embed-certs=true</span> \<br>  <span class="hljs-built_in">--server=$&#123;KUBE_APISERVER&#125;</span> \<br>  <span class="hljs-built_in">--kubeconfig=/etc/kubernetes/$&#123;KUBE_CONFIG&#125;</span><br><br><span class="hljs-comment"># 设置上下文参数</span><br><span class="hljs-string">kubectl</span> <span class="hljs-string">config</span> <span class="hljs-built_in">set-context</span> $&#123;<span class="hljs-string">KUBE_USER</span>&#125;@$&#123;<span class="hljs-string">CLUSTER_NAME</span>&#125; \<br>  <span class="hljs-built_in">--cluster=$&#123;CLUSTER_NAME&#125;</span> \<br>  <span class="hljs-built_in">--user=$&#123;KUBE_USER&#125;</span> \<br>  <span class="hljs-built_in">--kubeconfig=/etc/kubernetes/$&#123;KUBE_CONFIG&#125;</span><br><br><span class="hljs-comment"># 设置客户端认证参数</span><br><span class="hljs-string">kubectl</span> <span class="hljs-string">config</span> <span class="hljs-built_in">set-credentials</span> $&#123;<span class="hljs-string">KUBE_USER</span>&#125; \<br>  <span class="hljs-built_in">--token=$&#123;BOOTSTRAP_TOKEN&#125;</span> \<br>  <span class="hljs-built_in">--kubeconfig=/etc/kubernetes/$&#123;KUBE_CONFIG&#125;</span><br><br><span class="hljs-comment"># 设置当前使用的上下文</span><br><span class="hljs-string">kubectl</span> <span class="hljs-string">config</span> <span class="hljs-string">use-context</span> $&#123;<span class="hljs-string">KUBE_USER</span>&#125;@$&#123;<span class="hljs-string">CLUSTER_NAME</span>&#125; <span class="hljs-built_in">--kubeconfig=/etc/kubernetes/$&#123;KUBE_CONFIG&#125;</span><br><br><span class="hljs-comment"># 查看生成的配置文件</span><br><span class="hljs-string">kubectl</span> <span class="hljs-string">config</span> <span class="hljs-string">view</span> <span class="hljs-built_in">--kubeconfig=/etc/kubernetes/$&#123;KUBE_CONFIG&#125;</span><br></code></pre></td></tr></table></figure><h3 id="八、调整-Kubelet"><a href="#八、调整-Kubelet" class="headerlink" title="八、调整 Kubelet"></a>八、调整 Kubelet</h3><blockquote><p>Kubelet 启动参数需要做一些相应调整，以使其能正确的使用 Bootstartp Token，完整配置如下(与使用 token.csv 配置没什么变化，因为主要变更在 bootstrap.kubeconfig 中):</p></blockquote><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[Unit]</span><br><span class="hljs-attr">Description</span>=Kubernetes Kubelet<br><span class="hljs-attr">Documentation</span>=https://github.com/kubernetes/kubernetes<br><span class="hljs-attr">After</span>=docker.service<br><span class="hljs-attr">Requires</span>=docker.service<br><br><span class="hljs-section">[Service]</span><br><span class="hljs-attr">ExecStart</span>=/usr/local/bin/kubelet <br>  <span class="hljs-attr">--bootstrap-kubeconfig</span>=/etc/kubernetes/bootstrap.conf <br>  <span class="hljs-attr">--kubeconfig</span>=/etc/kubernetes/kubelet.conf <br>  <span class="hljs-attr">--config</span>=/var/lib/kubelet/config.yaml <br>  <span class="hljs-attr">--cgroup-driver</span>=systemd <br>  <span class="hljs-attr">--pod-infra-container-image</span>=kuops/pause-amd64:<span class="hljs-number">3.1</span> <br>  <span class="hljs-attr">--allow-privileged</span>=<span class="hljs-literal">true</span> <br>  <span class="hljs-attr">--network-plugin</span>=cni <br>  <span class="hljs-attr">--cni-conf-dir</span>=/etc/cni/net.d <br>  <span class="hljs-attr">--cni-bin-dir</span>=/opt/cni/bin <br>  <span class="hljs-attr">--cert-dir</span>=/etc/kubernetes/pki <br>  <span class="hljs-attr">--v</span>=<span class="hljs-number">2</span><br><br><span class="hljs-attr">Restart</span>=always<br><span class="hljs-attr">RestartSec</span>=<span class="hljs-number">10</span>s<br><br><span class="hljs-section">[Install]</span><br><span class="hljs-attr">WantedBy</span>=multi-user.target<br></code></pre></td></tr></table></figure><h3 id="九、TLS-bootstrapping-证书自动续期"><a href="#九、TLS-bootstrapping-证书自动续期" class="headerlink" title="九、TLS bootstrapping 证书自动续期"></a>九、TLS bootstrapping 证书自动续期</h3><h4 id="9-1、开启自动续期"><a href="#9-1、开启自动续期" class="headerlink" title="9.1、开启自动续期"></a>9.1、开启自动续期</h4><blockquote><p>在 kubelet 启动时增加一个 <code>--rotate-certificates</code> 参数后，<code>kubelet client</code> 才会自动重载新证书。</p></blockquote><h4 id="9-2、证书过期问题"><a href="#9-2、证书过期问题" class="headerlink" title="9.2、证书过期问题"></a>9.2、证书过期问题</h4><blockquote><p>需要重复强调一个问题是: TLS bootstrapping 时的证书实际是由 kube-controller-manager 组件来签署的，也就是说证书有效期是 kube-controller-manager 组件控制的； kube-controller-manager 组件提供了一个 <code>--experimental-cluster-signing-duration</code> 参数来设置签署的证书有效时间；默认为 <code>8760h0m0s</code>，将其改为 <code>87600h0m0s</code> 即 10 年后再进行 <code>TLS bootstrapping</code> 签署证书即可。</p></blockquote><h3 id="扩展知识："><a href="#扩展知识：" class="headerlink" title="扩展知识："></a>扩展知识：</h3><blockquote><p>在文档中多次提到过 kubelet server 这个东西；kubelet server 指的应该是 kubelet 的 10250 端口；在上面我们仅仅提到了两种类型的CSR 请求，其实实际上还有一种CSR请求。这种请求是用来更新kubelet server证书（10250端口）<br>注意:出于安全原因，核心Kubernetes中实现的CSR批准控制器不批准节点服务证书。需要手动批准服务证书请求。（此句摘自官方）</p></blockquote><blockquote><p>在kubelet中开启<code>--rotate-server-certificates</code>参数后会生成<code>kubelet-server.crt</code>证书，如果没开启此参数则仅生成<code>kubelet-client.crt</code>证书。</p></blockquote><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">[root@k8s-m1 ~]<span class="hljs-comment"># kubectl get csr</span><br>NAME                                                   AGE   REQUESTOR                  CONDITION<br>csr-<span class="hljs-number">99</span>l77                                              <span class="hljs-number">10s</span>   system:<span class="hljs-keyword">node</span><span class="hljs-title">:docker4</span>.node   Pending<br><span class="hljs-keyword">node</span><span class="hljs-title">-csr-aGwaNKorMc0MZBYOuJsJGCB8Bg8ds97rmE3oKBTV-_E</span>   <span class="hljs-number">11s</span>   system:bootstrap:<span class="hljs-number">5</span>d820b    Approved,Issued<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@k8s-m1 ~]<span class="hljs-comment"># kubectl certificate approve csr-99l77</span><br>certificatesigningrequest.certificates.k8s.io/csr-99l77 approved<br></code></pre></td></tr></table></figure><p><img src="/images/bootstarp-5.png" alt="bootstarp-5"></p><p><img src="/images/bootstarp-6.png" alt="bootstarp-6"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>初探Prometheus Operator</title>
    <link href="/2019/08/26/Kubernetes-Prometheus-Operator/"/>
    <url>/2019/08/26/Kubernetes-Prometheus-Operator/</url>
    
    <content type="html"><![CDATA[<h3 id="首先我们要理解："><a href="#首先我们要理解：" class="headerlink" title="首先我们要理解："></a>首先我们要理解：</h3><p>&amp;emsp;&amp;emsp;所有的监控的agent底层最终都是查询的&#x2F;proc和&#x2F;sys里的信息推送server端,因为Prometheus Operator收集宿主机信息方面也想用pod跑,会面临到问题<br>&amp;emsp;&amp;emsp;常见的zabbix_agent默认读取fs的&#x2F;proc和&#x2F;sys,但容器跑agent会导致读取的不是宿主机的&#x2F;proc和&#x2F;sys<br>&amp;emsp;&amp;emsp;而prometheus的<code>node-exporter</code>有选项<code>--path.procfs</code>和<code>--path.sysfs</code>来指定从这俩选项的值的proc和sys读取,容器跑<code>node-exporter</code>只需要挂载宿主机的&#x2F;proc和&#x2F;sys到容器fs的某个路径挂载属性设置为readonly后用这两个选项指定即可。</p><h3 id="需要看懂本文要具备一下知识点"><a href="#需要看懂本文要具备一下知识点" class="headerlink" title="需要看懂本文要具备一下知识点"></a>需要看懂本文要具备一下知识点</h3><ul><li>svc实现原理和会应用以及svc和endpoint关系</li><li>了解prometheus(不是operator的)工作机制</li><li>知道什么是metrics(不过有了prometheus-operator似乎不是必须)</li></ul><h3 id="速补基础"><a href="#速补基础" class="headerlink" title="速补基础"></a>速补基础</h3><h4 id="什么是metrics"><a href="#什么是metrics" class="headerlink" title="什么是metrics"></a>什么是metrics</h4><p>&amp;emsp;&amp;emsp;这里来介绍啥什么是metrics,例如我们要查看etcd的metrics,先查看etcd的运行参数找到相关的值,这里我是kubeadm安装的所以需要查看pod的详细信息，非yml自行查看systemd文件或者运行参数找到相关参数和值即可。</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs gradle">[root@master-<span class="hljs-number">1</span> node-exporter]# kubectl get pod -n kube-system etcd-master-<span class="hljs-number">1</span> -o yaml<br>apiVersion: v1<br>kind: Pod<br>metadata:<br>  annotations:<br>    kubernetes.io/config.hash: <span class="hljs-number">4</span>e0989623c0d5b653b7d5f7693d23809<br>    kubernetes.io/config.mirror: <span class="hljs-number">4</span>e0989623c0d5b653b7d5f7693d23809<br>    kubernetes.io/config.seen: <span class="hljs-string">&quot;2019-01-22T18:08:00.166244667+08:00&quot;</span><br>    kubernetes.io/config.<span class="hljs-keyword">source</span>: <span class="hljs-keyword">file</span><br>    scheduler.alpha.kubernetes.io/critical-pod: <span class="hljs-string">&quot;&quot;</span><br>  creationTimestamp: <span class="hljs-string">&quot;2019-01-22T10:09:31Z&quot;</span><br>  labels:<br>    component: etcd<br>    tier: control-plane<br>  name: etcd-master-<span class="hljs-number">1</span><br>  namespace: kube-system<br>  resourceVersion: <span class="hljs-string">&quot;7304834&quot;</span><br>  selfLink: <span class="hljs-regexp">/api/</span>v1<span class="hljs-regexp">/namespaces/</span>kube-system<span class="hljs-regexp">/pods/</span>etcd-master-<span class="hljs-number">1</span><br>  uid: cf51f92d-<span class="hljs-number">1</span>e2d-<span class="hljs-number">11</span>e9-a8c7-d8490b8af3ae<br>spec:<br>  containers:<br>  - command:<br>    - etcd<br>    - --advertise-client-urls=https:<span class="hljs-comment">//172.19.0.203:2379</span><br>    - --cert-<span class="hljs-keyword">file</span>=<span class="hljs-regexp">/etc/</span>kubernetes<span class="hljs-regexp">/pki/</span>etcd/server.crt<br>    - --client-cert-auth=<span class="hljs-keyword">true</span><br>    - --data-dir=<span class="hljs-regexp">/var/</span>lib/etcd<br>    - --initial-advertise-peer-urls=https:<span class="hljs-comment">//172.19.0.203:2380</span><br>    - --initial-cluster=master-<span class="hljs-number">1</span>=https:<span class="hljs-comment">//172.19.0.203:2380</span><br>    - --key-<span class="hljs-keyword">file</span>=<span class="hljs-regexp">/etc/</span>kubernetes<span class="hljs-regexp">/pki/</span>etcd/server.key<br>    - --listen-client-urls=https:<span class="hljs-comment">//127.0.0.1:2379,https://172.19.0.203:2379</span><br>    - --listen-peer-urls=https:<span class="hljs-comment">//172.19.0.203:2380</span><br>    - --name=master-<span class="hljs-number">1</span><br>    - --peer-cert-<span class="hljs-keyword">file</span>=<span class="hljs-regexp">/etc/</span>kubernetes<span class="hljs-regexp">/pki/</span>etcd/peer.crt<br>    - --peer-client-cert-auth=<span class="hljs-keyword">true</span><br>    - --peer-key-<span class="hljs-keyword">file</span>=<span class="hljs-regexp">/etc/</span>kubernetes<span class="hljs-regexp">/pki/</span>etcd/peer.key<br>    - --peer-trusted-ca-<span class="hljs-keyword">file</span>=<span class="hljs-regexp">/etc/</span>kubernetes<span class="hljs-regexp">/pki/</span>etcd/ca.crt<br>    - --snapshot-<span class="hljs-keyword">count</span>=<span class="hljs-number">10000</span><br>    - --trusted-ca-<span class="hljs-keyword">file</span>=<span class="hljs-regexp">/etc/</span>kubernetes<span class="hljs-regexp">/pki/</span>etcd/ca.crt<br>    image: k8s.gcr.io/etcd:<span class="hljs-number">3.2</span>.<span class="hljs-number">24</span><br></code></pre></td></tr></table></figure><h3 id="我们需要两部分信息"><a href="#我们需要两部分信息" class="headerlink" title="我们需要两部分信息"></a>我们需要两部分信息</h3><ul><li>listen-client-urls的httpsurl,我这里是<code>https://172.19.0.203:2379</code></li><li>允许客户端证书信息</li></ul><h3 id="然后使用下面的curl，带上各自证书路径访问https的url执行"><a href="#然后使用下面的curl，带上各自证书路径访问https的url执行" class="headerlink" title="然后使用下面的curl，带上各自证书路径访问https的url执行"></a>然后使用下面的curl，带上各自证书路径访问https的url执行</h3><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gradle">[root@master-<span class="hljs-number">1</span> node-exporter]# curl --cacert <span class="hljs-regexp">/etc/</span>kubernetes<span class="hljs-regexp">/pki/</span>etcd<span class="hljs-regexp">/ca.crt --cert /</span>etc<span class="hljs-regexp">/kubernetes/</span>pki<span class="hljs-regexp">/etcd/</span>server.crt  --key <span class="hljs-regexp">/etc/</span>kubernetes<span class="hljs-regexp">/pki/</span>etcd<span class="hljs-regexp">/server.key  https:/</span><span class="hljs-regexp">/172.19.0.203:2379/m</span>etrics<br></code></pre></td></tr></table></figure><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs stata">....<br>grpc_server_started_total&#123;grpc_method=<span class="hljs-string">&quot;RoleList&quot;</span>,grpc_service=<span class="hljs-string">&quot;etcdserverpb.Auth&quot;</span>,grpc_type=<span class="hljs-string">&quot;unary&quot;</span>&#125; 0<br>grpc_server_started_total&#123;grpc_method=<span class="hljs-string">&quot;RoleRevokePermission&quot;</span>,grpc_service=<span class="hljs-string">&quot;etcdserverpb.Auth&quot;</span>,grpc_type=<span class="hljs-string">&quot;unary&quot;</span>&#125; 0<br>grpc_server_started_total&#123;grpc_method=<span class="hljs-string">&quot;Snapshot&quot;</span>,grpc_service=<span class="hljs-string">&quot;etcdserverpb.Maintenance&quot;</span>,grpc_type=<span class="hljs-string">&quot;server_stream&quot;</span>&#125; 0<br>grpc_server_started_total&#123;grpc_method=<span class="hljs-string">&quot;Status&quot;</span>,grpc_service=<span class="hljs-string">&quot;etcdserverpb.Maintenance&quot;</span>,grpc_type=<span class="hljs-string">&quot;unary&quot;</span>&#125; 0<br>grpc_server_started_total&#123;grpc_method=<span class="hljs-string">&quot;Txn&quot;</span>,grpc_service=<span class="hljs-string">&quot;etcdserverpb.KV&quot;</span>,grpc_type=<span class="hljs-string">&quot;unary&quot;</span>&#125; 259160<br>grpc_server_started_total&#123;grpc_method=<span class="hljs-string">&quot;UserAdd&quot;</span>,grpc_service=<span class="hljs-string">&quot;etcdserverpb.Auth&quot;</span>,grpc_type=<span class="hljs-string">&quot;unary&quot;</span>&#125; 0<br>grpc_server_started_total&#123;grpc_method=<span class="hljs-string">&quot;UserChangePassword&quot;</span>,grpc_service=<span class="hljs-string">&quot;etcdserverpb.Auth&quot;</span>,grpc_type=<span class="hljs-string">&quot;unary&quot;</span>&#125; 0<br>grpc_server_started_total&#123;grpc_method=<span class="hljs-string">&quot;UserDelete&quot;</span>,grpc_service=<span class="hljs-string">&quot;etcdserverpb.Auth&quot;</span>,grpc_type=<span class="hljs-string">&quot;unary&quot;</span>&#125; 0<br>grpc_server_started_total&#123;grpc_method=<span class="hljs-string">&quot;UserGet&quot;</span>,grpc_service=<span class="hljs-string">&quot;etcdserverpb.Auth&quot;</span>,grpc_type=<span class="hljs-string">&quot;unary&quot;</span>&#125; 0<br>grpc_server_started_total&#123;grpc_method=<span class="hljs-string">&quot;UserGrantRole&quot;</span>,grpc_service=<span class="hljs-string">&quot;etcdserverpb.Auth&quot;</span>,grpc_type=<span class="hljs-string">&quot;unary&quot;</span>&#125; 0<br>grpc_server_started_total&#123;grpc_method=<span class="hljs-string">&quot;UserList&quot;</span>,grpc_service=<span class="hljs-string">&quot;etcdserverpb.Auth&quot;</span>,grpc_type=<span class="hljs-string">&quot;unary&quot;</span>&#125; 0<br>grpc_server_started_total&#123;grpc_method=<span class="hljs-string">&quot;UserRevokeRole&quot;</span>,grpc_service=<span class="hljs-string">&quot;etcdserverpb.Auth&quot;</span>,grpc_type=<span class="hljs-string">&quot;unary&quot;</span>&#125; 0<br>grpc_server_started_total&#123;grpc_method=<span class="hljs-string">&quot;Watch&quot;</span>,grpc_service=<span class="hljs-string">&quot;etcdserverpb.Watch&quot;</span>,grpc_type=<span class="hljs-string">&quot;bidi_stream&quot;</span>&#125; 86<br># <span class="hljs-keyword">HELP</span> process_cpu_seconds_total <span class="hljs-keyword">Total</span> user and system CPU time spent <span class="hljs-keyword">in</span> seconds.<br># <span class="hljs-keyword">TYPE</span> process_cpu_seconds_total counter<br>process_cpu_seconds_total 28145.45<br># <span class="hljs-keyword">HELP</span> process_max_fds Maximum number of <span class="hljs-keyword">open</span> <span class="hljs-keyword">file</span> descriptors.<br># <span class="hljs-keyword">TYPE</span> process_max_fds gauge<br>process_max_fds 65536<br># <span class="hljs-keyword">HELP</span> process_open_fds Number of <span class="hljs-keyword">open</span> <span class="hljs-keyword">file</span> descriptors.<br># <span class="hljs-keyword">TYPE</span> process_open_fds gauge<br>process_open_fds 121<br># <span class="hljs-keyword">HELP</span> process_resident_memory_bytes Resident <span class="hljs-keyword">memory</span> size <span class="hljs-keyword">in</span> bytes.<br># <span class="hljs-keyword">TYPE</span> process_resident_memory_bytes gauge<br>process_resident_memory_bytes 1.46509824e+08<br># <span class="hljs-keyword">HELP</span> process_start_time_seconds Start time of the process since unix epoch <span class="hljs-keyword">in</span> seconds.<br># <span class="hljs-keyword">TYPE</span> process_start_time_seconds gauge<br>process_start_time_seconds 1.54557786888e+09<br># <span class="hljs-keyword">HELP</span> process_virtual_memory_bytes Virtual <span class="hljs-keyword">memory</span> size <span class="hljs-keyword">in</span> bytes.<br># <span class="hljs-keyword">TYPE</span> process_virtual_memory_bytes gauge<br>process_virtual_memory_bytes 1.0886217728e+10<br></code></pre></td></tr></table></figure><h3 id="同理kube-apiserver也有metrics信息"><a href="#同理kube-apiserver也有metrics信息" class="headerlink" title="同理kube-apiserver也有metrics信息"></a>同理kube-apiserver也有metrics信息</h3><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs accesslog"><span class="hljs-string">[root@master-1 node-exporter]</span>#  kubectl get --raw /metrics<br><br>...<br>rest_client_request_latency_seconds_bucket&#123;url=<span class="hljs-string">&quot;https://[::1]:6443/apis?timeout=32s&quot;</span>,verb=<span class="hljs-string">&quot;<span class="hljs-keyword">GET</span>&quot;</span>,le=<span class="hljs-string">&quot;0.512&quot;</span>&#125; <span class="hljs-number">39423</span><br>rest_client_request_latency_seconds_bucket&#123;url=<span class="hljs-string">&quot;https://[::1]:6443/apis?timeout=32s&quot;</span>,verb=<span class="hljs-string">&quot;<span class="hljs-keyword">GET</span>&quot;</span>,le=<span class="hljs-string">&quot;+Inf&quot;</span>&#125; <span class="hljs-number">39423</span><br>rest_client_request_latency_seconds_sum&#123;url=<span class="hljs-string">&quot;https://[::1]:6443/apis?timeout=32s&quot;</span>,verb=<span class="hljs-string">&quot;<span class="hljs-keyword">GET</span>&quot;</span>&#125; <span class="hljs-number">24</span>.<span class="hljs-number">781942557999795</span><br>rest_client_request_latency_seconds_count&#123;url=<span class="hljs-string">&quot;https://[::1]:6443/apis?timeout=32s&quot;</span>,verb=<span class="hljs-string">&quot;<span class="hljs-keyword">GET</span>&quot;</span>&#125; <span class="hljs-number">39423</span><br># HELP rest_client_requests_total Number of HTTP requests, partitioned by status code, method, and host.<br># TYPE rest_client_requests_total counter<br>rest_client_requests_total&#123;code=<span class="hljs-string">&quot;200&quot;</span>,host=<span class="hljs-string">&quot;[::1]:6443&quot;</span>,method=<span class="hljs-string">&quot;<span class="hljs-keyword">GET</span>&quot;</span>&#125; <span class="hljs-number">2</span>.032031e+<span class="hljs-number">06</span><br>rest_client_requests_total&#123;code=<span class="hljs-string">&quot;200&quot;</span>,host=<span class="hljs-string">&quot;[::1]:6443&quot;</span>,method=<span class="hljs-string">&quot;<span class="hljs-keyword">PUT</span>&quot;</span>&#125; <span class="hljs-number">1</span>.106921e+<span class="hljs-number">06</span><br>rest_client_requests_total&#123;code=<span class="hljs-string">&quot;201&quot;</span>,host=<span class="hljs-string">&quot;[::1]:6443&quot;</span>,method=<span class="hljs-string">&quot;<span class="hljs-keyword">POST</span>&quot;</span>&#125; <span class="hljs-number">38</span><br>rest_client_requests_total&#123;code=<span class="hljs-string">&quot;401&quot;</span>,host=<span class="hljs-string">&quot;[::1]:6443&quot;</span>,method=<span class="hljs-string">&quot;<span class="hljs-keyword">GET</span>&quot;</span>&#125; <span class="hljs-number">17378</span><br>rest_client_requests_total&#123;code=<span class="hljs-string">&quot;404&quot;</span>,host=<span class="hljs-string">&quot;[::1]:6443&quot;</span>,method=<span class="hljs-string">&quot;<span class="hljs-keyword">GET</span>&quot;</span>&#125; <span class="hljs-number">3</span>.546509e+<span class="hljs-number">06</span><br>rest_client_requests_total&#123;code=<span class="hljs-string">&quot;409&quot;</span>,host=<span class="hljs-string">&quot;[::1]:6443&quot;</span>,method=<span class="hljs-string">&quot;<span class="hljs-keyword">POST</span>&quot;</span>&#125; <span class="hljs-number">29</span><br>rest_client_requests_total&#123;code=<span class="hljs-string">&quot;409&quot;</span>,host=<span class="hljs-string">&quot;[::1]:6443&quot;</span>,method=<span class="hljs-string">&quot;<span class="hljs-keyword">PUT</span>&quot;</span>&#125; <span class="hljs-number">20</span><br>rest_client_requests_total&#123;code=<span class="hljs-string">&quot;422&quot;</span>,host=<span class="hljs-string">&quot;[::1]:6443&quot;</span>,method=<span class="hljs-string">&quot;<span class="hljs-keyword">POST</span>&quot;</span>&#125; <span class="hljs-number">1</span><br>rest_client_requests_total&#123;code=<span class="hljs-string">&quot;503&quot;</span>,host=<span class="hljs-string">&quot;[::1]:6443&quot;</span>,method=<span class="hljs-string">&quot;<span class="hljs-keyword">GET</span>&quot;</span>&#125; <span class="hljs-number">5</span><br># HELP ssh_tunnel_open_count Counter of ssh tunnel total open attempts<br># TYPE ssh_tunnel_open_count counter<br>ssh_tunnel_open_count <span class="hljs-number">0</span><br># HELP ssh_tunnel_open_fail_count Counter of ssh tunnel failed open attempts<br># TYPE ssh_tunnel_open_fail_count counter<br>ssh_tunnel_open_fail_count <span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><p>&amp;emsp;&amp;emsp;这种就是prometheus的定义的metrics格式规范,缺省是在http(s)的url的&#x2F;metrics输出，而metrics要么程序定义输出(模块或者自定义开发),要么用官方的各种exporter(node-exporter,mysqld-exporter,memcached_exporter…)采集要监控的信息占用一个web端口然后输出成metrics格式的信息,prometheus server去收集各个target的metrics存储起来(tsdb)</p><p>&amp;emsp;&amp;emsp;用户可以在prometheus的http页面上用promQL(prometheus的查询语言)或者(grafana数据来源就是用)api去查询一些信息,也可以利用pushgateway去统一采集然后prometheus从pushgateway采集(所以pushgateway类似于zabbix的proxy),prometheus的工作架构如下图</p><p><img src="/images/Prometheus-1.png" alt="Prometheus-1"></p><p>&amp;emsp;&amp;emsp;由于本身prometheus属于第三方的 解决方案，原生的k8s系统并不能对Prometheus的自定义指标进行解析，就需要借助于prometheus的adapter将这些指标数据查询接口转换为标准的Kubernetes自定义指标。（当HPA使用自定义监控指标进行Pod扩容时需要用到adapter）</p><p><img src="/images/Prometheus-2.png" alt="Prometheus-2"></p><h3 id="为什么需要prometheus-operator"><a href="#为什么需要prometheus-operator" class="headerlink" title="为什么需要prometheus-operator"></a>为什么需要prometheus-operator</h3><p>&amp;emsp;&amp;emsp;由于prometheus是主动去拉取数据,在加上k8s里pod调度的原因导致pod的ip会发生变化,人工不可能去维持,自动发现有基于DNS的,但是新增还是有点麻烦<br>&amp;emsp;&amp;emsp;Prometheus-operator的本质就是一组用户自定义的CRD资源以及Controller的实现，Prometheus Operator这个controller有BRAC权限下去负责监听这些自定义资源的变化，并且根据这些资源的定义自动化的完成如Prometheus Server自身以及配置的自动化管理工作<br>&amp;emsp;&amp;emsp;在Kubernetes中我们使用Deployment、DamenSet，StatefulSet来管理应用，使用Service，Ingress来管理应用的访问方式，使用ConfigMap和Secret来管理应用配置。我们在集群中对这些资源的创建，更新，删除的动作都会被转换为事件(Event)，Kubernetes的Controller Manager负责监听这些事件并触发相应的任务来满足用户的期望。这种方式我们成为声明式，用户只需要关心应用程序的最终状态，其它的都通过Kubernetes来帮助我们完成，通过这种方式可以大大简化应用的配置管理复杂度。<br>&amp;emsp;&amp;emsp;而除了这些原生的Resource资源以外，Kubernetes还允许用户添加自己的自定义资源(Custom Resource)。并且通过实现自定义Controller来实现对Kubernetes的扩展,不需要用户去二次开发k8s也能达到给k8s添加功能和对象<br>&amp;emsp;&amp;emsp;因为service是负载均衡,所以在K8S里监控metrics最小单位是service，而背后的pod为target。所以prometheus-operator创建了对应的CRD: kind: ServiceMonitor ,创建的ServiceMonitor里声明需要监控选中的svc的label以及metrics的url路径的和namespaces即可</p><p><img src="/images/Prometheus-3.png" alt="Prometheus-3"></p><p>&amp;emsp;&amp;emsp;上图是Prometheus-Operator官方提供的架构图，其中Operator是最核心的部分，作为一个控制器，他会去创建Prometheus、ServiceMonitor、AlertManager以及PrometheusRule4个CRD资源对象，然后会一直监听并维持这4个资源对象的状态。用户可以利用kind: Prometheus这种声明式创建对应的资源。</p><h3 id="这四个CRD作用如下："><a href="#这四个CRD作用如下：" class="headerlink" title="这四个CRD作用如下："></a>这四个CRD作用如下：</h3><ul><li>Prometheus：由 Operator 依据一个自定义资源kind: Prometheus类型中，所描述的内容是部署的 Prometheus Server 集群，可以将这个自定义资源看作是一种特别用来管理Prometheus Server的StatefulSets资源。</li><li>ServiceMonitor：一个Kubernetes自定义资源(和kind: Prometheus一样是CRD)，该资源描述了Prometheus Server的Target列表，Operator 会监听这个资源的变化来动态的更新Prometheus Server的Scrape targets并让prometheus server去reload配置(prometheus有对应reload的http接口&#x2F;-&#x2F;reload)。而该资源主要通过Selector来依据 Labels 选取对应的Service的endpoints，并让 Prometheus Server 通过 Service 进行拉取（拉）指标资料(也就是metrics信息),metrics信息要在http的url输出符合metrics格式的信息,ServiceMonitor也可以定义目标的metrics的url.</li><li>Alertmanager：Prometheus Operator 不只是提供 Prometheus Server 管理与部署，也包含了 AlertManager，并且一样通过一个 kind: Alertmanager 自定义资源来描述信息，再由 Operator 依据描述内容部署 Alertmanager 集群。</li><li>PrometheusRule：对于Prometheus而言，在原生的管理方式上，我们需要手动创建Prometheus的告警文件，并且通过在Prometheus配置中声明式的加载。而在Prometheus Operator模式中，告警规则也编程一个通过Kubernetes API 声明式创建的一个资源.告警规则创建成功后，通过在Prometheus中使用想servicemonitor那样用ruleSelector通过label匹配选择需要关联的PrometheusRule即可</li></ul><h3 id="部署官方的prometheus-operator"><a href="#部署官方的prometheus-operator" class="headerlink" title="部署官方的prometheus-operator"></a>部署官方的prometheus-operator</h3><h4 id="分类文件："><a href="#分类文件：" class="headerlink" title="分类文件："></a>分类文件：</h4><p>官方的github仓库迁移了，所有yaml转移了，clone部署文件</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">git clone https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/coreos/</span>kube-prometheus.git<br></code></pre></td></tr></table></figure><p>官方把所有文件都放在一起,这里我复制了然后分类下</p><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs tap">mkdir kube-prom<br>cp -a kube-prometheus/manifests/* kube-prom/<br>cd kube-prom/<br>mkdir -p node-exporter alertmanager grafana kube-state-metrics prometheus serviceMonitor adapter<br>mv *-serviceMonitor* serviceMonitor/<br>mv setup operator/<br>mv grafana-* grafana/<br>mv kube-state-metrics-* kube-state-metrics/<br>mv alertmanager-* alertmanager/<br>mv node-exporter-* node-exporter/<br>mv prometheus-adapter* adapter/<br>mv prometheus-* prometheus/<br><br>$ ll<br>total 32<br>drwxr-xr-x<span class="hljs-number"> 2 </span>root root<span class="hljs-number"> 4096 </span>Dec <span class="hljs-number"> 2 </span>09:53 adapter<br>drwxr-xr-x<span class="hljs-number"> 2 </span>root root<span class="hljs-number"> 4096 </span>Dec <span class="hljs-number"> 2 </span>09:53 alertmanager<br>drwxr-xr-x<span class="hljs-number"> 2 </span>root root<span class="hljs-number"> 4096 </span>Dec <span class="hljs-number"> 2 </span>09:53 grafana<br>drwxr-xr-x<span class="hljs-number"> 2 </span>root root<span class="hljs-number"> 4096 </span>Dec <span class="hljs-number"> 2 </span>09:53 kube-state-metrics<br>drwxr-xr-x<span class="hljs-number"> 2 </span>root root<span class="hljs-number"> 4096 </span>Dec <span class="hljs-number"> 2 </span>09:53 node-exporter<br>drwxr-xr-x<span class="hljs-number"> 2 </span>root root<span class="hljs-number"> 4096 </span>Dec <span class="hljs-number"> 2 </span>09:34 operator<br>drwxr-xr-x<span class="hljs-number"> 2 </span>root root<span class="hljs-number"> 4096 </span>Dec <span class="hljs-number"> 2 </span>09:53 prometheus<br>drwxr-xr-x<span class="hljs-number"> 2 </span>root root<span class="hljs-number"> 4096 </span>Dec <span class="hljs-number"> 2 </span>09:53 serviceMonitor<br><br>$ ll operator/<br>total 660<br>-rw-r--r--<span class="hljs-number"> 1 </span>root root    <span class="hljs-number"> 60 </span>Dec <span class="hljs-number"> 2 </span>09:34 0namespace-namespace.yaml<br>-rw-r--r--<span class="hljs-number"> 1 </span>root root<span class="hljs-number"> 274629 </span>Dec <span class="hljs-number"> 2 </span>09:34 prometheus-operator-0alertmanagerCustomResourceDefinition.yaml<br>-rw-r--r--<span class="hljs-number"> 1 </span>root root <span class="hljs-number"> 12100 </span>Dec <span class="hljs-number"> 2 </span>09:34 prometheus-operator-0podmonitorCustomResourceDefinition.yaml<br>-rw-r--r--<span class="hljs-number"> 1 </span>root root<span class="hljs-number"> 321507 </span>Dec <span class="hljs-number"> 2 </span>09:34 prometheus-operator-0prometheusCustomResourceDefinition.yaml<br>-rw-r--r--<span class="hljs-number"> 1 </span>root root <span class="hljs-number"> 14561 </span>Dec <span class="hljs-number"> 2 </span>09:34 prometheus-operator-0prometheusruleCustomResourceDefinition.yaml<br>-rw-r--r--<span class="hljs-number"> 1 </span>root root <span class="hljs-number"> 17422 </span>Dec <span class="hljs-number"> 2 </span>09:34 prometheus-operator-0servicemonitorCustomResourceDefinition.yaml<br>-rw-r--r--<span class="hljs-number"> 1 </span>root root   <span class="hljs-number"> 425 </span>Dec <span class="hljs-number"> 2 </span>09:34 prometheus-operator-clusterRoleBinding.yaml<br>-rw-r--r--<span class="hljs-number"> 1 </span>root root  <span class="hljs-number"> 1066 </span>Dec <span class="hljs-number"> 2 </span>09:34 prometheus-operator-clusterRole.yaml<br>-rw-r--r--<span class="hljs-number"> 1 </span>root root  <span class="hljs-number"> 1405 </span>Dec <span class="hljs-number"> 2 </span>09:34 prometheus-operator-deployment.yaml<br>-rw-r--r--<span class="hljs-number"> 1 </span>root root   <span class="hljs-number"> 239 </span>Dec <span class="hljs-number"> 2 </span>09:34 prometheus-operator-serviceAccount.yaml<br>-rw-r--r--<span class="hljs-number"> 1 </span>root root   <span class="hljs-number"> 420 </span>Dec <span class="hljs-number"> 2 </span>09:34 prometheus-operator-service.yaml<br></code></pre></td></tr></table></figure><p>有些版本的k8s的label为<code>beta.kubernetes.io/os</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ curl -s https://zhangguanzhang.github.io/bash/label.sh | bash<br>Node                                    Label       <br>k8s-m1<br>            beta.kubernetes.io/archamd64<br>            beta.kubernetes.io/oslinux<br>            kubernetes.io/hostnamek8s-m1<br>k8s-m2<br>            beta.kubernetes.io/archamd64<br>            beta.kubernetes.io/oslinux<br>            kubernetes.io/hostnamek8s-m2<br>k8s-m3<br>            beta.kubernetes.io/archamd64<br>            beta.kubernetes.io/oslinux<br>            kubernetes.io/hostnamek8s-m3<br>k8s-n1<br>            beta.kubernetes.io/archamd64<br>            beta.kubernetes.io/oslinux<br>            kubernetes.io/hostnamek8s-n1<br>k8s-n2<br>            beta.kubernetes.io/archamd64<br>            beta.kubernetes.io/oslinux<br>            kubernetes.io/hostnamek8s-n2<br></code></pre></td></tr></table></figure><p>如果是上面这种没有<code>kubernetes.io/os: linux</code>的情况则需要修改yaml里的selector字段</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">grep -A1 nodeSelector alertmanager/alertmanager-alertmanager.yaml</span> <br>  nodeSelector:<br>    kubernetes.io/os: linux<br><span class="hljs-meta prompt_">$ </span><span class="language-bash">sed -ri <span class="hljs-string">&#x27;/linux/s#kubernetes.io#beta.&amp;#&#x27;</span> \</span><br><span class="language-bash">    alertmanager/alertmanager-alertmanager.yaml \</span><br><span class="language-bash">    prometheus/prometheus-prometheus.yaml \</span><br><span class="language-bash">    node-exporter/node-exporter-daemonset.yaml \</span><br><span class="language-bash">    kube-state-metrics/kube-state-metrics-deployment.yaml <span class="hljs-comment"># 修改选择器</span></span><br></code></pre></td></tr></table></figure><p>quay.io可能不好拉取，这里修改使用Azure的代理或者使用dockerhub上</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">sed -ri <span class="hljs-string">&#x27;/quay.io/s#quay.io/prometheus#prom#&#x27;</span> \</span><br><span class="language-bash">  alertmanager/alertmanager-alertmanager.yaml \</span><br><span class="language-bash">  prometheus/prometheus-prometheus.yaml \</span><br><span class="language-bash">  node-exporter/node-exporter-daemonset.yaml <span class="hljs-comment">#镜像使用dockerhub上的</span></span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">find -<span class="hljs-built_in">type</span> f -<span class="hljs-built_in">exec</span> sed -ri <span class="hljs-string">&#x27;s#k8s.gcr.io#gcr.azk8s.cn/google_containers#&#x27;</span> &#123;&#125; \;  <span class="hljs-comment">#使用能拉取到的谷歌镜像</span></span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">find . -<span class="hljs-built_in">type</span> f -name <span class="hljs-string">&#x27;*ml&#x27;</span> -<span class="hljs-built_in">exec</span> sed -ri <span class="hljs-string">&#x27;s#quay.io/#quay.azk8s.cn/#&#x27;</span> &#123;&#125; \;</span><br></code></pre></td></tr></table></figure><h3 id="部署operator"><a href="#部署operator" class="headerlink" title="部署operator"></a>部署operator</h3><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs autoit">[root<span class="hljs-symbol">@master</span><span class="hljs-number">-1</span> manifests]<span class="hljs-meta">#  kubectl apply -f operator/</span><br></code></pre></td></tr></table></figure><p>确认状态运行正常再往后执行</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs csharp">[<span class="hljs-meta">root@master-1 manifests</span>]<span class="hljs-meta">#  $ kubectl -n monitoring get pod</span><br>NAME                                   READY     STATUS    RESTARTS   AGE<br>prometheus-<span class="hljs-keyword">operator</span><span class="hljs-number">-56954</span>c76b5-qm9ww   <span class="hljs-number">1</span>/<span class="hljs-number">1</span>       Running   <span class="hljs-number">0</span>          <span class="hljs-number">24</span>s<br></code></pre></td></tr></table></figure><h3 id="部署整套CRD"><a href="#部署整套CRD" class="headerlink" title="部署整套CRD"></a>部署整套CRD</h3><p>确保prometheus-operator的pod运行起来后就可以，创建相关的CRD,这里镜像可能也要很久，建议提前看下需要拉取哪些镜像提前拉取了</p><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs coq">kubectl <span class="hljs-built_in">apply</span> -f adapter/<br>kubectl <span class="hljs-built_in">apply</span> -f alertmanager/<br>kubectl <span class="hljs-built_in">apply</span> -f node-exporter/<br>kubectl <span class="hljs-built_in">apply</span> -f kube-state-metrics/<br>kubectl <span class="hljs-built_in">apply</span> -f grafana/<br>kubectl <span class="hljs-built_in">apply</span> -f prometheus/<br>kubectl <span class="hljs-built_in">apply</span> -f serviceMonitor/<br></code></pre></td></tr></table></figure><h3 id="部署完成后"><a href="#部署完成后" class="headerlink" title="部署完成后"></a>部署完成后</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">[root<span class="hljs-variable">@master</span><span class="hljs-number">-1</span> manifests]#  kubectl <span class="hljs-operator">-</span>n monitoring <span class="hljs-keyword">get</span> <span class="hljs-keyword">all</span><br></code></pre></td></tr></table></figure><h3 id="常见坑的说明和解决方法"><a href="#常见坑的说明和解决方法" class="headerlink" title="常见坑的说明和解决方法"></a>常见坑的说明和解决方法</h3><h4 id="坑一："><a href="#坑一：" class="headerlink" title="坑一："></a>坑一：</h4><p><img src="/images/Prometheus-4.png" alt="Prometheus-4"></p><p>&amp;emsp;&amp;emsp;这里要注意有一个坑,二进制部署k8s管理组件和新版本kubeadm部署的都会发现在prometheus server的页面上发现<code>kube-controller</code>和<code>kube-schedule</code>的target为0&#x2F;0也就是上图所示。<br>&amp;emsp;&amp;emsp;这是因为serviceMonitor是根据label去选取svc的,我们先来查看下 <code>kube-scheduler</code> 组件对应的 <code>ServiceMonitor</code> 资源的定义：(prometheus-serviceMonitorKubeScheduler.yaml)</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">monitoring.coreos.com/v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">ServiceMonitor</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">labels:</span><br>    <span class="hljs-attr">k8s-app:</span> <span class="hljs-string">kube-scheduler</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">kube-scheduler</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">monitoring</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">endpoints:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">interval:</span> <span class="hljs-string">30s</span> <span class="hljs-comment"># 每30s获取一次信息</span><br>    <span class="hljs-attr">port:</span> <span class="hljs-string">http-metrics</span>  <span class="hljs-comment"># 对应service的端口名</span><br>  <span class="hljs-attr">jobLabel:</span> <span class="hljs-string">k8s-app</span><br>  <span class="hljs-attr">namespaceSelector:</span> <span class="hljs-comment"># 表示去匹配某一命名空间中的service，如果想从所有的namespace中匹配用any: true</span><br>    <span class="hljs-attr">matchNames:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">kube-system</span><br>  <span class="hljs-attr">selector:</span>  <span class="hljs-comment"># 匹配的 Service 的labels，如果使用mathLabels，则下面的所有标签都匹配时才会匹配该service，如果使用matchExpressions，则至少匹配一个标签的service都会被选择</span><br>    <span class="hljs-attr">matchLabels:</span><br>      <span class="hljs-attr">k8s-app:</span> <span class="hljs-string">kube-scheduler</span><br></code></pre></td></tr></table></figure><p>&amp;emsp;&amp;emsp;上面是一个典型的 ServiceMonitor 资源文件的声明方式，上面我们通过<code>selector.matchLabels</code>在 <code>kube-system</code> 这个命名空间下面匹配具有<code>k8s-app=kube-scheduler</code>这样的 Service，但是我们系统中根本就没有对应的 Service。</p><p>prometheus-serviceMonitorKubeControllerManager.yaml文件</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">monitoring.coreos.com/v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">ServiceMonitor</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">labels:</span><br>    <span class="hljs-attr">k8s-app:</span> <span class="hljs-string">kube-controller-manager</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">kube-controller-manager</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">monitoring</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">endpoints:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">interval:</span> <span class="hljs-string">30s</span>   <span class="hljs-comment"># 每30s获取一次信息</span><br>    <span class="hljs-attr">metricRelabelings:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">action:</span> <span class="hljs-string">drop</span><br>      <span class="hljs-attr">regex:</span> <span class="hljs-string">etcd_(debugging|disk|request|server).*</span><br>      <span class="hljs-attr">sourceLabels:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">__name__</span><br>    <span class="hljs-attr">port:</span> <span class="hljs-string">http-metrics</span>   <span class="hljs-comment"># 对应service的端口名</span><br>  <span class="hljs-attr">jobLabel:</span> <span class="hljs-string">k8s-app</span><br>  <span class="hljs-attr">namespaceSelector:</span>  <span class="hljs-comment"># 表示去匹配某一命名空间中的service，如果想从所有的namespace中匹配用any: true</span><br>    <span class="hljs-attr">matchNames:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">kube-system</span><br>  <span class="hljs-attr">selector:</span>    <span class="hljs-comment"># 匹配的 Service 的labels，如果使用mathLabels，则下面的所有标签都匹配时才会匹配该service，如果使用matchExpressions，则至少匹配一个标签的service都会被选择</span><br>    <span class="hljs-attr">matchLabels:</span><br>      <span class="hljs-attr">k8s-app:</span> <span class="hljs-string">kube-controller-manager</span><br></code></pre></td></tr></table></figure><h3 id="而kube-system里默认只有这俩svc-且没有符合上面的label"><a href="#而kube-system里默认只有这俩svc-且没有符合上面的label" class="headerlink" title="而kube-system里默认只有这俩svc,且没有符合上面的label"></a>而kube-system里默认只有这俩svc,且没有符合上面的label</h3><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">[root@master<span class="hljs-number">-1</span> serviceMonitor]#  kubectl -n kube-<span class="hljs-keyword">system</span> <span class="hljs-keyword">get</span> svc<br><span class="hljs-type">NAME</span>                      <span class="hljs-keyword">TYPE</span>        <span class="hljs-keyword">CLUSTER</span>-IP   <span class="hljs-keyword">EXTERNAL</span>-IP   PORT(S)         AGE<br>kube-dns                  ClusterIP   <span class="hljs-number">10.96</span><span class="hljs-number">.0</span><span class="hljs-number">.10</span>   &lt;<span class="hljs-keyword">none</span>&gt;        <span class="hljs-number">53</span>/UDP,<span class="hljs-number">53</span>/TCP   <span class="hljs-number">139</span>m<br>kubelet                   ClusterIP   <span class="hljs-keyword">None</span>         &lt;<span class="hljs-keyword">none</span>&gt;        <span class="hljs-number">10250</span>/TCP       <span class="hljs-number">103</span>m<br></code></pre></td></tr></table></figure><h3 id="但是却有对应的ep-没有带任何label-被创建-这点想不通官方什么鬼操作-另外这里没有kubelet的ep-二进制的话会有"><a href="#但是却有对应的ep-没有带任何label-被创建-这点想不通官方什么鬼操作-另外这里没有kubelet的ep-二进制的话会有" class="headerlink" title="但是却有对应的ep(没有带任何label)被创建,这点想不通官方什么鬼操作,另外这里没有kubelet的ep,二进制的话会有"></a>但是却有对应的ep(没有带任何label)被创建,这点想不通官方什么鬼操作,另外这里没有kubelet的ep,二进制的话会有</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql">[root<span class="hljs-variable">@master</span><span class="hljs-number">-1</span> serviceMonitor]#  kubectl <span class="hljs-keyword">get</span> ep <span class="hljs-operator">-</span>n kube<span class="hljs-operator">-</span><span class="hljs-keyword">system</span><br>NAME                      ENDPOINTS                                                AGE<br>kube<span class="hljs-operator">-</span>controller<span class="hljs-operator">-</span>manager      <span class="hljs-operator">&lt;</span><span class="hljs-keyword">none</span><span class="hljs-operator">&gt;</span>                                                <span class="hljs-number">139</span>m<br>kube<span class="hljs-operator">-</span>dns                  <span class="hljs-number">10.244</span><span class="hljs-number">.1</span><span class="hljs-number">.2</span>:<span class="hljs-number">53</span>,<span class="hljs-number">10.244</span><span class="hljs-number">.8</span><span class="hljs-number">.10</span>:<span class="hljs-number">53</span>,<span class="hljs-number">10.244</span><span class="hljs-number">.1</span><span class="hljs-number">.2</span>:<span class="hljs-number">53</span> <span class="hljs-operator">+</span> <span class="hljs-number">1</span> more...   <span class="hljs-number">139</span>m<br>kube<span class="hljs-operator">-</span>scheduler               <span class="hljs-operator">&lt;</span><span class="hljs-keyword">none</span><span class="hljs-operator">&gt;</span>                                                <span class="hljs-number">139</span>m<br></code></pre></td></tr></table></figure><h3 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h3><p>&amp;emsp;&amp;emsp;所以这里我们创建两个管理组建的svc,名字无所谓,关键是svc的label要能被servicemonitor选中,svc的选择器的label是因为kubeadm的staticPod的label是这样（注意：如果是二进制部署的这俩svc的selector部分不能要，因为二进制安装<code>kube-controller-manager和kube-scheduler</code>都是外部IP不是Pod运行的，service反代外部IP时不需要写selector但是需要手工创建Endpoints。10251是kube-scheduler组件 metrics 数据所在的端口，10252是kube-controller-manager组件的监控数据所在端口。）</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Service</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">kube-system</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">kube-controller-manager</span><br>  <span class="hljs-attr">labels:</span><br>    <span class="hljs-attr">k8s-app:</span> <span class="hljs-string">kube-controller-manager</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">component:</span> <span class="hljs-string">kube-controller-manager</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">ClusterIP</span><br>  <span class="hljs-attr">clusterIP:</span> <span class="hljs-string">None</span><br>  <span class="hljs-attr">ports:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">http-metrics</span><br>    <span class="hljs-attr">port:</span> <span class="hljs-number">10252</span><br>    <span class="hljs-attr">targetPort:</span> <span class="hljs-number">10252</span><br>    <span class="hljs-attr">protocol:</span> <span class="hljs-string">TCP</span><br><span class="hljs-meta">---</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Service</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">kube-system</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">kube-scheduler</span><br>  <span class="hljs-attr">labels:</span><br>    <span class="hljs-attr">k8s-app:</span> <span class="hljs-string">kube-scheduler</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">component:</span> <span class="hljs-string">kube-scheduler</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">ClusterIP</span><br>  <span class="hljs-attr">clusterIP:</span> <span class="hljs-string">None</span><br>  <span class="hljs-attr">ports:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">http-metrics</span><br>    <span class="hljs-attr">port:</span> <span class="hljs-number">10251</span><br>    <span class="hljs-attr">targetPort:</span> <span class="hljs-number">10251</span><br>    <span class="hljs-attr">protocol:</span> <span class="hljs-string">TCP</span><br></code></pre></td></tr></table></figure><p>&amp;emsp;&amp;emsp;二进制的话需要我们手动填入svc对应的ep的属性,我集群是HA的,所有有三个,仅供参考,别傻傻得照抄,另外这个ep的名字得和上面的svc的名字和属性对应上</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Endpoints</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">labels:</span><br>    <span class="hljs-attr">k8s-app:</span> <span class="hljs-string">kube-controller-manager</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">kube-controller-manager</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">kube-system</span><br><span class="hljs-attr">subsets:</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">addresses:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">ip:</span> <span class="hljs-number">172.16</span><span class="hljs-number">.0</span><span class="hljs-number">.2</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">ip:</span> <span class="hljs-number">172.16</span><span class="hljs-number">.0</span><span class="hljs-number">.7</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">ip:</span> <span class="hljs-number">172.16</span><span class="hljs-number">.0</span><span class="hljs-number">.8</span><br>  <span class="hljs-attr">ports:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">http-metrics</span><br>    <span class="hljs-attr">port:</span> <span class="hljs-number">10252</span><br>    <span class="hljs-attr">protocol:</span> <span class="hljs-string">TCP</span><br><span class="hljs-meta">---</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Endpoints</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">labels:</span><br>    <span class="hljs-attr">k8s-app:</span> <span class="hljs-string">kube-scheduler</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">kube-scheduler</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">kube-system</span><br><span class="hljs-attr">subsets:</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">addresses:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">ip:</span> <span class="hljs-number">172.16</span><span class="hljs-number">.0</span><span class="hljs-number">.2</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">ip:</span> <span class="hljs-number">172.16</span><span class="hljs-number">.0</span><span class="hljs-number">.7</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">ip:</span> <span class="hljs-number">172.16</span><span class="hljs-number">.0</span><span class="hljs-number">.8</span><br>  <span class="hljs-attr">ports:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">http-metrics</span><br>    <span class="hljs-attr">port:</span> <span class="hljs-number">10251</span><br>    <span class="hljs-attr">protocol:</span> <span class="hljs-string">TCP</span><br></code></pre></td></tr></table></figure><p>&amp;emsp;&amp;emsp;这里不知道为啥kubeadm部署的没有kubelet这个ep,我博客二进制部署后是会有kubelet这个ep的,下面仅供参考,IP根据实际写。另外kubeadm部署下kubelet的readonly的metrics端口(默认是10255)不会开放可以删掉ep的那部分port</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Endpoints</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">labels:</span><br>    <span class="hljs-attr">k8s-app:</span> <span class="hljs-string">kubelet</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">kubelet</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">kube-system</span><br><span class="hljs-attr">subsets:</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">addresses:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">ip:</span> <span class="hljs-number">172.16</span><span class="hljs-number">.0</span><span class="hljs-number">.14</span><br>    <span class="hljs-attr">targetRef:</span><br>      <span class="hljs-attr">kind:</span> <span class="hljs-string">Node</span><br>      <span class="hljs-attr">name:</span> <span class="hljs-string">k8s-n2</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">ip:</span> <span class="hljs-number">172.16</span><span class="hljs-number">.0</span><span class="hljs-number">.18</span><br>    <span class="hljs-attr">targetRef:</span><br>      <span class="hljs-attr">kind:</span> <span class="hljs-string">Node</span><br>      <span class="hljs-attr">name:</span> <span class="hljs-string">k8s-n3</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">ip:</span> <span class="hljs-number">172.16</span><span class="hljs-number">.0</span><span class="hljs-number">.2</span><br>    <span class="hljs-attr">targetRef:</span><br>      <span class="hljs-attr">kind:</span> <span class="hljs-string">Node</span><br>      <span class="hljs-attr">name:</span> <span class="hljs-string">k8s-m1</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">ip:</span> <span class="hljs-number">172.16</span><span class="hljs-number">.0</span><span class="hljs-number">.20</span><br>    <span class="hljs-attr">targetRef:</span><br>      <span class="hljs-attr">kind:</span> <span class="hljs-string">Node</span><br>      <span class="hljs-attr">name:</span> <span class="hljs-string">k8s-n4</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">ip:</span> <span class="hljs-number">172.16</span><span class="hljs-number">.0</span><span class="hljs-number">.21</span><br>    <span class="hljs-attr">targetRef:</span><br>      <span class="hljs-attr">kind:</span> <span class="hljs-string">Node</span><br>      <span class="hljs-attr">name:</span> <span class="hljs-string">k8s-n5</span><br>  <span class="hljs-attr">ports:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">http-metrics</span><br>    <span class="hljs-attr">port:</span> <span class="hljs-number">10255</span><br>    <span class="hljs-attr">protocol:</span> <span class="hljs-string">TCP</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">cadvisor</span><br>    <span class="hljs-attr">port:</span> <span class="hljs-number">4194</span><br>    <span class="hljs-attr">protocol:</span> <span class="hljs-string">TCP</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">https-metrics</span><br>    <span class="hljs-attr">port:</span> <span class="hljs-number">10250</span><br>    <span class="hljs-attr">protocol:</span> <span class="hljs-string">TCP</span><br></code></pre></td></tr></table></figure><h3 id="坑二"><a href="#坑二" class="headerlink" title="坑二"></a>坑二</h3><p>&amp;emsp;&amp;emsp;访问prometheus server的web页面我们发现即使创建了svc和注入对应ep的信息在target页面发现prometheus server请求被拒绝</p><p><img src="/images/Prometheus-5.png" alt="Prometheus-5"></p><p>&amp;emsp;&amp;emsp;在宿主机上我们发现127.0.0.1才能访问,网卡ip不能访问(这里需要注意的是：这里的IP是取自其他项目的IP,所以ip是192不是上面的我们看到的172，我们只是为了演示这个现象。)</p><figure class="highlight sqf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs sqf">[root@master-<span class="hljs-number">1</span> serviceMonitor]<span class="hljs-meta">#  hostname -i</span><br><span class="hljs-number">192.168</span>.<span class="hljs-number">15.223</span><br><br>[root@master-<span class="hljs-number">1</span> serviceMonitor]<span class="hljs-meta">#  curl -I http:<span class="hljs-comment">//192.168.15.223:10251/metrics</span></span><br>curl: (<span class="hljs-number">7</span>) Failed connect <span class="hljs-keyword">to</span> <span class="hljs-number">192.168</span>.<span class="hljs-number">15.223</span>:<span class="hljs-number">10251</span>; Connection refused<br><br>[root@master-<span class="hljs-number">1</span> serviceMonitor]<span class="hljs-meta">#  curl -I http:<span class="hljs-comment">//127.0.0.1:10251/metrics</span></span><br>HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">200</span> OK<br>Content-Length: <span class="hljs-number">30349</span><br>Content-<span class="hljs-built_in">Type</span>: <span class="hljs-built_in">text</span>/plain; version=<span class="hljs-number">0.0</span>.<span class="hljs-number">4</span><br><span class="hljs-built_in">Date</span>: Mon, <span class="hljs-number">07</span> Jan <span class="hljs-number">2019</span> <span class="hljs-number">13</span>:<span class="hljs-number">33</span>:<span class="hljs-number">50</span> GMT<br></code></pre></td></tr></table></figure><h3 id="解决办法-1"><a href="#解决办法-1" class="headerlink" title="解决办法"></a>解决办法</h3><p>修改管理组件bind的ip，如果使用kubeadm启动的集群，初始化时的config.yml里可以加入如下参数</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">controllerManagerExtraArgs:</span><br><span class="hljs-symbol">  address:</span> <span class="hljs-number">0.0</span><span class="hljs-number">.0</span><span class="hljs-number">.0</span><br><span class="hljs-symbol">schedulerExtraArgs:</span><br><span class="hljs-symbol">  address:</span> <span class="hljs-number">0.0</span><span class="hljs-number">.0</span><span class="hljs-number">.0</span><br></code></pre></td></tr></table></figure><p>已经启动后的使用下面命令更改就会滚动更新</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">sed -ri <span class="hljs-string">&#x27;/--address/s#=.+#=0.0.0.0#&#x27;</span> <span class="hljs-regexp">/etc/</span>kubernetes<span class="hljs-regexp">/manifests/</span>kube-*<br></code></pre></td></tr></table></figure><p>二进制的话查看是不是bind的0.0.0.0如果不是就修改成0.0.0.0<br>多块网卡如果只想bind一个网卡就写对应的主机上的网卡ip,写0.0.0.0就会监听所有网卡的对应端口</p><h3 id="坑三"><a href="#坑三" class="headerlink" title="坑三"></a>坑三</h3><p>&amp;emsp;&amp;emsp;默认serviceMonitor实际上只能选三个namespacs，默认和Kube-system和monitoring，见文件<code>cat prometheus-roleSpecificNamespaces.yaml</code>，需要其他的ns自行创建role</p><h3 id="访问相关页面"><a href="#访问相关页面" class="headerlink" title="访问相关页面"></a>访问相关页面</h3><p>&amp;emsp;&amp;emsp;通过浏览器查看prometheus.monitoring.k8s.local与grafana.monitoring.k8s.local是否正常,若沒问题就可以看到下图结果,grafana初始用户名和密码是admin。</p><p><img src="/images/Prometheus-6.png" alt="Prometheus-6"></p><p><img src="/images/Prometheus-7.png" alt="Prometheus-7"></p><h3 id="部署kind-Prometheus-（以下均为扩展知识）"><a href="#部署kind-Prometheus-（以下均为扩展知识）" class="headerlink" title="部署kind: Prometheus （以下均为扩展知识）"></a>部署kind: Prometheus （以下均为扩展知识）</h3><p>现在我们有了prometheus这个CRD,我们部署一个prometheus server只需要如下声明即可</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">$</span> <span class="hljs-string">cat&lt;&lt;EOF</span> <span class="hljs-string">|</span> <span class="hljs-string">kubectl</span> <span class="hljs-string">apply</span> <span class="hljs-string">-f</span> <span class="hljs-bullet">-</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">ServiceAccount</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">prometheus</span><br><span class="hljs-meta">---</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">monitoring.coreos.com/v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Prometheus</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">prometheus</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">serviceMonitorSelector:</span><br>    <span class="hljs-attr">matchLabels:</span><br>      <span class="hljs-attr">team:</span> <span class="hljs-string">frontend</span><br>  <span class="hljs-attr">serviceAccountName:</span> <span class="hljs-string">prometheus</span><br>  <span class="hljs-attr">resources:</span><br>    <span class="hljs-attr">requests:</span><br>      <span class="hljs-attr">memory:</span> <span class="hljs-string">400Mi</span><br><span class="hljs-string">EOF</span><br></code></pre></td></tr></table></figure><p>上面要注意的是我创建prometheus server的时候有如下值</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">serviceMonitorSelector:</span><br><span class="hljs-symbol">  matchLabels:</span><br><span class="hljs-symbol">    team:</span> frontend<br></code></pre></td></tr></table></figure><p>&amp;emsp;&amp;emsp;该值字面意思可以知道就是指定prometheus server去选择哪些ServiceMonitor,这个概念和svc去选择pod一样,可能一个集群跑很多prometheus server来监控各自选中的ServiceMonitor,如果想一个prometheus server监控所有的则<code>spec.serviceMonitorSelector: &#123;&#125;</code>为空即可,而namespaces的范围同样的设置<code>spec.serviceMonitorNamespaceSelector: &#123;&#125;</code>,官方的prometheus实例里我们可以看到设置了这两个值（prometheus-prometheus.yaml）。</p><p>给prometheus server设置相关的RBAC权限</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">$</span> <span class="hljs-string">cat&lt;&lt;EOF</span> <span class="hljs-string">|</span> <span class="hljs-string">kubectl</span> <span class="hljs-string">apply</span> <span class="hljs-string">-f</span> <span class="hljs-bullet">-</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">rbac.authorization.k8s.io/v1beta1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">ClusterRole</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">prometheus</span><br><span class="hljs-attr">rules:</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">apiGroups:</span> [<span class="hljs-string">&quot;&quot;</span>]<br>  <span class="hljs-attr">resources:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">nodes</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">services</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">endpoints</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">pods</span><br>  <span class="hljs-attr">verbs:</span> [<span class="hljs-string">&quot;get&quot;</span>, <span class="hljs-string">&quot;list&quot;</span>, <span class="hljs-string">&quot;watch&quot;</span>]<br><span class="hljs-bullet">-</span> <span class="hljs-attr">apiGroups:</span> [<span class="hljs-string">&quot;&quot;</span>]<br>  <span class="hljs-attr">resources:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">configmaps</span><br>  <span class="hljs-attr">verbs:</span> [<span class="hljs-string">&quot;get&quot;</span>]<br><span class="hljs-bullet">-</span> <span class="hljs-attr">nonResourceURLs:</span> [<span class="hljs-string">&quot;/metrics&quot;</span>]<br>  <span class="hljs-attr">verbs:</span> [<span class="hljs-string">&quot;get&quot;</span>]<br><span class="hljs-meta">---</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">rbac.authorization.k8s.io/v1beta1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">ClusterRoleBinding</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">prometheus</span><br><span class="hljs-attr">roleRef:</span><br>  <span class="hljs-attr">apiGroup:</span> <span class="hljs-string">rbac.authorization.k8s.io</span><br>  <span class="hljs-attr">kind:</span> <span class="hljs-string">ClusterRole</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">prometheus</span><br><span class="hljs-attr">subjects:</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">kind:</span> <span class="hljs-string">ServiceAccount</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">prometheus</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">default</span><br><span class="hljs-string">EOF</span><br></code></pre></td></tr></table></figure><h3 id="部署一组pod及其svc"><a href="#部署一组pod及其svc" class="headerlink" title="部署一组pod及其svc"></a>部署一组pod及其svc</h3><p>因为service是prometheus operator监控的最小单位,要监控一个svc下的pod的metrics就声明创建一个servicemonitors即可；</p><p>首先,我们部署一个带metrics输出的简单程序的deploy,该镜像里的主进程会在8080端口上输出metrics信息</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">$</span> <span class="hljs-string">cat&lt;&lt;EOF</span> <span class="hljs-string">|</span> <span class="hljs-string">kubectl</span> <span class="hljs-string">apply</span> <span class="hljs-string">-f</span> <span class="hljs-bullet">-</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">extensions/v1beta1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Deployment</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">example-app</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">replicas:</span> <span class="hljs-number">3</span><br>  <span class="hljs-attr">template:</span><br>    <span class="hljs-attr">metadata:</span><br>      <span class="hljs-attr">labels:</span><br>        <span class="hljs-attr">app:</span> <span class="hljs-string">example-app</span><br>    <span class="hljs-attr">spec:</span><br>      <span class="hljs-attr">containers:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">example-app</span><br>        <span class="hljs-attr">image:</span> <span class="hljs-string">zhangguanzhang/instrumented_app</span><br>        <span class="hljs-attr">ports:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">web</span><br>          <span class="hljs-attr">containerPort:</span> <span class="hljs-number">8080</span><br><span class="hljs-string">EOF</span><br></code></pre></td></tr></table></figure><p>创建对应的svc</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">$</span> <span class="hljs-string">cat&lt;&lt;EOF</span> <span class="hljs-string">|</span> <span class="hljs-string">kubectl</span> <span class="hljs-string">apply</span> <span class="hljs-string">-f</span> <span class="hljs-bullet">-</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Service</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">example-app</span><br>  <span class="hljs-attr">labels:</span><br>    <span class="hljs-attr">app:</span> <span class="hljs-string">example-app</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">app:</span> <span class="hljs-string">example-app</span><br>  <span class="hljs-attr">ports:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">web</span><br>    <span class="hljs-attr">port:</span> <span class="hljs-number">8080</span><br><span class="hljs-string">EOF</span><br></code></pre></td></tr></table></figure><h3 id="部署kind-ServiceMonitor"><a href="#部署kind-ServiceMonitor" class="headerlink" title="部署kind: ServiceMonitor"></a>部署kind: ServiceMonitor</h3><p>现在创建一个ServiceMonitor来告诉prometheus server需要监控带有label app: example-app的svc背后的一组pod的metrics</p><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-attribute">$ cat&lt;&lt;EOF | kubectl apply -f -</span><br><span class="hljs-attribute">apiVersion</span><span class="hljs-punctuation">:</span> <span class="hljs-string">monitoring.coreos.com/v1</span><br><span class="hljs-attribute">kind</span><span class="hljs-punctuation">:</span> <span class="hljs-string">ServiceMonitor</span><br><span class="hljs-attribute">metadata</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">example-app</span><br>  <span class="hljs-attribute">labels</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-attribute">team</span><span class="hljs-punctuation">:</span> <span class="hljs-string">frontend</span><br><span class="hljs-attribute">spec</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">selector</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-attribute">matchLabels</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-attribute">app</span><span class="hljs-punctuation">:</span> <span class="hljs-string">example-app</span><br>  <span class="hljs-attribute">endpoints</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">port: web</span><br>EOF<br></code></pre></td></tr></table></figure><p>默认情况下ServiceMonitor和监控对象必须是在相同Namespace下的,如果要关联非同ns下需要下面这样设置值</p><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-attribute">spec</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">namespaceSelector</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-attribute">matchNames</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">target_ns_name</span><br></code></pre></td></tr></table></figure><p>如果希望ServiceMonitor可以关联任意命名空间下的标签，则通过以下方式定义：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">namespaceSelector:</span><br>    <span class="hljs-attr">any:</span> <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><p>如果需要监控的Target对象启用了BasicAuth认证，那在定义ServiceMonitor对象时，可以使用endpoints配置中定义basicAuth如下所示basicAuth中的password和username值来源于同ns下的一个名为basic-auth的Secret</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">spec</span><br>  <span class="hljs-attr">endpoints:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">basicAuth:</span><br>      <span class="hljs-attr">password:</span><br>        <span class="hljs-attr">name:</span> <span class="hljs-string">basic-auth</span><br>        <span class="hljs-attr">key:</span> <span class="hljs-string">password</span><br>      <span class="hljs-attr">username:</span><br>        <span class="hljs-attr">name:</span> <span class="hljs-string">basic-auth</span><br>        <span class="hljs-attr">key:</span> <span class="hljs-string">user</span><br>    <span class="hljs-attr">port:</span> <span class="hljs-string">web</span><br><span class="hljs-meta">---</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Secret</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">basic-auth</span><br><span class="hljs-attr">type:</span> <span class="hljs-string">Opaque</span><br><span class="hljs-attr">data:</span><br>  <span class="hljs-attr">user:</span> <span class="hljs-string">dXNlcgo=</span> <span class="hljs-comment"># base64编码后的用户名</span><br>  <span class="hljs-attr">password:</span> <span class="hljs-string">cGFzc3dkCg==</span> <span class="hljs-comment"># base64编码后的密码</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Kubernetes之Weave Scope集群监控</title>
    <link href="/2019/08/26/Kubernetes-Weave-Scope/"/>
    <url>/2019/08/26/Kubernetes-Weave-Scope/</url>
    
    <content type="html"><![CDATA[<h3 id="1、资源指标和资源监控"><a href="#1、资源指标和资源监控" class="headerlink" title="1、资源指标和资源监控"></a>1、资源指标和资源监控</h3><blockquote><p>一个集群系统管理离不开监控，同样的Kubernetes也需要根据数据指标来采集相关数据，从而完成对集群系统的监控状况进行监测。这些指标总体上分为两个组成：监控集群本身和监控Pod对象，通常一个集群的衡量性指标包括以下几个部分：</p></blockquote><ul><li>节点资源状态：主要包括网络带宽、磁盘空间、CPU和内存使用率</li><li>节点的数量：即时性了解集群的可用节点数量可以为用户计算服务器使用的费用支出提供参考。</li><li>运行的Pod对象：正在运行的Pod对象数量可以评估可用节点数量是否足够，以及节点故障时是否能平衡负载。</li></ul><h3 id="另一个方面，对Pod资源对象的监控需求大概有以下三类："><a href="#另一个方面，对Pod资源对象的监控需求大概有以下三类：" class="headerlink" title="另一个方面，对Pod资源对象的监控需求大概有以下三类："></a>另一个方面，对Pod资源对象的监控需求大概有以下三类：</h3><blockquote><ul><li>Kubernetes指标：监测特定应用程序相关的Pod对象的部署过程、副本数量、状态信息、健康状态、网络等等。</li></ul></blockquote><ul><li>容器指标：容器的资源需求、资源限制、CPU、内存、磁盘空间、网络带宽的实际占用情况。</li><li>应用程序指标：应用程序自身的内建指标，和业务规则相关</li></ul><h3 id="2、Weave-Scope监控集群"><a href="#2、Weave-Scope监控集群" class="headerlink" title="2、Weave Scope监控集群"></a>2、Weave Scope监控集群</h3><blockquote><p>Weave Scope 是 Docker 和 Kubernetes 可视化监控工具。Scope 提供了至上而下的集群基础设施和应用的完整视图，用户可以轻松对分布式的容器化应用进行实时监控和问题诊断。 对于复杂的应用编排和依赖关系，scope可以使用清晰的图标一览应用状态和拓扑关系。</p></blockquote><h3 id="（1）Weave-Scope部署（注意：非常依赖coredns）"><a href="#（1）Weave-Scope部署（注意：非常依赖coredns）" class="headerlink" title="（1）Weave Scope部署（注意：非常依赖coredns）"></a>（1）Weave Scope部署（注意：非常依赖coredns）</h3><blockquote><p>参考官方网站：<a href="https://www.weave.works/docs/scope/latest/installing/#k8s">https://www.weave.works/docs/scope/latest/installing/#k8s</a></p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@k8s-master mainfests]<span class="hljs-comment"># kubectl apply -f &quot;https://cloud.weave.works/k8s/scope.yaml?k8s-version=$(kubectl version | base64 | tr -d &#x27;\n&#x27;)&quot;</span><br>namespace/weave created         <span class="hljs-comment">#创建名称空间weave，也可以在创建时指定名称空间</span><br>serviceaccount/weave-scope created      <span class="hljs-comment">#创建serviceaccount   </span><br>clusterrole.rbac.authorization.k8s.io/weave-scope created      <span class="hljs-comment">#创建角色</span><br>clusterrolebinding.rbac.authorization.k8s.io/weave-scope created      <span class="hljs-comment">#绑定角色</span><br>deployment.apps/weave-scope-app created       <span class="hljs-comment">#创建deployment</span><br>service/weave-scope-app created           <span class="hljs-comment">#创建service</span><br>daemonset.extensions/weave-scope-agent created      <span class="hljs-comment">#创建deamonset</span><br></code></pre></td></tr></table></figure><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs x86asm">[root@k8s-master mainfests]# kubectl get ns<br>NAME            STATUS    AGE<br><span class="hljs-meta">default</span>         Active    <span class="hljs-number">68d</span><br>ingress-nginx   Active    <span class="hljs-number">28d</span><br>kube-<span class="hljs-meta">public</span>     Active    <span class="hljs-number">68d</span><br>kube-system     Active    <span class="hljs-number">68d</span><br>weave           Active    1m<br></code></pre></td></tr></table></figure><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs tap">[root@master ~]<span class="hljs-comment"># kubectl get deployment -n weave</span><br>NAME                        READY   UP-TO-DATE   AVAILABLE   AGE<br>weave-scope-app             1/1    <span class="hljs-number"> 1 </span>          <span class="hljs-number"> 1 </span>          13m<br>weave-scope-cluster-agent   1/1    <span class="hljs-number"> 1 </span>          <span class="hljs-number"> 1 </span>          13m<br></code></pre></td></tr></table></figure><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">[root@k8s-<span class="hljs-keyword">master</span> <span class="hljs-title">mainfests</span>]<span class="hljs-comment"># kubectl get svc -n weave</span><br>NAME              <span class="hljs-keyword">TYPE</span>        CLUSTER-IP      EXTERNAL-IP   PORT(S)   AGE<br>weave-scope-app   ClusterIP   <span class="hljs-number">10.97</span>.<span class="hljs-number">229.215</span>   <span class="hljs-tag">&lt;none&gt;</span>        <span class="hljs-number">80</span>/TCP    <span class="hljs-number">33s</span><br></code></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql">[root<span class="hljs-variable">@master</span> <span class="hljs-operator">~</span>]# kubectl <span class="hljs-keyword">get</span> pod <span class="hljs-operator">-</span>n weave<br>NAME                                         READY   STATUS    RESTARTS   AGE<br>weave<span class="hljs-operator">-</span><span class="hljs-keyword">scope</span><span class="hljs-operator">-</span>agent<span class="hljs-number">-28</span>ckk                      <span class="hljs-number">1</span><span class="hljs-operator">/</span><span class="hljs-number">1</span>     <span class="hljs-keyword">Running</span>   <span class="hljs-number">0</span>          <span class="hljs-number">14</span>m<br>weave<span class="hljs-operator">-</span><span class="hljs-keyword">scope</span><span class="hljs-operator">-</span>agent<span class="hljs-operator">-</span>fpffk                      <span class="hljs-number">1</span><span class="hljs-operator">/</span><span class="hljs-number">1</span>     <span class="hljs-keyword">Running</span>   <span class="hljs-number">0</span>          <span class="hljs-number">14</span>m<br>weave<span class="hljs-operator">-</span><span class="hljs-keyword">scope</span><span class="hljs-operator">-</span>agent<span class="hljs-operator">-</span>qgrz8                      <span class="hljs-number">1</span><span class="hljs-operator">/</span><span class="hljs-number">1</span>     <span class="hljs-keyword">Running</span>   <span class="hljs-number">0</span>          <span class="hljs-number">14</span>m<br>weave<span class="hljs-operator">-</span><span class="hljs-keyword">scope</span><span class="hljs-operator">-</span>app<span class="hljs-number">-6</span>cbf5dbc45<span class="hljs-operator">-</span>bdv5f             <span class="hljs-number">1</span><span class="hljs-operator">/</span><span class="hljs-number">1</span>     <span class="hljs-keyword">Running</span>   <span class="hljs-number">0</span>          <span class="hljs-number">14</span>m<br>weave<span class="hljs-operator">-</span><span class="hljs-keyword">scope</span><span class="hljs-operator">-</span>cluster<span class="hljs-operator">-</span>agent<span class="hljs-number">-5</span>d7f64677b<span class="hljs-operator">-</span>djnhm   <span class="hljs-number">1</span><span class="hljs-operator">/</span><span class="hljs-number">1</span>     <span class="hljs-keyword">Running</span>   <span class="hljs-number">0</span>          <span class="hljs-number">14</span>m<br></code></pre></td></tr></table></figure><blockquote><ul><li>DaemonSet weave-scope-agent，集群每个节点上都会运行的 scope agent 程序，负责收集数据。</li></ul></blockquote><ul><li>Deployment weave-scope-app，scope 应用，从 agent 获取数据，通过 Web UI 展示并与用户交互。</li><li>Service weave-scope-app，默认是<code>ClusterIP</code>类型，为了方便已通过<code> kubectl edit</code> 修改为 <code>NodePort</code></li></ul><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">[root@k8s-<span class="hljs-keyword">master</span> <span class="hljs-title">mainfests</span>]<span class="hljs-comment"># kubectl edit svc/weave-scope-app -n weave</span><br>将service的<span class="hljs-keyword">type</span>改为NodePort<br>service/weave-scope-app edited<br></code></pre></td></tr></table></figure><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">[root@master ~]# kubectl <span class="hljs-keyword">get</span> svc -n weave<br><span class="hljs-type">NAME</span>              <span class="hljs-keyword">TYPE</span>       <span class="hljs-keyword">CLUSTER</span>-IP      <span class="hljs-keyword">EXTERNAL</span>-IP   PORT(S)        AGE<br>weave-scope-app   NodePort   <span class="hljs-number">10.102</span><span class="hljs-number">.221</span><span class="hljs-number">.35</span>   &lt;<span class="hljs-keyword">none</span>&gt;        <span class="hljs-number">80</span>:<span class="hljs-number">32224</span>/TCP   <span class="hljs-number">18</span>m<br></code></pre></td></tr></table></figure><h3 id="（2）使用-Scope"><a href="#（2）使用-Scope" class="headerlink" title="（2）使用 Scope"></a>（2）使用 Scope</h3><blockquote><p>浏览器访问 <a href="http://192.168.1.108:32224/">http://192.168.1.108:32224/</a>   Scope 默认显示当前所有的 Controller（Deployment、DaemonSet 等）。</p></blockquote><p><img src="/images/Scope-1.png" alt="Scope-1"></p><h3 id="（3）拓扑结构"><a href="#（3）拓扑结构" class="headerlink" title="（3）拓扑结构"></a>（3）拓扑结构</h3><blockquote><p>Scope 会自动构建应用和集群的逻辑拓扑。比如点击顶部 PODS，会显示所有 Pod 以及 Pod 之间的依赖关系。</p></blockquote><p><img src="/images/Scope-2.png" alt="Scope-2"></p><blockquote><p>点击 <code>HOSTS</code>，会显示各个节点之间的关系。</p></blockquote><p><img src="/images/Scope-3.png" alt="Scope-3"></p><h3 id="（4）实时资源监控"><a href="#（4）实时资源监控" class="headerlink" title="（4）实时资源监控"></a>（4）实时资源监控</h3><blockquote><p>可以在 Scope 中查看资源的 CPU 和内存使用情况。 支持的资源有 Host、Pod 和 Container。</p></blockquote><p><img src="/images/Scope-4.png" alt="Scope-4"></p><h3 id="（5）在线操作"><a href="#（5）在线操作" class="headerlink" title="（5）在线操作"></a>（5）在线操作</h3><blockquote><p>可以查看 Pod 的日志：</p></blockquote><p><img src="/images/Scope-5.png" alt="Scope-5"></p><blockquote><p>点击 Deployment 的 + 可以执行 Scale Up 操作：</p></blockquote><p><img src="/images/Scope-6.png" alt="Scope-6"></p><h3 id="（6）强大的搜索功能"><a href="#（6）强大的搜索功能" class="headerlink" title="（6）强大的搜索功能"></a>（6）强大的搜索功能</h3><blockquote><p>Scope 支持关键字搜索和定位资源。</p></blockquote><p><img src="/images/Scope-7.png" alt="Scope-7"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Kubernetes之资源指标</title>
    <link href="/2019/08/26/Kubernetes-Resource-metrics/"/>
    <url>/2019/08/26/Kubernetes-Resource-metrics/</url>
    
    <content type="html"><![CDATA[<blockquote><p>Metrics Server 是实现了 Metrics API 的元件,其目标是取代 Heapster 作位 Pod 与 Node 提供资源的 Usage metrics,该元件会从每个 Kubernetes 节点上的 Kubelet 所公开的 Summary API 即10250端口中收集 Metrics。并将收集的信息存储在内存中，所以当通过kubectl top不能查看资源数据的历史情况，其它资源指标数据则通过prometheus采集了。</p></blockquote><ul><li>Horizontal Pod Autoscaler（HPA）控制器用于实现基于CPU使用率进行自动Pod伸缩的功能。</li><li>HPA控制器基于Master的kube-controller-manager服务启动参数–horizontal-pod-autoscaler-sync-period定义是时长（默认30秒）,周期性监控目标Pod的CPU使用率,并在满足条件时对ReplicationController或Deployment中的Pod副本数进行调整,以符合用户定义的平均Pod CPU使用率。</li><li>在新版本的kubernetes中 Pod CPU使用率不在来源于heapster,而是来自于metrics-server</li><li>官网原话是 The –horizontal-pod-autoscaler-use-rest-clients is true or unset. Setting this to false switches to Heapster-based autoscaling, which is deprecated.</li><li>yml 文件来自于github <a href="https://github.com/kubernetes-incubator/metrics-server/tree/master/deploy/1.8+">https://github.com/kubernetes-incubator/metrics-server/tree/master/deploy/1.8+</a></li><li>&#x2F;etc&#x2F;kubernetes&#x2F;pki&#x2F;front-proxy-ca.pem 文件来自于部署kubernetes集群</li><li>需要对yml文件进行修改才可使用 改动自行见文件</li></ul><h3 id="开启聚合层-Aggregation-Layer"><a href="#开启聚合层-Aggregation-Layer" class="headerlink" title="开启聚合层(Aggregation Layer)"></a>开启聚合层(Aggregation Layer)</h3><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs gradle">设置apiserver相关参数<br>      --requestheader-client-ca-<span class="hljs-keyword">file</span>=<span class="hljs-regexp">/etc/</span>kubernetes<span class="hljs-regexp">/pki/</span>front-proxy-ca.pem  \<br>      --proxy-client-cert-<span class="hljs-keyword">file</span>=<span class="hljs-regexp">/etc/</span>kubernetes<span class="hljs-regexp">/pki/</span>front-proxy-client.pem  \<br>      --proxy-client-key-<span class="hljs-keyword">file</span>=<span class="hljs-regexp">/etc/</span>kubernetes<span class="hljs-regexp">/pki/</span>front-proxy-client-key.pem  \<br>      --requestheader-allowed-names=aggregator  \<br>      --requestheader-<span class="hljs-keyword">group</span>-headers=X-Remote-<span class="hljs-keyword">Group</span>  \<br>      --requestheader-extra-headers-prefix=X-Remote-Extra-  \<br>      --requestheader-username-headers=X-Remote-User  \<br></code></pre></td></tr></table></figure><h3 id="关于聚合层的一些知识"><a href="#关于聚合层的一些知识" class="headerlink" title="关于聚合层的一些知识"></a>关于聚合层的一些知识</h3><blockquote><p>聚合层运行在apiserver进程内部，允许用户为集群安装额外的Kubernetes风格的API，扩展core API的功能。聚合层需要启动apiserver的时候开启方可使用。<br>在用户注册扩展资源之前，聚合层什么也不做。用户要注册API，必需向系统中添加一个APIService对象，用来声明API的URL路径以及处理请求的后端APIService。此后，聚合层会将发往那个路径的所有请求(e.g. &#x2F;apis&#x2F;metrics.k8s.io&#x2F;v1beta1&#x2F;nodes)都转发给注册的APIService。</p></blockquote><blockquote><p>metrics-server： 它也是一种API Server，提供了核心的Metrics API，就像k8s组件kube-apiserver提供了很多API群组一样，但它不是k8s组成部分，而是托管运行在k8s之上的Pod。为了让用户无缝的使用metrics-server当中的API，还需要把这类自定义的API，通过聚合器聚合到核心API组里，然后可以把此API当作是核心API的一部分，通过kubectl api-versions可直接查看。</p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">apiregistration.k8s.io/v1beta1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">APIService</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">v1beta1.metrics.k8s.io</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">service:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">metrics-server</span><br>    <span class="hljs-attr">namespace:</span> <span class="hljs-string">kube-system</span><br>  <span class="hljs-attr">group:</span> <span class="hljs-string">metrics.k8s.io</span><br>  <span class="hljs-attr">version:</span> <span class="hljs-string">v1beta1</span><br>  <span class="hljs-attr">insecureSkipTLSVerify:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">groupPriorityMinimum:</span> <span class="hljs-number">100</span><br>  <span class="hljs-attr">versionPriority:</span> <span class="hljs-number">10</span><br></code></pre></td></tr></table></figure><blockquote><p>如果APIService里指定了svc，那么请求kube-apiserver的web路径的时候kube-apiserver会把请求转发到你选中的svc上，这里可以看官方文件里一部分内容。当我们使用kubectl top node的时候实际是请求kube-apiserver的url路径&#x2F;apis&#x2F;metrics.k8s.io&#x2F;v1beta1&#x2F;nodes,由于创建了metrics-server的APIService，请求会被转发到svc的pod，pod工作流程是获取node列表，然后去请求node上的kubelet的metrics端口获取metrics信息收集起来，信息包括了node的基本cpu和内存以及上面跑的pod的cpu和内存。这之前流量是kube-apiserver到pod上中间经过svc的ip，如果没有kube-proxy和网络组件就无法通信。</p></blockquote><h4 id="利用nginx反向代理来理解："><a href="#利用nginx反向代理来理解：" class="headerlink" title="利用nginx反向代理来理解："></a>利用nginx反向代理来理解：</h4><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs crmsh"><span class="hljs-keyword">location</span> <span class="hljs-title">/apis</span>/metrics.k8s.io/ &#123;<br>    to svc pod;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="小细节：（使用如下命令可查看详细的请求）"><a href="#小细节：（使用如下命令可查看详细的请求）" class="headerlink" title="小细节：（使用如下命令可查看详细的请求）"></a>小细节：（使用如下命令可查看详细的请求）</h3><blockquote><p>[root@master-1 1.8+]# kubectl -v&#x3D;8 top node</p></blockquote><h3 id="首先在k8s-m1测试一下-kubectl-top-指令："><a href="#首先在k8s-m1测试一下-kubectl-top-指令：" class="headerlink" title="首先在k8s-m1测试一下 kubectl top 指令："></a>首先在k8s-m1测试一下 kubectl top 指令：</h3><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs subunit">[root@master<span class="hljs-string">-1</span> ~]#  kubectl top node<br><span class="hljs-keyword">Error </span>from server (NotFound): the server could not find the requested resource (get services http:heapster:)<br></code></pre></td></tr></table></figure><blockquote><p>发现 top 命令无法取得 Metrics,这表示 Kubernetes 集群没有安装 Heapster 或着 Metrics Server 来提供 Metrics API 给 top 指令取得资源使用量。</p></blockquote><h3 id="由于上述问题-我们要在k8s-m1部署-Metrics-Server来解决："><a href="#由于上述问题-我们要在k8s-m1部署-Metrics-Server来解决：" class="headerlink" title="由于上述问题,我们要在k8s-m1部署 Metrics Server来解决："></a>由于上述问题,我们要在k8s-m1部署 Metrics Server来解决：</h3><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs tap">[root@master-1 1.8+]<span class="hljs-comment"># ll</span><br>total 28<br>-rw-r-----<span class="hljs-number"> 1 </span>root root<span class="hljs-number"> 384 </span>Mar<span class="hljs-number"> 15 </span>16:42 aggregated-metrics-reader.yaml<br>-rw-r-----<span class="hljs-number"> 1 </span>root root<span class="hljs-number"> 308 </span>Mar<span class="hljs-number"> 15 </span>16:42 auth-delegator.yaml<br>-rw-r-----<span class="hljs-number"> 1 </span>root root<span class="hljs-number"> 329 </span>Mar<span class="hljs-number"> 15 </span>16:42 auth-reader.yaml<br>-rw-r-----<span class="hljs-number"> 1 </span>root root<span class="hljs-number"> 298 </span>Mar<span class="hljs-number"> 15 </span>16:42 metrics-apiservice.yaml<br>-rw-r-----<span class="hljs-number"> 1 </span>root root<span class="hljs-number"> 947 </span>Mar<span class="hljs-number"> 20 </span>11:59 metrics-server-deployment.yaml<br>-rw-r-----<span class="hljs-number"> 1 </span>root root<span class="hljs-number"> 249 </span>Mar<span class="hljs-number"> 15 </span>16:42 metrics-server-service.yaml<br>-rw-r-----<span class="hljs-number"> 1 </span>root root<span class="hljs-number"> 502 </span>Mar<span class="hljs-number"> 15 </span>16:42 resource-reader.yaml<br></code></pre></td></tr></table></figure><h3 id="修改metrics-server-deployment-yaml文件"><a href="#修改metrics-server-deployment-yaml文件" class="headerlink" title="修改metrics-server-deployment.yaml文件"></a>修改metrics-server-deployment.yaml文件</h3><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs stylus">...<br>        image: zhangguanzhang/gcr<span class="hljs-selector-class">.io</span><span class="hljs-selector-class">.google_containers</span><span class="hljs-selector-class">.metrics-server-amd64</span>:v0.<span class="hljs-number">3.1</span><br>        args:<br>        - <span class="hljs-attr">--kubelet-preferred-address-types</span>=InternalIP<br>        - <span class="hljs-attr">--kubelet-insecure-tls</span><br>....<br></code></pre></td></tr></table></figure><blockquote><ul><li>metrics-server这个容器不能通过CoreDNS 10.96.0.10:53 解析各Node的主机名，metrics-server连节点时默认是连接节点的主机名，需要加个参数，让它连接节点的IP：“–kubelet-preferred-address-types&#x3D;InternalIP”</li></ul></blockquote><ul><li>因为10250是https端口，连接它时需要提供证书，所以加上–kubelet-insecure-tls，表示不验证客户端证书。</li></ul><h3 id="应用当前目录下的所有yml文件"><a href="#应用当前目录下的所有yml文件" class="headerlink" title="应用当前目录下的所有yml文件"></a>应用当前目录下的所有yml文件</h3><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">[root@master<span class="hljs-number">-1</span> <span class="hljs-number">1.8</span>+]# kubectl apply -f .<br>clusterrole.rbac.<span class="hljs-keyword">authorization</span>.k8s.io/<span class="hljs-keyword">system</span>:aggregated-metrics-reader unchanged<br>clusterrolebinding.rbac.<span class="hljs-keyword">authorization</span>.k8s.io/metrics-<span class="hljs-keyword">server</span>:<span class="hljs-keyword">system</span>:auth-delegator unchanged<br>rolebinding.rbac.<span class="hljs-keyword">authorization</span>.k8s.io/metrics-<span class="hljs-keyword">server</span>-auth-reader unchanged<br>apiservice.apiregistration.k8s.io/v1beta1.metrics.k8s.io unchanged<br>serviceaccount/metrics-<span class="hljs-keyword">server</span> unchanged<br>deployment.extensions/metrics-<span class="hljs-keyword">server</span> unchanged<br>service/metrics-<span class="hljs-keyword">server</span> unchanged<br>clusterrole.rbac.<span class="hljs-keyword">authorization</span>.k8s.io/<span class="hljs-keyword">system</span>:metrics-<span class="hljs-keyword">server</span> unchanged<br>clusterrolebinding.rbac.<span class="hljs-keyword">authorization</span>.k8s.io/<span class="hljs-keyword">system</span>:metrics-<span class="hljs-keyword">server</span> unchanged<br></code></pre></td></tr></table></figure><h3 id="查看pod状态"><a href="#查看pod状态" class="headerlink" title="查看pod状态"></a>查看pod状态</h3><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">[root@master<span class="hljs-number">-1</span> <span class="hljs-number">1.8</span>+]# kubectl <span class="hljs-keyword">get</span> pod -n kube-<span class="hljs-keyword">system</span> -l  k8s-app=metrics-<span class="hljs-keyword">server</span><br><span class="hljs-type">NAME</span>                              READY   STATUS    RESTARTS   AGE<br>metrics-<span class="hljs-keyword">server</span><span class="hljs-number">-7</span>b5c5864ff-zr2k7   <span class="hljs-number">1</span>/<span class="hljs-number">1</span>     Running   <span class="hljs-number">0</span>          <span class="hljs-number">4</span>h1m<br></code></pre></td></tr></table></figure><h3 id="完成后-等待一段时间-约-30s-1m-收集-Metrics-再次执行-kubectl-top-指令查看："><a href="#完成后-等待一段时间-约-30s-1m-收集-Metrics-再次执行-kubectl-top-指令查看：" class="headerlink" title="完成后,等待一段时间(约 30s - 1m)收集 Metrics,再次执行 kubectl top 指令查看："></a>完成后,等待一段时间(约 30s - 1m)收集 Metrics,再次执行 kubectl top 指令查看：</h3><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-literal">master</span>-<span class="hljs-number">1</span> <span class="hljs-number">1.8</span>+]<span class="hljs-comment"># kubectl top node</span><br>NAME       CPU(cores)   CPU%   MEMORY(bytes)   MEMORY%   <br><span class="hljs-literal">master</span>-<span class="hljs-number">1</span>   <span class="hljs-number">389m</span>         <span class="hljs-number">4</span>%     <span class="hljs-number">3908M</span>i          <span class="hljs-number">3</span>%        <br><span class="hljs-keyword">node</span><span class="hljs-title">-0</span>     <span class="hljs-number">129m</span>         <span class="hljs-number">1</span>%     <span class="hljs-number">2582M</span>i          <span class="hljs-number">2</span>%        <br><span class="hljs-keyword">node</span><span class="hljs-title">-1</span>     <span class="hljs-number">193m</span>         <span class="hljs-number">2</span>%     <span class="hljs-number">19716M</span>i         <span class="hljs-number">17</span>%       <br></code></pre></td></tr></table></figure><h3 id="使用HTTP代理访问Kubernetes-API"><a href="#使用HTTP代理访问Kubernetes-API" class="headerlink" title="使用HTTP代理访问Kubernetes API"></a>使用HTTP代理访问Kubernetes API</h3><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros">此命令启动Kubernetes API服务器的代理：<br>kubectl<span class="hljs-built_in"> proxy </span><span class="hljs-attribute">--port</span>=8080<br></code></pre></td></tr></table></figure><h3 id="访问Kubernetes-API"><a href="#访问Kubernetes-API" class="headerlink" title="访问Kubernetes API"></a>访问Kubernetes API</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs awk">当代理服务器正在运行，则可以使用curl或wget访问API。<br><br>获取API版本：<br><br>curl http:<span class="hljs-regexp">//</span>localhost:<span class="hljs-number">8080</span><span class="hljs-regexp">/api/</span><br><br>&#123;<br>  <span class="hljs-string">&quot;kind&quot;</span>: <span class="hljs-string">&quot;APIVersions&quot;</span>,<br>  <span class="hljs-string">&quot;versions&quot;</span>: [<br>    <span class="hljs-string">&quot;v1&quot;</span><br>  ],<br>  <span class="hljs-string">&quot;serverAddressByClientCIDRs&quot;</span>: [<br>    &#123;<br>      <span class="hljs-string">&quot;clientCIDR&quot;</span>: <span class="hljs-string">&quot;0.0.0.0/0&quot;</span>,<br>      <span class="hljs-string">&quot;serverAddress&quot;</span>: <span class="hljs-string">&quot;10.0.2.15:8443&quot;</span><br>    &#125;<br>  ]<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Horizontal-Pod-Autoscaler（HPA）"><a href="#Horizontal-Pod-Autoscaler（HPA）" class="headerlink" title="Horizontal Pod Autoscaler（HPA）"></a>Horizontal Pod Autoscaler（HPA）</h3><blockquote><p>Horizontal Pod Autoscaling，简称HPA，是Kubernetes中实现POD水平自动伸缩的功能。为什么要水平而不叫垂直, 那是因为自动扩展主要分为两种:</p></blockquote><ul><li>水平扩展(scale out)，针对于实例数目的增减</li><li>垂直扩展(scal up)，即单个实例可以使用的资源的增减, 比如增加cpu和增大内存而HPA属于前者。它可以根据CPU使用率或应用自定义metrics自动扩展Pod数量(支持 replication controller、deployment 和 replica set)</li></ul><h3 id="HPA的检测周期由kube-controller-manager的参数控制："><a href="#HPA的检测周期由kube-controller-manager的参数控制：" class="headerlink" title="HPA的检测周期由kube-controller-manager的参数控制："></a>HPA的检测周期由kube-controller-manager的参数控制：</h3><table><thead><tr><th>参数</th><th>默认值</th><th>描述</th></tr></thead><tbody><tr><td>–horizontal-pod-autoscaler-sync-period</td><td>30s</td><td>HPA控制管理器每隔30s查询metrics的资源使用情况。</td></tr><tr><td>–horizontal-pod-autoscaler-downscale-delay</td><td>5m</td><td>完成缩减操作后，HPA必须等待多长时间才能启动另一个缩减操作。</td></tr><tr><td>–horizontal-pod-autoscaler-upscale-delay</td><td>3m</td><td>完成扩容操作后，HPA必须等待多长时间才能启动另一个扩容操作。</td></tr></tbody></table><h3 id="Horizontal-Pod-Autoscaler-API对象"><a href="#Horizontal-Pod-Autoscaler-API对象" class="headerlink" title="Horizontal Pod Autoscaler API对象"></a>Horizontal Pod Autoscaler API对象</h3><blockquote><p>HPA是Kubernetes autoscalingAPI组中的API资源。当前的稳定版本autoscaling&#x2F;v1，仅包括对CPU自动缩放的支持。要获得基于内存和自定义指标进行扩展的额外支持，请改用测试版：autoscaling&#x2F;v2beta1。</p></blockquote><h3 id="HPA清单定义示例"><a href="#HPA清单定义示例" class="headerlink" title="HPA清单定义示例"></a>HPA清单定义示例</h3><blockquote><p>以下代码段演示了在HPA清单中使用不同的指令。请参阅示例下面的列表以了解每个指令的用途。</p></blockquote><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-attribute">apiVersion</span><span class="hljs-punctuation">:</span> <span class="hljs-string">autoscaling/v2beta1</span><br><span class="hljs-attribute">kind</span><span class="hljs-punctuation">:</span> <span class="hljs-string">HorizontalPodAutoscaler</span><br><span class="hljs-attribute">metadata</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">hello-world</span><br><span class="hljs-attribute">spec</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">scaleTargetRef</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-attribute">apiVersion</span><span class="hljs-punctuation">:</span> <span class="hljs-string">extensions/v1beta1</span><br>    <span class="hljs-attribute">kind</span><span class="hljs-punctuation">:</span> <span class="hljs-string">Deployment</span><br>    <span class="hljs-attribute">name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">hello-world</span><br>  <span class="hljs-attribute">minReplicas</span><span class="hljs-punctuation">:</span> <span class="hljs-string">1</span><br>  <span class="hljs-attribute">maxReplicas</span><span class="hljs-punctuation">:</span> <span class="hljs-string">10</span><br>  <span class="hljs-attribute">metrics</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">type: Resource</span><br>    <span class="hljs-attribute">resource</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-attribute">name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">cpu</span><br>      <span class="hljs-attribute">targetAverageUtilization</span><span class="hljs-punctuation">:</span> <span class="hljs-string">50</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">type: Resource</span><br>    <span class="hljs-attribute">resource</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-attribute">name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">memory</span><br>      <span class="hljs-attribute">targetAverageValue</span><span class="hljs-punctuation">:</span> <span class="hljs-string">100Mi</span><br></code></pre></td></tr></table></figure><table><thead><tr><th>指令</th><th>描述</th></tr></thead><tbody><tr><td>apiVersion: autoscaling&#x2F;v2beta1</td><td>autoscaling正在使用的Kubernetes API组的版本。此示例清单使用autoscaling&#x2F;v2beta1版本，因此启用了按CPU和内存进行扩展。</td></tr><tr><td>name: hello-world</td><td>表示HPA正在为deployment中的hello-word执行自动扩展。</td></tr><tr><td>minReplicas: 1</td><td>表示运行的最小副本数不能低于1。</td></tr><tr><td>maxReplicas: 10</td><td>表示deployment中最大副本数不能超过10。</td></tr><tr><td>targetAverageUtilization: 50</td><td>表示当平均运行pod使用超过其请求CPU的50％时，deployment将扩展pod。</td></tr><tr><td>targetAverageValue: 100Mi</td><td>表示当平均运行pod使用超过100Mi的内存时，deployment将扩展pod。</td></tr></tbody></table><blockquote><p>需要注意的是explain命令可能会显示旧的group&#x2F;version，我们可以通过–api-version参数显式的方式制定我们需要获取的版本，例如：</p></blockquote><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs n1ql">[root@master-1 serviceMonitor]# kubectl <span class="hljs-keyword">explain</span> hpa.spec --api-version autoscaling/v2beta1<br>KIND:     HorizontalPodAutoscaler<br>VERSION:  autoscaling/v2beta1<br><br>RESOURCE: spec &lt;<span class="hljs-keyword">Object</span>&gt;<br><br>DESCRIPTION:<br>     spec <span class="hljs-keyword">is</span> the specification <span class="hljs-keyword">for</span> the behaviour of the autoscaler. More info:<br>     https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-<span class="hljs-keyword">and</span>-status.<br><br>     HorizontalPodAutoscalerSpec describes the desired functionality of the<br>     HorizontalPodAutoscaler.<br><br>FIELDS:<br>   maxReplicas&lt;integer&gt; -required-<br>     maxReplicas <span class="hljs-keyword">is</span> the <span class="hljs-built_in">upper</span> <span class="hljs-keyword">limit</span> <span class="hljs-keyword">for</span> the <span class="hljs-keyword">number</span> of replicas <span class="hljs-keyword">to</span> which the<br>     autoscaler can scale up. It cannot be less that minReplicas.<br><br>   metrics&lt;[]<span class="hljs-keyword">Object</span>&gt;<br>     metrics <span class="hljs-built_in">contains</span> the specifications <span class="hljs-keyword">for</span> which <span class="hljs-keyword">to</span> <span class="hljs-keyword">use</span> <span class="hljs-keyword">to</span> calculate the<br>     desired replica <span class="hljs-built_in">count</span> (the maximum replica <span class="hljs-built_in">count</span> across <span class="hljs-keyword">all</span> metrics will be<br>     used). The desired replica <span class="hljs-built_in">count</span> <span class="hljs-keyword">is</span> calculated multiplying the ratio<br>     <span class="hljs-keyword">between</span> the target <span class="hljs-keyword">value</span> <span class="hljs-keyword">and</span> the current <span class="hljs-keyword">value</span> <span class="hljs-keyword">by</span> the current <span class="hljs-keyword">number</span> of<br>     pods. Ergo, metrics used must decrease <span class="hljs-keyword">as</span> the pod <span class="hljs-built_in">count</span> <span class="hljs-keyword">is</span> increased, <span class="hljs-keyword">and</span><br>     vice-versa. See the individual metric source types <span class="hljs-keyword">for</span> more information<br>     about how <span class="hljs-keyword">each</span> <span class="hljs-built_in">type</span> of metric must respond.<br><br>   minReplicas&lt;integer&gt;<br>     minReplicas <span class="hljs-keyword">is</span> the <span class="hljs-built_in">lower</span> <span class="hljs-keyword">limit</span> <span class="hljs-keyword">for</span> the <span class="hljs-keyword">number</span> of replicas <span class="hljs-keyword">to</span> which the<br>     autoscaler can scale down. It defaults <span class="hljs-keyword">to</span> <span class="hljs-number">1</span> pod.<br><br>   scaleTargetRef&lt;<span class="hljs-keyword">Object</span>&gt; -required-<br>     scaleTargetRef points <span class="hljs-keyword">to</span> the target resource <span class="hljs-keyword">to</span> scale, <span class="hljs-keyword">and</span> <span class="hljs-keyword">is</span> used <span class="hljs-keyword">to</span> the<br>     pods <span class="hljs-keyword">for</span> which metrics should be collected, <span class="hljs-keyword">as</span> well <span class="hljs-keyword">as</span> <span class="hljs-keyword">to</span> actually change<br>     the replica <span class="hljs-built_in">count</span>.<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>kubernetes之管理容器的计算资源</title>
    <link href="/2019/08/26/kubernetes-Resource-constraints/"/>
    <url>/2019/08/26/kubernetes-Resource-constraints/</url>
    
    <content type="html"><![CDATA[<h3 id="资源类型"><a href="#资源类型" class="headerlink" title="资源类型"></a>资源类型</h3><blockquote><p>CPU 和 memory 都是 资源类型。资源类型具有基本单位。CPU 的单位是 core，memory 的单位是 byte。这些都统称为计算资源。</p></blockquote><h3 id="CPU含义："><a href="#CPU含义：" class="headerlink" title="CPU含义："></a>CPU含义：</h3><blockquote><p>CPU 资源的限制和请求以cpu为单位。Kubernetes 中的一个 cpu 等于一个core，就是逻辑CPU。1颗逻辑CPU等于1000millicores。500m&#x3D;0.5颗cpu。</p></blockquote><h3 id="内存含义："><a href="#内存含义：" class="headerlink" title="内存含义："></a>内存含义：</h3><blockquote><p>内存的限制和请求以字节为单位。您可以使用以下后缀之一作为平均整数或定点整数表示内存：E，P，T，G，M，K。您还可以使用两个字母的等效的幂数：Ei，Pi，Ti ，Gi，Mi，Ki。</p></blockquote><h3 id="POD中的资源请求和资源限制"><a href="#POD中的资源请求和资源限制" class="headerlink" title="POD中的资源请求和资源限制"></a>POD中的资源请求和资源限制</h3><blockquote><ul><li>requests  资源请求   pod最低需求（表示Pod对资源的最小需求，因此在调度的时候会如果Node剩余的资源不能满足Pod的需求，则不会调度到对应的Node上。Scheduler调度的时候并不关注在调度时具体的资源使用情况，而是根据现存Pod的资源请求情况来进行调度。调度器首先将不符合请求的Node排除在外，然后在执行优选策略最后在选定pod）</li></ul></blockquote><ul><li>limits   资源限制   pod最大的使用资源</li></ul><p><img src="/images/cpu-requests.png" alt="cpu-requests"></p><blockquote><p>执行下面yaml的内容：</p></blockquote><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">apiVersion:</span> v1<br><span class="hljs-symbol">kind:</span> Pod<br><span class="hljs-symbol">metadata:</span><br><span class="hljs-symbol">  name:</span> my-demo<br><span class="hljs-symbol">  namespace:</span> default<br><span class="hljs-symbol">  labels:</span><br><span class="hljs-symbol">    name:</span> myapp<br><span class="hljs-symbol">    tier:</span> appfront<br><span class="hljs-symbol">spec:</span><br><span class="hljs-symbol">  containers:</span><br>  - name: myapp<br><span class="hljs-symbol">    image:</span> ikubernetes/stress-ng<br><span class="hljs-symbol">    command:</span> [<span class="hljs-string">&quot;/usr/bin/stress-ng&quot;</span>,<span class="hljs-string">&quot;-c 1&quot;</span>,<span class="hljs-string">&quot;--metrics-brief&quot;</span>]<br><span class="hljs-symbol">    ports:</span><br>    - name: http<br><span class="hljs-symbol">      containerPort:</span> <span class="hljs-number">80</span><br><span class="hljs-symbol">    resources:</span><br><span class="hljs-symbol">      requests:</span><br><span class="hljs-symbol">        memory:</span> <span class="hljs-string">&quot;128Mi&quot;</span><br><span class="hljs-symbol">        cpu:</span> <span class="hljs-string">&quot;200m&quot;</span><br><span class="hljs-symbol">      limits:</span><br><span class="hljs-symbol">        memory:</span> <span class="hljs-string">&quot;512Mi&quot;</span><br><span class="hljs-symbol">        cpu:</span> <span class="hljs-string">&quot;500m&quot;</span><br></code></pre></td></tr></table></figure><blockquote><p>查看结果：</p></blockquote><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs tap">$ kubectl exec my-demo -- top<br>Mem: 3914044K used, 126532K free, 205252K shrd, 2176K buff, 2650160K cached<br>CPU:  21% usr   0% sys   0% nic  78% idle   0% io   0% irq   0% sirq<br>Load average: 0.12 0.08 0.09 3/694 17<br>  PID  PPID USER     STAT   VSZ %VSZ CPU %CPU COMMAND<br>   <span class="hljs-number"> 5 </span>   <span class="hljs-number"> 1 </span>root     R    <span class="hljs-number"> 6900 </span>  0%  <span class="hljs-number"> 0 </span> 25% &#123;stress-ng-cpu&#125; /usr/bin/stress-ng<br>  <span class="hljs-number"> 14 </span>   <span class="hljs-number"> 0 </span>root     R    <span class="hljs-number"> 1512 </span>  0%  <span class="hljs-number"> 1 </span>  4% top<br>   <span class="hljs-number"> 1 </span>   <span class="hljs-number"> 0 </span>root     S    <span class="hljs-number"> 6256 </span>  0%  <span class="hljs-number"> 1 </span>  0% /usr/bin/stress-ng -c<span class="hljs-number"> 1 </span>--metrics-<br>   <span class="hljs-number"> 6 </span>   <span class="hljs-number"> 0 </span>root     S    <span class="hljs-number"> 1516 </span>  0%  <span class="hljs-number"> 1 </span>  0% top<br>  <span class="hljs-number"> 10 </span>   <span class="hljs-number"> 0 </span>root     S    <span class="hljs-number"> 1516 </span>  0%  <span class="hljs-number"> 1 </span>  0% top<br></code></pre></td></tr></table></figure><blockquote><p>我们看到CPU占用是25%，为什么呢？因为我们的node是2个core。我们最大限制是0.5核。所以应该是1&#x2F;4。</p></blockquote><h3 id="QoS（服务质量等级）"><a href="#QoS（服务质量等级）" class="headerlink" title="QoS（服务质量等级）"></a>QoS（服务质量等级）</h3><blockquote><p>是作用在 Pod 上的一个配置，当 Kubernetes 创建一个 Pod 时，它就会给这个 Pod 分配一个 QoS 等级，可以是以下等级之一：</p></blockquote><ul><li>Guaranteed：同时设置了CPU和内存的requests和limits  而且值必须相等。（这类的pod是最高优先级）</li><li>Burstable：pod至少有一个容器设置了cpu或内存的requests和limits，且不满足 Guarantee 等级的要求。即内存或CPU的值设置的不同。（中等优先级）</li><li>BestEffort：没有任何一个容器设置了requests或limits的属性。（最低优先级）</li></ul><blockquote><p>Guaranteed样例：</p></blockquote><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">apiVersion:</span> v1<br><span class="hljs-symbol">kind:</span> Pod<br><span class="hljs-symbol">metadata:</span><br><span class="hljs-symbol">  name:</span> my-demo<br><span class="hljs-symbol">  namespace:</span> default<br><span class="hljs-symbol">  labels:</span><br><span class="hljs-symbol">    name:</span> myapp<br><span class="hljs-symbol">    tier:</span> appfront<br><span class="hljs-symbol">spec:</span><br><span class="hljs-symbol">  containers:</span><br>  - name: myapp<br><span class="hljs-symbol">    image:</span> ikubernetes/myapp:v2<br><span class="hljs-symbol">    ports:</span><br>    - name: http<br><span class="hljs-symbol">      containerPort:</span> <span class="hljs-number">80</span><br><span class="hljs-symbol">    resources:</span><br><span class="hljs-symbol">      requests:</span><br><span class="hljs-symbol">        memory:</span> <span class="hljs-string">&quot;512Mi&quot;</span><br><span class="hljs-symbol">        cpu:</span> <span class="hljs-string">&quot;500m&quot;</span><br><span class="hljs-symbol">      limits:</span><br><span class="hljs-symbol">        memory:</span> <span class="hljs-string">&quot;512Mi&quot;</span><br><span class="hljs-symbol">        cpu:</span> <span class="hljs-string">&quot;500m&quot;</span><br></code></pre></td></tr></table></figure><blockquote><p>结果：</p></blockquote><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc">$ kubectl describe pod my-demo<br><span class="hljs-code">......</span><br><span class="hljs-code">QoS Class:       Guaranteed</span><br><span class="hljs-code">......</span><br></code></pre></td></tr></table></figure><blockquote><p>Burstable样例：</p></blockquote><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">apiVersion:</span> v1<br><span class="hljs-symbol">kind:</span> Pod<br><span class="hljs-symbol">metadata:</span><br><span class="hljs-symbol">  name:</span> my-demo02<br><span class="hljs-symbol">  namespace:</span> default<br><span class="hljs-symbol">  labels:</span><br><span class="hljs-symbol">    name:</span> myapp<br><span class="hljs-symbol">    tier:</span> appfront<br><span class="hljs-symbol">spec:</span><br><span class="hljs-symbol">  containers:</span><br>  - name: myapp<br><span class="hljs-symbol">    image:</span> ikubernetes/myapp:v2<br><span class="hljs-symbol">    ports:</span><br>    - name: http<br><span class="hljs-symbol">      containerPort:</span> <span class="hljs-number">80</span><br><span class="hljs-symbol">    resources:</span><br><span class="hljs-symbol">      requests:</span><br><span class="hljs-symbol">        memory:</span> <span class="hljs-string">&quot;256Mi&quot;</span><br><span class="hljs-symbol">        cpu:</span> <span class="hljs-string">&quot;200m&quot;</span><br><span class="hljs-symbol">      limits:</span><br><span class="hljs-symbol">        memory:</span> <span class="hljs-string">&quot;512Mi&quot;</span><br><span class="hljs-symbol">        cpu:</span> <span class="hljs-string">&quot;500m&quot;</span><br></code></pre></td></tr></table></figure><blockquote><p>结果：</p></blockquote><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc">$ kubectl describe pod my-demo02<br><span class="hljs-code">....</span><br><span class="hljs-code">QoS Class:       Burstable</span><br><span class="hljs-code">....</span><br></code></pre></td></tr></table></figure><blockquote><p>BestEffort样例：</p></blockquote><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-attribute">apiVersion</span><span class="hljs-punctuation">:</span> <span class="hljs-string">v1</span><br><span class="hljs-attribute">kind</span><span class="hljs-punctuation">:</span> <span class="hljs-string">Pod</span><br><span class="hljs-attribute">metadata</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">my-demo03</span><br>  <span class="hljs-attribute">namespace</span><span class="hljs-punctuation">:</span> <span class="hljs-string">default</span><br>  <span class="hljs-attribute">labels</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-attribute">name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">myapp</span><br>    <span class="hljs-attribute">tier</span><span class="hljs-punctuation">:</span> <span class="hljs-string">appfront</span><br><span class="hljs-attribute">spec</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">containers</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">name: myapp</span><br>    <span class="hljs-attribute">image</span><span class="hljs-punctuation">:</span> <span class="hljs-string">ikubernetes/myapp:v2</span><br>    <span class="hljs-attribute">ports</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">name: http</span><br>      <span class="hljs-attribute">containerPort</span><span class="hljs-punctuation">:</span> <span class="hljs-string">80</span><br></code></pre></td></tr></table></figure><blockquote><p>结果：</p></blockquote><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc">$ kubectl describe pod my-demo03<br><span class="hljs-code">....</span><br><span class="hljs-code">QoS Class:       BestEffort</span><br><span class="hljs-code">....</span><br></code></pre></td></tr></table></figure><h3 id="容器中的JVM资源限制"><a href="#容器中的JVM资源限制" class="headerlink" title="容器中的JVM资源限制"></a>容器中的JVM资源限制</h3><p>在Kubernetes环境中部署Java程序不一会就重启了，这意味着你的pod是不健康的。然后我们可以通过describe去查看一下重启的原因。发现是因为Pod超出了资源限制被kill掉，在日志最后一行会出现一个kill的字段。为什么Kubernetes会kill掉，因为它超出了Kubernetes对Pod的资源限制。默认情况下Docker容器会使用宿主机所有的资源，但如果不做资源限制，会影响整个宿主机。然后整个宿主机资源不够会实现飘移，会转移到其他主机上，然后再异常，可能会起到一种雪崩的效应，所以一般我们都是要做Pod资源限制。如果Java容器中未设置JVM的<code>-Xmx</code>（最大的堆内存使用）参数，一旦这个Pod的使用内存超出Kubernetes的limits限制，Kubernetes就会把它杀掉并重启一个新的Pod。在JVM中这个值建议要比limits要小一点，小个10%吧，因为超过这个limits限制就会杀死掉从新在拉起新的Pod。</p><ul><li><p>Host</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs dts">cat <span class="hljs-keyword">/proc/</span>meminfo <br><span class="hljs-symbol">MemTotal:</span> <span class="hljs-number">197869260</span> kB<br><span class="hljs-symbol">MemFree:</span> <span class="hljs-number">3698100</span> kB<br><span class="hljs-symbol">MemAvailable:</span> <span class="hljs-number">62230260</span> kB<br></code></pre></td></tr></table></figure></li><li><p>容器</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile">docker <span class="hljs-keyword">run</span><span class="language-bash"> -it --<span class="hljs-built_in">rm</span> alpine <span class="hljs-built_in">cat</span> /proc/meminfo</span><br>MemTotal:       <span class="hljs-number">197869260</span> kB<br>MemFree:         <span class="hljs-number">3677800</span> kB<br>MemAvailable:   <span class="hljs-number">62210088</span> kB<br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Kubernetes之调度器和调度过程</title>
    <link href="/2019/08/26/Kubernetes-Scheduler/"/>
    <url>/2019/08/26/Kubernetes-Scheduler/</url>
    
    <content type="html"><![CDATA[<h2 id="Scheduler"><a href="#Scheduler" class="headerlink" title="Scheduler"></a>Scheduler</h2><p>&amp;emsp;&amp;emsp;当用户请求向API server创建新的Pod时，API server检查授权、权限等没有任何问题的话，他会把这个请求交由Scheduler，由Scheduler它会检查所有符合该Pod要求的Nodelist，为Pod安排一个落脚点（Node）,选定Node完成后会把选择结果返回给API server，并将选定信息写入etcd中。接下来API server将指挥被选定Node的kubelet去创建Pod（或者说kubelet始终去watch API server当中与当前节点相关联的事件变动），因此接下来这个node就要去尝试着获取到API server当中定义的这个pod的配置清单，根据配置清单当中的定义去创建pod。具体来说Scheduler的作用是将待调度的Pod按照特定的调度算法和调度策略绑定到集群中的某个合适的Node上，整个调度过程中涉及三个对象，分别是：待调度的Pod列表，可以的Node列表，以及调度算法和策略。</p><h2 id="Kubernetes-Scheduler-提供的调度流程分三步："><a href="#Kubernetes-Scheduler-提供的调度流程分三步：" class="headerlink" title="Kubernetes Scheduler 提供的调度流程分三步："></a>Kubernetes Scheduler 提供的调度流程分三步：</h2><ul><li>预选策略(predicate) 遍历nodelist，选择出符合要求的候选节点，Kubernetes内置了多种预选规则供用户选择。</li><li>优选策略(priority) 在选择出符合要求的候选节点中，采用优选规则计算出每个节点的积分，最后选择得分最高的。</li><li>选定(select)  如果最高得分有好几个节点，select就会从中随机选择一个节点。</li></ul><p>如图：<br><img src="/images/scheduler-1.png" alt="scheduler-1"></p><h2 id="高级调度方式"><a href="#高级调度方式" class="headerlink" title="高级调度方式"></a>高级调度方式</h2><p>当我们想把Pod调度到预期的节点上，我们可以使用如下高级调度方式进行Pod调度：</p><ul><li>节点选择器： nodeSelector（Pod仅运行在能匹配到节点标签的主机上）、nodeName（Pod仅运行特定node）</li><li>节点亲和性调度： nodeAffinity</li><li>Pod亲和性调度：PodAffinity</li><li>Pod反亲和性调度：podAntiAffinity</li></ul><h2 id="调度器分类："><a href="#调度器分类：" class="headerlink" title="调度器分类："></a>调度器分类：</h2><ul><li>nodeAffinity：主要解决POD要部署在哪些主机，以及POD不能部署在哪些主机上的问题，处理的是POD和主机之间的关系。</li><li>podAffinity：主要解决POD可以和哪些POD部署在同一个拓扑域中的问题（拓扑域用主机标签实现，可以是单个主机，也可以是多个主机组成的cluster、zone等。），podAntiAffinity主要解决POD不能和哪些POD部署在同一个拓扑域中的问题。podAntiAffinity和podAffinity它们都是处理Kubernetes集群内部POD和POD之间的关系。比如一个 pod 在一个节点上了，那么我这个也得在这个节点，或者你这个 pod 在节点上了，那么我就不想和你待在同一个节点上。</li></ul><h2 id="三种亲和性和反亲和性策略的比较如下表所示："><a href="#三种亲和性和反亲和性策略的比较如下表所示：" class="headerlink" title="三种亲和性和反亲和性策略的比较如下表所示："></a>三种亲和性和反亲和性策略的比较如下表所示：</h2><table><thead><tr><th>策略名称</th><th>匹配目标</th><th>支持的操作符</th><th>支持拓扑域</th><th>设计目标</th></tr></thead><tbody><tr><td>nodeAffinity</td><td>主机标签</td><td>In，NotIn，Exists，DoesNotExist，Gt，Lt</td><td>不支持</td><td>决定Pod可以部署在哪些主机上</td></tr><tr><td>podAffinity</td><td>Pod标签</td><td>In，NotIn，Exists，DoesNotExist</td><td>支持</td><td>决定Pod可以和哪些Pod部署在同一拓扑域</td></tr><tr><td>PodAntiAffinity</td><td>Pod标签</td><td>In，NotIn，Exists，DoesNotExist</td><td>支持</td><td>决定Pod不可以和哪些Pod部署在同一拓扑域</td></tr></tbody></table><ul><li>In：label 的值在某个列表中</li><li>NotIn：label 的值不在某个列表中</li><li>Gt：label 的值大于某个值</li><li>Lt：label 的值小于某个值</li><li>Exists：某个 label 存在（Values必须为空）</li><li>DoesNotExist：某个 label 不存在（Values必须为空）</li></ul><h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><h3 id="nodeAffinity使用场景："><a href="#nodeAffinity使用场景：" class="headerlink" title="nodeAffinity使用场景："></a>nodeAffinity使用场景：</h3><ul><li>将S1服务的所有Pod部署到指定的符合标签规则的主机上。</li><li>将S1服务的所有Pod部署到除部分主机外的其他主机上。</li></ul><h3 id="podAffinity使用场景："><a href="#podAffinity使用场景：" class="headerlink" title="podAffinity使用场景："></a>podAffinity使用场景：</h3><ul><li>将某一特定服务的pod部署在同一拓扑域中，不用指定具体的拓扑域。</li><li>如果S1服务使用S2服务，为了减少它们之间的网络延迟（或其它原因），把S1服务的POD和S2服务的pod部署在同一拓扑域中。</li></ul><h3 id="podAntiAffinity使用场景："><a href="#podAntiAffinity使用场景：" class="headerlink" title="podAntiAffinity使用场景："></a>podAntiAffinity使用场景：</h3><ul><li>将一个服务的POD分散在不同的主机或者拓扑域中，提高服务本身的稳定性。</li><li>给POD对于一个节点的独占访问权限来保证资源隔离，保证不会有其它pod来分享节点资源。</li><li>把可能会相互影响的服务的POD分散在不同的主机上。</li></ul><h3 id="NodeSelector"><a href="#NodeSelector" class="headerlink" title="NodeSelector"></a>NodeSelector</h3><p>现在我们给node1打上一个标签node&#x3D;ssd</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-literal">master</span>-<span class="hljs-number">1</span> app]<span class="hljs-comment"># kubectl label nodes node-1 node=ssd</span><br><span class="hljs-keyword">node</span><span class="hljs-title">/node-1</span> labeled<br><br>[root@<span class="hljs-literal">master</span>-<span class="hljs-number">1</span> app]<span class="hljs-comment">#  kubectl get nodes --show-labels</span><br>NAME       STATUS   ROLES    AGE   <span class="hljs-keyword">VERSION</span>   LABELS<br><span class="hljs-literal">master</span>-<span class="hljs-number">1</span>   Ready    <span class="hljs-keyword">master</span>   <span class="hljs-title">43d</span>   v1.<span class="hljs-number">13.1</span>   beta.kubernetes.io/<span class="hljs-attr">arch=</span>amd64,beta.kubernetes.io/<span class="hljs-attr">os=</span>linux,kubernetes.io/<span class="hljs-attr">hostname=</span><span class="hljs-literal">master</span>-<span class="hljs-number">1</span>,<span class="hljs-keyword">node</span><span class="hljs-title">-role</span>.kubernetes.io/<span class="hljs-attr">master=</span><br><span class="hljs-keyword">node</span><span class="hljs-title">-0</span>     Ready    <span class="hljs-tag">&lt;none&gt;</span>   <span class="hljs-number">43</span>d   v1.<span class="hljs-number">13.1</span>   beta.kubernetes.io/<span class="hljs-attr">arch=</span>amd64,beta.kubernetes.io/<span class="hljs-attr">os=</span>linux,kubernetes.io/<span class="hljs-attr">hostname=</span><span class="hljs-keyword">node</span><span class="hljs-title">-0</span><br><span class="hljs-keyword">node</span><span class="hljs-title">-1</span>     Ready    <span class="hljs-tag">&lt;none&gt;</span>   <span class="hljs-number">43</span>d   v1.<span class="hljs-number">13.1</span>   beta.kubernetes.io/<span class="hljs-attr">arch=</span>amd64,beta.kubernetes.io/<span class="hljs-attr">os=</span>linux,kubernetes.io/<span class="hljs-attr">hostname=</span><span class="hljs-keyword">node</span><span class="hljs-title">-1</span>,<span class="hljs-keyword">node</span><span class="hljs-title">=ssd</span><br></code></pre></td></tr></table></figure><p>我们定义一个pod,让其选择带有node&#x3D;ssd这个标签的节点</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs yaml">[<span class="hljs-string">root@master-1</span> <span class="hljs-string">app</span>]<span class="hljs-comment"># vim node-selector-demo.yaml</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Pod</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">myapp</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">default</span><br>  <span class="hljs-attr">labels:</span><br>    <span class="hljs-attr">app:</span> <span class="hljs-string">myapp</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">containers:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">myapp</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">nginx:latest</span><br>    <span class="hljs-attr">imagePullPolicy:</span> <span class="hljs-string">IfNotPresent</span><br>  <span class="hljs-attr">nodeSelector:</span><br>    <span class="hljs-attr">node:</span> <span class="hljs-string">ssd</span><br></code></pre></td></tr></table></figure><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs autoit">[root<span class="hljs-symbol">@master</span><span class="hljs-number">-1</span> app]<span class="hljs-meta"># kubectl apply -f node-selector-demo.yaml</span><br></code></pre></td></tr></table></figure><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-literal">master</span>-<span class="hljs-number">1</span> app]<span class="hljs-comment"># kubectl get pod  -o wide</span><br>NAME                               READY   STATUS    RESTARTS   AGE   IP             <span class="hljs-keyword">NODE</span>     <span class="hljs-title">NOMINATED</span> <span class="hljs-keyword">NODE</span>   <span class="hljs-title">READINESS</span> GATES<br>...<br>myapp                              <span class="hljs-number">1</span>/<span class="hljs-number">1</span>     Running   <span class="hljs-number">0</span>          <span class="hljs-number">14s</span>   <span class="hljs-number">10.244</span>.<span class="hljs-number">2.7</span>     <span class="hljs-keyword">node</span><span class="hljs-title">-1</span>   <span class="hljs-tag">&lt;none&gt;</span>           <span class="hljs-tag">&lt;none&gt;</span><br>...<br></code></pre></td></tr></table></figure><p>&amp;emsp;&amp;emsp;从上面的效果可以看出，设置了nodeSelector以后只会将Pod调度到符合标签的node1上，但是需要注意的是如果没有一个node满足nodeSelector的标签那么Pod会一直处于Pending状态直到有Node满足条件。</p><h3 id="nodeAffinity"><a href="#nodeAffinity" class="headerlink" title="nodeAffinity"></a>nodeAffinity</h3><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs applescript">[root@master<span class="hljs-number">-1</span> app]<span class="hljs-comment"># kubectl explain pod.spec.affinity.nodeAffinity </span><br>KIND:     Pod<br>VERSION:  v1<br><br>RESOURCE: nodeAffinity &lt;Object&gt;<br><br>DESCRIPTION:<br>     Describes node affinity scheduling rules <span class="hljs-keyword">for</span> <span class="hljs-keyword">the</span> pod.<br><br>     Node affinity <span class="hljs-keyword">is</span> a group <span class="hljs-keyword">of</span> node affinity scheduling rules.<br><br>FIELDS:<br>   preferredDuringSchedulingIgnoredDuringExecution&lt;[]Object&gt;<br>     The scheduler will prefer <span class="hljs-keyword">to</span> schedule pods <span class="hljs-keyword">to</span> nodes <span class="hljs-keyword">that</span> satisfy <span class="hljs-keyword">the</span><br>     affinity expressions specified <span class="hljs-keyword">by</span> this field, <span class="hljs-keyword">but</span> <span class="hljs-keyword">it</span> may choose a node <span class="hljs-keyword">that</span><br>     violates one <span class="hljs-keyword">or</span> more <span class="hljs-keyword">of</span> <span class="hljs-keyword">the</span> expressions. The node <span class="hljs-keyword">that</span> <span class="hljs-keyword">is</span> most preferred <span class="hljs-keyword">is</span><br>     <span class="hljs-keyword">the</span> one <span class="hljs-keyword">with</span> <span class="hljs-keyword">the</span> greatest sum <span class="hljs-keyword">of</span> weights, i.e. <span class="hljs-keyword">for</span> each node <span class="hljs-keyword">that</span> meets all<br>     <span class="hljs-keyword">of</span> <span class="hljs-keyword">the</span> scheduling requirements (resource request, requiredDuringScheduling<br>     affinity expressions, etc.), compute a sum <span class="hljs-keyword">by</span> iterating <span class="hljs-keyword">through</span> <span class="hljs-keyword">the</span><br>     elements <span class="hljs-keyword">of</span> this field <span class="hljs-keyword">and</span> adding <span class="hljs-string">&quot;weight&quot;</span> <span class="hljs-keyword">to</span> <span class="hljs-keyword">the</span> sum <span class="hljs-keyword">if</span> <span class="hljs-keyword">the</span> node matches<br>     <span class="hljs-keyword">the</span> corresponding matchExpressions; <span class="hljs-keyword">the</span> node(s) <span class="hljs-keyword">with</span> <span class="hljs-keyword">the</span> highest sum are<br>     <span class="hljs-keyword">the</span> most preferred.<br><br>   requiredDuringSchedulingIgnoredDuringExecution&lt;Object&gt;<br>     If <span class="hljs-keyword">the</span> affinity requirements specified <span class="hljs-keyword">by</span> this field are <span class="hljs-keyword">not</span> met <span class="hljs-keyword">at</span><br>     scheduling <span class="hljs-built_in">time</span>, <span class="hljs-keyword">the</span> pod will <span class="hljs-keyword">not</span> be scheduled <span class="hljs-keyword">onto</span> <span class="hljs-keyword">the</span> node. If <span class="hljs-keyword">the</span><br>     affinity requirements specified <span class="hljs-keyword">by</span> this field cease <span class="hljs-keyword">to</span> be met <span class="hljs-keyword">at</span> <span class="hljs-keyword">some</span> point<br>     during pod execution (e.g. due <span class="hljs-keyword">to</span> an update), <span class="hljs-keyword">the</span> system may <span class="hljs-keyword">or</span> may <span class="hljs-keyword">not</span> <span class="hljs-keyword">try</span><br>     <span class="hljs-keyword">to</span> eventually evict <span class="hljs-keyword">the</span> pod <span class="hljs-keyword">from</span> <span class="hljs-keyword">its</span> node.<br><br></code></pre></td></tr></table></figure><ul><li>requiredDuringSchedulingIgnoredDuringExecution 硬亲和性  必须满足亲和性。 <ul><li>matchExpressions  匹配表达式,这个标签可以指定一段，例如pod中定义的key为zone，operator为In(包含那些)，values为 foo和bar。表示就是在node节点中包含foo和bar的标签中调度</li><li>matchFields  匹配字段 和上面定义方式一样，不过他定义的不是标签值而是定义字段。</li></ul></li><li>preferredDuringSchedulingIgnoredDuringExecution   软亲和性 能满足最好，不满足也没关系。<ul><li>preference 配置节点选择器，与相应的权重相关联。</li><li>weight 权重1-100范围内，因为它是软性条件，所以并非一定要全匹配。在preference中匹配到的条目越多越符合条件。最后通过计算权重决定那个节点更符合条件。</li></ul></li></ul><h4 id="硬亲和性："><a href="#硬亲和性：" class="headerlink" title="硬亲和性："></a>硬亲和性：</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs yaml">[<span class="hljs-string">root@master-1</span> <span class="hljs-string">app</span>]<span class="hljs-comment"># vim test.yaml</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Pod</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">myapp</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">default</span><br>  <span class="hljs-attr">labels:</span><br>    <span class="hljs-attr">app:</span> <span class="hljs-string">myapp</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">containers:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">myapp</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">nginx:latest</span><br>    <span class="hljs-attr">imagePullPolicy:</span> <span class="hljs-string">IfNotPresent</span><br>  <span class="hljs-attr">affinity:</span><br>    <span class="hljs-attr">nodeAffinity:</span><br>       <span class="hljs-attr">requiredDuringSchedulingIgnoredDuringExecution:</span><br>          <span class="hljs-attr">nodeSelectorTerms:</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-attr">matchExpressions:</span><br>               <span class="hljs-bullet">-</span> <span class="hljs-attr">key:</span> <span class="hljs-string">node</span><br>                 <span class="hljs-attr">operator:</span> <span class="hljs-string">In</span><br>                 <span class="hljs-attr">values:</span> [<span class="hljs-string">&quot;foo&quot;</span>,<span class="hljs-string">&quot;bar&quot;</span>]<br> <br><br>[<span class="hljs-string">root@master-1</span> <span class="hljs-string">app</span>]<span class="hljs-comment"># kubectl apply -f test.yaml </span><br><span class="hljs-string">pod/myapp</span> <span class="hljs-string">created</span><br><br>[<span class="hljs-string">root@master-1</span> <span class="hljs-string">app</span>]<span class="hljs-comment"># kubectl get pod</span><br><span class="hljs-string">NAME</span>                               <span class="hljs-string">READY</span>   <span class="hljs-string">STATUS</span>    <span class="hljs-string">RESTARTS</span>   <span class="hljs-string">AGE</span><br><span class="hljs-string">...</span><br><span class="hljs-string">myapp</span>                              <span class="hljs-number">1</span><span class="hljs-string">/1</span>     <span class="hljs-string">Running</span>   <span class="hljs-number">0</span>          <span class="hljs-string">2m17s</span><br><span class="hljs-string">...</span><br></code></pre></td></tr></table></figure><h4 id="软亲和性："><a href="#软亲和性：" class="headerlink" title="软亲和性："></a>软亲和性：</h4><p>与<code>requiredDuringSchedulingIgnoredDuringExecution</code>比较，这里需要注意的是<code>preferredDuringSchedulingIgnoredDuringExecution</code>是个列表对象，而preference就是一个对象。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs yaml">[<span class="hljs-string">root@master-1</span> <span class="hljs-string">app</span>]<span class="hljs-comment"># vim test1.yaml</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Pod</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">myapp</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">default</span><br>  <span class="hljs-attr">labels:</span><br>    <span class="hljs-attr">app:</span> <span class="hljs-string">myapp</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">containers:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">myapp</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">nginx:latest</span><br>    <span class="hljs-attr">imagePullPolicy:</span> <span class="hljs-string">IfNotPresent</span><br>  <span class="hljs-attr">affinity:</span><br>    <span class="hljs-attr">nodeAffinity:</span><br>      <span class="hljs-attr">preferredDuringSchedulingIgnoredDuringExecution:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">weight:</span> <span class="hljs-number">50</span><br>          <span class="hljs-attr">preference:</span><br>            <span class="hljs-attr">matchExpressions:</span><br>              <span class="hljs-bullet">-</span> <span class="hljs-attr">key:</span> <span class="hljs-string">zone</span><br>                <span class="hljs-attr">operator:</span> <span class="hljs-string">In</span><br>                <span class="hljs-attr">values:</span> [<span class="hljs-string">&quot;foo&quot;</span>,<span class="hljs-string">&quot;bar&quot;</span>]<br></code></pre></td></tr></table></figure><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs autoit">[root<span class="hljs-symbol">@master</span><span class="hljs-number">-1</span> app]<span class="hljs-meta"># kubectl apply -f test1.yaml </span><br>pod/myapp created<br></code></pre></td></tr></table></figure><figure class="highlight node-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs node-repl">[root@master-1 app]# kubectl get pod<br>NAME                               READY   STATUS    RESTARTS   AGE<br><span class="hljs-meta prompt_">...</span><br>myapp                              1/1     Running   0          2m17s<br><span class="hljs-meta prompt_">...</span><br><br></code></pre></td></tr></table></figure><h3 id="podAffinity"><a href="#podAffinity" class="headerlink" title="podAffinity"></a>podAffinity</h3><p>&amp;emsp;&amp;emsp;Pod亲和性场景，我们的k8s集群的节点分布在不同的区域或者不同的机房，当服务A和服务B要求部署在同一个区域或者同一机房的时候，我们就需要亲和性调度了。</p><p>kubectl explain pod.spec.affinity.podAffinity和NodeAffinity是一样的，都是有硬亲和性和软亲和性</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs applescript">[root@master<span class="hljs-number">-1</span> app]<span class="hljs-comment"># kubectl explain pod.spec.affinity.podAffinity</span><br>KIND:     Pod<br>VERSION:  v1<br><br>RESOURCE: podAffinity &lt;Object&gt;<br><br>DESCRIPTION:<br>     Describes pod affinity scheduling rules (e.g. co-locate this pod <span class="hljs-keyword">in</span> <span class="hljs-keyword">the</span><br>     same node, zone, etc. <span class="hljs-keyword">as</span> <span class="hljs-keyword">some</span> other pod(s)).<br><br>     Pod affinity <span class="hljs-keyword">is</span> a group <span class="hljs-keyword">of</span> inter pod affinity scheduling rules.<br><br>FIELDS:<br>   preferredDuringSchedulingIgnoredDuringExecution&lt;[]Object&gt;<br>     The scheduler will prefer <span class="hljs-keyword">to</span> schedule pods <span class="hljs-keyword">to</span> nodes <span class="hljs-keyword">that</span> satisfy <span class="hljs-keyword">the</span><br>     affinity expressions specified <span class="hljs-keyword">by</span> this field, <span class="hljs-keyword">but</span> <span class="hljs-keyword">it</span> may choose a node <span class="hljs-keyword">that</span><br>     violates one <span class="hljs-keyword">or</span> more <span class="hljs-keyword">of</span> <span class="hljs-keyword">the</span> expressions. The node <span class="hljs-keyword">that</span> <span class="hljs-keyword">is</span> most preferred <span class="hljs-keyword">is</span><br>     <span class="hljs-keyword">the</span> one <span class="hljs-keyword">with</span> <span class="hljs-keyword">the</span> greatest sum <span class="hljs-keyword">of</span> weights, i.e. <span class="hljs-keyword">for</span> each node <span class="hljs-keyword">that</span> meets all<br>     <span class="hljs-keyword">of</span> <span class="hljs-keyword">the</span> scheduling requirements (resource request, requiredDuringScheduling<br>     affinity expressions, etc.), compute a sum <span class="hljs-keyword">by</span> iterating <span class="hljs-keyword">through</span> <span class="hljs-keyword">the</span><br>     elements <span class="hljs-keyword">of</span> this field <span class="hljs-keyword">and</span> adding <span class="hljs-string">&quot;weight&quot;</span> <span class="hljs-keyword">to</span> <span class="hljs-keyword">the</span> sum <span class="hljs-keyword">if</span> <span class="hljs-keyword">the</span> node has pods<br>     which matches <span class="hljs-keyword">the</span> corresponding podAffinityTerm; <span class="hljs-keyword">the</span> node(s) <span class="hljs-keyword">with</span> <span class="hljs-keyword">the</span><br>     highest sum are <span class="hljs-keyword">the</span> most preferred.<br><br>   requiredDuringSchedulingIgnoredDuringExecution&lt;[]Object&gt;<br>     If <span class="hljs-keyword">the</span> affinity requirements specified <span class="hljs-keyword">by</span> this field are <span class="hljs-keyword">not</span> met <span class="hljs-keyword">at</span><br>     scheduling <span class="hljs-built_in">time</span>, <span class="hljs-keyword">the</span> pod will <span class="hljs-keyword">not</span> be scheduled <span class="hljs-keyword">onto</span> <span class="hljs-keyword">the</span> node. If <span class="hljs-keyword">the</span><br>     affinity requirements specified <span class="hljs-keyword">by</span> this field cease <span class="hljs-keyword">to</span> be met <span class="hljs-keyword">at</span> <span class="hljs-keyword">some</span> point<br>     during pod execution (e.g. due <span class="hljs-keyword">to</span> a pod label update), <span class="hljs-keyword">the</span> system may <span class="hljs-keyword">or</span><br>     may <span class="hljs-keyword">not</span> <span class="hljs-keyword">try</span> <span class="hljs-keyword">to</span> eventually evict <span class="hljs-keyword">the</span> pod <span class="hljs-keyword">from</span> <span class="hljs-keyword">its</span> node. When there are<br>     multiple elements, <span class="hljs-keyword">the</span> lists <span class="hljs-keyword">of</span> nodes corresponding <span class="hljs-keyword">to</span> each podAffinityTerm<br>     are intersected, i.e. all terms must be satisfied.<br></code></pre></td></tr></table></figure><h3 id="通用参数"><a href="#通用参数" class="headerlink" title="通用参数"></a>通用参数</h3><ul><li>labelSelector  选择跟那组Pod亲和</li><li>namespaces 选择哪个命名空间</li><li>topologyKey 用来缩小节点选择范围，其值可以是任何合法的节点标签（key），在大规模集群中，为此字段不指定或者指定错误值，可能引发巨大的性能、安全问题。因此，对其使用有如下限制：<ul><li>对于Pod亲和与Pod硬性反亲和，topologyKey字段值不能为空。</li><li>对于硬性反亲和，topoloygKey只能是kubernetes.io&#x2F;hostname，除非禁止LimitPodHardAntiAffinityTopology允入控制器或者修改其实现。</li><li>对于Pod软反亲和，允许topoloygKey为空，表示对节点拓扑没有限制。</li><li>以上情况外，topologyKey可以是任何合法标签（key）。</li></ul></li></ul><h3 id="硬亲和性：-1"><a href="#硬亲和性：-1" class="headerlink" title="硬亲和性："></a>硬亲和性：</h3><p>&amp;emsp;&amp;emsp;由于我们这里只有一个集群，并没有区域或者机房的概念，所以我们这里直接使用主机名来作为拓扑域(topologyKey)，把 pod 创建在同一个主机上面。</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-literal">master</span>-<span class="hljs-number">1</span> app]<span class="hljs-comment"># kubectl get nodes --show-labels</span><br>NAME       STATUS   ROLES    AGE   <span class="hljs-keyword">VERSION</span>   LABELS<br><span class="hljs-literal">master</span>-<span class="hljs-number">1</span>   Ready    <span class="hljs-keyword">master</span>   <span class="hljs-title">43d</span>   v1.<span class="hljs-number">13.1</span>   beta.kubernetes.io/<span class="hljs-attr">arch=</span>amd64,beta.kubernetes.io/<span class="hljs-attr">os=</span>linux,kubernetes.io/<span class="hljs-attr">hostname=</span><span class="hljs-literal">master</span>-<span class="hljs-number">1</span>,<span class="hljs-keyword">node</span><span class="hljs-title">-role</span>.kubernetes.io/<span class="hljs-attr">master=</span><br><span class="hljs-keyword">node</span><span class="hljs-title">-0</span>     Ready    <span class="hljs-tag">&lt;none&gt;</span>   <span class="hljs-number">43</span>d   v1.<span class="hljs-number">13.1</span>   beta.kubernetes.io/<span class="hljs-attr">arch=</span>amd64,beta.kubernetes.io/<span class="hljs-attr">os=</span>linux,kubernetes.io/<span class="hljs-attr">hostname=</span><span class="hljs-keyword">node</span><span class="hljs-title">-0</span><br><span class="hljs-keyword">node</span><span class="hljs-title">-1</span>     Ready    <span class="hljs-tag">&lt;none&gt;</span>   <span class="hljs-number">43</span>d   v1.<span class="hljs-number">13.1</span>   beta.kubernetes.io/<span class="hljs-attr">arch=</span>amd64,beta.kubernetes.io/<span class="hljs-attr">os=</span>linux,kubernetes.io/<span class="hljs-attr">hostname=</span><span class="hljs-keyword">node</span><span class="hljs-title">-1</span><br></code></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs yaml">[<span class="hljs-string">root@master-1</span> <span class="hljs-string">app</span>]<span class="hljs-comment"># vim pod-affinity-demo.yaml</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Pod</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">node-affinity-pod1</span><br>  <span class="hljs-attr">labels:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">podaffinity-myapp</span><br>    <span class="hljs-attr">tier:</span> <span class="hljs-string">service</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">containers:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">myapp</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">nginx:latest</span><br>    <span class="hljs-attr">imagePullPolicy:</span> <span class="hljs-string">IfNotPresent</span><br><span class="hljs-meta">---</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Pod</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">node-affinity-pod2</span><br>  <span class="hljs-attr">labels:</span><br>    <span class="hljs-attr">tier:</span> <span class="hljs-string">front</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">containers:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">myapp</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">nginx:latest</span><br>    <span class="hljs-attr">imagePullPolicy:</span> <span class="hljs-string">IfNotPresent</span><br>  <span class="hljs-attr">affinity:</span><br>    <span class="hljs-attr">podAffinity:</span><br>      <span class="hljs-attr">requiredDuringSchedulingIgnoredDuringExecution:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">labelSelector:</span><br>          <span class="hljs-attr">matchExpressions:</span><br>          <span class="hljs-bullet">-</span> <span class="hljs-attr">key:</span> <span class="hljs-string">name</span><br>            <span class="hljs-attr">operator:</span> <span class="hljs-string">In</span><br>            <span class="hljs-attr">values:</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">podaffinity-myapp</span><br>        <span class="hljs-attr">topologyKey:</span> <span class="hljs-string">kubernetes.io/hostname</span><br><br>[<span class="hljs-string">root@master-1</span> <span class="hljs-string">app</span>]<span class="hljs-comment"># kubectl get pods -o wide</span><br><span class="hljs-string">NAME</span>                               <span class="hljs-string">READY</span>   <span class="hljs-string">STATUS</span>    <span class="hljs-string">RESTARTS</span>   <span class="hljs-string">AGE</span>     <span class="hljs-string">IP</span>             <span class="hljs-string">NODE</span>     <span class="hljs-string">NOMINATED</span> <span class="hljs-string">NODE</span>   <span class="hljs-string">READINESS</span> <span class="hljs-string">GATES</span><br><span class="hljs-string">...</span><br><span class="hljs-string">node-affinity-pod1</span>                 <span class="hljs-number">1</span><span class="hljs-string">/1</span>     <span class="hljs-string">Running</span>   <span class="hljs-number">0</span>          <span class="hljs-string">7m7s</span>    <span class="hljs-number">10.244</span><span class="hljs-number">.2</span><span class="hljs-number">.9</span>     <span class="hljs-string">node-1</span>   <span class="hljs-string">&lt;none&gt;</span>           <span class="hljs-string">&lt;none&gt;</span><br><span class="hljs-string">node-affinity-pod2</span>                 <span class="hljs-number">1</span><span class="hljs-string">/1</span>     <span class="hljs-string">Running</span>   <span class="hljs-number">0</span>          <span class="hljs-string">7m7s</span>    <span class="hljs-number">10.244</span><span class="hljs-number">.2</span><span class="hljs-number">.10</span>    <span class="hljs-string">node-1</span>   <span class="hljs-string">&lt;none&gt;</span>           <span class="hljs-string">&lt;none&gt;</span><br><span class="hljs-string">...</span><br></code></pre></td></tr></table></figure><p>&amp;emsp;&amp;emsp;上面这个例子中的Pod node-affinity-pod2 需要调度到某个指定的主机上，至少有一个节点上运行了这样的 pod：这个 pod 有一个name&#x3D;podaffinity-myapp的 label</p><p>如果我们把上面的 node-affinity-pod1 删除，然后重新创建 affinity 这个资源，看看能不能正常调度呢：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs yaml">[<span class="hljs-string">root@master-1</span> <span class="hljs-string">pki</span>]<span class="hljs-comment"># kubectl delete  pod node-affinity-pod1</span><br><span class="hljs-string">pod</span> <span class="hljs-string">&quot;node-affinity-pod1&quot;</span> <span class="hljs-string">deleted</span><br><br>[<span class="hljs-string">root@master-1</span> <span class="hljs-string">app</span>]<span class="hljs-comment"># vim pod2-affinity-demo.yaml</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Pod</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">node-affinity-pod2</span><br>  <span class="hljs-attr">labels:</span><br>    <span class="hljs-attr">tier:</span> <span class="hljs-string">front</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">containers:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">myapp</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">nginx:latest</span><br>    <span class="hljs-attr">imagePullPolicy:</span> <span class="hljs-string">IfNotPresent</span><br>  <span class="hljs-attr">affinity:</span><br>    <span class="hljs-attr">podAffinity:</span><br>      <span class="hljs-attr">requiredDuringSchedulingIgnoredDuringExecution:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">labelSelector:</span><br>          <span class="hljs-attr">matchExpressions:</span><br>          <span class="hljs-bullet">-</span> <span class="hljs-attr">key:</span> <span class="hljs-string">name</span><br>            <span class="hljs-attr">operator:</span> <span class="hljs-string">In</span><br>            <span class="hljs-attr">values:</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">podaffinity-myapp</span><br>        <span class="hljs-attr">topologyKey:</span> <span class="hljs-string">kubernetes.io/hostname</span><br><br>[<span class="hljs-string">root@master-1</span> <span class="hljs-string">app</span>]<span class="hljs-comment"># kubectl apply -f pod2-affinity-demo.yaml</span><br><span class="hljs-string">pod/node-affinity-pod2</span> <span class="hljs-string">created</span><br><br>[<span class="hljs-string">root@master-1</span> <span class="hljs-string">app</span>]<span class="hljs-comment"># kubectl get pod</span><br><span class="hljs-string">NAME</span>                               <span class="hljs-string">READY</span>   <span class="hljs-string">STATUS</span>    <span class="hljs-string">RESTARTS</span>   <span class="hljs-string">AGE</span><br><span class="hljs-string">...</span><br><span class="hljs-string">node-affinity-pod2</span>                 <span class="hljs-number">0</span><span class="hljs-string">/1</span>     <span class="hljs-string">Pending</span>   <span class="hljs-number">0</span>          <span class="hljs-string">5m57s</span><br><span class="hljs-string">...</span><br></code></pre></td></tr></table></figure><p>&amp;emsp;&amp;emsp;我们可以看到处于Pending状态了，这是因为现在没有一个节点上面拥有name&#x3D;podaffinity-myapp这个 label 的 pod，而上面我们的调度使用的是硬策略，所以就没办法进行调度了，大家可以去尝试下重新将 node-affinity-pod1 这个 pod 调度到 node-0 这个节点上，看看上面的 affinity 会不会也被调度到 node-0 这个节点上去？</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-literal">master</span>-<span class="hljs-number">1</span> app]<span class="hljs-comment"># vim pod1-affinity-demo.yaml</span><br>apiVersion: v1<br>kind: Pod<br>metadata:<br>  name: <span class="hljs-keyword">node</span><span class="hljs-title">-affinity-pod1</span><br>  labels:<br>    name: podaffinity-myapp<br>    tier: service<br><span class="hljs-keyword">spec</span>:<br>  containers:<br>  - name: myapp<br>    image: nginx:latest<br>    imagePullPolicy: IfNotPresent<br>  nodeSelector:<br>    kubernetes.io/hostname: <span class="hljs-keyword">node</span><span class="hljs-title">-0</span><br><br>[root@<span class="hljs-literal">master</span>-<span class="hljs-number">1</span> app]<span class="hljs-comment"># kubectl apply -f pod1-affinity-demo.yaml</span><br>pod/<span class="hljs-keyword">node</span><span class="hljs-title">-affinity-pod1</span> created<br><br>[root@<span class="hljs-literal">master</span>-<span class="hljs-number">1</span> app]<span class="hljs-comment"># kubectl get pod -o wide</span><br>NAME                               READY   STATUS    RESTARTS   AGE   IP             <span class="hljs-keyword">NODE</span>     <span class="hljs-title">NOMINATED</span> <span class="hljs-keyword">NODE</span>   <span class="hljs-title">READINESS</span> GATES<br>...<br><span class="hljs-keyword">node</span><span class="hljs-title">-affinity-pod1</span>                 <span class="hljs-number">1</span>/<span class="hljs-number">1</span>     Running   <span class="hljs-number">0</span>          <span class="hljs-number">13s</span>   <span class="hljs-number">10.244</span>.<span class="hljs-number">4.9</span>     <span class="hljs-keyword">node</span><span class="hljs-title">-0</span>   <span class="hljs-tag">&lt;none&gt;</span>           <span class="hljs-tag">&lt;none&gt;</span><br><span class="hljs-keyword">node</span><span class="hljs-title">-affinity-pod2</span>                 <span class="hljs-number">1</span>/<span class="hljs-number">1</span>     Running   <span class="hljs-number">0</span>          <span class="hljs-number">11m</span>   <span class="hljs-number">10.244</span>.<span class="hljs-number">4.10</span>    <span class="hljs-keyword">node</span><span class="hljs-title">-0</span>   <span class="hljs-tag">&lt;none&gt;</span>           <span class="hljs-tag">&lt;none&gt;</span><br>...<br></code></pre></td></tr></table></figure><p>&amp;emsp;&amp;emsp;我们这个地方使用的是kubernetes.io&#x2F;hostname这个拓扑域，意思就是我们当前调度的 pod 要和目标的 pod 处于同一个主机上面，因为要处于同一个拓扑域下面kubernetes.io&#x2F;hostname&#x3D;node-0，为了说明这个问题，我们把拓扑域改成beta.kubernetes.io&#x2F;os，同样的我们当前调度的 pod 要和目标的 pod 处于同一个拓扑域中，目标的 pod 是不是拥有beta.kubernetes.io&#x2F;os&#x3D;linux的标签，而我们这里3个节点都有这样的标签，这也就意味着我们3个节点都在同一个拓扑域中，所以我们这里的 pod 可能会被调度到任何一个节点（因为master节点设置了污点所以不会调度至master节点）,判断他们是否在同一拓扑域中是根据topologyKey中指定的node标签的values是否相同，如果相同则表示在同一拓扑域中：</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-literal">master</span>-<span class="hljs-number">1</span> app]<span class="hljs-comment"># kubectl get node --show-labels</span><br>NAME       STATUS   ROLES    AGE   <span class="hljs-keyword">VERSION</span>   LABELS<br><span class="hljs-literal">master</span>-<span class="hljs-number">1</span>   Ready    <span class="hljs-keyword">master</span>   <span class="hljs-title">44d</span>   v1.<span class="hljs-number">13.1</span>   beta.kubernetes.io/<span class="hljs-attr">arch=</span>amd64,beta.kubernetes.io/<span class="hljs-attr">os=</span>linux,kubernetes.io/<span class="hljs-attr">hostname=</span><span class="hljs-literal">master</span>-<span class="hljs-number">1</span>,<span class="hljs-keyword">node</span><span class="hljs-title">-role</span>.kubernetes.io/<span class="hljs-attr">master=</span><br><span class="hljs-keyword">node</span><span class="hljs-title">-0</span>     Ready    <span class="hljs-tag">&lt;none&gt;</span>   <span class="hljs-number">44</span>d   v1.<span class="hljs-number">13.1</span>   beta.kubernetes.io/<span class="hljs-attr">arch=</span>amd64,beta.kubernetes.io/<span class="hljs-attr">os=</span>linux,kubernetes.io/<span class="hljs-attr">hostname=</span><span class="hljs-keyword">node</span><span class="hljs-title">-0</span><br><span class="hljs-keyword">node</span><span class="hljs-title">-1</span>     Ready    <span class="hljs-tag">&lt;none&gt;</span>   <span class="hljs-number">44</span>d   v1.<span class="hljs-number">13.1</span>   beta.kubernetes.io/<span class="hljs-attr">arch=</span>amd64,beta.kubernetes.io/<span class="hljs-attr">os=</span>linux,kubernetes.io/<span class="hljs-attr">hostname=</span><span class="hljs-keyword">node</span><span class="hljs-title">-1</span><br></code></pre></td></tr></table></figure><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-literal">master</span>-<span class="hljs-number">1</span> app]<span class="hljs-comment"># kubectl get pod -o wide</span><br>NAME                               READY   STATUS    RESTARTS   AGE   IP             <span class="hljs-keyword">NODE</span>     <span class="hljs-title">NOMINATED</span> <span class="hljs-keyword">NODE</span>   <span class="hljs-title">READINESS</span> GATES<br>nginx-ye-<span class="hljs-number">5664</span>f956f8-<span class="hljs-number">4</span>z26d          <span class="hljs-number">1</span>/<span class="hljs-number">1</span>     Running   <span class="hljs-number">0</span>          <span class="hljs-number">8s</span>    <span class="hljs-number">10.244</span>.<span class="hljs-number">4.12</span>    <span class="hljs-keyword">node</span><span class="hljs-title">-0</span>   <span class="hljs-tag">&lt;none&gt;</span>           <span class="hljs-tag">&lt;none&gt;</span><br>nginx-ye-<span class="hljs-number">5664</span>f956f8-htb86          <span class="hljs-number">1</span>/<span class="hljs-number">1</span>     Running   <span class="hljs-number">0</span>          <span class="hljs-number">8s</span>    <span class="hljs-number">10.244</span>.<span class="hljs-number">4.13</span>    <span class="hljs-keyword">node</span><span class="hljs-title">-0</span>   <span class="hljs-tag">&lt;none&gt;</span>           <span class="hljs-tag">&lt;none&gt;</span><br>nginx-ye-<span class="hljs-number">5664</span>f956f8-pd445          <span class="hljs-number">1</span>/<span class="hljs-number">1</span>     Running   <span class="hljs-number">0</span>          <span class="hljs-number">8s</span>    <span class="hljs-number">10.244</span>.<span class="hljs-number">2.20</span>    <span class="hljs-keyword">node</span><span class="hljs-title">-1</span>   <span class="hljs-tag">&lt;none&gt;</span>           <span class="hljs-tag">&lt;none&gt;</span><br>nginx-ye-<span class="hljs-number">5664</span>f956f8-sqsws          <span class="hljs-number">1</span>/<span class="hljs-number">1</span>     Running   <span class="hljs-number">0</span>          <span class="hljs-number">8s</span>    <span class="hljs-number">10.244</span>.<span class="hljs-number">4.11</span>    <span class="hljs-keyword">node</span><span class="hljs-title">-0</span>   <span class="hljs-tag">&lt;none&gt;</span>           <span class="hljs-tag">&lt;none&gt;</span><br>nginx-ye-<span class="hljs-number">5664</span>f956f8-wns5w          <span class="hljs-number">1</span>/<span class="hljs-number">1</span>     Running   <span class="hljs-number">0</span>          <span class="hljs-number">8s</span>    <span class="hljs-number">10.244</span>.<span class="hljs-number">2.21</span>    <span class="hljs-keyword">node</span><span class="hljs-title">-1</span>   <span class="hljs-tag">&lt;none&gt;</span>           <span class="hljs-tag">&lt;none&gt;</span><br><span class="hljs-keyword">node</span><span class="hljs-title">-affinity-pod1</span>                 <span class="hljs-number">1</span>/<span class="hljs-number">1</span>     Running   <span class="hljs-number">0</span>          <span class="hljs-number">61m</span>   <span class="hljs-number">10.244</span>.<span class="hljs-number">2.13</span>    <span class="hljs-keyword">node</span><span class="hljs-title">-1</span>   <span class="hljs-tag">&lt;none&gt;</span>           <span class="hljs-tag">&lt;none&gt;</span><br></code></pre></td></tr></table></figure><h3 id="podAntiAffinity"><a href="#podAntiAffinity" class="headerlink" title="podAntiAffinity"></a>podAntiAffinity</h3><p>&amp;emsp;&amp;emsp;和Pod亲和性的用法一致，只是Pod反亲和性则是反着来的。比如一个节点上运行了某个应用服务pod，那么我们的 数据库服务pod则尽量不要在同一台节点上，这就是反亲和性。</p><p>kubectl explain pod.spec.affinity.podAntiAffinity也是一样的，都是有硬亲和性和软亲和性；</p><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs gauss">[root<span class="hljs-comment">@master-1 app]# kubectl explain pod.spec.affinity.podAntiAffinity</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">KIND:     Pod</span><br><span class="hljs-comment">VERSION:  v1</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">RESOURCE: podAntiAffinity &lt;Object&gt;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">DESCRIPTION:</span><br><span class="hljs-comment">     Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod</span><br><span class="hljs-comment">     in the same node, zone, etc. as some other pod(s)).</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">     Pod anti affinity is a group of inter pod anti affinity scheduling rules.</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">FIELDS:</span><br><span class="hljs-comment">   preferredDuringSchedulingIgnoredDuringExecution&lt;[]Object&gt;</span><br><span class="hljs-comment">     The scheduler will prefer to schedule pods to nodes that satisfy the</span><br><span class="hljs-comment">     anti-affinity expressions specified by this field, but it may choose a node</span><br><span class="hljs-comment">     that violates one or more of the expressions. The node that is most</span><br><span class="hljs-comment">     preferred is the one with the greatest sum of weights, i.e. for each node</span><br><span class="hljs-comment">     that meets all of the scheduling requirements (resource request,</span><br><span class="hljs-comment">     requiredDuringScheduling anti-affinity expressions, etc.), compute a sum by</span><br><span class="hljs-comment">     iterating through the elements of this field and adding &quot;weight&quot; to the sum</span><br><span class="hljs-comment">     if the node has pods which matches the corresponding podAffinityTerm; the</span><br><span class="hljs-comment">     node(s) with the highest sum are the most preferred.</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">   requiredDuringSchedulingIgnoredDuringExecution&lt;[]Object&gt;</span><br><span class="hljs-comment">     If the anti-affinity requirements specified by this field are not met at</span><br><span class="hljs-comment">     scheduling time, the pod will not be scheduled onto the node. If the</span><br><span class="hljs-comment">     anti-affinity requirements specified by this field cease to be met at some</span><br><span class="hljs-comment">     point during pod execution (e.g. due to a pod label update), the system may</span><br><span class="hljs-comment">     or may not try to eventually evict the pod from its node. When there are</span><br><span class="hljs-comment">     multiple elements, the lists of nodes corresponding to each podAffinityTerm</span><br><span class="hljs-comment">     are intersected, i.e. all terms must be satisfied.</span><br></code></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs yaml">[<span class="hljs-string">root@master-1</span> <span class="hljs-string">app</span>]<span class="hljs-comment"># vim test2.yaml</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Pod</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">node-affinity-pod1</span><br>  <span class="hljs-attr">labels:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">podaffinity-myapp</span><br>    <span class="hljs-attr">tier:</span> <span class="hljs-string">service</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">containers:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">myapp</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">nginx:latest</span><br>    <span class="hljs-attr">imagePullPolicy:</span> <span class="hljs-string">IfNotPresent</span><br>  <span class="hljs-attr">nodeSelector:</span><br>    <span class="hljs-attr">kubernetes.io/hostname:</span> <span class="hljs-string">node-1</span><br></code></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment">#反硬亲和调度</span><br>[<span class="hljs-string">root@master-1</span> <span class="hljs-string">app</span>]<span class="hljs-comment"># pod-antiaffinity-demo.yaml</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">apps/v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Deployment</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">nginx-ye</span><br>  <span class="hljs-attr">labels:</span><br>    <span class="hljs-attr">app:</span> <span class="hljs-string">myapp</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">replicas:</span> <span class="hljs-number">5</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">matchLabels:</span><br>      <span class="hljs-attr">app:</span> <span class="hljs-string">nginx</span><br>  <span class="hljs-attr">template:</span><br>    <span class="hljs-attr">metadata:</span><br>      <span class="hljs-attr">labels:</span><br>        <span class="hljs-attr">app:</span> <span class="hljs-string">nginx</span><br>        <span class="hljs-attr">version:</span> <span class="hljs-string">latest</span><br>    <span class="hljs-attr">spec:</span><br>     <span class="hljs-attr">containers:</span><br>     <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">myapp</span><br>       <span class="hljs-attr">image:</span> <span class="hljs-string">nginx:latest</span><br>       <span class="hljs-attr">imagePullPolicy:</span> <span class="hljs-string">IfNotPresent</span><br>     <span class="hljs-attr">affinity:</span><br>       <span class="hljs-attr">podAntiAffinity:</span><br>         <span class="hljs-attr">requiredDuringSchedulingIgnoredDuringExecution:</span><br>           <span class="hljs-bullet">-</span> <span class="hljs-attr">labelSelector:</span><br>               <span class="hljs-attr">matchExpressions:</span><br>                 <span class="hljs-bullet">-</span> <span class="hljs-attr">key:</span> <span class="hljs-string">name</span><br>                   <span class="hljs-attr">operator:</span> <span class="hljs-string">In</span><br>                   <span class="hljs-attr">values:</span> [<span class="hljs-string">&quot;podaffinity-myapp&quot;</span>]<br>             <span class="hljs-attr">topologyKey:</span> <span class="hljs-string">kubernetes.io/hostname</span><br></code></pre></td></tr></table></figure><p>&amp;emsp;&amp;emsp;这里的意思就是如果一个节点上面有一个name&#x3D;podaffinity-myapp这样的 pod 的话，那么我们的 pod 就别调度到这个节点上面来，上面我们把name&#x3D;podaffinity-myapp这个 pod 固定到了 node-1这个节点上面来，所以正常来说我们这里的 pod 不会出现在 node-1 节点上：</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-literal">master</span>-<span class="hljs-number">1</span> app]<span class="hljs-comment"># kubectl get pod -o wide</span><br>NAME                               READY   STATUS    RESTARTS   AGE    IP             <span class="hljs-keyword">NODE</span>     <span class="hljs-title">NOMINATED</span> <span class="hljs-keyword">NODE</span>   <span class="hljs-title">READINESS</span> GATES<br>nginx-ye-<span class="hljs-number">79</span>c4778f6c-<span class="hljs-number">4h</span>5ft          <span class="hljs-number">1</span>/<span class="hljs-number">1</span>     Running   <span class="hljs-number">0</span>          <span class="hljs-number">15m</span>    <span class="hljs-number">10.244</span>.<span class="hljs-number">4.20</span>    <span class="hljs-keyword">node</span><span class="hljs-title">-0</span>   <span class="hljs-tag">&lt;none&gt;</span>           <span class="hljs-tag">&lt;none&gt;</span><br>nginx-ye-<span class="hljs-number">79</span>c4778f6c-<span class="hljs-number">8</span>tw9k          <span class="hljs-number">1</span>/<span class="hljs-number">1</span>     Running   <span class="hljs-number">0</span>          <span class="hljs-number">15m</span>    <span class="hljs-number">10.244</span>.<span class="hljs-number">4.16</span>    <span class="hljs-keyword">node</span><span class="hljs-title">-0</span>   <span class="hljs-tag">&lt;none&gt;</span>           <span class="hljs-tag">&lt;none&gt;</span><br>nginx-ye-<span class="hljs-number">79</span>c4778f6c-gpgxb          <span class="hljs-number">1</span>/<span class="hljs-number">1</span>     Running   <span class="hljs-number">0</span>          <span class="hljs-number">15m</span>    <span class="hljs-number">10.244</span>.<span class="hljs-number">4.17</span>    <span class="hljs-keyword">node</span><span class="hljs-title">-0</span>   <span class="hljs-tag">&lt;none&gt;</span>           <span class="hljs-tag">&lt;none&gt;</span><br>nginx-ye-<span class="hljs-number">79</span>c4778f6c-hbrfr          <span class="hljs-number">1</span>/<span class="hljs-number">1</span>     Running   <span class="hljs-number">0</span>          <span class="hljs-number">15m</span>    <span class="hljs-number">10.244</span>.<span class="hljs-number">4.19</span>    <span class="hljs-keyword">node</span><span class="hljs-title">-0</span>   <span class="hljs-tag">&lt;none&gt;</span>           <span class="hljs-tag">&lt;none&gt;</span><br>nginx-ye-<span class="hljs-number">79</span>c4778f6c-rbw5r          <span class="hljs-number">1</span>/<span class="hljs-number">1</span>     Running   <span class="hljs-number">0</span>          <span class="hljs-number">15m</span>    <span class="hljs-number">10.244</span>.<span class="hljs-number">4.18</span>    <span class="hljs-keyword">node</span><span class="hljs-title">-0</span>   <span class="hljs-tag">&lt;none&gt;</span>           <span class="hljs-tag">&lt;none&gt;</span><br><span class="hljs-keyword">node</span><span class="hljs-title">-affinity-pod1</span>                 <span class="hljs-number">1</span>/<span class="hljs-number">1</span>     Running   <span class="hljs-number">0</span>          <span class="hljs-number">147m</span>   <span class="hljs-number">10.244</span>.<span class="hljs-number">2.13</span>    <span class="hljs-keyword">node</span><span class="hljs-title">-1</span>   <span class="hljs-tag">&lt;none&gt;</span>           <span class="hljs-tag">&lt;none&gt;</span><br></code></pre></td></tr></table></figure><h3 id="更实际的用例"><a href="#更实际的用例" class="headerlink" title="更实际的用例"></a>更实际的用例</h3><p>&amp;emsp;&amp;emsp;在三个节点集群中，web应用程序具有内存缓存，比如redis。我们希望web服务器尽可能与redis共存。</p><p>&amp;emsp;&amp;emsp;下面的yaml文件是部署一个简单的redis，其中包含三个副本和<code>label</code>标签<code>app=store</code>。还配置了<code>PodAntiAffinity</code>，以确保调度器不会在单个节点上同时调度多个副本。</p><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-attribute">apiVersion</span><span class="hljs-punctuation">:</span> <span class="hljs-string">apps/v1</span><br><span class="hljs-attribute">kind</span><span class="hljs-punctuation">:</span> <span class="hljs-string">Deployment</span><br><span class="hljs-attribute">metadata</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">redis-cache</span><br><span class="hljs-attribute">spec</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">selector</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-attribute">matchLabels</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-attribute">app</span><span class="hljs-punctuation">:</span> <span class="hljs-string">store</span><br>  <span class="hljs-attribute">replicas</span><span class="hljs-punctuation">:</span> <span class="hljs-string">3</span><br>  <span class="hljs-attribute">template</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-attribute">metadata</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-attribute">labels</span><span class="hljs-punctuation">:</span><br>        <span class="hljs-attribute">app</span><span class="hljs-punctuation">:</span> <span class="hljs-string">store</span><br>    <span class="hljs-attribute">spec</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-attribute">affinity</span><span class="hljs-punctuation">:</span><br>        <span class="hljs-attribute">podAntiAffinity</span><span class="hljs-punctuation">:</span><br>          <span class="hljs-attribute">requiredDuringSchedulingIgnoredDuringExecution</span><span class="hljs-punctuation">:</span><br>          <span class="hljs-bullet">-</span> <span class="hljs-string">labelSelector:</span><br>              <span class="hljs-attribute">matchExpressions</span><span class="hljs-punctuation">:</span><br>              <span class="hljs-bullet">-</span> <span class="hljs-string">key: app</span><br>                <span class="hljs-attribute">operator</span><span class="hljs-punctuation">:</span> <span class="hljs-string">In</span><br>                <span class="hljs-attribute">values</span><span class="hljs-punctuation">:</span><br>                <span class="hljs-bullet">-</span> <span class="hljs-string">store</span><br>            <span class="hljs-attribute">topologyKey</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;kubernetes.io/hostname&quot;</span><br>      <span class="hljs-attribute">containers</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">name: redis-server</span><br>        <span class="hljs-attribute">image</span><span class="hljs-punctuation">:</span> <span class="hljs-string">redis:3.2-alpine</span><br></code></pre></td></tr></table></figure><p>&amp;emsp;&amp;emsp;下面是web服务器部署的yaml文件配置了<code>podAntiAffinity</code>和<code>podAffinity</code>。这将通知调度器，它的所有副本都将与具有选择器标签<code>app=store</code>的pod共存。这还将确保每个web服务器副本不会同时位于单个节点上。</p><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-attribute">apiVersion</span><span class="hljs-punctuation">:</span> <span class="hljs-string">apps/v1</span><br><span class="hljs-attribute">kind</span><span class="hljs-punctuation">:</span> <span class="hljs-string">Deployment</span><br><span class="hljs-attribute">metadata</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">web-server</span><br><span class="hljs-attribute">spec</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">selector</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-attribute">matchLabels</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-attribute">app</span><span class="hljs-punctuation">:</span> <span class="hljs-string">web-store</span><br>  <span class="hljs-attribute">replicas</span><span class="hljs-punctuation">:</span> <span class="hljs-string">3</span><br>  <span class="hljs-attribute">template</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-attribute">metadata</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-attribute">labels</span><span class="hljs-punctuation">:</span><br>        <span class="hljs-attribute">app</span><span class="hljs-punctuation">:</span> <span class="hljs-string">web-store</span><br>    <span class="hljs-attribute">spec</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-attribute">affinity</span><span class="hljs-punctuation">:</span><br>        <span class="hljs-attribute">podAntiAffinity</span><span class="hljs-punctuation">:</span><br>          <span class="hljs-attribute">requiredDuringSchedulingIgnoredDuringExecution</span><span class="hljs-punctuation">:</span><br>          <span class="hljs-bullet">-</span> <span class="hljs-string">labelSelector:</span><br>              <span class="hljs-attribute">matchExpressions</span><span class="hljs-punctuation">:</span><br>              <span class="hljs-bullet">-</span> <span class="hljs-string">key: app</span><br>                <span class="hljs-attribute">operator</span><span class="hljs-punctuation">:</span> <span class="hljs-string">In</span><br>                <span class="hljs-attribute">values</span><span class="hljs-punctuation">:</span><br>                <span class="hljs-bullet">-</span> <span class="hljs-string">web-store</span><br>            <span class="hljs-attribute">topologyKey</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;kubernetes.io/hostname&quot;</span><br>        <span class="hljs-attribute">podAffinity</span><span class="hljs-punctuation">:</span><br>          <span class="hljs-attribute">requiredDuringSchedulingIgnoredDuringExecution</span><span class="hljs-punctuation">:</span><br>          <span class="hljs-bullet">-</span> <span class="hljs-string">labelSelector:</span><br>              <span class="hljs-attribute">matchExpressions</span><span class="hljs-punctuation">:</span><br>              <span class="hljs-bullet">-</span> <span class="hljs-string">key: app</span><br>                <span class="hljs-attribute">operator</span><span class="hljs-punctuation">:</span> <span class="hljs-string">In</span><br>                <span class="hljs-attribute">values</span><span class="hljs-punctuation">:</span><br>                <span class="hljs-bullet">-</span> <span class="hljs-string">store</span><br>            <span class="hljs-attribute">topologyKey</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;kubernetes.io/hostname&quot;</span><br>      <span class="hljs-attribute">containers</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">name: web-app</span><br>        <span class="hljs-attribute">image</span><span class="hljs-punctuation">:</span> <span class="hljs-string">nginx:1.12-alpine</span><br></code></pre></td></tr></table></figure><p>如果我们创建上面的两个部署，我们的三个节点集群应该如下所示。</p><table><thead><tr><th>node-1</th><th align="center">node-2</th><th align="right">node-3</th></tr></thead><tbody><tr><td>webserver-1</td><td align="center">webserver-2</td><td align="right">webserver-3</td></tr><tr><td>cache-1</td><td align="center">cache-2</td><td align="right">webserver-3</td></tr></tbody></table><p>正如你所看到的， web-server的所有3个副本都按照预期自动与缓存共存。</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">$ kubectl get pods -o wide<br>NAME                           READY     STATUS    RESTARTS   AGE       IP           <span class="hljs-keyword">NODE</span><br><span class="hljs-title">redis-cache-1450370735-6dzlj</span>   <span class="hljs-number">1</span>/<span class="hljs-number">1</span>       Running   <span class="hljs-number">0</span>          <span class="hljs-number">8m</span>        <span class="hljs-number">10.192</span>.<span class="hljs-number">4.2</span>   kube-<span class="hljs-keyword">node</span><span class="hljs-title">-3</span><br>redis-cache-<span class="hljs-number">1450370735</span>-j2j96   <span class="hljs-number">1</span>/<span class="hljs-number">1</span>       Running   <span class="hljs-number">0</span>          <span class="hljs-number">8m</span>        <span class="hljs-number">10.192</span>.<span class="hljs-number">2.2</span>   kube-<span class="hljs-keyword">node</span><span class="hljs-title">-1</span><br>redis-cache-<span class="hljs-number">1450370735</span>-z73mh   <span class="hljs-number">1</span>/<span class="hljs-number">1</span>       Running   <span class="hljs-number">0</span>          <span class="hljs-number">8m</span>        <span class="hljs-number">10.192</span>.<span class="hljs-number">3.1</span>   kube-<span class="hljs-keyword">node</span><span class="hljs-title">-2</span><br>web-server-<span class="hljs-number">1287567482</span>-<span class="hljs-number">5</span>d4dz    <span class="hljs-number">1</span>/<span class="hljs-number">1</span>       Running   <span class="hljs-number">0</span>          <span class="hljs-number">7m</span>        <span class="hljs-number">10.192</span>.<span class="hljs-number">2.3</span>   kube-<span class="hljs-keyword">node</span><span class="hljs-title">-1</span><br>web-server-<span class="hljs-number">1287567482</span>-<span class="hljs-number">6</span>f7v5    <span class="hljs-number">1</span>/<span class="hljs-number">1</span>       Running   <span class="hljs-number">0</span>          <span class="hljs-number">7m</span>        <span class="hljs-number">10.192</span>.<span class="hljs-number">4.3</span>   kube-<span class="hljs-keyword">node</span><span class="hljs-title">-3</span><br>web-server-<span class="hljs-number">1287567482</span>-s330j    <span class="hljs-number">1</span>/<span class="hljs-number">1</span>       Running   <span class="hljs-number">0</span>          <span class="hljs-number">7m</span>        <span class="hljs-number">10.192</span>.<span class="hljs-number">3.2</span>   kube-<span class="hljs-keyword">node</span><span class="hljs-title">-2</span><br></code></pre></td></tr></table></figure><p>上面的例子使用<code>PodAntiAffinity</code>规则和<code>topologyKey: &quot;kubernetes.io/hostname&quot;</code>。来部署redis集群，使其同一主机上不存在两个实例；</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>kubernetes flannel之Vxlan原理</title>
    <link href="/2019/08/26/kubernetes-flannel-Vxlan/"/>
    <url>/2019/08/26/kubernetes-flannel-Vxlan/</url>
    
    <content type="html"><![CDATA[<h3 id="kubernetes网络通信"><a href="#kubernetes网络通信" class="headerlink" title="kubernetes网络通信"></a>kubernetes网络通信</h3><blockquote><ul><li>容器间的通信   pod内的容器通信（lo）</li></ul></blockquote><ul><li>Pod之间的通信   pod IP &lt;—–&gt; pod IP（flannel、calico）</li><li>Pod与Service之间的通信 podIP &lt;—–&gt; ClusterIP（iptables、ipvs）</li><li>Service与集群外部的通信 ClusterIP &lt;—–&gt; 集群外部</li></ul><h3 id="CNI插件："><a href="#CNI插件：" class="headerlink" title="CNI插件："></a>CNI插件：</h3><blockquote><ul><li>flannel</li></ul></blockquote><ul><li>calico</li><li>canel</li><li>kube-router</li></ul><h3 id="Flannel"><a href="#Flannel" class="headerlink" title="Flannel"></a>Flannel</h3><blockquote><p>Flannel本身是一个框架，真正提供网络功能是他的后端实现。目前支持三种后端实现：</p><ul><li>VXLAN</li><li>host-gw</li><li>UDP<br>注释：只要有kubelet的节点就要安装flannel网络，因为这是pod和pod间通讯用的。</li></ul></blockquote><p><img src="/images/flannel-1.png" alt="flannel-1"></p><blockquote><p>从图里看每个宿主机都有一个flannel1的设备，就是VXLAN所需的VTEP设备（就是flannel1“用于VXLAN报文的封装和解封装”），它既有IP地址也有MAC地址。现在我们是container1 访问 container2，当container1发出请求后，这个目的的地址是10.244.1.3的IP包，会先出现在cni0网桥，然后被路由到本机flanner1设备上处理，也就是说，来到了“隧道”的出口。既目的宿主机的VTEP设备（就是flannel1 设备）。</p></blockquote><blockquote><p>当所有Node启动后，我们可以在Node1 上可以看到多个flannel1 网卡的路由信息，是因为flanneld启动后创建的。</p></blockquote><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs tap">[root@node-0 ~]<span class="hljs-comment"># ifconfig</span><br>flannel.1: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1450<br>        inet 10.244.0.0  netmask 255.255.255.255  broadcast 0.0.0.0<br>        ether 8a:bf:bf:7e:b7:f6  txqueuelen<span class="hljs-number"> 0 </span> (Ethernet)<br>        RX packets<span class="hljs-number"> 28929 </span> bytes<span class="hljs-number"> 1676230 </span>(1.5 MiB)<br>        RX errors<span class="hljs-number"> 0 </span> dropped<span class="hljs-number"> 0 </span> overruns<span class="hljs-number"> 0 </span> frame 0<br>        TX packets<span class="hljs-number"> 12085 </span> bytes<span class="hljs-number"> 42372533 </span>(40.4 MiB)<br>        TX errors<span class="hljs-number"> 0 </span> dropped<span class="hljs-number"> 0 </span>overruns<span class="hljs-number"> 0 </span> carrier<span class="hljs-number"> 0 </span> collisions 0<br></code></pre></td></tr></table></figure><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs accesslog"><span class="hljs-string">[root@node-0 ~]</span># route -n <br>Kernel IP routing table<br>Destination     Gateway         Genmask         Flags Metric Ref    Use Iface<br>...<br><span class="hljs-number">10.244.1.0</span>      <span class="hljs-number">10</span>.<span class="hljs-number">244</span>.<span class="hljs-number">1</span>.<span class="hljs-number">0</span>      <span class="hljs-number">255</span>.<span class="hljs-number">255</span>.<span class="hljs-number">255</span>.<span class="hljs-number">0</span>   UG    <span class="hljs-number">0</span>      <span class="hljs-number">0</span>        <span class="hljs-number">0</span> flannel.<span class="hljs-number">1</span><br>....<br></code></pre></td></tr></table></figure><blockquote><p>从上图看到10.244.1.0就是Node2的VTEP设备（flannel1）的IP地址，而这些VTEP设备之间通讯就需要想办法组成一个虚拟的二层网络，既：通过二层数据帧进行通信，而Node1上的VTEP设备收到原始报文后,就要想办法把原始报文加一个目的MAC地址，封装成二层数据帧，然后发送给目的VTEP设备。这里需要解决一个问题目的VTEP设备的MAC地址是什么？</p></blockquote><blockquote><p>根据路由表信息我们知道了目的VTEP设备的IP地址，而根据三层IP地址查询二层MAC地址正是ARP表的功能。而这里用ARP表的记录，也就是flanneld进程在Node2节点启动时，自动添加到Node1上的。如下：</p></blockquote><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs accesslog"><span class="hljs-string">[root@node-0 ~]</span># ip neigh show dev flannel.<span class="hljs-number">1</span><br><span class="hljs-number">10.244.1.0</span> lladdr b2:ba:aa:a5:<span class="hljs-number">10</span>:1a PERMANENT<br></code></pre></td></tr></table></figure><blockquote><p>有了这个MAC地址linux内核就可以开始二层封装了，上面提到的MAC地址，对宿主机的二层网络没有任何意义，所以上述封装的数据帧不能在宿主机的二层网络里传输，为了方便概述，我们把上述数据帧称为内部数据帧。所以Linux内核还要把内部数据帧进一步封装成宿主机网络的一个普通数据帧，好让他载着内部数据帧，通过eth0网卡进行传输。这次封装我们称为外部数据帧，为了实现这个搭便车的机制，Linux内核在封装内部数据帧前面，加上特殊的VXLAN头，用来表示这个乘客实际上是VXLAN使用的数据帧。而这个VXLAN头里有一个重要的标志VNI，它是识别某个数据帧是不是应该归属自己处理的标志。而flannel中，VNI的值是1，这也是为什么宿主机的VTEP设备都叫做flannel1的原因。这个时候linux内核会把这数据帧封装一个UDP报文在转发出去。虽然node1的flannel1知道node2的flannel2的MAC地址，但是不知道node2MAC的地址，也就是UDP该发往那台主机，实际上flannel1还要扮演一个网桥的角色，在二层网络进行UDP转发，而在Linux内核里面，网桥设备进行转发的依据来自FDB的转发数据库。这个flannel网桥对应的FDB信息，就是flannel进程维护的，他的内容如下：</p></blockquote><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">node</span><span class="hljs-title">-0</span> ~]<span class="hljs-comment"># bridge fdb show flannel.1  | grep b2:ba:aa:a5:10:1a</span><br>b2:ba:aa:a5:<span class="hljs-number">10</span>:<span class="hljs-number">1</span>a dev flannel.<span class="hljs-number">1</span> dst <span class="hljs-number">172.16</span>.<span class="hljs-number">138.41</span> self permanent<br></code></pre></td></tr></table></figure><blockquote><p>我们可以看到发往的IP地址是172.16.138.41的主机，显然这台主机就是 Node2,UDP要转发的目的也找到了。接下来就是宿主机网络封包的过程了。</p></blockquote><p><img src="/images/flannel-2.png" alt="flannel-2"></p><blockquote><p>下面让我们来看看，当有一个EventAdded到来时，flanneld如何进行配置，以及封包是如何在flannel网络中流动的。</p></blockquote><p><img src="/images/flannel-3.png" alt="flannel-3"></p><blockquote><p>如上图所示，当主机B加入flannel网络时，它会将自己的subnet 10.1.16.0&#x2F;24和Public IP 192.168.0.101写入etcd中，它还会将vtep设备flannel.1的mac地址也写入etcd中。</p></blockquote><blockquote><p>之后，主机A会得到EventAdded事件，并从中获取主机B添加至etcd的各种信息。这个时候，它会在本机上添加三条信息：</p></blockquote><ul><li>路由信息：所有通往目的地址10.1.16.0&#x2F;24的封包都通过vtep设备flannel.1设备发出，发往的网关地址为10.1.16.0，即主机B中的flannel.1设备。</li></ul><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs accesslog"><span class="hljs-string">[root@node-0 ~]</span># ip route list<br>...<br><span class="hljs-number">10.1.16.0</span>/<span class="hljs-number">24</span> via <span class="hljs-number">10</span>.<span class="hljs-number">1</span>.<span class="hljs-number">16</span>.<span class="hljs-number">0</span> dev flannel.<span class="hljs-number">1</span> onlink <br>...<br></code></pre></td></tr></table></figure><ul><li>fdb信息：MAC地址为flannel的mac地址，发往10.1.16.0的数据包都将通过vxlan首先发往目的地址192.168.0.101，即主机B</li></ul><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs accesslog"><span class="hljs-string">[root@node-0 bin]</span>#  ip neigh show dev flannel.<span class="hljs-number">1</span><br><span class="hljs-number">10.1.16.0</span> lladdr b2:ba:aa:a5:<span class="hljs-number">10</span>:1a PERMANENT<br></code></pre></td></tr></table></figure><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">node</span><span class="hljs-title">-0</span> bin]<span class="hljs-comment">#  bridge fdb show flannel.1  | grep b2:ba:aa:a5:10:1a</span><br>b2:ba:aa:a5:<span class="hljs-number">10</span>:<span class="hljs-number">1</span>a dev flannel.<span class="hljs-number">1</span> dst <span class="hljs-number">192.168</span>.<span class="hljs-number">0.101</span> self permanent<br></code></pre></td></tr></table></figure><ul><li>arp信息：网关地址10.1.16.0的MAC地址为flannel的mac地址</li></ul><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs accesslog"><span class="hljs-string">[root@node-0 bin]</span># arp -v<br>Address                  HWtype  HWaddress           Flags Mask            Iface<br>...<br><span class="hljs-number">10.1.16.0</span>               ether   b2:ba:aa:a5:<span class="hljs-number">10</span>:1a   CM                    flannel.<span class="hljs-number">1</span><br>...<br></code></pre></td></tr></table></figure><h3 id="参数说明："><a href="#参数说明：" class="headerlink" title="参数说明："></a>参数说明：</h3><blockquote><ul><li>Network flannel使用CIDR格式（10.244.0.0&#x2F;16）的网络地址，用于为pod的配置网络功能</li><li>SubnetLen表示每个主机分配的subnet大小，我们可以在初始化时对其指定，否则使用默认配置。在默认配置的情况下SubnetLen配置为24（表示24位子网掩码）。</li></ul></blockquote><ul><li>SubnetMin是集群网络地址空间中最小的可分配的subnet，可以手动指定，否则默认配置为集群网络地址空间中第一个可分配的subnet。例如对于”10.1.0.0&#x2F;16″，当SubnetLen为24时，第一个可分配的subnet为”10.1.1.0&#x2F;24″。</li><li>SubnetMax表示最大可分配的subnet，对于”10.1.0.0&#x2F;16″，当subnetLen为24时，SubnetMax为”10.1.255.0&#x2F;24″</li><li>Backend.Type 为flannel指定使用的backend的类型，类型分三种：vxlan、host-gw、udp，如未指定，则默认为“vxlan”</li><li>–ip-masq&#x3D;true  为网桥上的IP地址开启IP伪装(代表需要为其配置SNAT)<br>注意：Backend为vxlan时，其中会存储vtep设备的mac地址至etcd中</li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Kubernetes之配置dashboard</title>
    <link href="/2019/08/26/Kubernetes-dashboard/"/>
    <url>/2019/08/26/Kubernetes-dashboard/</url>
    
    <content type="html"><![CDATA[<h3 id="创建证书"><a href="#创建证书" class="headerlink" title="创建证书"></a>创建证书</h3><blockquote><p>由于自动生成的证书 chrome 不允许访问，所以使用自己生成的证书。</p></blockquote><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs autoit">[root<span class="hljs-symbol">@master</span><span class="hljs-number">-1</span> ~]<span class="hljs-meta"># mkdir certs</span><br>[root<span class="hljs-symbol">@master</span><span class="hljs-number">-1</span> ~]<span class="hljs-meta"># (umask 077<span class="hljs-comment">;openssl genrsa -out dashboard.key 2048)</span></span><br>[root<span class="hljs-symbol">@master</span><span class="hljs-number">-1</span> ~]<span class="hljs-meta"># openssl req -nodes -newkey rsa:2048 -keyout certs/tls.key -out certs/tls.csr -subj <span class="hljs-string">&quot;/C=/ST=/L=/O=/OU=/CN=kubernetes-dashboard&quot;</span></span><br>[root<span class="hljs-symbol">@master</span><span class="hljs-number">-1</span> ~]<span class="hljs-meta"># openssl x509 -req -sha256 -days 365 -in certs/tls.csr -signkey certs/tls.key -out certs/tls.crt</span><br>[root<span class="hljs-symbol">@master</span><span class="hljs-number">-1</span> ~]<span class="hljs-meta"># kubectl create secret generic kubernetes-dashboard-certs --from-file=$HOME/certs -n kubernetes-dashboard</span><br></code></pre></td></tr></table></figure><h3 id="创建-Kubernetes-dashboard"><a href="#创建-Kubernetes-dashboard" class="headerlink" title="创建 Kubernetes dashboard"></a>创建 Kubernetes dashboard</h3><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs verilog">[root@master-<span class="hljs-number">1</span> ~]# curl -sSLO  https:<span class="hljs-comment">//raw.githubusercontent.com/kubernetes/dashboard/v2.2.0/aio/deploy/recommended.yaml</span><br><br>新增如下参数：<br>      containers:<br>      - args:<br>        - --tls-cert-file=/tls<span class="hljs-variable">.crt</span><br>        - --tls-key-file=/tls<span class="hljs-variable">.key</span><br><br>--auto-<span class="hljs-keyword">generate</span>-certificates 可以保留在原处作备用。<br></code></pre></td></tr></table></figure><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-literal">master</span>-<span class="hljs-number">1</span> ~]<span class="hljs-comment"># kubectl apply -f recommended.yaml</span><br>[root@<span class="hljs-literal">master</span>-<span class="hljs-number">1</span> ~]<span class="hljs-comment"># kubectl -n kubernetes-dashboard edit service kubernetes-dashboard</span><br><br>更改 `<span class="hljs-keyword">type</span>: ClusterIP` 为 `<span class="hljs-keyword">type</span>: NodePort` 并保存<br></code></pre></td></tr></table></figure><h3 id="创建-admin-账户"><a href="#创建-admin-账户" class="headerlink" title="创建 admin 账户"></a>创建 admin 账户</h3><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-attribute">cat &lt;&lt;EOF | kubectl apply -f -</span><br><span class="hljs-attribute">apiVersion</span><span class="hljs-punctuation">:</span> <span class="hljs-string">v1</span><br><span class="hljs-attribute">kind</span><span class="hljs-punctuation">:</span> <span class="hljs-string">ServiceAccount</span><br><span class="hljs-attribute">metadata</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">admin-user</span><br>  <span class="hljs-attribute">namespace</span><span class="hljs-punctuation">:</span> <span class="hljs-string">kubernetes-dashboard</span><br>EOF<br><br></code></pre></td></tr></table></figure><h3 id="绑定集群角色"><a href="#绑定集群角色" class="headerlink" title="绑定集群角色"></a>绑定集群角色</h3><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-attribute">cat &lt;&lt;EOF | kubectl apply -f -</span><br><span class="hljs-attribute">apiVersion</span><span class="hljs-punctuation">:</span> <span class="hljs-string">rbac.authorization.k8s.io/v1</span><br><span class="hljs-attribute">kind</span><span class="hljs-punctuation">:</span> <span class="hljs-string">ClusterRoleBinding</span><br><span class="hljs-attribute">metadata</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">admin-user</span><br><span class="hljs-attribute">roleRef</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">apiGroup</span><span class="hljs-punctuation">:</span> <span class="hljs-string">rbac.authorization.k8s.io</span><br>  <span class="hljs-attribute">kind</span><span class="hljs-punctuation">:</span> <span class="hljs-string">ClusterRole</span><br>  <span class="hljs-attribute">name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">cluster-admin</span><br><span class="hljs-attribute">subjects</span><span class="hljs-punctuation">:</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">kind: ServiceAccount</span><br>  <span class="hljs-attribute">name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">admin-user</span><br>  <span class="hljs-attribute">namespace</span><span class="hljs-punctuation">:</span> <span class="hljs-string">kubernetes-dashboard</span><br>EOF<br></code></pre></td></tr></table></figure><blockquote><p>获取 token ，通过 https 进行 dashboard 端口访问</p></blockquote><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">kubectl -n kubernetes-dashboard get secret <span class="hljs-constructor">$(<span class="hljs-params">kubectl</span> -<span class="hljs-params">n</span> <span class="hljs-params">kubernetes</span>-<span class="hljs-params">dashboard</span> <span class="hljs-params">get</span> <span class="hljs-params">sa</span><span class="hljs-operator">/</span><span class="hljs-params">admin</span>-<span class="hljs-params">user</span> -<span class="hljs-params">o</span> <span class="hljs-params">jsonpath</span>=<span class="hljs-string">&quot;&#123;.secrets[0].name&#125;&quot;</span>)</span> -o go-template=<span class="hljs-string">&quot;&#123;&#123;.data.token | base64decode&#125;&#125;&quot;</span><br></code></pre></td></tr></table></figure><p><img src="/images/dashboard-1.png" alt="dashboard-1"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Kubernetes之RBAC（基于角色的访问控制）</title>
    <link href="/2019/08/26/Kubernetes-RBAC/"/>
    <url>/2019/08/26/Kubernetes-RBAC/</url>
    
    <content type="html"><![CDATA[<p>Kubernetes的授权是基于插件形式的，其常用的授权插件有以下几种：</p><ul><li>Node（节点认证）</li><li>ABAC(基于属性的访问控制)</li><li>RBAC（基于角色的访问控制）</li><li>Webhook（基于http回调机制的访问控制）</li></ul><p>让一个用户（Users）扮演一个角色（Role），角色拥有权限，从而让用户拥有这样的权限，随后在授权机制当中，只需要将权限授予某个角色，此时用户将获取对应角色的权限，从而实现角色的访问控制。如图：</p><p><img src="/images/rbac-1.png" alt="rbac-1"></p><p>基于角色的访问控制（Role-Based Access Control, 即”RBAC”）使用”rbac.authorization.k8s.io” API Group实现授权决策，允许管理员通过Kubernetes API动态配置策略。</p><p>在k8s的授权机制当中，采用RBAC的方式进行授权，其工作逻辑是把对对象的操作权限定义到一个角色当中，再将用户绑定到该角色，从而使用户得到对应角色的权限。此种方式仅作用于名称空间当中，这是什么意思呢？当User1绑定到Role角色当中，User1就获取了对该NamespaceA的操作权限，但是对NamespaceB是没有权限进行操作的，如get，list等操作。</p><p>另外，k8s为此还有一种集群级别的授权机制，就是定义一个集群角色（ClusterRole），对集群内的所有资源都有可操作的权限，从而将User2，User3通过ClusterRoleBinding到ClusterRole，从而使User2、User3拥有集群的操作权限。</p><p><img src="/images/rbac-2.png" alt="rbac-2"></p><p>这里有2种绑定ClusterRoleBinding、RoleBinding。但是也可以使用RoleBinding去绑定ClusterRole。</p><p>当使用这种方式进行绑定时，用户仅能获取当前名称空间的所有权限。为什么这么绕呢？？举例有10个名称空间，每个名称空间都需要一个管理员，而该管理员的权限都是一致的。那么此时需要去定义这样的管理员，使用RoleBinding就需要创建10个Role，这样显得更加繁重。为此当使用RoleBinding去绑定一个ClusterRole时，该User仅仅拥有对当前名称空间的集群操作权限，换句话说，此时只需要创建一个ClusterRole就解决了以上的需求。(注意：RoleBinding仅仅对当前名称空间有对应的权限)</p><p>在RBAC API中，一个角色就是一组权限的集合， 权限以纯粹的累加形式累积（没有”否定”的规则）。 角色由命名空间（namespace）内的Role对象定义，而整个Kubernetes集群范围内有效的角色则通过ClusterRole对象实现。</p><h2 id="角色（Role）"><a href="#角色（Role）" class="headerlink" title="角色（Role）"></a>角色（Role）</h2><p>角色只能对命名空间内的资源进行授权，以下示例描述了”default”命名空间中定义了一个Role对象，用于授予对pod的读访问权限：</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">kind:</span> Role<br><span class="hljs-symbol">apiVersion:</span> rbac.authorization.k8s.io/v1beta1<br><span class="hljs-symbol">metadata:</span><br><span class="hljs-symbol">  namespace:</span> default<br><span class="hljs-symbol">  name:</span> pod-reader<br><span class="hljs-symbol">rules:</span><br>- apiGroups: [<span class="hljs-string">&quot;&quot;</span>] <span class="hljs-meta"># <span class="hljs-string">&quot;&quot;</span> 空字符串，表示核心 API 群</span><br><span class="hljs-symbol">  resources:</span> [<span class="hljs-string">&quot;pods&quot;</span>]<br><span class="hljs-symbol">  verbs:</span> [<span class="hljs-string">&quot;get&quot;</span>, <span class="hljs-string">&quot;watch&quot;</span>, <span class="hljs-string">&quot;list&quot;</span>]<br></code></pre></td></tr></table></figure><h3 id="rules-中的参数说明如下"><a href="#rules-中的参数说明如下" class="headerlink" title="rules 中的参数说明如下"></a>rules 中的参数说明如下</h3><ul><li>apiGroups：支持的 API 组列表，例如<code>apiVersion: batch/v1</code>、 <code>apiVersion: extensions/v1beta1</code>、 <code>apiVersion: apps/v1beta1</code> 等。</li><li>resource：支持的资源对象列表，例如 <code>pods</code>、<code>deployments</code>、<code>jobs</code> 等。</li><li>verbs：对资源对象的操作方法列表，例如 <code>get</code>, <code>list</code>, <code>watch</code>, <code>create</code>, <code>update</code>, <code>patch</code>, <code>delete</code>,<code>deletecollection</code> 。</li></ul><h2 id="集群角色（Cluster-Role）"><a href="#集群角色（Cluster-Role）" class="headerlink" title="集群角色（Cluster Role）"></a>集群角色（Cluster Role）</h2><p>集群角色除了具有和角色一致的名称空间内资源的管理能力，因其集群级别的范围，还可以用于以下特殊元素的授权。</p><ul><li>集群范围的资源（例如 Node（节点））</li><li>非资源型的路径（例如 <code>/healthz</code>）</li><li>包含全部名称空间的资源，例如 pods（用于 <code>kubectl get pods --all-namespaces</code> 这样的操作授权）。</li></ul><p>下面的集群角色可以让用户有权访问任意一个或所有命名空间的 secrets（取决于其绑定方式）：</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">kind:</span> ClusterRole<br><span class="hljs-symbol">apiVersion:</span> rbac.authorization.k8s.io/v1beta1<br><span class="hljs-symbol">metadata:</span><br>  <span class="hljs-meta"># 鉴于ClusterRole是作用于整个集群范围对象，所以这里不需要定义<span class="hljs-string">&quot;namespace&quot;</span>字段</span><br><span class="hljs-symbol">  name:</span> secret-reader<br><span class="hljs-symbol">rules:</span><br>- apiGroups: [<span class="hljs-string">&quot;&quot;</span>]<br><span class="hljs-symbol">  resources:</span> [<span class="hljs-string">&quot;secrets&quot;</span>]<br><span class="hljs-symbol">  verbs:</span> [<span class="hljs-string">&quot;get&quot;</span>, <span class="hljs-string">&quot;watch&quot;</span>, <span class="hljs-string">&quot;list&quot;</span>]<br></code></pre></td></tr></table></figure><h2 id="RoleBinding与ClusterRoleBinding"><a href="#RoleBinding与ClusterRoleBinding" class="headerlink" title="RoleBinding与ClusterRoleBinding"></a>RoleBinding与ClusterRoleBinding</h2><p>角色绑定（Role Binding）将一个角色中定义的各种权限授予一个或者一组用户。 角色绑定包含了一组相关主体（即subject, 包括用户——User、用户组——Group、或者服务账户——Service Account）以及对被授予角色的引用。 在命名空间中可以通过RoleBinding对象授予权限，而集群范围的权限授予则通过ClusterRoleBinding对象完成。</p><p>RoleBinding可以引用在同一命名空间内定义的Role对象。 下面示例中定义的RoleBinding对象在”default”命名空间中将”pod-reader”角色授予用户”jane”。 这一授权将允许用户”jane”从”default”命名空间中读取pod。</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-meta"># 以下角色绑定定义将允许用户<span class="hljs-string">&quot;jane&quot;</span>从<span class="hljs-string">&quot;default&quot;</span>命名空间中读取pod。</span><br><span class="hljs-symbol"></span><br><span class="hljs-symbol">kind:</span> RoleBinding<br><span class="hljs-symbol">apiVersion:</span> rbac.authorization.k8s.io/v1<br><span class="hljs-symbol">metadata:</span><br><span class="hljs-symbol">  name:</span> read-pods<br><span class="hljs-symbol">  namespace:</span> default<br><span class="hljs-symbol">subjects:</span><br>- kind: User               <span class="hljs-meta"># 赋予用户jane pod-reader角色权限</span><br><span class="hljs-symbol">  name:</span> jane<br><span class="hljs-symbol">  apiGroup:</span> rbac.authorization.k8s.io<br><span class="hljs-symbol">roleRef:</span><br><span class="hljs-symbol">  kind:</span> Role               <span class="hljs-meta"># 此字段必须是 Role 或 ClusterRole</span><br><span class="hljs-symbol">  name:</span> pod-reader         <span class="hljs-meta"># 此字段必须与你要绑定的 Role 或 ClusterRole 的名称匹配，也就是说此 Role 或 ClusterRole必须存在</span><br><span class="hljs-symbol">  apiGroup:</span> rbac.authorization.k8s.io<br></code></pre></td></tr></table></figure><p>RoleBinding对象也可以引用一个ClusterRole对象用于在RoleBinding所在的命名空间内授予用户对所引用的ClusterRole中 定义的命名空间资源的访问权限。这一点允许管理员在整个集群范围内首先定义一组通用的角色，然后再在不同的命名空间中复用这些角色。(这样做的目的是创建一个通用权限的ClusterRole，如果需要创建10个名称空间管理员的时候只需要用RoleBinding和ClusterRole绑定即可，不用创建10个role和10个RoleBinding，只需要一个ClusterRole和十个RoleBinding就搞定了)</p><p>例如，尽管下面示例中的RoleBinding引用的是一个ClusterRole对象，但是用户”dave”（即角色绑定主体）还是只能读取”development” 命名空间中的secret（即RoleBinding所在的命名空间）。</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-meta"># 以下角色绑定允许用户<span class="hljs-string">&quot;dave&quot;</span>读取<span class="hljs-string">&quot;development&quot;</span>命名空间中的secret。</span><br><span class="hljs-symbol"></span><br><span class="hljs-symbol">kind:</span> RoleBinding<br><span class="hljs-symbol">apiVersion:</span> rbac.authorization.k8s.io/v1beta1<br><span class="hljs-symbol">metadata:</span><br><span class="hljs-symbol">  name:</span> read-secrets<br><span class="hljs-symbol">  namespace:</span> development       <span class="hljs-meta"># 这里表明仅授权读取<span class="hljs-string">&quot;development&quot;</span>命名空间中的资源。</span><br><span class="hljs-symbol">subjects:</span><br>- kind: User<br><span class="hljs-symbol">  name:</span> dave<br><span class="hljs-symbol">  apiGroup:</span> rbac.authorization.k8s.io<br><span class="hljs-symbol">roleRef:</span><br><span class="hljs-symbol">  kind:</span> ClusterRole<br><span class="hljs-symbol">  name:</span> secret-reader         <span class="hljs-meta"># 引用上面定义的clusterRole 名称（clusterRole没有指定命名空间，默认可以应用所有，但是在rolebinding时，指定了命名空间，所以只能读取本命名空间的文件）</span><br><span class="hljs-symbol">  apiGroup:</span> rbac.authorization.k8s.io<br></code></pre></td></tr></table></figure><p>最后，可以使用ClusterRoleBinding在集群级别的所有名称空间中授予权限。下面示例中所定义的ClusterRoleBinding 允许在用户组”manager”中的任何用户都可以读取集群中任何名称空间中的secret。</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-meta"># 以下`ClusterRoleBinding`对象允许在用户组<span class="hljs-string">&quot;manager&quot;</span>中的任何用户都可以读取集群中任何命名空间中的secret。</span><br><span class="hljs-symbol"></span><br><span class="hljs-symbol">kind:</span> ClusterRoleBinding<br><span class="hljs-symbol">apiVersion:</span> rbac.authorization.k8s.io/v1beta1<br><span class="hljs-symbol">metadata:</span><br><span class="hljs-symbol">  name:</span> read-secrets-global<br><span class="hljs-symbol">subjects:</span><br>- kind: Group<br><span class="hljs-symbol">  name:</span> manager<br><span class="hljs-symbol">  apiGroup:</span> rbac.authorization.k8s.io<br><span class="hljs-symbol">roleRef:</span><br><span class="hljs-symbol">  kind:</span> ClusterRole<br><span class="hljs-symbol">  name:</span> secret-reader<br><span class="hljs-symbol">  apiGroup:</span> rbac.authorization.k8s.io<br></code></pre></td></tr></table></figure><h2 id="对资源的引用"><a href="#对资源的引用" class="headerlink" title="对资源的引用"></a>对资源的引用</h2><p>大多数资源由代表其名字的字符串表示，例如”pods”，就像它们出现在相关API endpoint的URL中一样。然而，有一些Kubernetes API还 包含了”子资源”，比如pod的logs。在Kubernetes中，pod logs endpoint的URL格式为：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">GET <span class="hljs-regexp">/api/</span>v1<span class="hljs-regexp">/namespaces/</span>&#123;namespace&#125;<span class="hljs-regexp">/pods/</span>&#123;name&#125;/log<br></code></pre></td></tr></table></figure><p>在这种情况下，”pods”是命名空间资源，而”log”是pods的子资源。为了在RBAC角色中表示出这一点，我们需要使用斜线来划分资源 与子资源。如果需要角色绑定主体读取pods以及pod log，您需要定义以下角色：</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">kind:</span> Role<br><span class="hljs-symbol">apiVersion:</span> rbac.authorization.k8s.io/v1beta1<br><span class="hljs-symbol">metadata:</span><br><span class="hljs-symbol">  namespace:</span> default<br><span class="hljs-symbol">  name:</span> pod-and-pod-logs-reader<br><span class="hljs-symbol">rules:</span><br>- apiGroups: [<span class="hljs-string">&quot;&quot;</span>]<br><span class="hljs-symbol">  resources:</span> [<span class="hljs-string">&quot;pods&quot;</span>, <span class="hljs-string">&quot;pods/log&quot;</span>]       <span class="hljs-meta"># 根据上面意思表示授予读取pods和pods下log的权限</span><br><span class="hljs-symbol">  verbs:</span> [<span class="hljs-string">&quot;get&quot;</span>, <span class="hljs-string">&quot;list&quot;</span>]<br></code></pre></td></tr></table></figure><h2 id="角色定义的例子"><a href="#角色定义的例子" class="headerlink" title="角色定义的例子"></a>角色定义的例子</h2><p>以下示例均为从 Role 或 ClusterRole 对象中截取出来，我们仅展示其 <code>rules</code> 部分</p><p>允许读取core API Group中定义的资源”pods”：</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">rules:</span><br>- apiGroups: [<span class="hljs-string">&quot;&quot;</span>]<br><span class="hljs-symbol">  resources:</span> [<span class="hljs-string">&quot;pods&quot;</span>]<br><span class="hljs-symbol">  verbs:</span> [<span class="hljs-string">&quot;get&quot;</span>, <span class="hljs-string">&quot;list&quot;</span>, <span class="hljs-string">&quot;watch&quot;</span>]<br></code></pre></td></tr></table></figure><p>允许读写在”extensions”和”apps” API Group中定义的”deployments”：</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">rules:</span><br>- apiGroups: [<span class="hljs-string">&quot;extensions&quot;</span>, <span class="hljs-string">&quot;apps&quot;</span>]<br><span class="hljs-symbol">  resources:</span> [<span class="hljs-string">&quot;deployments&quot;</span>]<br><span class="hljs-symbol">  verbs:</span> [<span class="hljs-string">&quot;get&quot;</span>, <span class="hljs-string">&quot;list&quot;</span>, <span class="hljs-string">&quot;watch&quot;</span>, <span class="hljs-string">&quot;create&quot;</span>, <span class="hljs-string">&quot;update&quot;</span>, <span class="hljs-string">&quot;patch&quot;</span>, <span class="hljs-string">&quot;delete&quot;</span>]<br></code></pre></td></tr></table></figure><p>允许读取”pods”以及读写”jobs”：</p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs prolog">rules:<br>- apiGroups: [<span class="hljs-string">&quot;&quot;</span>]<br>  resources: [<span class="hljs-string">&quot;pods&quot;</span>]<br>  verbs: [<span class="hljs-string">&quot;get&quot;</span>, <span class="hljs-string">&quot;list&quot;</span>, <span class="hljs-string">&quot;watch&quot;</span>]<br>- apiGroups: [<span class="hljs-string">&quot;batch&quot;</span>, <span class="hljs-string">&quot;extensions&quot;</span>]<br>  resources: [<span class="hljs-string">&quot;jobs&quot;</span>]<br>  verbs: [<span class="hljs-string">&quot;get&quot;</span>, <span class="hljs-string">&quot;list&quot;</span>, <span class="hljs-string">&quot;watch&quot;</span>, <span class="hljs-string">&quot;create&quot;</span>, <span class="hljs-string">&quot;update&quot;</span>, <span class="hljs-string">&quot;patch&quot;</span>, <span class="hljs-string">&quot;delete&quot;</span>]<br></code></pre></td></tr></table></figure><p>允许读取一个名为”my-config”的ConfigMap实例（需要将其通过RoleBinding绑定从而限制针对某一个命名空间中定义的一个ConfigMap实例的访问）：</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">rules:</span><br>- apiGroups: [<span class="hljs-string">&quot;&quot;</span>]<br><span class="hljs-symbol">  resources:</span> [<span class="hljs-string">&quot;configmaps&quot;</span>]<br><span class="hljs-symbol">  resourceNames:</span> [<span class="hljs-string">&quot;my-config&quot;</span>]<br><span class="hljs-symbol">  verbs:</span> [<span class="hljs-string">&quot;get&quot;</span>]<br></code></pre></td></tr></table></figure><p>允许读取core API Group中的”nodes”资源（由于Node是集群级别资源，所以此ClusterRole定义需要与一个ClusterRoleBinding绑定才能有效）：</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">rules:</span><br>- apiGroups: [<span class="hljs-string">&quot;&quot;</span>]<br><span class="hljs-symbol">  resources:</span> [<span class="hljs-string">&quot;nodes&quot;</span>]<br><span class="hljs-symbol">  verbs:</span> [<span class="hljs-string">&quot;get&quot;</span>, <span class="hljs-string">&quot;list&quot;</span>, <span class="hljs-string">&quot;watch&quot;</span>]<br></code></pre></td></tr></table></figure><p>允许针对非资源端点 <code>“/healthz”</code> 及其所有子路径的”GET”和”POST”请求（此ClusterRole定义需要与一个ClusterRoleBinding绑定才能有效）：</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">rules:</span><br>- nonResourceURLs: [<span class="hljs-string">&quot;/healthz&quot;</span>, <span class="hljs-string">&quot;/healthz/*&quot;</span>]   <span class="hljs-meta"># 在非资源URL中，<span class="hljs-string">&#x27;*&#x27;</span>代表后缀通配符</span><br><span class="hljs-symbol">  verbs:</span> [<span class="hljs-string">&quot;get&quot;</span>, <span class="hljs-string">&quot;post&quot;</span>]<br></code></pre></td></tr></table></figure><h2 id="对角色绑定主体（Subject）的引用"><a href="#对角色绑定主体（Subject）的引用" class="headerlink" title="对角色绑定主体（Subject）的引用"></a>对角色绑定主体（Subject）的引用</h2><p>RoleBinding或者ClusterRoleBinding将角色绑定到角色绑定主体（Subject）。 角色绑定主体（kind指定）可以是用户组（Group）、用户（User）或者服务账户（Service Accounts）。</p><p>用户由字符串表示。可以是纯粹的用户名，例如”alice”、电子邮件风格的名字，如 “<a href="mailto:&#x62;&#x6f;&#x62;&#x40;&#101;&#120;&#97;&#109;&#112;&#108;&#x65;&#46;&#99;&#x6f;&#x6d;">&#x62;&#x6f;&#x62;&#x40;&#101;&#120;&#97;&#109;&#112;&#108;&#x65;&#46;&#99;&#x6f;&#x6d;</a>” 或者是用字符串表示的数字id。由Kubernetes管理员配置认证模块 以产生所需格式的用户名。对于用户名，RBAC授权系统不要求任何特定的格式。然而，前缀<code>system:</code>是 为Kubernetes系统使用而保留的，所以管理员应该确保用户名不会意外地包含这个前缀。</p><p>Kubernetes中的用户组信息由授权模块提供。用户组与用户一样由字符串表示。Kubernetes对用户组 字符串没有格式要求，但前缀system:同样是被系统保留的。</p><p>服务账户（serviceAccount）拥有包含 <code>system:serviceaccount:</code>前缀的用户名，并属于拥有<code>system:serviceaccounts:</code>前缀的用户组。</p><p>说明：</p><ul><li>system:serviceaccount: （单数）是用于服务账户用户名的前缀；</li><li>system:serviceaccounts: （复数）是用于服务账户组名的前缀。</li></ul><h3 id="角色绑定例子"><a href="#角色绑定例子" class="headerlink" title="角色绑定例子"></a>角色绑定例子</h3><p>以下示例中，仅截取展示了RoleBinding的subjects字段。</p><p>一个名为”<a href="mailto:&#x61;&#x6c;&#x69;&#99;&#101;&#x40;&#101;&#120;&#97;&#x6d;&#112;&#108;&#101;&#x2e;&#99;&#111;&#109;">&#x61;&#x6c;&#x69;&#99;&#101;&#x40;&#101;&#120;&#97;&#x6d;&#112;&#108;&#101;&#x2e;&#99;&#111;&#109;</a>”的用户：</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">subjects:<br>- kind: <span class="hljs-keyword">User</span><br>  <span class="hljs-title">name</span>: <span class="hljs-string">&quot;alice@example.com&quot;</span><br>  apiGroup: rbac.authorization.k8s.io<br></code></pre></td></tr></table></figure><p>一个名为”frontend-admins”的用户组：</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">subjects:<br>- kind: <span class="hljs-keyword">Group</span><br>  <span class="hljs-title">name</span>: <span class="hljs-string">&quot;frontend-admins&quot;</span><br>  apiGroup: rbac.authorization.k8s.io<br></code></pre></td></tr></table></figure><p>kube-system命名空间中的默认服务账户：</p><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-attribute">subjects</span><span class="hljs-punctuation">:</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">kind: ServiceAccount</span><br>  <span class="hljs-attribute">name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">default</span><br>  <span class="hljs-attribute">namespace</span><span class="hljs-punctuation">:</span> <span class="hljs-string">kube-system</span><br></code></pre></td></tr></table></figure><p>对于任何名称空间中的 “qa” 组中所有的服务账户：</p><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-attribute">subjects</span><span class="hljs-punctuation">:</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">kind: Group</span><br>  <span class="hljs-attribute">name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">system:serviceaccounts:qa</span><br>  <span class="hljs-attribute">apiGroup</span><span class="hljs-punctuation">:</span> <span class="hljs-string">rbac.authorization.k8s.io</span><br></code></pre></td></tr></table></figure><p>对于 “development” 名称空间中 “dev” 组中的所有服务帐户：</p><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-attribute">subjects</span><span class="hljs-punctuation">:</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">kind: Group</span><br>  <span class="hljs-attribute">name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">system:serviceaccounts:dev</span><br>  <span class="hljs-attribute">apiGroup</span><span class="hljs-punctuation">:</span> <span class="hljs-string">rbac.authorization.k8s.io</span><br>  <span class="hljs-attribute">namespace</span><span class="hljs-punctuation">:</span> <span class="hljs-string">development</span><br></code></pre></td></tr></table></figure><p>在集群中的所有服务账户：</p><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-attribute">subjects</span><span class="hljs-punctuation">:</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">kind: Group</span><br>  <span class="hljs-attribute">name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">system:serviceaccounts</span><br>  <span class="hljs-attribute">apiGroup</span><span class="hljs-punctuation">:</span> <span class="hljs-string">rbac.authorization.k8s.io</span><br></code></pre></td></tr></table></figure><p>所有认证过的用户：</p><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-attribute">subjects</span><span class="hljs-punctuation">:</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">kind: Group</span><br>  <span class="hljs-attribute">name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">system:authenticated</span><br>  <span class="hljs-attribute">apiGroup</span><span class="hljs-punctuation">:</span> <span class="hljs-string">rbac.authorization.k8s.io </span><br></code></pre></td></tr></table></figure><p>所有未认证的用户：</p><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-attribute">subjects</span><span class="hljs-punctuation">:</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">kind: Group</span><br>  <span class="hljs-attribute">name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">system:unauthenticated</span><br>  <span class="hljs-attribute">apiGroup</span><span class="hljs-punctuation">:</span> <span class="hljs-string">rbac.authorization.k8s.io</span><br></code></pre></td></tr></table></figure><p>所有用户：</p><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-attribute">subjects</span><span class="hljs-punctuation">:</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">kind: Group</span><br>  <span class="hljs-attribute">name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">system:authenticated</span><br>  <span class="hljs-attribute">apiGroup</span><span class="hljs-punctuation">:</span> <span class="hljs-string">rbac.authorization.k8s.io</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">kind: Group</span><br>  <span class="hljs-attribute">name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">system:unauthenticated</span><br>  <span class="hljs-attribute">apiGroup</span><span class="hljs-punctuation">:</span> <span class="hljs-string">rbac.authorization.k8s.io</span><br></code></pre></td></tr></table></figure><h3 id="重点注意"><a href="#重点注意" class="headerlink" title="重点注意"></a>重点注意</h3><p>在创建Rolebinding 或是Clusterrolebinding时如果是ServiceAccount则需指定Namespace字段</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs yaml">[<span class="hljs-string">root@master-1</span> <span class="hljs-string">pki</span>]<span class="hljs-comment"># kubectl create rolebinding heihei  --role=pods-reader   --serviceaccount=kube-system:admin --dry-run -o yaml</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">rbac.authorization.k8s.io/v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">RoleBinding</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">creationTimestamp:</span> <span class="hljs-literal">null</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">heihei</span><br><span class="hljs-attr">roleRef:</span><br>  <span class="hljs-attr">apiGroup:</span> <span class="hljs-string">rbac.authorization.k8s.io</span><br>  <span class="hljs-attr">kind:</span> <span class="hljs-string">Role</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">pods-reader</span><br><span class="hljs-attr">subjects:</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">kind:</span> <span class="hljs-string">ServiceAccount</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">admin</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">kube-system</span><br><span class="hljs-comment">#这里的admin必须是真实存在于kubectl get sa -n kube-system中的serviceaccount</span><br></code></pre></td></tr></table></figure><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs makefile">[root@master-1 pki]<span class="hljs-comment"># kubectl describe rolebinding leader-locking-nfs-provisioner</span><br><span class="hljs-section">Name:         leader-locking-nfs-provisioner</span><br><span class="hljs-section">Labels:       &lt;none&gt;</span><br><span class="hljs-section">Annotations:  kubectl.kubernetes.io/last-applied-configuration:</span><br>                &#123;<span class="hljs-string">&quot;apiVersion&quot;</span>:<span class="hljs-string">&quot;rbac.authorization.k8s.io/v1&quot;</span>,<span class="hljs-string">&quot;kind&quot;</span>:<span class="hljs-string">&quot;RoleBinding&quot;</span>,<span class="hljs-string">&quot;metadata&quot;</span>:&#123;<span class="hljs-string">&quot;annotations&quot;</span>:&#123;&#125;,<span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;leader-locking-nfs-provisioner&quot;</span>,<span class="hljs-string">&quot;na...</span><br><span class="hljs-string">Role:</span><br><span class="hljs-string">  Kind:  Role</span><br><span class="hljs-string">  Name:  leader-locking-nfs-provisioner</span><br><span class="hljs-string">Subjects:</span><br><span class="hljs-string">  Kind            Name             Namespace</span><br><span class="hljs-string">  ----            ----             ---------</span><br><span class="hljs-string">  ServiceAccount  nfs-provisioner  default</span><br></code></pre></td></tr></table></figure><p>在创建Rolebinding 或是Clusterrolebinding如果是User、Group时无需指定Namespace字段</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs yaml">[<span class="hljs-string">root@k8s-master-01</span> <span class="hljs-string">~</span>]<span class="hljs-comment"># kubectl describe clusterrolebinding ye-read-pods</span><br><span class="hljs-attr">Name:</span>         <span class="hljs-string">ye-read-pods</span><br><span class="hljs-attr">Labels:</span>       <span class="hljs-string">&lt;none&gt;</span><br><span class="hljs-attr">Annotations:</span>  <span class="hljs-string">&lt;none&gt;</span><br><span class="hljs-attr">Role:</span><br>  <span class="hljs-attr">Kind:</span>  <span class="hljs-string">ClusterRole</span><br>  <span class="hljs-attr">Name:</span>  <span class="hljs-string">pods-reader</span><br><span class="hljs-attr">Subjects:</span><br>  <span class="hljs-string">Kind</span>  <span class="hljs-string">Name</span>           <span class="hljs-string">Namespace</span><br>  <span class="hljs-string">----</span>  <span class="hljs-string">----</span>           <span class="hljs-string">---------</span><br>  <span class="hljs-string">User</span>  <span class="hljs-string">k8s-user-test</span>  <br></code></pre></td></tr></table></figure><h2 id="创建User-Account访问Kubernetes集群"><a href="#创建User-Account访问Kubernetes集群" class="headerlink" title="创建User Account访问Kubernetes集群"></a>创建User Account访问Kubernetes集群</h2><p>此步骤在<code>/etc/kubernetes/pki</code>路径下执行，因为需要用到Kubernetes CA证书</p><h3 id="生成证书"><a href="#生成证书" class="headerlink" title="生成证书"></a>生成证书</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs csharp">[<span class="hljs-meta">root@k8s-master-01 pki</span>]<span class="hljs-meta"># (umask 077;openssl genrsa -out k8s-user-test.key 2048)</span><br>Generating RSA <span class="hljs-keyword">private</span> key, <span class="hljs-number">2048</span> bit <span class="hljs-built_in">long</span> modulus<br>...................................+++<br>.+++<br>e <span class="hljs-keyword">is</span> <span class="hljs-number">65537</span> (<span class="hljs-number">0x10001</span>)<br></code></pre></td></tr></table></figure><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs tap">[root@k8s-master-01 pki]<span class="hljs-comment"># ll k8s-user-test.key</span><br>-rw-------<span class="hljs-number"> 1 </span>root root<span class="hljs-number"> 1675 </span>12月<span class="hljs-number"> 16 </span>17:02 k8s-user-test.key<br></code></pre></td></tr></table></figure><h3 id="使用ca-crt进行签署"><a href="#使用ca-crt进行签署" class="headerlink" title="使用ca.crt进行签署"></a>使用ca.crt进行签署</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">[root<span class="hljs-variable">@k8s</span><span class="hljs-operator">-</span>master<span class="hljs-number">-01</span> pki]# openssl req <span class="hljs-operator">-</span><span class="hljs-keyword">new</span> <span class="hljs-operator">-</span>key k8s<span class="hljs-operator">-</span><span class="hljs-keyword">user</span><span class="hljs-operator">-</span>test.key <span class="hljs-operator">-</span><span class="hljs-keyword">out</span> k8s<span class="hljs-operator">-</span><span class="hljs-keyword">user</span><span class="hljs-operator">-</span>test.csr <span class="hljs-operator">-</span>subj &quot;/CN=k8s-user-test&quot;     # 证书签署请求(CN表示用户名，O表示组)<br></code></pre></td></tr></table></figure><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs stata">[root@k8s-master-01 pki]# openssl x509 -req -<span class="hljs-keyword">in</span> k8s-user-<span class="hljs-keyword">test</span>.csr -<span class="hljs-keyword">CA</span> ./<span class="hljs-keyword">ca</span>.crt -CAkey ./<span class="hljs-keyword">ca</span>.key -CAcreateserial -<span class="hljs-keyword">out</span> k8s-user-<span class="hljs-keyword">test</span>.crt -days 1000      #证书签署<br>Signature ok<br>subject=/CN=k8s-user-<span class="hljs-keyword">test</span><br>Getting <span class="hljs-keyword">CA</span> Private Key<br></code></pre></td></tr></table></figure><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs autoit">[root<span class="hljs-symbol">@k8s</span>-master<span class="hljs-number">-01</span> pki]<span class="hljs-meta"># openssl x509 -in k8s-user-test.crt -text -noout</span><br></code></pre></td></tr></table></figure><h3 id="role定义（User-–-gt-Rolebinding-–-gt-Role）"><a href="#role定义（User-–-gt-Rolebinding-–-gt-Role）" class="headerlink" title="role定义（User –&gt; Rolebinding –&gt; Role）"></a>role定义（User –&gt; Rolebinding –&gt; Role）</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs yaml">[<span class="hljs-string">root@k8s-master-01</span> <span class="hljs-string">pki</span>]<span class="hljs-comment"># kubectl create role  pods-reader --verb=get,list,watch --resource=pods --dry-run=client -o yaml #单跑模式查看role的定义</span><br><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">rbac.authorization.k8s.io/v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Role</span>    <span class="hljs-comment">#资源类型</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">creationTimestamp:</span> <span class="hljs-literal">null</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">pods-reader</span><br><span class="hljs-attr">rules:</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">apiGroups:</span>  <span class="hljs-comment">#对那些api组内的资源进行操作</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;&quot;</span><br>  <span class="hljs-attr">resources:</span>  <span class="hljs-comment">#对那些资源定义</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">pods</span><br>  <span class="hljs-attr">verbs:</span>      <span class="hljs-comment">#操作权限定义</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">get</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">list</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">watch</span><br></code></pre></td></tr></table></figure><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-attribute">[root@k8s-master-01 pki]# kubectl create role pods-reader --verb=get,list,watch --resource=pods --dry-run=client -o yaml &gt; role-demo.yaml</span><br><span class="hljs-attribute"></span><br><span class="hljs-attribute">[root@k8s-master-01 pki]# vim role-demo.yaml </span><br><span class="hljs-attribute">apiVersion</span><span class="hljs-punctuation">:</span> <span class="hljs-string">rbac.authorization.k8s.io/v1</span><br><span class="hljs-attribute">kind</span><span class="hljs-punctuation">:</span> <span class="hljs-string">Role</span><br><span class="hljs-attribute">metadata</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">creationTimestamp</span><span class="hljs-punctuation">:</span> <span class="hljs-string">null</span><br>  <span class="hljs-attribute">name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">pods-reader</span><br><span class="hljs-attribute">rules</span><span class="hljs-punctuation">:</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">apiGroups:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;&quot;</span><br>  <span class="hljs-attribute">resources</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">pods</span><br>  <span class="hljs-attribute">verbs</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">get</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">list</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">watch</span><br></code></pre></td></tr></table></figure><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">[root@k8s-master<span class="hljs-number">-01</span> pki]# kubectl apply -f <span class="hljs-keyword">role</span>-demo.yaml      #角色创建<br><span class="hljs-keyword">role</span>.rbac.<span class="hljs-keyword">authorization</span>.k8s.io/pods-reader created <br></code></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs sql">[root<span class="hljs-variable">@k8s</span><span class="hljs-operator">-</span>master<span class="hljs-number">-01</span> pki]# kubectl <span class="hljs-keyword">get</span> role<br>NAME          AGE<br>pods<span class="hljs-operator">-</span>reader   <span class="hljs-number">3</span>s<br><br>[root<span class="hljs-variable">@k8s</span><span class="hljs-operator">-</span>master<span class="hljs-number">-01</span> pki]# kubectl <span class="hljs-keyword">describe</span> role pods<span class="hljs-operator">-</span>reader<br>Name:         pods<span class="hljs-operator">-</span>reader<br>Labels:       <span class="hljs-operator">&lt;</span><span class="hljs-keyword">none</span><span class="hljs-operator">&gt;</span><br>Annotations:  <span class="hljs-operator">&lt;</span><span class="hljs-keyword">none</span><span class="hljs-operator">&gt;</span><br>PolicyRule:<br>  Resources  Non<span class="hljs-operator">-</span>Resource URLs  Resource Names  Verbs<br>  <span class="hljs-comment">---------  -----------------  --------------  -----</span><br>  pods       []                 []              [<span class="hljs-keyword">get</span> list watch]  #此处已经定义了pods<span class="hljs-operator">-</span>reader这个角色对pods资源拥有<span class="hljs-keyword">get</span>、list、watch的权限<br></code></pre></td></tr></table></figure><h3 id="rolebinding定义"><a href="#rolebinding定义" class="headerlink" title="rolebinding定义"></a>rolebinding定义</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs yaml">[<span class="hljs-string">root@k8s-master-01</span> <span class="hljs-string">pki</span>]<span class="hljs-comment"># kubectl create rolebinding ye-read-pods --role=pods-reader --user=k8s-user-test --dry-run=client -o yaml &gt; rolebinding-demo.yaml</span><br><br>[<span class="hljs-string">root@k8s-master-01</span> <span class="hljs-string">pki</span>]<span class="hljs-comment"># cat rolebinding-demo.yaml </span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">rbac.authorization.k8s.io/v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">RoleBinding</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">creationTimestamp:</span> <span class="hljs-literal">null</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">ye-read-pods</span><br><span class="hljs-attr">roleRef:</span><br>  <span class="hljs-attr">apiGroup:</span> <span class="hljs-string">rbac.authorization.k8s.io</span><br>  <span class="hljs-attr">kind:</span> <span class="hljs-string">Role</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">pods-reader</span><br><span class="hljs-attr">subjects:</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">apiGroup:</span> <span class="hljs-string">rbac.authorization.k8s.io</span><br>  <span class="hljs-attr">kind:</span> <span class="hljs-string">User</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">k8s-user-test</span><br></code></pre></td></tr></table></figure><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">[root@k8s-<span class="hljs-literal">master</span>-<span class="hljs-number">01</span> pki]<span class="hljs-comment"># kubectl apply -f rolebinding-demo.yaml  #创建角色绑定</span><br>rolebinding.rbac.authorization.k8s.io/ye-<span class="hljs-keyword">read</span>-pods created<br><br>[root@k8s-<span class="hljs-literal">master</span>-<span class="hljs-number">01</span> pki]<span class="hljs-comment"># kubectl describe rolebinding ye-read-pods #查看角色绑定的信息，这里可以看到user：k8s-user-test绑定到了pods-reader这个角色上</span><br>Name:         ye-<span class="hljs-keyword">read</span>-pods<br>Labels:       <span class="hljs-tag">&lt;none&gt;</span><br>Annotations:  <span class="hljs-tag">&lt;none&gt;</span><br>Role:<br>  Kind:  <span class="hljs-keyword">Role</span><br>  <span class="hljs-title">Name</span>:  pods-reader<br>Subjects:<br>  Kind  Name           Namespace<br>  ----  ----           ---------<br>  <span class="hljs-keyword">User</span>  <span class="hljs-title">k8s-user-test</span>  <br></code></pre></td></tr></table></figure><h3 id="添加用户认证"><a href="#添加用户认证" class="headerlink" title="添加用户认证"></a>添加用户认证</h3><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros">[root@k8s-master-01 pki]# kubectl<span class="hljs-built_in"> config </span>set-credentials k8s-user-test <span class="hljs-attribute">--client-certificate</span>=./k8s-user-test.crt <span class="hljs-attribute">--client-key</span>=./k8s-user-test.key <span class="hljs-attribute">--embed-certs</span>=<span class="hljs-literal">true</span><span class="hljs-built_in"></span><br><span class="hljs-built_in">User </span><span class="hljs-string">&quot;k8s-user-test&quot;</span> set.<br></code></pre></td></tr></table></figure><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros">[root@k8s-master-01 pki]# kubectl<span class="hljs-built_in"> config </span>set-context k8s-user-test@kubernetes <span class="hljs-attribute">--cluster</span>=kubernetes <span class="hljs-attribute">--user</span>=k8s-user-test<br>Context <span class="hljs-string">&quot;k8s-user-test@kubernetes&quot;</span> created.<br></code></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs yaml">[<span class="hljs-string">root@k8s-master-01</span> <span class="hljs-string">pki</span>]<span class="hljs-comment"># kubectl config view</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">clusters:</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">cluster:</span><br>    <span class="hljs-attr">certificate-authority-data:</span> <span class="hljs-string">DATA+OMITTED</span><br>    <span class="hljs-attr">server:</span> <span class="hljs-string">https://172.16.50.200:6443</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">kubernetes</span><br><span class="hljs-attr">contexts:</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">context:</span><br>    <span class="hljs-attr">cluster:</span> <span class="hljs-string">kubernetes</span><br>    <span class="hljs-attr">user:</span> <span class="hljs-string">k8s-user-test</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">k8s-user-test@kubernetes</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">context:</span><br>    <span class="hljs-attr">cluster:</span> <span class="hljs-string">kubernetes</span><br>    <span class="hljs-attr">user:</span> <span class="hljs-string">kubernetes-admin</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">kubernetes-admin@kubernetes</span><br><span class="hljs-attr">current-context:</span> <span class="hljs-string">kubernetes-admin@kubernetes</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Config</span><br><span class="hljs-attr">preferences:</span> &#123;&#125;<br><span class="hljs-attr">users:</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">k8s-user-test</span><br>  <span class="hljs-attr">user:</span><br>    <span class="hljs-attr">client-certificate-data:</span> <span class="hljs-string">REDACTED</span><br>    <span class="hljs-attr">client-key-data:</span> <span class="hljs-string">REDACTED</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">kubernetes-admin</span><br>  <span class="hljs-attr">user:</span><br>    <span class="hljs-attr">client-certificate-data:</span> <span class="hljs-string">REDACTED</span><br>    <span class="hljs-attr">client-key-data:</span> <span class="hljs-string">REDACTED</span><br></code></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs sql">[root<span class="hljs-variable">@k8s</span><span class="hljs-operator">-</span>master<span class="hljs-number">-01</span> pki]# kubectl config use<span class="hljs-operator">-</span>context k8s<span class="hljs-operator">-</span><span class="hljs-keyword">user</span><span class="hljs-operator">-</span>test<span class="hljs-variable">@kubernetes</span>      #切换k8s<span class="hljs-operator">-</span><span class="hljs-keyword">user</span><span class="hljs-operator">-</span>test这个用户，并使用<span class="hljs-keyword">get</span>获取pods资源信息<br>Switched <span class="hljs-keyword">to</span> context &quot;k8s-user-test@kubernetes&quot;. <br><br><br>[root<span class="hljs-variable">@k8s</span><span class="hljs-operator">-</span>master<span class="hljs-number">-01</span> pki]# kubectl <span class="hljs-keyword">get</span> pods<br>NAME                     READY   STATUS    RESTARTS   AGE<br>nginx<span class="hljs-number">-7</span>fb7fd49b4<span class="hljs-number">-4</span>wdnq   <span class="hljs-number">1</span><span class="hljs-operator">/</span><span class="hljs-number">1</span>     <span class="hljs-keyword">Running</span>   <span class="hljs-number">0</span>          <span class="hljs-number">7</span>d3h<br>nginx<span class="hljs-number">-7</span>fb7fd49b4<span class="hljs-number">-6</span>mvlr   <span class="hljs-number">1</span><span class="hljs-operator">/</span><span class="hljs-number">1</span>     <span class="hljs-keyword">Running</span>   <span class="hljs-number">0</span>          <span class="hljs-number">7</span>d3h<br>nginx<span class="hljs-number">-7</span>fb7fd49b4<span class="hljs-number">-6</span>rbrv   <span class="hljs-number">1</span><span class="hljs-operator">/</span><span class="hljs-number">1</span>     <span class="hljs-keyword">Running</span>   <span class="hljs-number">0</span>          <span class="hljs-number">7</span>d3h<br>nginx<span class="hljs-number">-7</span>fb7fd49b4<span class="hljs-operator">-</span>jqsvj   <span class="hljs-number">1</span><span class="hljs-operator">/</span><span class="hljs-number">1</span>     <span class="hljs-keyword">Running</span>   <span class="hljs-number">0</span>          <span class="hljs-number">7</span>d3h<br>nginx<span class="hljs-number">-7</span>fb7fd49b4<span class="hljs-operator">-</span>r5mrl   <span class="hljs-number">1</span><span class="hljs-operator">/</span><span class="hljs-number">1</span>     <span class="hljs-keyword">Running</span>   <span class="hljs-number">0</span>          <span class="hljs-number">7</span>d3h<br></code></pre></td></tr></table></figure><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros">[root@k8s-master-01 pki]# kubectl <span class="hljs-built_in">get</span> pods -n kube-system        #测试获取kube-system这个名称空间的pods信息<br><span class="hljs-built_in">Error</span> <span class="hljs-keyword">from</span><span class="hljs-built_in"> server </span>(Forbidden): pods is forbidden:<span class="hljs-built_in"> User </span><span class="hljs-string">&quot;k8s-user-test&quot;</span> cannot list<span class="hljs-built_in"> resource </span><span class="hljs-string">&quot;pods&quot;</span> <span class="hljs-keyword">in</span> API<span class="hljs-built_in"> group </span><span class="hljs-string">&quot;&quot;</span> <span class="hljs-keyword">in</span> the namespace <span class="hljs-string">&quot;kube-system&quot;</span><br></code></pre></td></tr></table></figure><p>由于k8s-user-test账户不具备创建的权限，这也说明普通用户是无法进行创建K8S资源的，除非进行授权。如下，我们另开一个终端，将配置到一个普通用户yedong上，使其使用k8s-user-test账户进行通信</p><p>以下步骤在root权限下执行</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs autoit">[root<span class="hljs-symbol">@k8s</span>-master<span class="hljs-number">-01</span> ~]<span class="hljs-meta"># useradd yedong</span><br>[root<span class="hljs-symbol">@k8s</span>-master<span class="hljs-number">-01</span> ~]<span class="hljs-meta"># cp -rp .kube/ /home/yedong/</span><br>[root<span class="hljs-symbol">@k8s</span>-master<span class="hljs-number">-01</span> ~]<span class="hljs-meta"># chown -R yedong.yedong /home/yedong/</span><br>[root<span class="hljs-symbol">@k8s</span>-master<span class="hljs-number">-01</span> ~]<span class="hljs-meta"># su - yedong</span><br></code></pre></td></tr></table></figure><p>以下步骤在普通用户yedong下执行</p><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-attribute">[yedong@k8s-master-01 ~]$ kubectl config use-context k8s-user-test@kubernetes</span><br><span class="hljs-attribute">Switched to context &quot;k8s-user-test@kubernetes&quot;.</span><br><span class="hljs-attribute"></span><br><span class="hljs-attribute">[yedong@k8s-master-01 ~]$ kubectl config view</span><br><span class="hljs-attribute">apiVersion</span><span class="hljs-punctuation">:</span> <span class="hljs-string">v1</span><br><span class="hljs-attribute">clusters</span><span class="hljs-punctuation">:</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">cluster:</span><br>    <span class="hljs-attribute">certificate-authority-data</span><span class="hljs-punctuation">:</span> <span class="hljs-string">DATA+OMITTED</span><br>    <span class="hljs-attribute">server</span><span class="hljs-punctuation">:</span> <span class="hljs-string">https://172.16.50.200:6443</span><br>  <span class="hljs-attribute">name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">kubernetes</span><br><span class="hljs-attribute">contexts</span><span class="hljs-punctuation">:</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">context:</span><br>    <span class="hljs-attribute">cluster</span><span class="hljs-punctuation">:</span> <span class="hljs-string">kubernetes</span><br>    <span class="hljs-attribute">user</span><span class="hljs-punctuation">:</span> <span class="hljs-string">k8s-user-test</span><br>  <span class="hljs-attribute">name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">k8s-user-test@kubernetes</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">context:</span><br>    <span class="hljs-attribute">cluster</span><span class="hljs-punctuation">:</span> <span class="hljs-string">kubernetes</span><br>    <span class="hljs-attribute">user</span><span class="hljs-punctuation">:</span> <span class="hljs-string">kubernetes-admin</span><br>  <span class="hljs-attribute">name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">kubernetes-admin@kubernetes</span><br><span class="hljs-attribute">current-context</span><span class="hljs-punctuation">:</span> <span class="hljs-string">k8s-user-test@kubernetes</span><br><span class="hljs-attribute">kind</span><span class="hljs-punctuation">:</span> <span class="hljs-string">Config</span><br><span class="hljs-attribute">preferences</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&#123;&#125;</span><br><span class="hljs-attribute">users</span><span class="hljs-punctuation">:</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">name: k8s-user-test</span><br>  <span class="hljs-attribute">user</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-attribute">client-certificate-data</span><span class="hljs-punctuation">:</span> <span class="hljs-string">REDACTED</span><br>    <span class="hljs-attribute">client-key-data</span><span class="hljs-punctuation">:</span> <span class="hljs-string">REDACTED</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">name: kubernetes-admin</span><br>  <span class="hljs-attribute">user</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-attribute">client-certificate-data</span><span class="hljs-punctuation">:</span> <span class="hljs-string">REDACTED</span><br>    <span class="hljs-attribute">client-key-data</span><span class="hljs-punctuation">:</span> <span class="hljs-string">REDACTED</span><br></code></pre></td></tr></table></figure><p>以下步骤在root权限下执行</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">[root@k8s-<span class="hljs-literal">master</span>-<span class="hljs-number">01</span> ~]<span class="hljs-comment"># kubectl get rolebinding                       #获取角色绑定信息</span><br>NAME           <span class="hljs-keyword">ROLE</span>               <span class="hljs-title">AGE</span><br>ye-<span class="hljs-keyword">read</span>-pods   Role/pods-reader   <span class="hljs-number">16h</span> <br><br><br>[root@k8s-<span class="hljs-literal">master</span>-<span class="hljs-number">01</span> ~]<span class="hljs-comment"># kubectl delete rolebinding ye-read-pods       #删除前面的绑定</span><br>rolebinding.rbac.authorization.k8s.io <span class="hljs-string">&quot;ye-read-pods&quot;</span> deleted <br></code></pre></td></tr></table></figure><p>以下步骤在普通用户yedong下执行</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros">[yedong@k8s-master-01 ~]$  kubectl <span class="hljs-built_in">get</span> pods     #删除后，在yedong普通用户上进行获取pods资源信息，就立马出现forbidden了<br><span class="hljs-built_in">Error</span> <span class="hljs-keyword">from</span><span class="hljs-built_in"> server </span>(Forbidden): pods is forbidden:<span class="hljs-built_in"> User </span><span class="hljs-string">&quot;k8s-user-test&quot;</span> cannot list<span class="hljs-built_in"> resource </span><span class="hljs-string">&quot;pods&quot;</span> <span class="hljs-keyword">in</span> API<span class="hljs-built_in"> group </span><span class="hljs-string">&quot;&quot;</span> <span class="hljs-keyword">in</span> the namespace <span class="hljs-string">&quot;default&quot;</span> <br></code></pre></td></tr></table></figure><h3 id="clusterrole定义（User-–-gt-Clusterrolebinding-–-gt-Clusterrole）"><a href="#clusterrole定义（User-–-gt-Clusterrolebinding-–-gt-Clusterrole）" class="headerlink" title="clusterrole定义（User –&gt; Clusterrolebinding –&gt; Clusterrole）"></a>clusterrole定义（User –&gt; Clusterrolebinding –&gt; Clusterrole）</h3><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs scss"><span class="hljs-selector-attr">[root@k8s-master-01 pki]</span># kubectl config use-context kubernetes-admin<span class="hljs-keyword">@kubernetes</span>  #切换会kubernetes-admin用户<br>Switched to context <span class="hljs-string">&quot;kubernetes-admin@kubernetes&quot;</span>.<br><br>[root<span class="hljs-keyword">@k</span>8s-master-<span class="hljs-number">01</span> pki]# kubectl create clusterrole cluster-read --verb=get,list,watch --resource=pods -o yaml &gt; clusterrole-demo.yaml<br><br>[root<span class="hljs-keyword">@k</span>8s-master-<span class="hljs-number">01</span> pki]# vim clusterrole-demo.yaml #定义clusterrole和权限<br><span class="hljs-attribute">apiVersion</span>: rbac.authorization.k8s.io/v1<br><span class="hljs-attribute">kind</span>: ClusterRole<br><span class="hljs-attribute">metadata</span>:<br>  <span class="hljs-attribute">creationTimestamp</span>: <span class="hljs-string">&quot;2021-12-16T09:50:01Z&quot;</span><br>  <span class="hljs-attribute">name</span>: cluster-read<br>  <span class="hljs-attribute">resourceVersion</span>: <span class="hljs-string">&quot;879450&quot;</span><br>  <span class="hljs-attribute">uid</span>: <span class="hljs-number">0</span>effd7d6-<span class="hljs-number">2</span>ed3-<span class="hljs-number">4</span>fdb-be1e-da1ad65de097<br><span class="hljs-attribute">rules</span>:<br>- <span class="hljs-attribute">apiGroups</span>:<br>  - <span class="hljs-string">&quot;&quot;</span><br>  <span class="hljs-attribute">resources</span>:<br>  - pods<br>  <span class="hljs-attribute">verbs</span>:<br>  - get<br>  - list<br>  - watch<br><br><br>[root<span class="hljs-keyword">@k</span>8s-master-<span class="hljs-number">01</span> pki]# kubectl apply -f clusterrole-demo.yaml  #创建clusterrole<br>clusterrole.rbac.authorization.k8s.io/cluster-read configured<br></code></pre></td></tr></table></figure><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs subunit">[root@k8s-master<span class="hljs-string">-01</span> pki]# kubectl get clusterrole<br>NAME                                                                   CREATED AT<br>admin                                                                  2021<span class="hljs-string">-12</span><span class="hljs-string">-09</span>T03:05:01Z<br>cluster-admin                                                          2021<span class="hljs-string">-12</span><span class="hljs-string">-09</span>T03:05:01Z<br>cluster-read                                                           2021<span class="hljs-string">-12</span><span class="hljs-string">-16</span>T09:53:29Z<br>edit                                                                   2021<span class="hljs-string">-12</span><span class="hljs-string">-09</span>T03:05:01Z<br>......<br></code></pre></td></tr></table></figure><h3 id="clusterrolebinding定义"><a href="#clusterrolebinding定义" class="headerlink" title="clusterrolebinding定义"></a>clusterrolebinding定义</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs yaml">[<span class="hljs-string">root@k8s-master-01</span> <span class="hljs-string">pki</span>]<span class="hljs-comment"># kubectl create clusterrolebinding ye-read-all-pods --clusterrole=cluster-read --user=k8s-user-test --dry-run=client -o yaml &gt; clusterrolebinding-demo.yaml</span><br><br>[<span class="hljs-string">root@k8s-master-01</span> <span class="hljs-string">pki</span>]<span class="hljs-comment"># vim clusterrolebinding-demo.yaml  #创建角色绑定，将k8s-user-test绑定到clusterrole：ye-read-all-pods上</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">rbac.authorization.k8s.io/v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">ClusterRoleBinding</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">creationTimestamp:</span> <span class="hljs-literal">null</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">ye-read-all-pods</span><br><span class="hljs-attr">roleRef:</span><br>  <span class="hljs-attr">apiGroup:</span> <span class="hljs-string">rbac.authorization.k8s.io</span><br>  <span class="hljs-attr">kind:</span> <span class="hljs-string">ClusterRole</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">cluster-read</span><br><span class="hljs-attr">subjects:</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">apiGroup:</span> <span class="hljs-string">rbac.authorization.k8s.io</span><br>  <span class="hljs-attr">kind:</span> <span class="hljs-string">User</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">k8s-user-test</span><br></code></pre></td></tr></table></figure><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">[root@k8s-<span class="hljs-literal">master</span>-<span class="hljs-number">01</span> pki]<span class="hljs-comment"># kubectl apply -f clusterrolebinding-demo.yaml</span><br>clusterrolebinding.rbac.authorization.k8s.io/ye-<span class="hljs-keyword">read</span>-all-pods created<br></code></pre></td></tr></table></figure><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">[root@k8s-<span class="hljs-literal">master</span>-<span class="hljs-number">01</span> pki]<span class="hljs-comment"># kubectl get clusterrolebinding</span><br>NAME                                                   <span class="hljs-keyword">ROLE</span>                                                                               <span class="hljs-title">AGE</span><br>cluster-admin                                          ClusterRole/cluster-admin                                                          <span class="hljs-number">7</span>d22h<br>flannel                                                ClusterRole/flannel                                                                <span class="hljs-number">7</span>d22h<br>kubeadm:get-nodes                                      ClusterRole/kubeadm:get-nodes                                                      <span class="hljs-number">7</span>d22h<br>kubeadm:kubelet-bootstrap                              ClusterRole/system:<span class="hljs-keyword">node</span><span class="hljs-title">-bootstrapper</span>                                               <span class="hljs-number">7</span>d22h<br>.........<br>ye-<span class="hljs-keyword">read</span>-all-pods                                       ClusterRole/cluster-<span class="hljs-keyword">read</span>                                                           <span class="hljs-number">2m</span>41s<br></code></pre></td></tr></table></figure><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs fortran">[root@k8s-master-<span class="hljs-number">01</span> pki]# kubectl describe clusterrolebinding ye-read-<span class="hljs-built_in">all</span>-pods<br><span class="hljs-keyword">Name</span>:         ye-read-<span class="hljs-built_in">all</span>-pods<br>Labels:       &lt;<span class="hljs-keyword">none</span>&gt;<br>Annotations:  &lt;<span class="hljs-keyword">none</span>&gt;<br>Role:<br>  <span class="hljs-keyword">Kind</span>:  ClusterRole<br>  <span class="hljs-keyword">Name</span>:  cluster-read<br>Subjects:<br>  <span class="hljs-keyword">Kind</span>  <span class="hljs-keyword">Name</span>           Namespace<br>  ----  ----           ---------<br>  User  k8s-user-test  <br></code></pre></td></tr></table></figure><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs subunit">[yedong@k8s-master<span class="hljs-string">-01</span> ~]$  kubectl get pods     #角色绑定后在yedong终端上进行获取pods信息，已经不会出现forbidden了<br>NAME                     READY   STATUS    RESTARTS   AGE<br>nginx<span class="hljs-string">-7</span>fb7fd49b4<span class="hljs-string">-4</span>wdnq   1/1     Running   0          7d19h<br>nginx<span class="hljs-string">-7</span>fb7fd49b4<span class="hljs-string">-6</span>mvlr   1/1     Running   0          7d19h<br>nginx<span class="hljs-string">-7</span>fb7fd49b4<span class="hljs-string">-6</span>rbrv   1/1     Running   0          7d19h<br>nginx<span class="hljs-string">-7</span>fb7fd49b4-jqsvj   1/1     Running   0          7d19h<br>nginx<span class="hljs-string">-7</span>fb7fd49b4-r5mrl   1/1     Running   0          7d19h<br><br><br>[yedong@k8s-master<span class="hljs-string">-01</span> ~]$  kubectl get pods -n kube-system   #更换名称空间进行查看也是可行的<br>NAME                                    READY   STATUS    RESTARTS         AGE<br>coredns<span class="hljs-string">-7568</span>f67dbd-bsnsh                1/1     Running   2                7d22h<br>coredns<span class="hljs-string">-7568</span>f67dbd-xjkmx                1/1     Running   2                7d22h<br>etcd-k8s-master<span class="hljs-string">-01</span>                      1/1     Running   10 (7d20h ago)   7d22h<br>kube-apiserver-k8s-master<span class="hljs-string">-01</span>            1/1     Running   10 (7d20h ago)   7d22h<br>kube-controller-manager-k8s-master<span class="hljs-string">-01</span>   1/1     Running   0                22h<br>kube-flannel-ds<span class="hljs-string">-26466</span>                   1/1     Running   1                7d22h<br>kube-flannel-ds<span class="hljs-string">-4</span>qxhf                   1/1     Running   2                7d22h<br>kube-flannel-ds-l68hk                   1/1     Running   2                7d22h<br>kube-proxy-dgj8z                        1/1     Running   1                7d22h<br>kube-proxy-smvwz                        1/1     Running   3                7d22h<br>kube-proxy-ttnl9                        1/1     Running   2                7d22h<br>kube-scheduler-k8s-master<span class="hljs-string">-01</span>            1/1     Running   0                22h<br><br><br>[yedong@k8s-master<span class="hljs-string">-01</span> ~]$  kubectl delete pods nginx<span class="hljs-string">-7</span>fb7fd49b4-jqsvj    #但是进行删除pod就无法进行，因为在授权时是没有delete权限的<br><span class="hljs-keyword">Error </span>from server (Forbidden): pods &quot;nginx<span class="hljs-string">-7</span>fb7fd49b4-jqsvj&quot; is forbidden: User &quot;k8s-user-test&quot; cannot delete resource &quot;pods&quot; in API group &quot;&quot; in the namespace &quot;default&quot;<br></code></pre></td></tr></table></figure><p>从上面的实验，我们可以知道对用户k8s-user-test进行集群角色绑定，用户k8s-user-test将会获取对集群内所有资源的对应权限。</p><h3 id="User-–-gt-Rolebinding-–-gt-Clusterrole"><a href="#User-–-gt-Rolebinding-–-gt-Clusterrole" class="headerlink" title="User –&gt; Rolebinding –&gt; Clusterrole"></a>User –&gt; Rolebinding –&gt; Clusterrole</h3><p>将k8s-user-test通过rolebinding到集群角色cluster-read当中，此时，k8s-user-test仅作用于当前名称空间的所有pods资源的权限</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">[root@k8s-<span class="hljs-literal">master</span>-<span class="hljs-number">01</span> pki]<span class="hljs-comment"># kubectl delete clusterrolebinding ye-read-all-pods </span><br>clusterrolebinding.rbac.authorization.k8s.io <span class="hljs-string">&quot;ye-read-all-pods&quot;</span> deleted<br><br>[root@k8s-<span class="hljs-literal">master</span>-<span class="hljs-number">01</span> pki]<span class="hljs-comment"># kubectl create rolebinding ye-read-pods --clusterrole=cluster-read --user=k8s-user-test --dry-run=client -o yaml &gt; rolebinding-clusterrole-demo.yaml</span><br><br>[root@k8s-<span class="hljs-literal">master</span>-<span class="hljs-number">01</span> pki]<span class="hljs-comment"># vim rolebinding-clusterrole-demo.yaml </span><br>apiVersion: rbac.authorization.k8s.io/v1<br>kind: RoleBinding<br>metadata:<br>  creationTimestamp: null<br>  name: ye-<span class="hljs-keyword">read</span>-pods<br>roleRef:<br>  apiGroup: rbac.authorization.k8s.io<br>  kind: ClusterRole<br>  name: cluster-<span class="hljs-keyword">read</span><br>subjects:<br>- apiGroup: rbac.authorization.k8s.io<br>  kind: <span class="hljs-keyword">User</span><br>  <span class="hljs-title">name</span>: k8s-user-test<br><br><br><br>[root@k8s-<span class="hljs-literal">master</span>-<span class="hljs-number">01</span> pki]<span class="hljs-comment"># kubectl apply -f rolebinding-clusterrole-demo.yaml </span><br>rolebinding.rbac.authorization.k8s.io/ye-<span class="hljs-keyword">read</span>-pods created<br><br>[yedong@k8s-<span class="hljs-literal">master</span>-<span class="hljs-number">01</span> ~]$ kubectl get pods<br>NAME                     READY   STATUS    RESTARTS   AGE<br>nginx-<span class="hljs-number">7</span>fb7fd49b4-<span class="hljs-number">4</span>wdnq   <span class="hljs-number">1</span>/<span class="hljs-number">1</span>     Running   <span class="hljs-number">0</span>          <span class="hljs-number">7</span>d19h<br>nginx-<span class="hljs-number">7</span>fb7fd49b4-<span class="hljs-number">6m</span>vlr   <span class="hljs-number">1</span>/<span class="hljs-number">1</span>     Running   <span class="hljs-number">0</span>          <span class="hljs-number">7</span>d19h<br>nginx-<span class="hljs-number">7</span>fb7fd49b4-<span class="hljs-number">6</span>rbrv   <span class="hljs-number">1</span>/<span class="hljs-number">1</span>     Running   <span class="hljs-number">0</span>          <span class="hljs-number">7</span>d19h<br>nginx-<span class="hljs-number">7</span>fb7fd49b4-jqsvj   <span class="hljs-number">1</span>/<span class="hljs-number">1</span>     Running   <span class="hljs-number">0</span>          <span class="hljs-number">7</span>d19h<br>nginx-<span class="hljs-number">7</span>fb7fd49b4-r5mrl   <span class="hljs-number">1</span>/<span class="hljs-number">1</span>     Running   <span class="hljs-number">0</span>          <span class="hljs-number">7</span>d19h<br><br>[root@k8s-<span class="hljs-literal">master</span>-<span class="hljs-number">01</span> pki]<span class="hljs-comment"># kubectl get rolebinding</span><br>NAME           <span class="hljs-keyword">ROLE</span>                       <span class="hljs-title">AGE</span><br>ye-<span class="hljs-keyword">read</span>-pods   ClusterRole/cluster-<span class="hljs-keyword">read</span>   <span class="hljs-number">3m</span>4s<br><br><br>[yedong@k8s-<span class="hljs-literal">master</span>-<span class="hljs-number">01</span> ~]$ kubectl get pods -n kube-system<br>Error from server (Forbidden): pods is forbidden: <span class="hljs-keyword">User</span> <span class="hljs-title">&quot;k8s-user-test</span><span class="hljs-string">&quot; cannot list resource &quot;</span>pods<span class="hljs-string">&quot; in API group &quot;</span><span class="hljs-string">&quot; in the namespace &quot;</span>kube-system<span class="hljs-string">&quot;</span><br></code></pre></td></tr></table></figure><h3 id="删除用户"><a href="#删除用户" class="headerlink" title="删除用户"></a>删除用户</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs yaml">[<span class="hljs-string">root@k8s-master-01</span> <span class="hljs-string">pki</span>]<span class="hljs-comment"># kubectl config view</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">clusters:</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">cluster:</span><br>    <span class="hljs-attr">certificate-authority-data:</span> <span class="hljs-string">DATA+OMITTED</span><br>    <span class="hljs-attr">server:</span> <span class="hljs-string">https://172.16.50.200:6443</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">kubernetes</span><br><span class="hljs-attr">contexts:</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">context:</span><br>    <span class="hljs-attr">cluster:</span> <span class="hljs-string">kubernetes</span><br>    <span class="hljs-attr">user:</span> <span class="hljs-string">k8s-user-test</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">k8s-user-test@kubernetes</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">context:</span><br>    <span class="hljs-attr">cluster:</span> <span class="hljs-string">kubernetes</span><br>    <span class="hljs-attr">user:</span> <span class="hljs-string">kubernetes-admin</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">kubernetes-admin@kubernetes</span><br><span class="hljs-attr">current-context:</span> <span class="hljs-string">kubernetes-admin@kubernetes</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Config</span><br><span class="hljs-attr">preferences:</span> &#123;&#125;<br><span class="hljs-attr">users:</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">k8s-user-test</span><br>  <span class="hljs-attr">user:</span><br>    <span class="hljs-attr">client-certificate-data:</span> <span class="hljs-string">REDACTED</span><br>    <span class="hljs-attr">client-key-data:</span> <span class="hljs-string">REDACTED</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">kubernetes-admin</span><br>  <span class="hljs-attr">user:</span><br>    <span class="hljs-attr">client-certificate-data:</span> <span class="hljs-string">REDACTED</span><br>    <span class="hljs-attr">client-key-data:</span> <span class="hljs-string">REDACTED</span><br></code></pre></td></tr></table></figure><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript">[root@k8s-master<span class="hljs-number">-01</span> pki]<span class="hljs-comment"># kubectl config delete-context k8s-user-test@kubernetes</span><br>deleted context yedong@kubernetes <span class="hljs-keyword">from</span> <span class="hljs-regexp">/root/</span>.kube/config<br></code></pre></td></tr></table></figure><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">[root@k8s-<span class="hljs-literal">master</span>-<span class="hljs-number">01</span> pki]<span class="hljs-comment"># kubectl config unset users.k8s-user-test</span><br><span class="hljs-keyword">Property</span><span class="hljs-title"> </span><span class="hljs-string">&quot;users.k8s-user-test&quot;</span> unset.<br></code></pre></td></tr></table></figure><h2 id="默认角色与默认角色绑定"><a href="#默认角色与默认角色绑定" class="headerlink" title="默认角色与默认角色绑定"></a>默认角色与默认角色绑定</h2><p>API Server会创建一组默认的ClusterRole和ClusterRoleBinding对象。 这些默认对象中有许多包含<code>system:</code>前缀，表明这些资源由Kubernetes基础组件”拥有”。 对这些资源的修改可能导致非功能性集群（non-functional cluster）故障。一个例子是system:node ClusterRole对象。 这个角色定义了kubelets的权限。如果这个角色被修改，可能会导致kubelets无法正常工作。</p><p>所有默认的ClusterRole和ClusterRoleBinding对象都会被标记为<code>kubernetes.io/bootstrapping=rbac-defaults</code>。</p><h3 id="自动协商"><a href="#自动协商" class="headerlink" title="自动协商"></a>自动协商</h3><p>每次启动时，API Server都会更新默认ClusterRole所缺乏的各种权限，并更新默认ClusterRoleBinding所缺乏的各个角色绑定主体。 这种自动更新机制允许集群修复一些意外的修改。由于权限和角色绑定主体在新的Kubernetes释出版本中可能变化，这也能够保证角色和角色 绑定始终保持是最新的。</p><p>如果需要禁用自动更新，请将默认ClusterRole以及ClusterRoleBinding的<code>rbac.authorization.kubernetes.io/autoupdate</code> 设置成为false。 请注意，缺乏默认权限和角色绑定主体可能会导致非功能性集群问题。</p><p>当集群RBAC鉴权机制（RBAC Authorizer）处于开启状态时，则自动协商功能默认是被启用的。</p><h3 id="发现类角色"><a href="#发现类角色" class="headerlink" title="发现类角色"></a>发现类角色</h3><p>下面是一些默认Clusterrole绑定默认的Clusterrolebinding</p><p><img src="/images/rbac-3.png" alt="rbac-3"></p><h3 id="面向用户的角色"><a href="#面向用户的角色" class="headerlink" title="面向用户的角色"></a>面向用户的角色</h3><p>一些默认角色并不包含system:前缀，它们是面向用户的角色。 这些角色包含超级用户角色（cluster-admin），即旨在利用ClusterRoleBinding（cluster-status）在集群范围内授权的角色， 以及那些使用RoleBinding（admin、edit和view）在特定命名空间中授权的角色。</p><p><img src="/images/rbac-4.png" alt="rbac-4"></p><h3 id="核心组件角色"><a href="#核心组件角色" class="headerlink" title="核心组件角色"></a>核心组件角色</h3><p><img src="/images/rbac-5.png" alt="rbac-5"></p><h3 id="其它组件角色"><a href="#其它组件角色" class="headerlink" title="其它组件角色"></a>其它组件角色</h3><p><img src="/images/rbac-6.png" alt="rbac-6"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Kubernetes证书相关(CFSSL)</title>
    <link href="/2019/08/26/Kubernetes-CFSSL/"/>
    <url>/2019/08/26/Kubernetes-CFSSL/</url>
    
    <content type="html"><![CDATA[<h3 id="使用CFSSL创建证书"><a href="#使用CFSSL创建证书" class="headerlink" title="使用CFSSL创建证书"></a>使用CFSSL创建证书</h3><blockquote><p>CFSSL是CloudFlare开源的一款PKI&#x2F;TLS工具。 CFSSL 包含一个命令行工具 和一个用于 签名，验证并且捆绑TLS证书的 HTTP API 服务。 使用Go语言编写。<br>Github 地址： <a href="https://github.com/cloudflare/cfssl">https://github.com/cloudflare/cfssl</a><br>官网地址： <a href="https://pkg.cfssl.org/">https://pkg.cfssl.org/</a></p></blockquote><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs awk">curl -s -L -o <span class="hljs-regexp">/bin/</span>cfssl https:<span class="hljs-regexp">//</span>pkg.cfssl.org<span class="hljs-regexp">/R1.2/</span>cfssl_linux-amd64<br>curl -s -L -o <span class="hljs-regexp">/bin/</span>cfssljson https:<span class="hljs-regexp">//</span>pkg.cfssl.org<span class="hljs-regexp">/R1.2/</span>cfssljson_linux-amd64<br>curl -s -L -o <span class="hljs-regexp">/bin/</span>cfssl-certinfo https:<span class="hljs-regexp">//</span>pkg.cfssl.org<span class="hljs-regexp">/R1.2/</span>cfssl-certinfo_linux-amd64<br>chmod +x <span class="hljs-regexp">/bin/</span>cfssl*<br></code></pre></td></tr></table></figure><h3 id="容器相关证书类型"><a href="#容器相关证书类型" class="headerlink" title="容器相关证书类型"></a>容器相关证书类型</h3><blockquote><p>client certificate： 用于服务端认证客户端,例如etcdctl、etcd proxy、fleetctl、docker客户端<br>server certificate: 服务端使用，客户端以此验证服务端身份,例如docker服务端、kube-apiserver<br>peer certificate: 双向证书，用于etcd集群成员间通信</p></blockquote><h3 id="创建CA证书"><a href="#创建CA证书" class="headerlink" title="创建CA证书"></a>创建CA证书</h3><blockquote><p>生成默认CA配置</p></blockquote><ul><li>mkdir &#x2F;opt&#x2F;ssl</li><li>cd &#x2F;opt&#x2F;ssl</li><li>cfssl print-defaults config &gt; ca-config.json</li><li>cfssl print-defaults csr &gt; ca-csr.json</li></ul><blockquote><p>修改ca-config.json,分别配置针对三种不同证书类型的profile,其中有效期43800h为5年</p></blockquote><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs prolog">&#123;<br><span class="hljs-string">&quot;signing&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;default&quot;</span>: &#123;<br>        <span class="hljs-string">&quot;expiry&quot;</span>: <span class="hljs-string">&quot;43800h&quot;</span><br>    &#125;,<br>    <span class="hljs-string">&quot;profiles&quot;</span>: &#123;<br>        <span class="hljs-string">&quot;server&quot;</span>: &#123;<br>            <span class="hljs-string">&quot;expiry&quot;</span>: <span class="hljs-string">&quot;43800h&quot;</span>,<br>            <span class="hljs-string">&quot;usages&quot;</span>: [<br>                <span class="hljs-string">&quot;signing&quot;</span>,<br>                <span class="hljs-string">&quot;key encipherment&quot;</span>,<br>                <span class="hljs-string">&quot;server auth&quot;</span><br>            ]<br>        &#125;,<br>        <span class="hljs-string">&quot;client&quot;</span>: &#123;<br>            <span class="hljs-string">&quot;expiry&quot;</span>: <span class="hljs-string">&quot;43800h&quot;</span>,<br>            <span class="hljs-string">&quot;usages&quot;</span>: [<br>                <span class="hljs-string">&quot;signing&quot;</span>,<br>                <span class="hljs-string">&quot;key encipherment&quot;</span>,<br>                <span class="hljs-string">&quot;client auth&quot;</span><br>            ]<br>        &#125;,<br>        <span class="hljs-string">&quot;peer&quot;</span>: &#123;<br>            <span class="hljs-string">&quot;expiry&quot;</span>: <span class="hljs-string">&quot;43800h&quot;</span>,<br>            <span class="hljs-string">&quot;usages&quot;</span>: [<br>                <span class="hljs-string">&quot;signing&quot;</span>,<br>                <span class="hljs-string">&quot;key encipherment&quot;</span>,<br>                <span class="hljs-string">&quot;server auth&quot;</span>,<br>                <span class="hljs-string">&quot;client auth&quot;</span><br>            ]<br>        &#125;<br>    &#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><h3 id="字段说明"><a href="#字段说明" class="headerlink" title="字段说明"></a>字段说明</h3></blockquote><ul><li>ca-config.json：可以定义多个 profiles，分别指定不同的过期时间、使用场景等参数；后续在签名证书时使用某个 profile；</li><li>signing：表示该证书可用于签名其它证书；生成的 ca.pem 证书中 CA:TRUE；</li><li>server auth：表示client可以用该 CA 对server提供的证书进行验证；</li><li>client auth：表示server可以用该CA对client提供的证书进行验证；</li></ul><h3 id="修改ca-csr-json"><a href="#修改ca-csr-json" class="headerlink" title="修改ca-csr.json"></a>修改ca-csr.json</h3><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs prolog">&#123;<br><span class="hljs-string">&quot;CN&quot;</span>: <span class="hljs-string">&quot;Self Signed Ca&quot;</span>,<br><span class="hljs-string">&quot;key&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;algo&quot;</span>: <span class="hljs-string">&quot;rsa&quot;</span>,<br>    <span class="hljs-string">&quot;size&quot;</span>: <span class="hljs-number">2048</span><br>&#125;,<br><span class="hljs-string">&quot;names&quot;</span>: [<br>    &#123;<br>        <span class="hljs-string">&quot;C&quot;</span>: <span class="hljs-string">&quot;CN&quot;</span>,<br>        <span class="hljs-string">&quot;L&quot;</span>: <span class="hljs-string">&quot;SH&quot;</span>,<br>        <span class="hljs-string">&quot;O&quot;</span>: <span class="hljs-string">&quot;Netease&quot;</span>,<br>        <span class="hljs-string">&quot;ST&quot;</span>: <span class="hljs-string">&quot;SH&quot;</span>,            <br>        <span class="hljs-string">&quot;OU&quot;</span>: <span class="hljs-string">&quot;OT&quot;</span><br>    &#125;    ]<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><ul><li>“CN”：Common Name，kube-apiserver 从证书中提取该字段作为请求的用户名 (User Name)；</li></ul></blockquote><ul><li>“O”：Organization，kube-apiserver 从证书中提取该字段作为请求用户所属的组 (Group)；</li></ul><blockquote><ul><li>“C”: Country， 国家</li><li>“L”: Locality，地区，城市</li><li>“O”: Organization Name，组织名称，公司名称</li><li>“OU”: Organization Unit Name，组织单位名称，公司部门</li><li>“ST”: State，州，省</li></ul></blockquote><h3 id="生成CA证书和私钥"><a href="#生成CA证书和私钥" class="headerlink" title="生成CA证书和私钥"></a>生成CA证书和私钥</h3><blockquote><p>[root@master-1 ssl]# cfssl gencert -initca ca-csr.json | cfssljson -bare ca<br>生成ca.pem、ca.csr、ca-key.pem(CA私钥,需妥善保管)</p></blockquote><h3 id="签发Server-Certificate"><a href="#签发Server-Certificate" class="headerlink" title="签发Server Certificate"></a>签发Server Certificate</h3><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">cfssl print-defaults csr &gt; <span class="hljs-keyword">server</span>.json<br>vim <span class="hljs-keyword">server</span>.json<br>&#123;<br>    &quot;CN&quot;: &quot;Server&quot;,<br>    &quot;hosts&quot;: [<br>        &quot;192.168.1.1&quot;<br>       ],<br>    &quot;key&quot;: &#123;<br>        &quot;algo&quot;: &quot;rsa&quot;,<br>        &quot;size&quot;: <span class="hljs-number">2048</span><br>    &#125;,<br>    &quot;names&quot;: [<br>        &#123;<br>            &quot;C&quot;: &quot;CN&quot;,<br>            &quot;L&quot;: &quot;SH&quot;,<br>            &quot;ST&quot;: &quot;SH&quot;<br>        &#125;<br>    ]<br>&#125;<br><br>#生成服务端证书和私钥<br>cfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json -profile=<span class="hljs-keyword">server</span> <span class="hljs-keyword">server</span>.json | cfssljson -bare <span class="hljs-keyword">server</span><br></code></pre></td></tr></table></figure><h3 id="签发Client-Certificate"><a href="#签发Client-Certificate" class="headerlink" title="签发Client Certificate"></a>签发Client Certificate</h3><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs routeros">cfssl print-defaults csr &gt; client.json<br>vim client.json<br>&#123;<br>    <span class="hljs-string">&quot;CN&quot;</span>: <span class="hljs-string">&quot;Client&quot;</span>,<br>    <span class="hljs-string">&quot;hosts&quot;</span>: [],<br>    <span class="hljs-string">&quot;key&quot;</span>: &#123;<br>        <span class="hljs-string">&quot;algo&quot;</span>: <span class="hljs-string">&quot;rsa&quot;</span>,<br>        <span class="hljs-string">&quot;size&quot;</span>: 2048<br>    &#125;,<br>    <span class="hljs-string">&quot;names&quot;</span>: [<br>        &#123;<br>            <span class="hljs-string">&quot;C&quot;</span>: <span class="hljs-string">&quot;CN&quot;</span>,<br>            <span class="hljs-string">&quot;L&quot;</span>: <span class="hljs-string">&quot;SH&quot;</span>,<br>            <span class="hljs-string">&quot;ST&quot;</span>: <span class="hljs-string">&quot;SH&quot;</span><br>        &#125;<br>    ]<br>&#125;<br><br><span class="hljs-comment">#生成客户端证书和私钥</span><br>cfssl gencert <span class="hljs-attribute">-ca</span>=ca.pem <span class="hljs-attribute">-ca-key</span>=ca-key.pem <span class="hljs-attribute">-config</span>=ca-config.json <span class="hljs-attribute">-profile</span>=client client.json | cfssljson -bare client<br></code></pre></td></tr></table></figure><h3 id="签发peer-certificate"><a href="#签发peer-certificate" class="headerlink" title="签发peer certificate"></a>签发peer certificate</h3><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs routeros">cfssl print-defaults csr &gt; member1.json<br>vim member1.json<br>&#123;<br>    <span class="hljs-string">&quot;CN&quot;</span>: <span class="hljs-string">&quot;member1&quot;</span>,<br>    <span class="hljs-string">&quot;hosts&quot;</span>: [<br>        <span class="hljs-string">&quot;192.168.1.1&quot;</span><br>    ],<br>    <span class="hljs-string">&quot;key&quot;</span>: &#123;<br>        <span class="hljs-string">&quot;algo&quot;</span>: <span class="hljs-string">&quot;ecdsa&quot;</span>,<br>        <span class="hljs-string">&quot;size&quot;</span>: 256<br>    &#125;,<br>    <span class="hljs-string">&quot;names&quot;</span>: [<br>        &#123;<br>            <span class="hljs-string">&quot;C&quot;</span>: <span class="hljs-string">&quot;CN&quot;</span>,<br>            <span class="hljs-string">&quot;L&quot;</span>: <span class="hljs-string">&quot;SH&quot;</span>,<br>            <span class="hljs-string">&quot;ST&quot;</span>: <span class="hljs-string">&quot;SH&quot;</span><br>        &#125;<br>    ]<br>&#125;<br><br><span class="hljs-comment">#为节点member1生成证书和私钥:</span><br>cfssl gencert <span class="hljs-attribute">-ca</span>=ca.pem <span class="hljs-attribute">-ca-key</span>=ca-key.pem <span class="hljs-attribute">-config</span>=ca-config.json <span class="hljs-attribute">-profile</span>=peer member1.json | cfssljson -bare member1<br></code></pre></td></tr></table></figure><h3 id="校验生成的证书是否和配置相符"><a href="#校验生成的证书是否和配置相符" class="headerlink" title="校验生成的证书是否和配置相符"></a>校验生成的证书是否和配置相符</h3><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">openssl x509 -<span class="hljs-keyword">in</span> ca.pem -<span class="hljs-type">text</span> -noout<br>openssl x509 -<span class="hljs-keyword">in</span> <span class="hljs-keyword">server</span>.pem -<span class="hljs-type">text</span> -noout<br>openssl x509 -<span class="hljs-keyword">in</span> client.pem -<span class="hljs-type">text</span> -noout<br></code></pre></td></tr></table></figure><h3 id="cfssl常用命令："><a href="#cfssl常用命令：" class="headerlink" title="cfssl常用命令："></a>cfssl常用命令：</h3><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs stata">cfssl gencert -initca <span class="hljs-keyword">ca</span>-csr.json | cfssljson -bare <span class="hljs-keyword">ca</span>           #初始化<span class="hljs-keyword">ca</span><br>cfssl gencert -initca -<span class="hljs-keyword">ca</span>-key key.pem <span class="hljs-keyword">ca</span>-csr.json | cfssljson -bare <span class="hljs-keyword">ca</span>       #使用现有私钥, 重新生成<br>cfssl certinfo -cert <span class="hljs-keyword">ca</span>.pem<br>cfssl certinfo -csr <span class="hljs-keyword">ca</span>.csr<br></code></pre></td></tr></table></figure><h3 id="识别证书类型："><a href="#识别证书类型：" class="headerlink" title="识别证书类型："></a>识别证书类型：</h3><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs ruby">[root<span class="hljs-variable">@master</span>-<span class="hljs-number">1</span> ssl]<span class="hljs-comment"># openssl x509 -in server.pem -text -noout</span><br><span class="hljs-title class_">Certificate</span>:<br>    <span class="hljs-title class_">Data</span>:<br>        <span class="hljs-title class_">Version</span>: <span class="hljs-number">3</span> (<span class="hljs-number">0x2</span>)<br>        <span class="hljs-title class_">Serial</span> <span class="hljs-title class_">Number</span>:<br>            6<span class="hljs-symbol">f:</span><span class="hljs-number">25</span><span class="hljs-symbol">:cf</span><span class="hljs-symbol">:</span>8<span class="hljs-symbol">d:</span><span class="hljs-number">42</span><span class="hljs-symbol">:</span>1<span class="hljs-symbol">e:</span><span class="hljs-symbol">c8:</span>2<span class="hljs-symbol">d:</span><span class="hljs-symbol">b8:</span><span class="hljs-number">78</span><span class="hljs-symbol">:</span><span class="hljs-number">95</span><span class="hljs-symbol">:d1</span><span class="hljs-symbol">:f4</span><span class="hljs-symbol">:</span>0<span class="hljs-symbol">a:</span><span class="hljs-number">25</span><span class="hljs-symbol">:</span>8<span class="hljs-symbol">e:</span><span class="hljs-symbol">bb:</span><span class="hljs-number">48</span><span class="hljs-symbol">:</span><span class="hljs-number">53</span><span class="hljs-symbol">:</span>9d<br>    <span class="hljs-title class_">Signature</span> <span class="hljs-title class_">Algorithm</span>: sha256WithRSAEncryption<br>        <span class="hljs-title class_">Issuer</span>: C=<span class="hljs-variable constant_">CN</span>, <span class="hljs-variable constant_">ST</span>=<span class="hljs-title class_">San</span> <span class="hljs-title class_">Francisco</span>, L=<span class="hljs-title class_">Chongqing</span>, <span class="hljs-variable constant_">CN</span>=test<br>        <span class="hljs-title class_">Validity</span><br>            <span class="hljs-title class_">Not</span> <span class="hljs-title class_">Before</span>: <span class="hljs-title class_">Feb</span> <span class="hljs-number">13</span> <span class="hljs-number">11</span><span class="hljs-symbol">:</span><span class="hljs-number">35</span><span class="hljs-symbol">:</span><span class="hljs-number">00</span> <span class="hljs-number">2019</span> <span class="hljs-variable constant_">GMT</span><br>            <span class="hljs-title class_">Not</span> <span class="hljs-title class_">After</span> : <span class="hljs-title class_">Feb</span> <span class="hljs-number">13</span> <span class="hljs-number">11</span><span class="hljs-symbol">:</span><span class="hljs-number">35</span><span class="hljs-symbol">:</span><span class="hljs-number">00</span> <span class="hljs-number">2020</span> <span class="hljs-variable constant_">GMT</span><br>        <span class="hljs-title class_">Subject</span>: C=<span class="hljs-variable constant_">US</span>, <span class="hljs-variable constant_">ST</span>=<span class="hljs-title class_">San</span> <span class="hljs-title class_">Francisco</span>, L=<span class="hljs-variable constant_">CA</span>, <span class="hljs-variable constant_">CN</span>=etcd<br>        <span class="hljs-title class_">Subject</span> <span class="hljs-title class_">Public</span> <span class="hljs-title class_">Key</span> <span class="hljs-title class_">Info</span>:<br>            <span class="hljs-title class_">Public</span> <span class="hljs-title class_">Key</span> <span class="hljs-title class_">Algorithm</span>: rsaEncryption<br>                <span class="hljs-title class_">Public</span>-<span class="hljs-title class_">Key</span>: (<span class="hljs-number">2048</span> bit)<br>                <span class="hljs-title class_">Modulus</span>:<br>                    <span class="hljs-number">00</span><span class="hljs-symbol">:b6</span><span class="hljs-symbol">:</span><span class="hljs-number">79</span><span class="hljs-symbol">:</span>4<span class="hljs-symbol">d:</span><span class="hljs-symbol">af:</span><span class="hljs-number">27</span><span class="hljs-symbol">:a0</span><span class="hljs-symbol">:c9</span><span class="hljs-symbol">:</span>0<span class="hljs-symbol">e:</span>8<span class="hljs-symbol">a:</span><span class="hljs-symbol">d0:</span>8<span class="hljs-symbol">c:</span><span class="hljs-number">25</span><span class="hljs-symbol">:d4</span><span class="hljs-symbol">:</span><span class="hljs-number">12</span>:<br>                    <span class="hljs-symbol">f7:</span><span class="hljs-number">22</span><span class="hljs-symbol">:</span><span class="hljs-number">21</span><span class="hljs-symbol">:</span><span class="hljs-number">45</span><span class="hljs-symbol">:ce</span><span class="hljs-symbol">:</span><span class="hljs-number">80</span><span class="hljs-symbol">:</span><span class="hljs-number">25</span><span class="hljs-symbol">:e5</span><span class="hljs-symbol">:c6</span><span class="hljs-symbol">:</span>0<span class="hljs-symbol">b:</span><span class="hljs-number">47</span><span class="hljs-symbol">:fe</span><span class="hljs-symbol">:ba</span><span class="hljs-symbol">:</span><span class="hljs-number">79</span><span class="hljs-symbol">:c7</span>:<br>                    <span class="hljs-symbol">aa:</span><span class="hljs-number">14</span><span class="hljs-symbol">:d6</span><span class="hljs-symbol">:</span><span class="hljs-number">51</span><span class="hljs-symbol">:be</span><span class="hljs-symbol">:</span><span class="hljs-number">45</span><span class="hljs-symbol">:</span>2<span class="hljs-symbol">d:</span><span class="hljs-number">92</span><span class="hljs-symbol">:</span><span class="hljs-number">49</span><span class="hljs-symbol">:a5</span><span class="hljs-symbol">:</span><span class="hljs-number">07</span><span class="hljs-symbol">:</span><span class="hljs-number">37</span><span class="hljs-symbol">:</span><span class="hljs-number">36</span><span class="hljs-symbol">:</span><span class="hljs-number">66</span><span class="hljs-symbol">:</span>9<span class="hljs-symbol">b:</span><br>                    <span class="hljs-number">38</span><span class="hljs-symbol">:a9</span><span class="hljs-symbol">:</span>9<span class="hljs-symbol">c:</span>9<span class="hljs-symbol">c:</span>0<span class="hljs-symbol">b:</span><span class="hljs-symbol">cf:</span><span class="hljs-number">91</span><span class="hljs-symbol">:</span><span class="hljs-number">45</span><span class="hljs-symbol">:</span><span class="hljs-number">55</span><span class="hljs-symbol">:</span>7<span class="hljs-symbol">a:</span><span class="hljs-number">20</span><span class="hljs-symbol">:</span><span class="hljs-number">43</span><span class="hljs-symbol">:ad</span><span class="hljs-symbol">:</span><span class="hljs-number">64</span><span class="hljs-symbol">:</span>09:<br>                    <span class="hljs-number">31</span><span class="hljs-symbol">:bb</span><span class="hljs-symbol">:</span><span class="hljs-number">25</span><span class="hljs-symbol">:</span><span class="hljs-number">30</span><span class="hljs-symbol">:ba</span><span class="hljs-symbol">:</span><span class="hljs-number">50</span><span class="hljs-symbol">:</span><span class="hljs-number">20</span><span class="hljs-symbol">:fe</span><span class="hljs-symbol">:</span>3<span class="hljs-symbol">b:</span>4<span class="hljs-symbol">e:</span><span class="hljs-symbol">cf:</span>8<span class="hljs-symbol">c:</span><span class="hljs-number">21</span><span class="hljs-symbol">:bc</span><span class="hljs-symbol">:</span><span class="hljs-number">43</span>:<br>                    <span class="hljs-symbol">d8:</span><span class="hljs-symbol">cf:</span><span class="hljs-symbol">f4:</span>1<span class="hljs-symbol">b:</span><span class="hljs-symbol">d6:</span><span class="hljs-symbol">ed:</span>3<span class="hljs-symbol">b:</span>3<span class="hljs-symbol">e:</span>9<span class="hljs-symbol">d:</span><span class="hljs-number">53</span><span class="hljs-symbol">:</span><span class="hljs-number">74</span><span class="hljs-symbol">:</span><span class="hljs-number">89</span><span class="hljs-symbol">:db</span><span class="hljs-symbol">:</span><span class="hljs-number">17</span><span class="hljs-symbol">:</span>4<span class="hljs-symbol">b:</span><br>                    <span class="hljs-symbol">a7:</span><span class="hljs-symbol">a2:</span><span class="hljs-number">01</span><span class="hljs-symbol">:bb</span><span class="hljs-symbol">:</span><span class="hljs-number">00</span><span class="hljs-symbol">:</span><span class="hljs-number">36</span><span class="hljs-symbol">:</span><span class="hljs-number">74</span><span class="hljs-symbol">:</span><span class="hljs-number">95</span><span class="hljs-symbol">:a7</span><span class="hljs-symbol">:cf</span><span class="hljs-symbol">:</span>0<span class="hljs-symbol">a:</span><span class="hljs-number">24</span><span class="hljs-symbol">:a1</span><span class="hljs-symbol">:</span>0<span class="hljs-symbol">d:</span><span class="hljs-number">62</span>:<br>                    6<span class="hljs-symbol">d:</span><span class="hljs-number">47</span><span class="hljs-symbol">:d3</span><span class="hljs-symbol">:f4</span><span class="hljs-symbol">:</span>3<span class="hljs-symbol">a:</span><span class="hljs-number">93</span><span class="hljs-symbol">:e4</span><span class="hljs-symbol">:</span><span class="hljs-number">15</span><span class="hljs-symbol">:df</span><span class="hljs-symbol">:</span><span class="hljs-number">20</span><span class="hljs-symbol">:af</span><span class="hljs-symbol">:</span><span class="hljs-number">59</span><span class="hljs-symbol">:fb</span><span class="hljs-symbol">:</span>5<span class="hljs-symbol">f:</span><span class="hljs-number">77</span>:<br>                    9<span class="hljs-symbol">b:</span><span class="hljs-number">76</span><span class="hljs-symbol">:</span><span class="hljs-number">45</span><span class="hljs-symbol">:ad</span><span class="hljs-symbol">:</span><span class="hljs-number">68</span><span class="hljs-symbol">:</span><span class="hljs-number">24</span><span class="hljs-symbol">:</span><span class="hljs-number">69</span><span class="hljs-symbol">:d3</span><span class="hljs-symbol">:</span>1<span class="hljs-symbol">a:</span><span class="hljs-symbol">cf:</span><span class="hljs-number">75</span><span class="hljs-symbol">:ef</span><span class="hljs-symbol">:</span>3<span class="hljs-symbol">f:</span>6<span class="hljs-symbol">d:</span><span class="hljs-number">19</span>:<br>                    <span class="hljs-symbol">d6:</span>3<span class="hljs-symbol">c:</span><span class="hljs-number">54</span><span class="hljs-symbol">:</span><span class="hljs-number">76</span><span class="hljs-symbol">:ec</span><span class="hljs-symbol">:</span>1<span class="hljs-symbol">b:</span><span class="hljs-symbol">a3:</span><span class="hljs-number">98</span><span class="hljs-symbol">:bf</span><span class="hljs-symbol">:e3</span><span class="hljs-symbol">:d6</span><span class="hljs-symbol">:d7</span><span class="hljs-symbol">:a5</span><span class="hljs-symbol">:f8</span><span class="hljs-symbol">:ec</span>:<br>                    <span class="hljs-number">12</span><span class="hljs-symbol">:</span><span class="hljs-number">47</span><span class="hljs-symbol">:ee</span><span class="hljs-symbol">:</span><span class="hljs-number">06</span><span class="hljs-symbol">:ab</span><span class="hljs-symbol">:ae</span><span class="hljs-symbol">:</span><span class="hljs-number">31</span><span class="hljs-symbol">:</span>8<span class="hljs-symbol">b:</span><span class="hljs-number">83</span><span class="hljs-symbol">:be</span><span class="hljs-symbol">:</span><span class="hljs-number">43</span><span class="hljs-symbol">:</span>6<span class="hljs-symbol">e:</span><span class="hljs-symbol">b9:</span><span class="hljs-number">41</span><span class="hljs-symbol">:</span>2<span class="hljs-symbol">d:</span><br>                    <span class="hljs-number">82</span><span class="hljs-symbol">:ff</span><span class="hljs-symbol">:c6</span><span class="hljs-symbol">:</span><span class="hljs-number">20</span><span class="hljs-symbol">:e6</span><span class="hljs-symbol">:</span>2<span class="hljs-symbol">c:</span><span class="hljs-number">69</span><span class="hljs-symbol">:d5</span><span class="hljs-symbol">:</span><span class="hljs-number">81</span><span class="hljs-symbol">:d4</span><span class="hljs-symbol">:</span>9<span class="hljs-symbol">a:</span><span class="hljs-number">07</span><span class="hljs-symbol">:b2</span><span class="hljs-symbol">:e4</span><span class="hljs-symbol">:</span>9<span class="hljs-symbol">a:</span><br>                    <span class="hljs-number">40</span><span class="hljs-symbol">:af</span><span class="hljs-symbol">:e9</span><span class="hljs-symbol">:ed</span><span class="hljs-symbol">:</span><span class="hljs-number">98</span><span class="hljs-symbol">:</span>4<span class="hljs-symbol">e:</span><span class="hljs-symbol">c0:</span><span class="hljs-number">27</span><span class="hljs-symbol">:ef</span><span class="hljs-symbol">:</span>7<span class="hljs-symbol">c:</span><span class="hljs-number">14</span><span class="hljs-symbol">:</span><span class="hljs-number">86</span><span class="hljs-symbol">:cf</span><span class="hljs-symbol">:</span>6<span class="hljs-symbol">e:</span>6<span class="hljs-symbol">e:</span><br>                    <span class="hljs-number">18</span><span class="hljs-symbol">:</span><span class="hljs-number">98</span><span class="hljs-symbol">:</span>1<span class="hljs-symbol">c:</span><span class="hljs-symbol">d1:</span><span class="hljs-symbol">d9:</span><span class="hljs-symbol">dd:</span>4<span class="hljs-symbol">e:</span><span class="hljs-symbol">a3:</span><span class="hljs-number">10</span><span class="hljs-symbol">:d3</span><span class="hljs-symbol">:</span><span class="hljs-number">63</span><span class="hljs-symbol">:f9</span><span class="hljs-symbol">:</span><span class="hljs-number">00</span><span class="hljs-symbol">:d6</span><span class="hljs-symbol">:</span>3<span class="hljs-symbol">b:</span><br>                    <span class="hljs-number">04</span><span class="hljs-symbol">:e9</span><span class="hljs-symbol">:</span><span class="hljs-number">47</span><span class="hljs-symbol">:</span><span class="hljs-number">54</span><span class="hljs-symbol">:af</span><span class="hljs-symbol">:</span><span class="hljs-number">87</span><span class="hljs-symbol">:db</span><span class="hljs-symbol">:</span><span class="hljs-number">83</span><span class="hljs-symbol">:d5</span><span class="hljs-symbol">:</span>8<span class="hljs-symbol">a:</span>8<span class="hljs-symbol">a:</span><span class="hljs-number">05</span><span class="hljs-symbol">:f4</span><span class="hljs-symbol">:e8</span><span class="hljs-symbol">:</span><span class="hljs-number">38</span>:<br>                    4<span class="hljs-symbol">d:</span><span class="hljs-number">64</span><span class="hljs-symbol">:e7</span><span class="hljs-symbol">:ae</span><span class="hljs-symbol">:b4</span><span class="hljs-symbol">:</span>5<span class="hljs-symbol">f:</span>3<span class="hljs-symbol">f:</span>6<span class="hljs-symbol">a:</span><span class="hljs-number">18</span><span class="hljs-symbol">:c8</span><span class="hljs-symbol">:</span><span class="hljs-number">87</span><span class="hljs-symbol">:</span><span class="hljs-number">32</span><span class="hljs-symbol">:</span>7<span class="hljs-symbol">d:</span><span class="hljs-number">24</span><span class="hljs-symbol">:</span><span class="hljs-number">46</span>:<br>                    <span class="hljs-number">72</span><span class="hljs-symbol">:a8</span><span class="hljs-symbol">:</span>4<span class="hljs-symbol">a:</span>7<span class="hljs-symbol">f:</span><span class="hljs-symbol">dd:</span>5<span class="hljs-symbol">c:</span>5<span class="hljs-symbol">b:</span><span class="hljs-symbol">cf:</span>6<span class="hljs-symbol">a:</span>2<span class="hljs-symbol">f:</span><span class="hljs-symbol">af:</span><span class="hljs-number">88</span><span class="hljs-symbol">:bb</span><span class="hljs-symbol">:b2</span><span class="hljs-symbol">:d8</span>:<br>                    <span class="hljs-number">02</span><span class="hljs-symbol">:af</span><br>                <span class="hljs-title class_">Exponent</span>: <span class="hljs-number">65537</span> (<span class="hljs-number">0x10001</span>)<br>        <span class="hljs-title class_">X509v3</span> <span class="hljs-symbol">extensions:</span><br>            <span class="hljs-title class_">X509v3</span> <span class="hljs-title class_">Key</span> <span class="hljs-title class_">Usage</span>: critical<br>                <span class="hljs-title class_">Digital</span> <span class="hljs-title class_">Signature</span>, <span class="hljs-title class_">Key</span> <span class="hljs-title class_">Encipherment</span><br>            <span class="hljs-title class_">X509v3</span> <span class="hljs-title class_">Extended</span> <span class="hljs-title class_">Key</span> <span class="hljs-title class_">Usage</span>: <br>                <span class="hljs-variable constant_">TLS</span> <span class="hljs-title class_">Web</span> <span class="hljs-title class_">Server</span> <span class="hljs-title class_">Authentication</span><br>            <span class="hljs-title class_">X509v3</span> <span class="hljs-title class_">Basic</span> <span class="hljs-title class_">Constraints</span>: critical<br>                <span class="hljs-variable constant_">CA</span><span class="hljs-symbol">:FALSE</span><br>            <span class="hljs-title class_">X509v3</span> <span class="hljs-title class_">Subject</span> <span class="hljs-title class_">Key</span> <span class="hljs-title class_">Identifier</span>: <br>                <span class="hljs-variable constant_">B7</span><span class="hljs-symbol">:EF</span><span class="hljs-symbol">:</span>2<span class="hljs-symbol">C:</span><span class="hljs-number">02</span><span class="hljs-symbol">:</span><span class="hljs-number">18</span><span class="hljs-symbol">:</span><span class="hljs-number">05</span><span class="hljs-symbol">:D0</span><span class="hljs-symbol">:</span>7<span class="hljs-symbol">E:</span><span class="hljs-number">30</span><span class="hljs-symbol">:</span><span class="hljs-number">63</span><span class="hljs-symbol">:BB</span><span class="hljs-symbol">:F9</span><span class="hljs-symbol">:</span>8<span class="hljs-symbol">F:</span><span class="hljs-number">52</span><span class="hljs-symbol">:B4</span><span class="hljs-symbol">:</span>1<span class="hljs-symbol">E:</span>1<span class="hljs-symbol">F:</span><span class="hljs-number">57</span><span class="hljs-symbol">:</span>4<span class="hljs-symbol">A:</span><span class="hljs-variable constant_">C8</span><br>            <span class="hljs-title class_">X509v3</span> <span class="hljs-title class_">Authority</span> <span class="hljs-title class_">Key</span> <span class="hljs-title class_">Identifier</span>: <br>                <span class="hljs-symbol">keyid:</span>3<span class="hljs-symbol">C:</span><span class="hljs-number">58</span><span class="hljs-symbol">:</span><span class="hljs-number">00</span><span class="hljs-symbol">:</span>7<span class="hljs-symbol">D:</span><span class="hljs-variable constant_">E0</span><span class="hljs-symbol">:</span>2<span class="hljs-symbol">B:</span><span class="hljs-variable constant_">C1</span><span class="hljs-symbol">:AE</span><span class="hljs-symbol">:</span><span class="hljs-number">81</span><span class="hljs-symbol">:</span><span class="hljs-number">88</span><span class="hljs-symbol">:</span><span class="hljs-number">58</span><span class="hljs-symbol">:F1</span><span class="hljs-symbol">:FB</span><span class="hljs-symbol">:</span><span class="hljs-number">95</span><span class="hljs-symbol">:</span><span class="hljs-number">45</span><span class="hljs-symbol">:</span><span class="hljs-number">88</span><span class="hljs-symbol">:</span><span class="hljs-number">33</span><span class="hljs-symbol">:</span><span class="hljs-number">28</span><span class="hljs-symbol">:F7</span><span class="hljs-symbol">:</span><span class="hljs-number">00</span><br><br>            <span class="hljs-title class_">X509v3</span> <span class="hljs-title class_">Subject</span> <span class="hljs-title class_">Alternative</span> <span class="hljs-title class_">Name</span>: <br>                <span class="hljs-variable constant_">IP</span> <span class="hljs-title class_">Address</span><span class="hljs-symbol">:</span><span class="hljs-number">172.19</span>.<span class="hljs-number">0.203</span>, <span class="hljs-variable constant_">IP</span> <span class="hljs-title class_">Address</span><span class="hljs-symbol">:</span><span class="hljs-number">172.19</span>.<span class="hljs-number">0.204</span>, <span class="hljs-variable constant_">IP</span> <span class="hljs-title class_">Address</span><span class="hljs-symbol">:</span><span class="hljs-number">172.19</span>.<span class="hljs-number">0.205</span><br>    <span class="hljs-title class_">Signature</span> <span class="hljs-title class_">Algorithm</span>: sha256WithRSAEncryption<br>         <span class="hljs-number">35</span><span class="hljs-symbol">:</span>8<span class="hljs-symbol">f:</span><span class="hljs-symbol">af:</span><span class="hljs-symbol">a7:</span><span class="hljs-number">03</span><span class="hljs-symbol">:c3</span><span class="hljs-symbol">:</span>8<span class="hljs-symbol">f:</span>5<span class="hljs-symbol">e:</span><span class="hljs-number">42</span><span class="hljs-symbol">:ec</span><span class="hljs-symbol">:</span><span class="hljs-number">10</span><span class="hljs-symbol">:af</span><span class="hljs-symbol">:</span><span class="hljs-number">33</span><span class="hljs-symbol">:c8</span><span class="hljs-symbol">:</span>4<span class="hljs-symbol">e:</span><span class="hljs-symbol">b1:</span>0<span class="hljs-symbol">e:</span><span class="hljs-symbol">d5:</span><br>         <span class="hljs-symbol">f7:</span>3<span class="hljs-symbol">e:</span><span class="hljs-symbol">b2:</span>5<span class="hljs-symbol">f:</span>5<span class="hljs-symbol">d:</span><span class="hljs-symbol">cf:</span><span class="hljs-symbol">b4:</span><span class="hljs-number">49</span><span class="hljs-symbol">:</span><span class="hljs-number">15</span><span class="hljs-symbol">:</span><span class="hljs-number">94</span><span class="hljs-symbol">:b1</span><span class="hljs-symbol">:</span>6<span class="hljs-symbol">b:</span><span class="hljs-number">78</span><span class="hljs-symbol">:</span>3<span class="hljs-symbol">a:</span><span class="hljs-symbol">b5:</span><span class="hljs-symbol">fb:</span><span class="hljs-number">95</span><span class="hljs-symbol">:</span><span class="hljs-number">68</span>:<br>         <span class="hljs-symbol">ab:</span><span class="hljs-symbol">ff:</span><span class="hljs-symbol">ff:</span><span class="hljs-number">45</span><span class="hljs-symbol">:</span><span class="hljs-number">74</span><span class="hljs-symbol">:f9</span><span class="hljs-symbol">:</span>5<span class="hljs-symbol">f:</span><span class="hljs-number">17</span><span class="hljs-symbol">:a7</span><span class="hljs-symbol">:be</span><span class="hljs-symbol">:</span><span class="hljs-number">16</span><span class="hljs-symbol">:c8</span><span class="hljs-symbol">:</span><span class="hljs-number">92</span><span class="hljs-symbol">:</span><span class="hljs-number">66</span><span class="hljs-symbol">:</span><span class="hljs-number">28</span><span class="hljs-symbol">:d0</span><span class="hljs-symbol">:</span>7<span class="hljs-symbol">c:</span>6<span class="hljs-symbol">d:</span><br>         <span class="hljs-number">60</span><span class="hljs-symbol">:</span>0<span class="hljs-symbol">d:</span><span class="hljs-number">82</span><span class="hljs-symbol">:</span><span class="hljs-number">26</span><span class="hljs-symbol">:</span><span class="hljs-number">65</span><span class="hljs-symbol">:</span><span class="hljs-number">01</span><span class="hljs-symbol">:</span><span class="hljs-number">71</span><span class="hljs-symbol">:f1</span><span class="hljs-symbol">:</span><span class="hljs-number">93</span><span class="hljs-symbol">:</span>0<span class="hljs-symbol">d:</span>0<span class="hljs-symbol">b:</span><span class="hljs-number">44</span><span class="hljs-symbol">:f3</span><span class="hljs-symbol">:</span>08<span class="hljs-symbol">:</span><span class="hljs-number">59</span><span class="hljs-symbol">:</span>9<span class="hljs-symbol">e:</span><span class="hljs-symbol">d5:</span><span class="hljs-number">89</span>:<br>         <span class="hljs-symbol">d5:</span>8<span class="hljs-symbol">c:</span><span class="hljs-number">83</span><span class="hljs-symbol">:d1</span><span class="hljs-symbol">:dc</span><span class="hljs-symbol">:b2</span><span class="hljs-symbol">:a5</span><span class="hljs-symbol">:</span>8<span class="hljs-symbol">f:</span><span class="hljs-symbol">b6:</span><span class="hljs-symbol">be:</span><span class="hljs-symbol">e8:</span>9<span class="hljs-symbol">e:</span><span class="hljs-number">79</span><span class="hljs-symbol">:</span>3<span class="hljs-symbol">c:</span><span class="hljs-number">62</span><span class="hljs-symbol">:</span><span class="hljs-number">02</span><span class="hljs-symbol">:</span>6<span class="hljs-symbol">b:</span>0<span class="hljs-symbol">e:</span><br>         <span class="hljs-symbol">b0:</span>1<span class="hljs-symbol">e:</span><span class="hljs-number">82</span><span class="hljs-symbol">:b6</span><span class="hljs-symbol">:</span>2<span class="hljs-symbol">c:</span>4<span class="hljs-symbol">c:</span><span class="hljs-symbol">b0:</span><span class="hljs-symbol">f8:</span><span class="hljs-symbol">eb:</span><span class="hljs-number">93</span><span class="hljs-symbol">:</span><span class="hljs-number">20</span><span class="hljs-symbol">:</span><span class="hljs-number">84</span><span class="hljs-symbol">:</span>8<span class="hljs-symbol">c:</span><span class="hljs-symbol">c6:</span><span class="hljs-number">32</span><span class="hljs-symbol">:</span><span class="hljs-number">69</span><span class="hljs-symbol">:b3</span><span class="hljs-symbol">:</span><span class="hljs-number">88</span>:<br>         <span class="hljs-number">27</span><span class="hljs-symbol">:bb</span><span class="hljs-symbol">:e8</span><span class="hljs-symbol">:</span>7<span class="hljs-symbol">f:</span>1<span class="hljs-symbol">c:</span><span class="hljs-number">37</span><span class="hljs-symbol">:</span><span class="hljs-number">01</span><span class="hljs-symbol">:</span><span class="hljs-number">26</span><span class="hljs-symbol">:</span><span class="hljs-number">35</span><span class="hljs-symbol">:</span>0<span class="hljs-symbol">b:</span>9<span class="hljs-symbol">a:</span><span class="hljs-number">61</span><span class="hljs-symbol">:bf</span><span class="hljs-symbol">:cc</span><span class="hljs-symbol">:</span><span class="hljs-number">00</span><span class="hljs-symbol">:c7</span><span class="hljs-symbol">:</span><span class="hljs-number">17</span><span class="hljs-symbol">:</span><span class="hljs-number">80</span>:<br>         <span class="hljs-number">61</span><span class="hljs-symbol">:</span><span class="hljs-number">11</span><span class="hljs-symbol">:cb</span><span class="hljs-symbol">:b7</span><span class="hljs-symbol">:</span>4<span class="hljs-symbol">d:</span><span class="hljs-number">66</span><span class="hljs-symbol">:</span><span class="hljs-number">85</span><span class="hljs-symbol">:e6</span><span class="hljs-symbol">:</span><span class="hljs-number">13</span><span class="hljs-symbol">:</span>3<span class="hljs-symbol">e:</span>8<span class="hljs-symbol">c:</span>8<span class="hljs-symbol">e:</span><span class="hljs-symbol">be:</span><span class="hljs-symbol">ec:</span><span class="hljs-number">47</span><span class="hljs-symbol">:d1</span><span class="hljs-symbol">:</span><span class="hljs-number">00</span><span class="hljs-symbol">:</span><span class="hljs-number">85</span>:<br>         <span class="hljs-symbol">cb:</span><span class="hljs-symbol">b1:</span><span class="hljs-symbol">aa:</span><span class="hljs-number">69</span><span class="hljs-symbol">:</span>6<span class="hljs-symbol">a:</span><span class="hljs-number">49</span><span class="hljs-symbol">:</span><span class="hljs-number">35</span><span class="hljs-symbol">:</span><span class="hljs-number">44</span><span class="hljs-symbol">:</span><span class="hljs-number">43</span><span class="hljs-symbol">:d9</span><span class="hljs-symbol">:cf</span><span class="hljs-symbol">:</span><span class="hljs-number">67</span><span class="hljs-symbol">:fd</span><span class="hljs-symbol">:ec</span><span class="hljs-symbol">:</span><span class="hljs-number">63</span><span class="hljs-symbol">:</span><span class="hljs-number">50</span><span class="hljs-symbol">:</span><span class="hljs-number">96</span><span class="hljs-symbol">:</span>4<span class="hljs-symbol">a:</span><br>         <span class="hljs-number">26</span><span class="hljs-symbol">:</span>5<span class="hljs-symbol">b:</span><span class="hljs-number">36</span><span class="hljs-symbol">:c8</span><span class="hljs-symbol">:</span><span class="hljs-number">72</span><span class="hljs-symbol">:</span><span class="hljs-number">15</span><span class="hljs-symbol">:d7</span><span class="hljs-symbol">:</span>5<span class="hljs-symbol">f:</span><span class="hljs-number">49</span><span class="hljs-symbol">:e5</span><span class="hljs-symbol">:</span><span class="hljs-number">30</span><span class="hljs-symbol">:</span><span class="hljs-number">98</span><span class="hljs-symbol">:</span>0<span class="hljs-symbol">e:</span><span class="hljs-number">13</span><span class="hljs-symbol">:</span><span class="hljs-number">58</span><span class="hljs-symbol">:</span><span class="hljs-number">70</span><span class="hljs-symbol">:d2</span><span class="hljs-symbol">:</span><span class="hljs-number">72</span>:<br>         <span class="hljs-number">03</span><span class="hljs-symbol">:</span><span class="hljs-number">02</span><span class="hljs-symbol">:</span><span class="hljs-number">45</span><span class="hljs-symbol">:c1</span><span class="hljs-symbol">:</span>9<span class="hljs-symbol">c:</span><span class="hljs-number">81</span><span class="hljs-symbol">:dc</span><span class="hljs-symbol">:e0</span><span class="hljs-symbol">:e1</span><span class="hljs-symbol">:</span>1<span class="hljs-symbol">c:</span><span class="hljs-symbol">f0:</span><span class="hljs-symbol">a4:</span><span class="hljs-symbol">e3:</span><span class="hljs-number">13</span><span class="hljs-symbol">:e1</span><span class="hljs-symbol">:b8</span><span class="hljs-symbol">:d4</span><span class="hljs-symbol">:</span><span class="hljs-number">01</span>:<br>         <span class="hljs-symbol">f7:</span><span class="hljs-number">83</span><span class="hljs-symbol">:d6</span><span class="hljs-symbol">:cf</span><span class="hljs-symbol">:</span><span class="hljs-number">72</span><span class="hljs-symbol">:ba</span><span class="hljs-symbol">:</span><span class="hljs-number">46</span><span class="hljs-symbol">:aa</span><span class="hljs-symbol">:</span><span class="hljs-number">84</span><span class="hljs-symbol">:</span><span class="hljs-number">55</span><span class="hljs-symbol">:</span><span class="hljs-number">57</span><span class="hljs-symbol">:</span><span class="hljs-number">64</span><span class="hljs-symbol">:e6</span><span class="hljs-symbol">:</span><span class="hljs-number">93</span><span class="hljs-symbol">:bb</span><span class="hljs-symbol">:bc</span><span class="hljs-symbol">:</span><span class="hljs-number">68</span><span class="hljs-symbol">:</span><span class="hljs-number">55</span>:<br>         <span class="hljs-number">32</span><span class="hljs-symbol">:cd</span><span class="hljs-symbol">:a4</span><span class="hljs-symbol">:d1</span><span class="hljs-symbol">:d6</span><span class="hljs-symbol">:db</span><span class="hljs-symbol">:e7</span><span class="hljs-symbol">:e6</span><span class="hljs-symbol">:</span>9<span class="hljs-symbol">f:</span>4<span class="hljs-symbol">f:</span>1<span class="hljs-symbol">e:</span>8<span class="hljs-symbol">a:</span><span class="hljs-number">24</span><span class="hljs-symbol">:</span><span class="hljs-number">44</span><span class="hljs-symbol">:</span><span class="hljs-number">76</span><span class="hljs-symbol">:</span><span class="hljs-number">42</span><span class="hljs-symbol">:ec</span><span class="hljs-symbol">:</span>9<span class="hljs-symbol">d:</span><br>         4<span class="hljs-symbol">e:</span><span class="hljs-symbol">d2:</span>5<span class="hljs-symbol">a:</span>7<span class="hljs-symbol">f:</span><span class="hljs-number">74</span><span class="hljs-symbol">:</span>7<span class="hljs-symbol">b:</span>9<span class="hljs-symbol">a:</span><span class="hljs-number">66</span><span class="hljs-symbol">:ed</span><span class="hljs-symbol">:c3</span><span class="hljs-symbol">:</span>1<span class="hljs-symbol">d:</span><span class="hljs-symbol">e4:</span>5<span class="hljs-symbol">d:</span>1<span class="hljs-symbol">a:</span><span class="hljs-number">07</span><span class="hljs-symbol">:ed</span><span class="hljs-symbol">:c6</span><span class="hljs-symbol">:fe</span>:<br>         <span class="hljs-symbol">bf:</span>8<span class="hljs-symbol">e:</span><span class="hljs-symbol">d2:</span><span class="hljs-number">80</span><br></code></pre></td></tr></table></figure><ul><li><p>表示服务器端证书</p><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs autohotkey"><span class="hljs-title">X509v3 Extended Key Usage:</span> <br>    TLS Web Server Authentication<br><span class="hljs-title">X509v3 Basic Constraints:</span> <span class="hljs-keyword">critical</span><br><span class="hljs-title">    CA:</span><span class="hljs-literal">FALSE</span><br></code></pre></td></tr></table></figure></li><li><p>表示客户端证书</p><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs autohotkey"><span class="hljs-title">X509v3 Extended Key Usage:</span> <br>TLS Web Client Authentication<br><span class="hljs-title">X509v3 Basic Constraints:</span> <span class="hljs-keyword">critical</span><br><span class="hljs-title">CA:</span><span class="hljs-literal">FALSE</span><br></code></pre></td></tr></table></figure></li><li><p>表示双向证书</p><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mathematica"><span class="hljs-variable">X509v3</span> <span class="hljs-variable">Extended</span> <span class="hljs-built_in">Key</span> <span class="hljs-variable">Usage</span><span class="hljs-operator">:</span> <br>    <span class="hljs-variable">TLS</span> <span class="hljs-variable">Web</span> <span class="hljs-variable">Server</span> <span class="hljs-built_in">Authentication</span><span class="hljs-operator">,</span> <span class="hljs-variable">TLS</span> <span class="hljs-variable">Web</span> <span class="hljs-variable">Client</span> <span class="hljs-built_in">Authentication</span><br><span class="hljs-variable">X509v3</span> <span class="hljs-variable">Basic</span> <span class="hljs-variable">Constraints</span><span class="hljs-operator">:</span> <span class="hljs-variable">critical</span><br>    <span class="hljs-variable">CA</span><span class="hljs-operator">:</span><span class="hljs-variable">FALSE</span><br></code></pre></td></tr></table></figure></li><li><p>表示CA证书</p><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mathematica"><span class="hljs-variable">X509v3</span> <span class="hljs-built_in">Key</span> <span class="hljs-variable">Usage</span><span class="hljs-operator">:</span> <span class="hljs-variable">critical</span><br>    <span class="hljs-variable">Certificate</span> <span class="hljs-built_in">Sign</span><span class="hljs-operator">,</span> <span class="hljs-variable">CRL</span> <span class="hljs-built_in">Sign</span><br><span class="hljs-variable">X509v3</span> <span class="hljs-variable">Basic</span> <span class="hljs-variable">Constraints</span><span class="hljs-operator">:</span> <span class="hljs-variable">critical</span><br>    <span class="hljs-variable">CA</span><span class="hljs-operator">:</span><span class="hljs-variable">TRUE</span><span class="hljs-operator">,</span> <span class="hljs-variable">pathlen</span><span class="hljs-operator">:</span><span class="hljs-number">2</span><br></code></pre></td></tr></table></figure></li><li><p>颁发机构信息：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">Issuer: <span class="hljs-attribute">C</span>=CN, <span class="hljs-attribute">ST</span>=Chongqing, <span class="hljs-attribute">L</span>=Chongqing, <span class="hljs-attribute">CN</span>=yedong-test<br></code></pre></td></tr></table></figure></li><li><p>使用者信息：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">Subject: <span class="hljs-attribute">C</span>=CN, <span class="hljs-attribute">ST</span>=Chongqing, <span class="hljs-attribute">L</span>=Chongqing, <span class="hljs-attribute">CN</span>=Server<br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Kubernetes之ServiceAccount</title>
    <link href="/2019/08/26/Kubernetes-ServiceAccount/"/>
    <url>/2019/08/26/Kubernetes-ServiceAccount/</url>
    
    <content type="html"><![CDATA[<h3 id="ServiceAccount"><a href="#ServiceAccount" class="headerlink" title="ServiceAccount"></a>ServiceAccount</h3><blockquote><p>Service Account为Pod中的进程提供身份信息。<br>当用户访问集群（例如使用kubectl命令）时，<code>apiserver</code>会将用户认证为一个特定的<code>User Account</code>（目前通常是admin，除非系统管理员自定义了集群配置）。Pod 容器中的进程也可以与<code>apiserver</code>联系，当它们在联系<code>apiserver</code>的时候，它们会被认证为一个特定的<code>Service Account</code>（例如default）。</p></blockquote><blockquote><ul><li><code>User account</code>是为人设计的，而<code>service account</code>则是为Pod中的进程调用Kubernetes API而设计；</li></ul></blockquote><ul><li><code>User account</code>是跨namespace的，而<code>service account</code>则是仅局限它所在的namespace；</li><li>每个<code>namespace</code>都会自动创建一个<code>default</code> <code>service account</code></li><li><code>Token controller</code>检测service account的创建，并为它们创建secret</li><li>开启<code>ServiceAccount Admission Controller</code>后<ul><li>每个Pod在创建后都会自动设置<code>spec.serviceAccount</code>为<code>default</code>（除非指定了其他ServiceAccout）</li><li>验证Pod引用的service account已经存在，否则拒绝创建</li><li>如果Pod没有指定<code>ImagePullSecrets</code>，则把service account的<code>ImagePullSecrets</code>加到Pod中</li><li>每个<code>container</code>启动后都会挂载该<code>Service Account</code>的<code>token</code>和<code>ca.crt</code><br>到<code>/var/run/secrets/kubernetes.io/serviceaccount/</code></li></ul></li></ul><h3 id="使用默认的-Service-Account-访问-API-server"><a href="#使用默认的-Service-Account-访问-API-server" class="headerlink" title="使用默认的 Service Account 访问 API server"></a>使用默认的 Service Account 访问 API server</h3><blockquote><p>当创建 pod 的时候，如果没有指定一个 service account，系统会自动得在与该pod 相同的 namespace 下为其指派一个default service account。如果获取刚创建的 pod 的原始 json 或 yaml 信息（例如使用kubectl get pods podename -o yaml命令），将看到spec.serviceAccountName字段已经被设置为 default。</p></blockquote><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs x86asm">[root@k8s-master ~]# kubectl get pods<br>NAME                     READY     STATUS    RESTARTS   AGE<br>filebeat-<span class="hljs-built_in">ds</span>-hxgdx        <span class="hljs-number">1</span>/<span class="hljs-number">1</span>       Running   <span class="hljs-number">1</span>          <span class="hljs-number">34d</span><br>filebeat-<span class="hljs-built_in">ds</span>-s466l        <span class="hljs-number">1</span>/<span class="hljs-number">1</span>       Running   <span class="hljs-number">2</span>          <span class="hljs-number">34d</span><br>myapp-<span class="hljs-number">0</span>                  <span class="hljs-number">1</span>/<span class="hljs-number">1</span>       Running   <span class="hljs-number">0</span>          <span class="hljs-number">3h</span><br>myapp-<span class="hljs-number">1</span>                  <span class="hljs-number">1</span>/<span class="hljs-number">1</span>       Running   <span class="hljs-number">0</span>          <span class="hljs-number">3h</span><br>myapp-<span class="hljs-number">2</span>                  <span class="hljs-number">1</span>/<span class="hljs-number">1</span>       Running   <span class="hljs-number">0</span>          <span class="hljs-number">4h</span><br>myapp-<span class="hljs-number">3</span>                  <span class="hljs-number">1</span>/<span class="hljs-number">1</span>       Running   <span class="hljs-number">0</span>          <span class="hljs-number">4h</span><br>pod-vol-demo             <span class="hljs-number">2</span>/<span class="hljs-number">2</span>       Running   <span class="hljs-number">0</span>          <span class="hljs-number">2d</span><br>redis-5b5d6fbbbd-q8ppz   <span class="hljs-number">1</span>/<span class="hljs-number">1</span>       Running   <span class="hljs-number">1</span>          <span class="hljs-number">2d</span><br></code></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs yaml">[<span class="hljs-string">root@k8s-master</span> <span class="hljs-string">~</span>]<span class="hljs-comment"># kubectl get pods/myapp-0 -o yaml |grep &quot;serviceAccountName&quot;</span><br>  <span class="hljs-attr">serviceAccountName:</span> <span class="hljs-string">default</span><br><br>[<span class="hljs-string">root@k8s-master</span> <span class="hljs-string">~</span>]<span class="hljs-comment"># kubectl describe pods myapp-0</span><br><span class="hljs-attr">Name:</span>               <span class="hljs-string">myapp-0</span><br><span class="hljs-attr">Namespace:</span>          <span class="hljs-string">default</span><br><span class="hljs-string">......</span><br><span class="hljs-attr">Volumes:</span><br>  <span class="hljs-string">......</span><br>  <span class="hljs-attr">default-token-j5pf5:</span><br>    <span class="hljs-attr">Type:</span>        <span class="hljs-string">Secret</span> <span class="hljs-string">(a</span> <span class="hljs-string">volume</span> <span class="hljs-string">populated</span> <span class="hljs-string">by</span> <span class="hljs-string">a</span> <span class="hljs-string">Secret)</span><br>    <span class="hljs-attr">SecretName:</span>  <span class="hljs-string">default-token-j5pf5</span><br>    <span class="hljs-attr">Optional:</span>    <span class="hljs-literal">false</span><br></code></pre></td></tr></table></figure><blockquote><p>从上面可以看到每个Pod无论定义与否都会有个存储卷，这个存储卷为default-token-*** token令牌，这就是service account是为Pod中的进程与apiserver联系提供身份认证信息。通过secret进行定义，由于认证信息属于敏感信息，所以需要保存在secret资源当中，并以存储卷的方式挂载到Pod当中。从而让Pod内运行的应用通过对应的secret中的service account来连接apiserver，并完成认证。每个 namespace 中都有一个默认的叫做 default 的 service account资源。可以使用kubectl get secret命令当前名称空间内的secret，也可以看到对应的default-token。可以使用的预制认证信息让当前名称空间中所有的pod连接至apiserver，从而保证pod与apiserver之间的通信。</p></blockquote><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs autoit">[root<span class="hljs-symbol">@k8s</span>-master ~]<span class="hljs-meta"># kubectl get sa</span><br>NAME      SECRETS   AGE<br><span class="hljs-literal">default</span>    <span class="hljs-number">1</span>         <span class="hljs-number">50</span>d<br></code></pre></td></tr></table></figure><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">[root@k8s-<span class="hljs-keyword">master</span> <span class="hljs-title">~]# kubectl</span> get sa -n ingress-nginx  <span class="hljs-comment">#前期创建的ingress-nginx名称空间也存在这样的serviceaccount</span><br>NAME                           SECRETS   AGE<br>default                        <span class="hljs-number">1</span>         <span class="hljs-number">11</span>d<br>nginx-ingress-serviceaccount   <span class="hljs-number">1</span>         <span class="hljs-number">11</span>d<br></code></pre></td></tr></table></figure><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">[root@k8s-master ~]# kubectl <span class="hljs-keyword">get</span> secret<br><span class="hljs-type">NAME</span>                    <span class="hljs-keyword">TYPE</span>                                  DATA      AGE<br><span class="hljs-keyword">default</span>-token-j5pf5     kubernetes.io/service-account-token   <span class="hljs-number">3</span>         <span class="hljs-number">50</span>d<br>mysecret                <span class="hljs-type">Opaque</span>                                <span class="hljs-number">2</span>         <span class="hljs-number">1</span>d<br>tomcat-ingress-secret   kubernetes.io/tls                     <span class="hljs-number">2</span>         <span class="hljs-number">10</span>d<br></code></pre></td></tr></table></figure><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs stata">[root@k8s-master ~]# kubectl get secret -<span class="hljs-keyword">n</span> ingress-nginx<br>NAME                                       <span class="hljs-keyword">TYPE</span>                                  DATA      AGE<br>default-<span class="hljs-keyword">token</span>-zl49j                        kubernetes.io/service-account-<span class="hljs-keyword">token</span>   3         11d<br>nginx-ingress-serviceaccount-<span class="hljs-keyword">token</span>-mcsf4   kubernetes.io/service-account-<span class="hljs-keyword">token</span>   3         11d<br></code></pre></td></tr></table></figure><blockquote><p>而默认的service account 仅仅只能获取当前Pod自身的相关属性，无法观察到其他名称空间Pod的相关属性信息。如果想要扩展Pod，假设有一个Pod需要用于管理其他Pod或者是其他资源对象(例如dashboard)，是无法通过自身的名称空间的default service account进行获取其他Pod的相关属性信息的，此时就需要进行手动创建一个serviceaccount，并在创建Pod时进行定义。那么serviceaccount该如何进行定义呢？？？实际上，service accout也属于一个k8s资源，如下查看service account的定义方式：</p></blockquote><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs n1ql">[root@k8s-master ~]# kubectl <span class="hljs-keyword">explain</span> sa<br>KIND:     ServiceAccount<br>VERSION:  v1<br><br>DESCRIPTION:<br>     ServiceAccount binds together: * a name, understood <span class="hljs-keyword">by</span> users, <span class="hljs-keyword">and</span> perhaps<br>     <span class="hljs-keyword">by</span> peripheral systems, <span class="hljs-keyword">for</span> an identity * a principal that can be<br>     authenticated <span class="hljs-keyword">and</span> authorized * a <span class="hljs-keyword">set</span> of secrets<br><br>FIELDS:<br>   apiVersion    &lt;<span class="hljs-keyword">string</span>&gt;<br>     APIVersion defines the versioned <span class="hljs-keyword">schema</span> of this representation of an<br>     <span class="hljs-keyword">object</span>. Servers should convert recognized schemas <span class="hljs-keyword">to</span> the latest internal<br>     <span class="hljs-keyword">value</span>, <span class="hljs-keyword">and</span> may reject unrecognized <span class="hljs-keyword">values</span>. More info:<br>     https://git.k8s.io/community/contributors/devel/api-conventions.md#resources<br><br>   automountServiceAccountToken    &lt;<span class="hljs-keyword">boolean</span>&gt;<br>     AutomountServiceAccountToken indicates whether pods running <span class="hljs-keyword">as</span> this service<br>     account should have an API token automatically mounted. Can be overridden<br>     at the pod level.<br><br>   imagePullSecrets    &lt;[]<span class="hljs-keyword">Object</span>&gt;<br>     ImagePullSecrets <span class="hljs-keyword">is</span> a list of references <span class="hljs-keyword">to</span> secrets <span class="hljs-keyword">in</span> the same <span class="hljs-keyword">namespace</span><br>     <span class="hljs-keyword">to</span> <span class="hljs-keyword">use</span> <span class="hljs-keyword">for</span> pulling <span class="hljs-keyword">any</span> images <span class="hljs-keyword">in</span> pods that reference this ServiceAccount.<br>     ImagePullSecrets are <span class="hljs-keyword">distinct</span> <span class="hljs-keyword">from</span> Secrets because Secrets can be mounted<br>     <span class="hljs-keyword">in</span> the pod, but ImagePullSecrets are only accessed <span class="hljs-keyword">by</span> the kubelet. More<br>     info:<br>     https://kubernetes.io/docs/concepts/containers/images/#specifying-imagepullsecrets-<span class="hljs-keyword">on</span>-a-pod<br><br>   kind    &lt;<span class="hljs-keyword">string</span>&gt;<br>     Kind <span class="hljs-keyword">is</span> a <span class="hljs-keyword">string</span> <span class="hljs-keyword">value</span> representing the REST resource this <span class="hljs-keyword">object</span><br>     represents. Servers may <span class="hljs-keyword">infer</span> this <span class="hljs-keyword">from</span> the endpoint the client submits<br>     requests <span class="hljs-keyword">to</span>. Cannot be updated. <span class="hljs-keyword">In</span> CamelCase. More info:<br>     https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds<br><br>   metadata    &lt;<span class="hljs-keyword">Object</span>&gt;<br>     Standard <span class="hljs-keyword">object</span><span class="hljs-string">&#x27;s metadata. More info:</span><br><span class="hljs-string">     https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata</span><br><span class="hljs-string"></span><br><span class="hljs-string">   secrets    &lt;[]Object&gt;</span><br><span class="hljs-string">     Secrets is the list of secrets allowed to be used by pods running using</span><br><span class="hljs-string">     this ServiceAccount. More info:</span><br><span class="hljs-string">     https://kubernetes.io/docs/concepts/configuration/secret</span><br></code></pre></td></tr></table></figure><h3 id="service-account的创建"><a href="#service-account的创建" class="headerlink" title="service account的创建"></a>service account的创建</h3><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs dts">[root@master<span class="hljs-number">-1</span> app]<span class="hljs-meta"># vim serviceaccount.yaml </span><br><span class="hljs-symbol">apiVersion:</span> v1<br><span class="hljs-symbol">kind:</span> ServiceAccount<br><span class="hljs-symbol">metadata:</span><br><span class="hljs-symbol">  name:</span> admin<br><span class="hljs-symbol">  namespace:</span> default<br></code></pre></td></tr></table></figure><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs autoit">[root<span class="hljs-symbol">@master</span><span class="hljs-number">-1</span> app]<span class="hljs-meta"># kubectl apply -f serviceaccount.yaml </span><br>serviceaccount/admin created<br></code></pre></td></tr></table></figure><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">[root@master<span class="hljs-number">-1</span> app]# kubectl <span class="hljs-keyword">get</span> sa<br><span class="hljs-type">NAME</span>              SECRETS   AGE<br><span class="hljs-keyword">admin</span>             <span class="hljs-number">1</span>         <span class="hljs-number">31</span>s<br><span class="hljs-keyword">default</span>           <span class="hljs-number">1</span>         <span class="hljs-number">20</span>d<br>nfs-provisioner   <span class="hljs-number">1</span>         <span class="hljs-number">18</span>d<br></code></pre></td></tr></table></figure><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs stata">[root@master-1 <span class="hljs-keyword">app</span>]# kubectl get secret<br>NAME                          <span class="hljs-keyword">TYPE</span>                                  DATA   AGE<br>admin-<span class="hljs-keyword">token</span>-j7n8j             kubernetes.io/service-account-<span class="hljs-keyword">token</span>   3      27m<br>default-<span class="hljs-keyword">token</span>-zmv4x           kubernetes.io/service-account-<span class="hljs-keyword">token</span>   3      20d<br>mysecret                      Opaque                                2      19d<br>nfs-provisioner-<span class="hljs-keyword">token</span>-xjn7p   kubernetes.io/service-account-<span class="hljs-keyword">token</span>   3      18d<br></code></pre></td></tr></table></figure><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs dts">[root@master<span class="hljs-number">-1</span> app]<span class="hljs-meta"># kubectl get sa admin -o yaml</span><br><span class="hljs-symbol">apiVersion:</span> v1<br><span class="hljs-symbol">kind:</span> ServiceAccount<br><span class="hljs-symbol">metadata:</span><br><span class="hljs-symbol">  annotations:</span><br>    kubectl.kubernetes.io/last-applied-configuration: |<br>      <span class="hljs-punctuation">&#123;</span><span class="hljs-string">&quot;apiVersion&quot;</span>:<span class="hljs-string">&quot;v1&quot;</span>,<span class="hljs-string">&quot;kind&quot;</span>:<span class="hljs-string">&quot;ServiceAccount&quot;</span>,<span class="hljs-string">&quot;metadata&quot;</span>:<span class="hljs-punctuation">&#123;</span><span class="hljs-string">&quot;annotations&quot;</span>:<span class="hljs-punctuation">&#123;</span><span class="hljs-punctuation">&#125;</span>,<span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;admin&quot;</span>,<span class="hljs-string">&quot;namespace&quot;</span>:<span class="hljs-string">&quot;default&quot;</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">&#125;</span><br><span class="hljs-symbol">  creationTimestamp:</span> <span class="hljs-string">&quot;2019-02-12T03:07:07Z&quot;</span><br><span class="hljs-symbol">  name:</span> admin<br><span class="hljs-symbol">  namespace:</span> default<br><span class="hljs-symbol">  resourceVersion:</span> <span class="hljs-string">&quot;2606053&quot;</span><br><span class="hljs-symbol">  selfLink:</span> <span class="hljs-keyword">/api/</span>v1<span class="hljs-keyword">/namespaces/</span>default<span class="hljs-keyword">/serviceaccounts/</span>admin<br><span class="hljs-symbol">  uid:</span> <span class="hljs-number">48250903</span><span class="hljs-number">-2e73</span><span class="hljs-number">-11e9</span>-a8c7-d8490b8af3ae<br><span class="hljs-symbol">secrets:</span><br>- name: admin-token-j7n8j<br></code></pre></td></tr></table></figure><blockquote><p>看到有一个 token 已经被自动创建，只需要在 pod 的spec.serviceAccountName 字段中将name设置为您想要用的 service account 名字即可。在 pod 创建之初 service account 就必须已经存在，否则创建将被拒绝。需要注意的是不能更新已创建的 pod 的 service account。</p></blockquote><h3 id="serviceaccount的自定义使用"><a href="#serviceaccount的自定义使用" class="headerlink" title="serviceaccount的自定义使用"></a>serviceaccount的自定义使用</h3><blockquote><p>这里在default名称空间创建了一个serviceaccount为admin，可以看到已经自动生成了一个Tokens：admin-token-j7n8j，下面展示如何使用自定义的serviceaccount</p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs yaml">[<span class="hljs-string">root@master-1</span> <span class="hljs-string">app</span>]<span class="hljs-comment"># vim pod-sa-demo.yaml</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Pod</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">pod-sa-demo</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">default</span><br>  <span class="hljs-attr">labels:</span><br>    <span class="hljs-attr">app:</span> <span class="hljs-string">myapp</span><br>    <span class="hljs-attr">tier:</span> <span class="hljs-string">frontend</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">containers:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">myapp</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">ikubernetes/myapp:v1</span><br>    <span class="hljs-attr">ports:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">http</span><br>      <span class="hljs-attr">containerPort:</span> <span class="hljs-number">80</span><br>  <span class="hljs-attr">serviceAccountName:</span> <span class="hljs-string">admin</span><br></code></pre></td></tr></table></figure><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stata">[root@master-1 <span class="hljs-keyword">app</span>]# kubectl apply -f pod-<span class="hljs-keyword">sa</span>-demo.yaml <br>pod/pod-<span class="hljs-keyword">sa</span>-demo created<br></code></pre></td></tr></table></figure><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc">[root@master-1 app]# kubectl describe pods pod-sa-demo<br><span class="hljs-code">......</span><br><span class="hljs-code">Volumes:</span><br><span class="hljs-code">  admin-token-j7n8j:</span><br><span class="hljs-code">    Type:        Secret (a volume populated by a Secret)</span><br><span class="hljs-code">    SecretName:  admin-token-j7n8j</span><br><span class="hljs-code">    Optional:    false</span><br><span class="hljs-code">......</span><br></code></pre></td></tr></table></figure><h3 id="User-Account的定义及使用："><a href="#User-Account的定义及使用：" class="headerlink" title="User Account的定义及使用："></a>User Account的定义及使用：</h3><blockquote><p>在K8S集群当中，每一个用户对资源的访问都是需要通过apiserver进行通信认证才能进行访问的，那么在此机制当中，对资源的访问可以是token，也可以是通过配置文件的方式进行保存和使用认证信息，kubectl命令行工具使用kubeconfig文件来查找选择群集并与群集的APIserver进行通信。可以通过kubectl config进行查看编辑kubeconfig配置文件，配置文件路径$HOME&#x2F;.kube&#x2F;config文件，eg：&#x2F;root&#x2F;.kube&#x2F;config 如下：</p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs yaml">[<span class="hljs-string">root@k8s-master</span> <span class="hljs-string">mainfests</span>]<span class="hljs-comment"># kubectl config view</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">clusters:</span>  <span class="hljs-comment">#集群列表</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">cluster:</span><br>    <span class="hljs-attr">certificate-authority-data:</span> <span class="hljs-string">REDACTED</span><br>    <span class="hljs-attr">server:</span> <span class="hljs-string">https://192.168.56.11:6443</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">kubernetes</span><br><span class="hljs-attr">contexts:</span>  <span class="hljs-comment">#上下文列表</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">context:</span> <span class="hljs-comment">#定义哪个集群被哪个用户访问</span><br>    <span class="hljs-attr">cluster:</span> <span class="hljs-string">kubernetes</span><br>    <span class="hljs-attr">user:</span> <span class="hljs-string">kubernetes-admin</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">kubernetes-admin@kubernetes</span><br><span class="hljs-attr">current-context:</span> <span class="hljs-string">kubernetes-admin@kubernetes</span>  <span class="hljs-comment">#当前上下文</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Config</span><br><span class="hljs-attr">preferences:</span> &#123;&#125;<br><span class="hljs-attr">users:</span>   <span class="hljs-comment">#用户列表</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">kubernetes-admin</span><br>  <span class="hljs-attr">user:</span><br>    <span class="hljs-attr">client-certificate-data:</span> <span class="hljs-string">REDACTED</span><br>    <span class="hljs-attr">client-key-data:</span> <span class="hljs-string">REDACTED</span><br></code></pre></td></tr></table></figure><blockquote><p>在上面的配置文件当中，定义了集群、上下文以及用户。其中Config也是K8S的标准资源之一，在该配置文件当中定义了一个集群列表，指定的集群可以有多个；用户列表也可以有多个，指明集群中的用户；而在上下文列表当中，是进行定义可以使用哪个用户对哪个集群进行访问，以及当前使用的上下文是什么。如图：定义了用户kubernetes-admin可以对kubernetes该集群的访问，用户kubernetes-user1对Cluster1集群的访问。</p></blockquote><p><img src="/images/serviceaccount-1.png" alt="serviceaccount-1"></p><h3 id="自建证书和账号进行访问apiserver演示"><a href="#自建证书和账号进行访问apiserver演示" class="headerlink" title="自建证书和账号进行访问apiserver演示"></a>自建证书和账号进行访问apiserver演示</h3><h4 id="注意：此步骤在-etc-kubernetes-pki路径下执行，因为需要用到Kubernetes-CA证书。"><a href="#注意：此步骤在-etc-kubernetes-pki路径下执行，因为需要用到Kubernetes-CA证书。" class="headerlink" title="注意：此步骤在/etc/kubernetes/pki路径下执行，因为需要用到Kubernetes CA证书。"></a>注意：此步骤在<code>/etc/kubernetes/pki</code>路径下执行，因为需要用到Kubernetes CA证书。</h4><h4 id="（1）生成证书"><a href="#（1）生成证书" class="headerlink" title="（1）生成证书"></a>（1）生成证书</h4><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs csharp">[<span class="hljs-meta">root@k8s-master pki</span>]<span class="hljs-meta"># (umask 077;openssl genrsa -out magedu.key 2048)</span><br>Generating RSA <span class="hljs-keyword">private</span> key, <span class="hljs-number">2048</span> bit <span class="hljs-built_in">long</span> modulus<br>............................................................................................+++<br>...................................................................................+++<br>e <span class="hljs-keyword">is</span> <span class="hljs-number">65537</span> (<span class="hljs-number">0x10001</span>)<br></code></pre></td></tr></table></figure><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">[root@k8s-<span class="hljs-keyword">master</span> <span class="hljs-title">pki</span>]<span class="hljs-comment"># ll magedu.key </span><br>-rw------- <span class="hljs-number">1</span> root root <span class="hljs-number">1675</span> Oct <span class="hljs-number">12</span> <span class="hljs-number">23</span>:<span class="hljs-number">52</span> magedu.key<br><br></code></pre></td></tr></table></figure><h4 id="（2）使用ca-crt进行签署"><a href="#（2）使用ca-crt进行签署" class="headerlink" title="（2）使用ca.crt进行签署"></a>（2）使用ca.crt进行签署</h4><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">[root@k8s-<span class="hljs-keyword">master</span> <span class="hljs-title">pki</span>]<span class="hljs-comment"># openssl req -new -key magedu.key -out magedu.csr -subj &quot;/CN=magedu&quot;  证书签署请求(CN表示用户名，O表示组)</span><br></code></pre></td></tr></table></figure><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs stata">[root@k8s-master pki]# openssl x509 -req -<span class="hljs-keyword">in</span> magedu.csr -<span class="hljs-keyword">CA</span> ./<span class="hljs-keyword">ca</span>.crt -CAkey ./<span class="hljs-keyword">ca</span>.key -CAcreateserial -<span class="hljs-keyword">out</span> magedu.crt -days 365  #证书签署<br>Signature ok<br>subject=/CN=magedu<br>Getting <span class="hljs-keyword">CA</span> Private Key<br></code></pre></td></tr></table></figure><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">[root@k8s-<span class="hljs-keyword">master</span> <span class="hljs-title">pki</span>]<span class="hljs-comment"># openssl x509 -in magedu.crt -text -noout</span><br></code></pre></td></tr></table></figure><h4 id="（3）添加到用户认证"><a href="#（3）添加到用户认证" class="headerlink" title="（3）添加到用户认证"></a>（3）添加到用户认证</h4><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros">[root@k8s-master pki]# kubectl<span class="hljs-built_in"> config </span>set-credentials magedu <span class="hljs-attribute">--client-certificate</span>=./magedu.crt <span class="hljs-attribute">--client-key</span>=./magedu.key <span class="hljs-attribute">--embed-certs</span>=<span class="hljs-literal">true</span><span class="hljs-built_in"></span><br><span class="hljs-built_in">User </span><span class="hljs-string">&quot;magedu&quot;</span> set.<br></code></pre></td></tr></table></figure><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">[root@k8s-<span class="hljs-keyword">master</span> <span class="hljs-title">pki</span>]<span class="hljs-comment"># kubectl config set-context magedu@kubernetes --cluster=kubernetes --user=magedu</span><br>Context <span class="hljs-string">&quot;magedu@kubernetes&quot;</span> created.<br></code></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs yaml">[<span class="hljs-string">root@k8s-master</span> <span class="hljs-string">pki</span>]<span class="hljs-comment"># kubectl config view</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">clusters:</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">cluster:</span><br>    <span class="hljs-attr">certificate-authority-data:</span> <span class="hljs-string">REDACTED</span><br>    <span class="hljs-attr">server:</span> <span class="hljs-string">https://192.168.56.11:6443</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">kubernetes</span><br><span class="hljs-attr">contexts:</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">context:</span><br>    <span class="hljs-attr">cluster:</span> <span class="hljs-string">kubernetes</span><br>    <span class="hljs-attr">user:</span> <span class="hljs-string">kubernetes-admin</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">kubernetes-admin@kubernetes</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">context:</span><br>    <span class="hljs-attr">cluster:</span> <span class="hljs-string">kubernetes</span><br>    <span class="hljs-attr">user:</span> <span class="hljs-string">magedu</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">magedu@kubernetes</span><br><span class="hljs-attr">current-context:</span> <span class="hljs-string">kubernetes-admin@kubernetes</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Config</span><br><span class="hljs-attr">preferences:</span> &#123;&#125;<br><span class="hljs-attr">users:</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">kubernetes-admin</span><br>  <span class="hljs-attr">user:</span><br>    <span class="hljs-attr">client-certificate-data:</span> <span class="hljs-string">REDACTED</span><br>    <span class="hljs-attr">client-key-data:</span> <span class="hljs-string">REDACTED</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">magedu</span><br>  <span class="hljs-attr">user:</span><br>    <span class="hljs-attr">client-certificate-data:</span> <span class="hljs-string">REDACTED</span><br>    <span class="hljs-attr">client-key-data:</span> <span class="hljs-string">REDACTED</span><br></code></pre></td></tr></table></figure><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">[root@k8s-<span class="hljs-keyword">master</span> <span class="hljs-title">pki</span>]<span class="hljs-comment"># kubectl config use-context magedu@kubernetes</span><br>Switched to context <span class="hljs-string">&quot;magedu@kubernetes&quot;</span>.<br></code></pre></td></tr></table></figure><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs routeros">[root@k8s-master pki]# kubectl <span class="hljs-built_in">get</span> pods<br><span class="hljs-literal">No</span> resources found.<br><span class="hljs-built_in">Error</span> <span class="hljs-keyword">from</span><span class="hljs-built_in"> server </span>(Forbidden): pods is forbidden:<span class="hljs-built_in"> User </span><span class="hljs-string">&quot;magedu&quot;</span> cannot list pods <span class="hljs-keyword">in</span> the namespace <span class="hljs-string">&quot;default&quot;</span><br></code></pre></td></tr></table></figure><h4 id="（4）删除用户"><a href="#（4）删除用户" class="headerlink" title="（4）删除用户"></a>（4）删除用户</h4><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript">[root@k8s-master pki]<span class="hljs-comment">#  kubectl config delete-context yedong@kubernetes</span><br>deleted context yedong@kubernetes <span class="hljs-keyword">from</span> <span class="hljs-regexp">/root/</span>.kube/config<br></code></pre></td></tr></table></figure><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">[root@k8s-<span class="hljs-keyword">master</span> <span class="hljs-title">pki</span>]<span class="hljs-comment"># kubectl config unset users.yedong</span><br><span class="hljs-keyword">Property</span><span class="hljs-title"> </span><span class="hljs-string">&quot;users.yedong&quot;</span> unset.<br></code></pre></td></tr></table></figure><blockquote><p>从上面的演示，当切换成magedu用户进行访问集群时，由于magedu该账户没有管理集群的权限，所以在获取pods资源信息时，会提示Forrbidden。那么下面就再来了解一下怎么对账户进行授权！！！</p></blockquote><h3 id="kubernetes小技巧："><a href="#kubernetes小技巧：" class="headerlink" title="kubernetes小技巧："></a>kubernetes小技巧：</h3><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs n1ql">[root@master-1 pki]# kubectl <span class="hljs-keyword">create</span> --help<br><span class="hljs-keyword">Create</span> a resource <span class="hljs-keyword">from</span> a file <span class="hljs-keyword">or</span> <span class="hljs-keyword">from</span> stdin. <br><br>JSON <span class="hljs-keyword">and</span> YAML formats are accepted.<br><br>Examples:<br>  # <span class="hljs-keyword">Create</span> a pod <span class="hljs-keyword">using</span> the data <span class="hljs-keyword">in</span> pod.json.<br>  kubectl <span class="hljs-keyword">create</span> -f ./pod.json<br>  <br>  # <span class="hljs-keyword">Create</span> a pod based <span class="hljs-keyword">on</span> the JSON passed <span class="hljs-keyword">into</span> stdin.<br>  cat pod.json | kubectl <span class="hljs-keyword">create</span> -f -<br>  <br>  # Edit the data <span class="hljs-keyword">in</span> docker-registry.yaml <span class="hljs-keyword">in</span> JSON <span class="hljs-keyword">then</span> <span class="hljs-keyword">create</span> the resource <span class="hljs-keyword">using</span> the edited data.<br>  kubectl <span class="hljs-keyword">create</span> -f docker-registry.yaml --edit -o json<br><br>Available Commands:<br>  clusterrole         <span class="hljs-keyword">Create</span> a ClusterRole.<br>  clusterrolebinding  <span class="hljs-keyword">Create</span> a ClusterRoleBinding <span class="hljs-keyword">for</span> a particular ClusterRole<br>  configmap           <span class="hljs-keyword">Create</span> a configmap <span class="hljs-keyword">from</span> a local file, directory <span class="hljs-keyword">or</span> literal <span class="hljs-keyword">value</span><br>  deployment          <span class="hljs-keyword">Create</span> a deployment <span class="hljs-keyword">with</span> the specified name.<br>  job                 <span class="hljs-keyword">Create</span> a job <span class="hljs-keyword">with</span> the specified name.<br>  <span class="hljs-keyword">namespace</span>           <span class="hljs-keyword">Create</span> a <span class="hljs-keyword">namespace</span> <span class="hljs-keyword">with</span> the specified name<br>  poddisruptionbudget <span class="hljs-keyword">Create</span> a pod disruption budget <span class="hljs-keyword">with</span> the specified name.<br>  priorityclass       <span class="hljs-keyword">Create</span> a priorityclass <span class="hljs-keyword">with</span> the specified name.<br>  quota               <span class="hljs-keyword">Create</span> a quota <span class="hljs-keyword">with</span> the specified name.<br>  <span class="hljs-keyword">role</span>                <span class="hljs-keyword">Create</span> a <span class="hljs-keyword">role</span> <span class="hljs-keyword">with</span> single rule.<br>  rolebinding         <span class="hljs-keyword">Create</span> a RoleBinding <span class="hljs-keyword">for</span> a particular <span class="hljs-keyword">Role</span> <span class="hljs-keyword">or</span> ClusterRole<br>  secret              <span class="hljs-keyword">Create</span> a secret <span class="hljs-keyword">using</span> specified subcommand<br>  service             <span class="hljs-keyword">Create</span> a service <span class="hljs-keyword">using</span> specified subcommand.<br>  serviceaccount      <span class="hljs-keyword">Create</span> a service account <span class="hljs-keyword">with</span> the specified name<br><br>Options:<br>      --allow-<span class="hljs-literal">missing</span>-template-<span class="hljs-keyword">keys</span>=<span class="hljs-literal">true</span>: <span class="hljs-keyword">If</span> <span class="hljs-literal">true</span>, <span class="hljs-keyword">ignore</span> <span class="hljs-keyword">any</span> errors <span class="hljs-keyword">in</span> templates <span class="hljs-keyword">when</span> a field <span class="hljs-keyword">or</span> <span class="hljs-keyword">map</span> <span class="hljs-keyword">key</span> <span class="hljs-keyword">is</span> <span class="hljs-literal">missing</span> <span class="hljs-keyword">in</span><br>the template. Only applies <span class="hljs-keyword">to</span> golang <span class="hljs-keyword">and</span> jsonpath output formats.<br>      --dry-run=<span class="hljs-literal">false</span>: <span class="hljs-keyword">If</span> <span class="hljs-literal">true</span>, only print the <span class="hljs-keyword">object</span> that would be sent, without sending it.<br>      --edit=<span class="hljs-literal">false</span>: Edit the API resource before creating<br>  -f, --filename=[]: Filename, directory, <span class="hljs-keyword">or</span> URL <span class="hljs-keyword">to</span> files <span class="hljs-keyword">to</span> <span class="hljs-keyword">use</span> <span class="hljs-keyword">to</span> <span class="hljs-keyword">create</span> the resource<br>  -o, --output=<span class="hljs-string">&#x27;&#x27;</span>: Output format. One of:<br>json|yaml|name|go-template|go-template-file|template|templatefile|jsonpath|jsonpath-file.<br>      --<span class="hljs-keyword">raw</span>=<span class="hljs-string">&#x27;&#x27;</span>: <span class="hljs-keyword">Raw</span> URI <span class="hljs-keyword">to</span> POST <span class="hljs-keyword">to</span> the server.  Uses the transport specified <span class="hljs-keyword">by</span> the kubeconfig file.<br>      --record=<span class="hljs-literal">false</span>: Record current kubectl command <span class="hljs-keyword">in</span> the resource annotation. <span class="hljs-keyword">If</span> <span class="hljs-keyword">set</span> <span class="hljs-keyword">to</span> <span class="hljs-literal">false</span>, <span class="hljs-keyword">do</span> <span class="hljs-keyword">not</span> record the<br>command. <span class="hljs-keyword">If</span> <span class="hljs-keyword">set</span> <span class="hljs-keyword">to</span> <span class="hljs-literal">true</span>, record the command. <span class="hljs-keyword">If</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">set</span>, default <span class="hljs-keyword">to</span> updating the existing annotation <span class="hljs-keyword">value</span> only <span class="hljs-keyword">if</span> one<br>already <span class="hljs-keyword">exists</span>.<br>  -R, --recursive=<span class="hljs-literal">false</span>: Process the directory used <span class="hljs-keyword">in</span> -f, --filename recursively. Useful <span class="hljs-keyword">when</span> you want <span class="hljs-keyword">to</span> manage<br>related manifests organized <span class="hljs-keyword">within</span> the same directory.<br>      --save-config=<span class="hljs-literal">false</span>: <span class="hljs-keyword">If</span> <span class="hljs-literal">true</span>, the configuration of current <span class="hljs-keyword">object</span> will be saved <span class="hljs-keyword">in</span> its annotation. Otherwise, the<br>annotation will be unchanged. This flag <span class="hljs-keyword">is</span> useful <span class="hljs-keyword">when</span> you want <span class="hljs-keyword">to</span> perform kubectl apply <span class="hljs-keyword">on</span> this <span class="hljs-keyword">object</span> <span class="hljs-keyword">in</span> the future.<br>  -l, --selector=<span class="hljs-string">&#x27;&#x27;</span>: Selector (label query) <span class="hljs-keyword">to</span> filter <span class="hljs-keyword">on</span>, supports <span class="hljs-string">&#x27;=&#x27;</span>, <span class="hljs-string">&#x27;==&#x27;</span>, <span class="hljs-keyword">and</span> <span class="hljs-string">&#x27;!=&#x27;</span>.(<span class="hljs-built_in">e</span>.g. -l key1=value1,key2=value2)<br>      --template=<span class="hljs-string">&#x27;&#x27;</span>: Template <span class="hljs-keyword">string</span> <span class="hljs-keyword">or</span> <span class="hljs-keyword">path</span> <span class="hljs-keyword">to</span> template file <span class="hljs-keyword">to</span> <span class="hljs-keyword">use</span> <span class="hljs-keyword">when</span> -o=go-template, -o=go-template-file. The<br>template format <span class="hljs-keyword">is</span> golang templates [http://golang.org/pkg/text/template/#pkg-overview].<br>      --<span class="hljs-keyword">validate</span>=<span class="hljs-literal">true</span>: <span class="hljs-keyword">If</span> <span class="hljs-literal">true</span>, <span class="hljs-keyword">use</span> a <span class="hljs-keyword">schema</span> <span class="hljs-keyword">to</span> <span class="hljs-keyword">validate</span> the input before sending it<br>      --windows-line-endings=<span class="hljs-literal">false</span>: Only relevant <span class="hljs-keyword">if</span> --edit=<span class="hljs-literal">true</span>. Defaults <span class="hljs-keyword">to</span> the line ending native <span class="hljs-keyword">to</span> your platform.<br><br>Usage:<br>  kubectl <span class="hljs-keyword">create</span> -f FILENAME [options]<br><br><span class="hljs-keyword">Use</span> <span class="hljs-string">&quot;kubectl &lt;command&gt; --help&quot;</span> <span class="hljs-keyword">for</span> more information about a given command.<br><span class="hljs-keyword">Use</span> <span class="hljs-string">&quot;kubectl options&quot;</span> <span class="hljs-keyword">for</span> a list of global command-line options (applies <span class="hljs-keyword">to</span> <span class="hljs-keyword">all</span> commands).<br></code></pre></td></tr></table></figure><blockquote><p>注释：只要支持用kubectl create创建的资源都可以用 <code>--dry-run</code>（单跑模式）并不会真正的执行，只会测试是否能创建成功，可以使用 -o yaml 导出配置文件非常方便。</p></blockquote>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Kubernetes之statefulset控制器</title>
    <link href="/2019/08/26/Kubernetes-statefulset/"/>
    <url>/2019/08/26/Kubernetes-statefulset/</url>
    
    <content type="html"><![CDATA[<h3 id="一、statefulset简介"><a href="#一、statefulset简介" class="headerlink" title="一、statefulset简介"></a>一、statefulset简介</h3><blockquote><p>从前面的学习我们知道使用Deployment创建的pod是无状态的，当挂载了Volume之后，如果使用“kubectl delete -f”删除了Deployment资源后，在使用“kubectl apply -f” 新创建的Pod无法在挂载到以前的Volume上。为了解决这一问题，就引入了StatefulSet用于保留Pod的状态信息。</p></blockquote><blockquote><h4 id="StatefulSet是为了解决有状态服务的问题（对应Deployments和ReplicaSets是为无状态服务而设计），其应用场景包括："><a href="#StatefulSet是为了解决有状态服务的问题（对应Deployments和ReplicaSets是为无状态服务而设计），其应用场景包括：" class="headerlink" title="StatefulSet是为了解决有状态服务的问题（对应Deployments和ReplicaSets是为无状态服务而设计），其应用场景包括："></a>StatefulSet是为了解决有状态服务的问题（对应Deployments和ReplicaSets是为无状态服务而设计），其应用场景包括：</h4></blockquote><ul><li>1、稳定的持久化存储，即Pod重新调度后还是能访问到相同的持久化数据，基于PVC来实现</li><li>2、稳定的网络标志，即Pod重新调度后其PodName和HostName不变，基于Headless Service（即没有Cluster IP的Service）来实现</li><li>3、有序部署，有序扩展，即Pod是有顺序的，在部署或者扩展的时候要依据定义的顺序依次依次进行（即从0到N-1，在下一个Pod运行之前所有之前的Pod必须都是Running和Ready状态），基于init containers来实现</li><li>4、有序收缩，有序删除（即从N-1到0）</li><li>5、有序的滚动更新</li></ul><blockquote><h4 id="从上面的应用场景可以发现，StatefulSet由以下几个部分组成："><a href="#从上面的应用场景可以发现，StatefulSet由以下几个部分组成：" class="headerlink" title="从上面的应用场景可以发现，StatefulSet由以下几个部分组成："></a>从上面的应用场景可以发现，StatefulSet由以下几个部分组成：</h4></blockquote><ul><li>用于定义网络标志（DNS domain）的Headless Service（无头服务）</li><li>用于创建PersistentVolumes的volumeClaimTemplates （存储卷申请模板）</li><li>定义具体应用的StatefulSet</li></ul><h3 id="二、为什么要有headless？？"><a href="#二、为什么要有headless？？" class="headerlink" title="二、为什么要有headless？？"></a>二、为什么要有headless？？</h3><blockquote><p>在deployment中，每一个pod是没有名称，是随机字符串，是无序的。而statefulset中是要求有序的，每一个pod的名称必须是固定的。当节点挂了，重建之后的标识符是不变的，每一个节点的节点名称是不能改变的。pod名称是作为pod识别的唯一标识符，必须保证其标识符的稳定并且唯一。<br>为了实现标识符的稳定，这时候就需要一个headless service 解析直达到pod，还需要给pod配置一个唯一的名称。</p></blockquote><h3 id="三、为什么要-有volumeClainTemplate？？"><a href="#三、为什么要-有volumeClainTemplate？？" class="headerlink" title="三、为什么要 有volumeClainTemplate？？"></a>三、为什么要 有volumeClainTemplate？？</h3><blockquote><p>大部分有状态副本集都会用到持久存储，比如分布式系统来说，由于数据是不一样的，每个节点都需要自己专用的存储节点。而在deployment中pod模板中创建的存储卷是一个共享的存储卷，多个pod使用同一个存储卷，而statefulset定义中的每一个pod都不能使用同一个存储卷，由此基于pod模板创建pod是不适应的，这就需要引入volumeClainTemplate，当在使用statefulset创建pod时，会自动生成一个PVC，从而请求绑定一个PV，从而有自己专用的存储卷。</p></blockquote><h3 id="四、statefulSet使用演示"><a href="#四、statefulSet使用演示" class="headerlink" title="四、statefulSet使用演示"></a>四、statefulSet使用演示</h3><blockquote><p>在创建StatefulSet之前需要准备的东西，值得注意的是创建顺序非常关键，创建顺序如下：<br>1、Volume<br>2、Persistent Volume<br>3、Persistent Volume Claim<br>4、Service<br>5、StatefulSet<br>Volume可以有很多种类型，比如nfs、glusterfs等，我们这里使用的NFS来创建。</p></blockquote><h4 id="（1）查看statefulset的定义"><a href="#（1）查看statefulset的定义" class="headerlink" title="（1）查看statefulset的定义"></a>（1）查看statefulset的定义</h4><figure class="highlight vbnet"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs vbnet">[root@k8s-master ~]# kubectl explain statefulset<br><span class="hljs-symbol">KIND:</span>     StatefulSet<br><span class="hljs-symbol">VERSION:</span>  apps/v1<br><br><span class="hljs-symbol">DESCRIPTION:</span><br>     StatefulSet represents a <span class="hljs-keyword">set</span> <span class="hljs-keyword">of</span> pods <span class="hljs-keyword">with</span> consistent identities. Identities<br>     are defined <span class="hljs-keyword">as</span>: - Network: A <span class="hljs-type">single</span> stable DNS <span class="hljs-built_in">and</span> hostname. - Storage: <span class="hljs-keyword">As</span><br>     many VolumeClaims <span class="hljs-keyword">as</span> requested. The StatefulSet guarantees that a given<br>     network identity will always map <span class="hljs-keyword">to</span> the same storage identity.<br><br><span class="hljs-symbol">FIELDS:</span><br>   apiVersion   &lt;<span class="hljs-type">string</span>&gt;<br>   kind &lt;<span class="hljs-type">string</span>&gt;<br>   metadata &lt;<span class="hljs-type">Object</span>&gt;<br>   spec &lt;<span class="hljs-type">Object</span>&gt;<br>   status   &lt;<span class="hljs-type">Object</span>&gt;<br><br>[root@k8s-master ~]# kubectl explain statefulset.spec<br><span class="hljs-symbol">KIND:</span>     StatefulSet<br><span class="hljs-symbol">VERSION:</span>  apps/v1<br><br><span class="hljs-symbol">RESOURCE:</span> spec &lt;<span class="hljs-type">Object</span>&gt;<br><br><span class="hljs-symbol">DESCRIPTION:</span><br>     Spec defines the desired identities <span class="hljs-keyword">of</span> pods <span class="hljs-keyword">in</span> this <span class="hljs-keyword">set</span>.<br><br>     A StatefulSetSpec <span class="hljs-built_in">is</span> the specification <span class="hljs-keyword">of</span> a StatefulSet.<br><br><span class="hljs-symbol">FIELDS:</span><br>   podManagementPolicy  &lt;<span class="hljs-type">string</span>&gt;  #Pod管理策略<br>   replicas &lt;<span class="hljs-type">integer</span>&gt;    #副本数量<br>   revisionHistoryLimit &lt;<span class="hljs-type">integer</span>&gt;   #历史版本限制<br>   selector &lt;<span class="hljs-type">Object</span>&gt; -required-    #选择器，必选项<br>   serviceName  &lt;<span class="hljs-type">string</span>&gt; -required-  #服务名称，必选项<br>   template &lt;<span class="hljs-type">Object</span>&gt; -required-    #模板，必选项<br>   updateStrategy   &lt;<span class="hljs-type">Object</span>&gt;       #更新策略<br>   volumeClaimTemplates &lt;[]<span class="hljs-type">Object</span>&gt;   #存储卷申请模板，列表对象形式<br></code></pre></td></tr></table></figure><h4 id="（2）清单定义statefulset"><a href="#（2）清单定义statefulset" class="headerlink" title="（2）清单定义statefulset"></a>（2）清单定义statefulset</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs yaml">[<span class="hljs-string">root@k8s-master</span> <span class="hljs-string">mainfests</span>]<span class="hljs-comment"># vim stateful-demo.yaml</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Service</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">myapp-svc</span><br>  <span class="hljs-attr">labels:</span><br>    <span class="hljs-attr">app:</span> <span class="hljs-string">myapp-svc</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">ports:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">port:</span> <span class="hljs-number">80</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">web</span><br>  <span class="hljs-attr">clusterIP:</span> <span class="hljs-string">None</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">app:</span> <span class="hljs-string">myapp-pod</span><br><span class="hljs-meta">---</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">apps/v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">StatefulSet</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">myapp</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">serviceName:</span> <span class="hljs-string">myapp-svc</span><br>  <span class="hljs-attr">replicas:</span> <span class="hljs-number">3</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">matchLabels:</span><br>      <span class="hljs-attr">app:</span> <span class="hljs-string">myapp-pod</span><br>  <span class="hljs-attr">template:</span><br>    <span class="hljs-attr">metadata:</span><br>      <span class="hljs-attr">labels:</span><br>        <span class="hljs-attr">app:</span> <span class="hljs-string">myapp-pod</span><br>    <span class="hljs-attr">spec:</span><br>      <span class="hljs-attr">containers:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">myapp</span><br>        <span class="hljs-attr">image:</span> <span class="hljs-string">nginx:latest</span><br>        <span class="hljs-attr">imagePullPolicy:</span> <span class="hljs-string">IfNotPresent</span> <br>        <span class="hljs-attr">ports:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">containerPort:</span> <span class="hljs-number">80</span><br>          <span class="hljs-attr">name:</span> <span class="hljs-string">web</span><br>        <span class="hljs-attr">volumeMounts:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">myappdata</span><br>          <span class="hljs-attr">mountPath:</span> <span class="hljs-string">/usr/share/nginx/html</span><br>  <span class="hljs-attr">volumeClaimTemplates:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">metadata:</span><br>      <span class="hljs-attr">name:</span> <span class="hljs-string">myappdata</span><br>    <span class="hljs-attr">spec:</span><br>      <span class="hljs-attr">accessModes:</span> [<span class="hljs-string">&quot;ReadWriteOnce&quot;</span>]<br>      <span class="hljs-attr">resources:</span><br>        <span class="hljs-attr">requests:</span><br>          <span class="hljs-attr">storage:</span> <span class="hljs-string">2Gi</span><br></code></pre></td></tr></table></figure><h4 id="（3）修改pv的大小为2Gi"><a href="#（3）修改pv的大小为2Gi" class="headerlink" title="（3）修改pv的大小为2Gi"></a>（3）修改pv的大小为2Gi</h4><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">[root@k8s-<span class="hljs-keyword">master</span> <span class="hljs-title">~]# cd</span> ma<span class="hljs-literal">inf</span>ests/volumes<br>[root@k8s-<span class="hljs-keyword">master</span> <span class="hljs-title">volumes</span>]<span class="hljs-comment"># vim pv-demo.yaml </span><br>[root@k8s-<span class="hljs-keyword">master</span> <span class="hljs-title">volumes</span>]<span class="hljs-comment"># kubectl apply -f pv-demo.yaml </span><br>persistentvolume/pv001 created<br>persistentvolume/pv002 created<br>persistentvolume/pv003 created<br>persistentvolume/pv004 created<br>persistentvolume/pv005 created<br>[root@k8s-<span class="hljs-keyword">master</span> <span class="hljs-title">volumes</span>]<span class="hljs-comment"># kubectl get pv</span><br>NAME      CAPACITY   ACCESS MODES   RECLAIM POLICY   STATUS      CLAIM     STORAGECLASS   REASON    AGE<br>pv001     <span class="hljs-number">1</span>Gi        RWO,RWX        Retain           Available                                      <span class="hljs-number">5s</span><br>pv002     <span class="hljs-number">2</span>Gi        RWO            Retain           Available                                      <span class="hljs-number">5s</span><br>pv003     <span class="hljs-number">2</span>Gi        RWO,RWX        Retain           Available                                      <span class="hljs-number">5s</span><br>pv004     <span class="hljs-number">2</span>Gi        RWO,RWX        Retain           Available                                      <span class="hljs-number">5s</span><br>pv005     <span class="hljs-number">2</span>Gi        RWO,RWX        Retain           Available                                      <span class="hljs-number">5s</span><br></code></pre></td></tr></table></figure><h4 id="（4）创建statefulset"><a href="#（4）创建statefulset" class="headerlink" title="（4）创建statefulset"></a>（4）创建statefulset</h4><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">[root@k8s-<span class="hljs-keyword">master</span> <span class="hljs-title">mainfests</span>]<span class="hljs-comment"># kubectl apply -f stateful-demo.yaml </span><br>service/myapp-svc created<br>statefulset.apps/myapp created<br>[root@k8s-<span class="hljs-keyword">master</span> <span class="hljs-title">mainfests</span>]<span class="hljs-comment"># kubectl get svc  #查看创建的无头服务myapp-svc</span><br>NAME         <span class="hljs-keyword">TYPE</span>        CLUSTER-IP       EXTERNAL-IP   PORT(S)             AGE<br>kubernetes   ClusterIP   <span class="hljs-number">10.96</span>.<span class="hljs-number">0.1</span>        <span class="hljs-tag">&lt;none&gt;</span>        <span class="hljs-number">443</span>/TCP             <span class="hljs-number">50</span>d<br>myapp-svc    ClusterIP   None             <span class="hljs-tag">&lt;none&gt;</span>        <span class="hljs-number">80</span>/TCP              <span class="hljs-number">38s</span><br>[root@k8s-<span class="hljs-keyword">master</span> <span class="hljs-title">mainfests</span>]<span class="hljs-comment"># kubectl get sts    #查看statefulset</span><br>NAME      DESIRED   CURRENT   AGE<br>myapp     <span class="hljs-number">3</span>         <span class="hljs-number">3</span>         <span class="hljs-number">55s</span><br>[root@k8s-<span class="hljs-keyword">master</span> <span class="hljs-title">mainfests</span>]<span class="hljs-comment"># kubectl get pvc    #查看pvc绑定</span><br>NAME                STATUS    VOLUME    CAPACITY   ACCESS MODES   STORAGECLASS   AGE<br>myappdata-myapp-<span class="hljs-number">0</span>   Bound     pv002     <span class="hljs-number">2</span>Gi        RWO                           <span class="hljs-number">1m</span><br>myappdata-myapp-<span class="hljs-number">1</span>   Bound     pv003     <span class="hljs-number">2</span>Gi        RWO,RWX                       <span class="hljs-number">1m</span><br>myappdata-myapp-<span class="hljs-number">2</span>   Bound     pv004     <span class="hljs-number">2</span>Gi        RWO,RWX                       <span class="hljs-number">1m</span><br>[root@k8s-<span class="hljs-keyword">master</span> <span class="hljs-title">mainfests</span>]<span class="hljs-comment"># kubectl get pv    #查看pv绑定</span><br>NAME      CAPACITY   ACCESS MODES   RECLAIM POLICY   STATUS      CLAIM                       STORAGECLASS   REASON    AGE<br>pv001     <span class="hljs-number">1</span>Gi        RWO,RWX        Retain           Available                                                        <span class="hljs-number">6m</span><br>pv002     <span class="hljs-number">2</span>Gi        RWO            Retain           Bound       default/myappdata-myapp-<span class="hljs-number">0</span>                            <span class="hljs-number">6m</span><br>pv003     <span class="hljs-number">2</span>Gi        RWO,RWX        Retain           Bound       default/myappdata-myapp-<span class="hljs-number">1</span>                            <span class="hljs-number">6m</span><br>pv004     <span class="hljs-number">2</span>Gi        RWO,RWX        Retain           Bound       default/myappdata-myapp-<span class="hljs-number">2</span>                            <span class="hljs-number">6m</span><br>pv005     <span class="hljs-number">2</span>Gi        RWO,RWX        Retain           Available                                                        <span class="hljs-number">6m</span><br><br>[root@k8s-<span class="hljs-keyword">master</span> <span class="hljs-title">mainfests</span>]<span class="hljs-comment"># kubectl get pods   #查看Pod信息</span><br>NAME                     READY     STATUS    RESTARTS   AGE<br>myapp-<span class="hljs-number">0</span>                  <span class="hljs-number">1</span>/<span class="hljs-number">1</span>       Running   <span class="hljs-number">0</span>          <span class="hljs-number">2m</span><br>myapp-<span class="hljs-number">1</span>                  <span class="hljs-number">1</span>/<span class="hljs-number">1</span>       Running   <span class="hljs-number">0</span>          <span class="hljs-number">2m</span><br>myapp-<span class="hljs-number">2</span>                  <span class="hljs-number">1</span>/<span class="hljs-number">1</span>       Running   <span class="hljs-number">0</span>          <span class="hljs-number">2m</span><br>pod-vol-demo             <span class="hljs-number">2</span>/<span class="hljs-number">2</span>       Running   <span class="hljs-number">0</span>          <span class="hljs-number">1</span>d<br>redis-<span class="hljs-number">5</span>b5d6fbbbd-q8ppz   <span class="hljs-number">1</span>/<span class="hljs-number">1</span>       Running   <span class="hljs-number">1</span>          <span class="hljs-number">2</span>d<br></code></pre></td></tr></table></figure><blockquote><p>当删除的时候是从myapp-2开始进行删除的，关闭是逆向关闭</p></blockquote><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs tap">[root@k8s-master mainfests]<span class="hljs-comment"># kubectl delete -f stateful-demo.yaml </span><br>service &quot;myapp-svc&quot; deleted<br>statefulset.apps &quot;myapp&quot; deleted<br><br>[root@k8s-master ~]<span class="hljs-comment"># kubectl get pods -w</span><br>NAME                     READY     STATUS    RESTARTS   AGE<br>filebeat-ds-hxgdx        1/1       Running  <span class="hljs-number"> 1 </span>         33d<br>filebeat-ds-s466l        1/1       Running  <span class="hljs-number"> 2 </span>         33d<br>myapp-0                  1/1       Running  <span class="hljs-number"> 0 </span>         3m<br>myapp-1                  1/1       Running  <span class="hljs-number"> 0 </span>         3m<br>myapp-2                  1/1       Running  <span class="hljs-number"> 0 </span>         3m<br>pod-vol-demo             2/2       Running  <span class="hljs-number"> 0 </span>         1d<br>redis-5b5d6fbbbd-q8ppz   1/1       Running  <span class="hljs-number"> 1 </span>         2d<br>myapp-0   1/1       Terminating  <span class="hljs-number"> 0 </span>        3m<br>myapp-2   1/1       Terminating  <span class="hljs-number"> 0 </span>        3m<br>myapp-1   1/1       Terminating  <span class="hljs-number"> 0 </span>        3m<br>myapp-1   0/1       Terminating  <span class="hljs-number"> 0 </span>        3m<br>myapp-0   0/1       Terminating  <span class="hljs-number"> 0 </span>        3m<br>myapp-2   0/1       Terminating  <span class="hljs-number"> 0 </span>        3m<br>myapp-1   0/1       Terminating  <span class="hljs-number"> 0 </span>        3m<br>myapp-1   0/1       Terminating  <span class="hljs-number"> 0 </span>        3m<br>myapp-0   0/1       Terminating  <span class="hljs-number"> 0 </span>        4m<br>myapp-0   0/1       Terminating  <span class="hljs-number"> 0 </span>        4m<br>myapp-2   0/1       Terminating  <span class="hljs-number"> 0 </span>        3m<br>myapp-2   0/1       Terminating  <span class="hljs-number"> 0 </span>        3m<br><br>此时PVC依旧存在的，再重新创建pod时，依旧会重新去绑定原来的pvc<br>[root@k8s-master mainfests]<span class="hljs-comment"># kubectl apply -f stateful-demo.yaml </span><br>service/myapp-svc created<br>statefulset.apps/myapp created<br><br>[root@k8s-master mainfests]<span class="hljs-comment"># kubectl get pvc</span><br>NAME                STATUS    VOLUME    CAPACITY   ACCESS MODES   STORAGECLASS   AGE<br>myappdata-myapp-0   Bound     pv002     2Gi        RWO                           5m<br>myappdata-myapp-1   Bound     pv003     2Gi        RWO,RWX                       5m<br>myappdata-myapp-2   Bound     pv004     2Gi        RWO,RWX                       5m<br></code></pre></td></tr></table></figure><h3 id="五、滚动更新、扩展伸缩、版本升级、修改更新策略"><a href="#五、滚动更新、扩展伸缩、版本升级、修改更新策略" class="headerlink" title="五、滚动更新、扩展伸缩、版本升级、修改更新策略"></a>五、滚动更新、扩展伸缩、版本升级、修改更新策略</h3><h4 id="1、滚动更新"><a href="#1、滚动更新" class="headerlink" title="1、滚动更新"></a>1、滚动更新</h4><blockquote><p>RollingUpdate 更新策略在 StatefulSet 中实现 Pod 的自动滚动更新。 当StatefulSet的 .spec.updateStrategy.type 设置为 RollingUpdate 时，默认为：RollingUpdate。StatefulSet 控制器将在 StatefulSet 中删除并重新创建每个 Pod。 它将以与 Pod 终止相同的顺序进行（从最大的序数到最小的序数），每次更新一个 Pod。 在更新其前身之前，它将等待正在更新的 Pod 状态变成正在运行并就绪。如下操作的滚动更新是有2-0的顺序更新。</p></blockquote><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs tap">[root@k8s-master mainfests]<span class="hljs-comment"># vim stateful-demo.yaml  #修改image版本为v2</span><br>.....<br>image: ikubernetes/myapp:v2<br>....<br>[root@k8s-master mainfests]<span class="hljs-comment"># kubectl apply -f stateful-demo.yaml </span><br>service/myapp-svc unchanged<br>statefulset.apps/myapp configured<br>[root@k8s-master ~]<span class="hljs-comment"># kubectl get pods -w   #查看滚动更新的过程</span><br>NAME                     READY     STATUS    RESTARTS   AGE<br>myapp-0                  1/1       Running  <span class="hljs-number"> 0 </span>         36m<br>myapp-1                  1/1       Running  <span class="hljs-number"> 0 </span>         36m<br>myapp-2                  1/1       Running  <span class="hljs-number"> 0 </span>         36m<br><br>myapp-2   1/1       Terminating  <span class="hljs-number"> 0 </span>        36m<br>myapp-2   0/1       Terminating  <span class="hljs-number"> 0 </span>        36m<br>myapp-2   0/1       Terminating  <span class="hljs-number"> 0 </span>        36m<br>myapp-2   0/1       Terminating  <span class="hljs-number"> 0 </span>        36m<br>myapp-2   0/1       Pending  <span class="hljs-number"> 0 </span>        0s<br>myapp-2   0/1       Pending  <span class="hljs-number"> 0 </span>        0s<br>myapp-2   0/1       ContainerCreating  <span class="hljs-number"> 0 </span>        0s<br>myapp-2   1/1       Running  <span class="hljs-number"> 0 </span>        2s<br>myapp-1   1/1       Terminating  <span class="hljs-number"> 0 </span>        36m<br>myapp-1   0/1       Terminating  <span class="hljs-number"> 0 </span>        36m<br>myapp-1   0/1       Terminating  <span class="hljs-number"> 0 </span>        36m<br>myapp-1   0/1       Terminating  <span class="hljs-number"> 0 </span>        36m<br>myapp-1   0/1       Pending  <span class="hljs-number"> 0 </span>        0s<br>myapp-1   0/1       Pending  <span class="hljs-number"> 0 </span>        0s<br>myapp-1   0/1       ContainerCreating  <span class="hljs-number"> 0 </span>        0s<br>myapp-1   1/1       Running  <span class="hljs-number"> 0 </span>        1s<br>myapp-0   1/1       Terminating  <span class="hljs-number"> 0 </span>        37m<br>myapp-0   0/1       Terminating  <span class="hljs-number"> 0 </span>        37m<br>myapp-0   0/1       Terminating  <span class="hljs-number"> 0 </span>        37m<br>myapp-0   0/1       Terminating  <span class="hljs-number"> 0 </span>        37m<br></code></pre></td></tr></table></figure><blockquote><p>在创建的每一个Pod中，每一个pod自己的名称都是可以被解析的，如下：</p></blockquote><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">[root@k8s-master ~]# kubectl <span class="hljs-keyword">get</span> pods -o wide<br><span class="hljs-type">NAME</span>                     READY     STATUS    RESTARTS   AGE       IP            NODE<br>myapp<span class="hljs-number">-0</span>                  <span class="hljs-number">1</span>/<span class="hljs-number">1</span>       Running   <span class="hljs-number">0</span>          <span class="hljs-number">8</span>m        <span class="hljs-number">10.244</span><span class="hljs-number">.1</span><span class="hljs-number">.62</span>   k8s-node01<br>myapp<span class="hljs-number">-1</span>                  <span class="hljs-number">1</span>/<span class="hljs-number">1</span>       Running   <span class="hljs-number">0</span>          <span class="hljs-number">8</span>m        <span class="hljs-number">10.244</span><span class="hljs-number">.2</span><span class="hljs-number">.49</span>   k8s-node02<br>myapp<span class="hljs-number">-2</span>                  <span class="hljs-number">1</span>/<span class="hljs-number">1</span>       Running   <span class="hljs-number">0</span>          <span class="hljs-number">8</span>m        <span class="hljs-number">10.244</span><span class="hljs-number">.1</span><span class="hljs-number">.61</span>   k8s-node01<br><br>[root@k8s-master mainfests]# kubectl exec -it myapp<span class="hljs-number">-0</span> <span class="hljs-comment">-- /bin/sh</span><br>/ # nslookup myapp<span class="hljs-number">-0.</span>myapp-svc.<span class="hljs-keyword">default</span>.svc.<span class="hljs-keyword">cluster</span>.<span class="hljs-keyword">local</span><br>nslookup: can<span class="hljs-string">&#x27;t resolve &#x27;</span>(<span class="hljs-keyword">null</span>)<span class="hljs-string">&#x27;: Name does not resolve</span><br><span class="hljs-string"></span><br><span class="hljs-string">Name:      myapp-0.myapp-svc.default.svc.cluster.local</span><br><span class="hljs-string">Address 1: 10.244.1.62 myapp-0.myapp-svc.default.svc.cluster.local</span><br><span class="hljs-string">/ # nslookup myapp-1.myapp-svc.default.svc.cluster.local</span><br><span class="hljs-string">nslookup: can&#x27;</span>t resolve <span class="hljs-string">&#x27;(null)&#x27;</span>: <span class="hljs-type">Name</span> does <span class="hljs-keyword">not</span> resolve<br><br><span class="hljs-type">Name</span>:      myapp<span class="hljs-number">-1.</span>myapp-svc.<span class="hljs-keyword">default</span>.svc.<span class="hljs-keyword">cluster</span>.<span class="hljs-keyword">local</span><br>Address <span class="hljs-number">1</span>: <span class="hljs-number">10.244</span><span class="hljs-number">.2</span><span class="hljs-number">.49</span> myapp<span class="hljs-number">-1.</span>myapp-svc.<span class="hljs-keyword">default</span>.svc.<span class="hljs-keyword">cluster</span>.<span class="hljs-keyword">local</span><br>/ # nslookup myapp<span class="hljs-number">-2.</span>myapp-svc.<span class="hljs-keyword">default</span>.svc.<span class="hljs-keyword">cluster</span>.<span class="hljs-keyword">local</span><br>nslookup: can<span class="hljs-string">&#x27;t resolve &#x27;</span>(<span class="hljs-keyword">null</span>)<span class="hljs-string">&#x27;: Name does not resolve</span><br><span class="hljs-string"></span><br><span class="hljs-string">Name:      myapp-2.myapp-svc.default.svc.cluster.local</span><br><span class="hljs-string">Address 1: 10.244.1.61 myapp-2.myapp-svc.default.svc.cluster.local</span><br><span class="hljs-string"></span><br><span class="hljs-string">从上面的解析，我们可以看到在容器当中可以通过对Pod的名称进行解析到ip。其解析的域名格式如下：</span><br><span class="hljs-string">pod_name.service_name.ns_name.svc.cluster.local</span><br><span class="hljs-string">eg: myapp-0.myapp.default.svc.cluster.local</span><br></code></pre></td></tr></table></figure><h4 id="2、扩展伸缩"><a href="#2、扩展伸缩" class="headerlink" title="2、扩展伸缩"></a>2、扩展伸缩</h4><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs tap">[root@k8s-master mainfests]<span class="hljs-comment"># kubectl scale sts myapp --replicas=4  #扩容副本增加到4个</span><br>statefulset.apps/myapp scaled<br>[root@k8s-master ~]<span class="hljs-comment"># kubectl get pods -w  #动态查看扩容</span><br>NAME                     READY     STATUS    RESTARTS   AGE<br>myapp-0                  1/1       Running  <span class="hljs-number"> 0 </span>         23m<br>myapp-1                  1/1       Running  <span class="hljs-number"> 0 </span>         23m<br>myapp-2                  1/1       Running  <span class="hljs-number"> 0 </span>         23m<br><br>myapp-3   0/1       Pending  <span class="hljs-number"> 0 </span>        0s<br>myapp-3   0/1       Pending  <span class="hljs-number"> 0 </span>        0s<br>myapp-3   0/1       ContainerCreating  <span class="hljs-number"> 0 </span>        0s<br>myapp-3   1/1       Running  <span class="hljs-number"> 0 </span>        1s<br>[root@k8s-master mainfests]<span class="hljs-comment"># kubectl get pv  #查看pv绑定</span><br>NAME      CAPACITY   ACCESS MODES   RECLAIM POLICY   STATUS      CLAIM                       STORAGECLASS   REASON    AGE<br>pv001     1Gi        RWO,RWX        Retain           Available                                                        1h<br>pv002     2Gi        RWO            Retain           Bound       default/myappdata-myapp-0                            1h<br>pv003     2Gi        RWO,RWX        Retain           Bound       default/myappdata-myapp-1                            1h<br>pv004     2Gi        RWO,RWX        Retain           Bound       default/myappdata-myapp-2                            1h<br>pv005     2Gi        RWO,RWX        Retain           Bound       default/myappdata-myapp-3                            1h<br><br>[root@k8s-master mainfests]<span class="hljs-comment"># kubectl patch sts myapp -p &#x27;&#123;&quot;spec&quot;:&#123;&quot;replicas&quot;:2&#125;&#125;&#x27;  #打补丁方式缩容</span><br>statefulset.apps/myapp patched<br>[root@k8s-master ~]<span class="hljs-comment"># kubectl get pods -w  #动态查看缩容</span><br>NAME                     READY     STATUS    RESTARTS   AGE<br>myapp-0                  1/1       Running  <span class="hljs-number"> 0 </span>         25m<br>myapp-1                  1/1       Running  <span class="hljs-number"> 0 </span>         25m<br>myapp-2                  1/1       Running  <span class="hljs-number"> 0 </span>         25m<br>myapp-3                  1/1       Running  <span class="hljs-number"> 0 </span>         1m<br>myapp-3   1/1       Terminating  <span class="hljs-number"> 0 </span>        2m<br>myapp-3   0/1       Terminating  <span class="hljs-number"> 0 </span>        2m<br>myapp-3   0/1       Terminating  <span class="hljs-number"> 0 </span>        2m<br>myapp-3   0/1       Terminating  <span class="hljs-number"> 0 </span>        2m<br>myapp-2   1/1       Terminating  <span class="hljs-number"> 0 </span>        26m<br>myapp-2   0/1       Terminating  <span class="hljs-number"> 0 </span>        26m<br>myapp-2   0/1       Terminating  <span class="hljs-number"> 0 </span>        27m<br>myapp-2   0/1       Terminating  <span class="hljs-number"> 0 </span>        27m<br></code></pre></td></tr></table></figure><h4 id="3、更新策略和版本升级"><a href="#3、更新策略和版本升级" class="headerlink" title="3、更新策略和版本升级"></a>3、更新策略和版本升级</h4><blockquote><p>修改更新策略，以partition方式进行更新，更新值为2，只有myapp编号大于等于2的才会进行更新。类似于金丝雀部署方式。</p></blockquote><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs awk">[root@k8s-master mainfests]<span class="hljs-comment"># kubectl patch sts myapp -p &#x27;&#123;&quot;spec&quot;:&#123;&quot;updateStrategy&quot;:&#123;&quot;rollingUpdate&quot;:&#123;&quot;partition&quot;:2&#125;&#125;&#125;&#125;&#x27;</span><br>statefulset.apps/myapp patched<br>[root@k8s-master ~]<span class="hljs-comment"># kubectl get sts myapp</span><br>NAME      DESIRED   CURRENT   AGE<br>myapp     <span class="hljs-number">4</span>         <span class="hljs-number">4</span>         <span class="hljs-number">1</span>h<br>[root@k8s-master ~]<span class="hljs-comment"># kubectl describe sts myapp</span><br>Name:               myapp<br>Namespace:          default<br>CreationTimestamp:  Wed, <span class="hljs-number">10</span> Oct <span class="hljs-number">2018</span> <span class="hljs-number">21</span>:<span class="hljs-number">58</span>:<span class="hljs-number">24</span> -<span class="hljs-number">0400</span><br>Selector:           app=myapp-pod<br>Labels:             &lt;none&gt;<br>Annotations:        kubectl.kubernetes.io<span class="hljs-regexp">/last-applied-configuration=&#123;&quot;apiVersion&quot;:&quot;apps/</span>v1<span class="hljs-string">&quot;,&quot;</span>kind<span class="hljs-string">&quot;:&quot;</span>StatefulSet<span class="hljs-string">&quot;,&quot;</span>metadata<span class="hljs-string">&quot;:&#123;&quot;</span>annotations<span class="hljs-string">&quot;:&#123;&#125;,&quot;</span>name<span class="hljs-string">&quot;:&quot;</span>myapp<span class="hljs-string">&quot;,&quot;</span>namespace<span class="hljs-string">&quot;:&quot;</span>default<span class="hljs-string">&quot;&#125;,&quot;</span>spec<span class="hljs-string">&quot;:&#123;&quot;</span>replicas<span class="hljs-string">&quot;:3,&quot;</span>selecto<span class="hljs-string">r&quot;:&#123;&quot;</span>match...<br>Replicas:           <span class="hljs-number">4</span> desired | <span class="hljs-number">4</span> total<br>Update Strategy:    RollingUpdate<br>  Partition:        <span class="hljs-number">2</span><br>......<br></code></pre></td></tr></table></figure><blockquote><p>版本升级，将image的版本升级为v3，升级后对比myapp-2和myapp-1的image版本是不同的。这样就实现了金丝雀发布的效果。</p></blockquote><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs ruby">[root<span class="hljs-variable">@k8s</span>-master mainfests]<span class="hljs-comment"># kubectl set image sts/myapp myapp=ikubernetes/myapp:v3</span><br>statefulset.apps/myapp image updated<br>[root<span class="hljs-variable">@k8s</span>-master ~]<span class="hljs-comment"># kubectl get sts -o wide</span><br><span class="hljs-variable constant_">NAME</span>      <span class="hljs-variable constant_">DESIRED</span>   <span class="hljs-variable constant_">CURRENT</span>   <span class="hljs-variable constant_">AGE</span>       <span class="hljs-variable constant_">CONTAINERS</span>   <span class="hljs-variable constant_">IMAGES</span><br>myapp     <span class="hljs-number">4</span>         <span class="hljs-number">4</span>         1h        myapp        ikubernetes/<span class="hljs-symbol">myapp:</span>v3<br>[root<span class="hljs-variable">@k8s</span>-master ~]<span class="hljs-comment"># kubectl get pods myapp-2 -o yaml |grep image</span><br>  - <span class="hljs-symbol">image:</span> ikubernetes/<span class="hljs-symbol">myapp:</span>v3<br>    <span class="hljs-symbol">imagePullPolicy:</span> <span class="hljs-title class_">IfNotPresent</span><br>    <span class="hljs-symbol">image:</span> ikubernetes/<span class="hljs-symbol">myapp:</span>v3<br>    <span class="hljs-symbol">imageID:</span> docker-<span class="hljs-symbol">pullable:</span>/<span class="hljs-regexp">/ikubernetes/myapp</span><span class="hljs-variable">@sha256</span><span class="hljs-symbol">:b8d74db2515d3c1391c78c5768272b9344428035ef6d72158fd9f6c4239b2c69</span><br><br>[root<span class="hljs-variable">@k8s</span>-master ~]<span class="hljs-comment"># kubectl get pods myapp-1 -o yaml |grep image</span><br>  - <span class="hljs-symbol">image:</span> ikubernetes/<span class="hljs-symbol">myapp:</span>v2<br>    <span class="hljs-symbol">imagePullPolicy:</span> <span class="hljs-title class_">IfNotPresent</span><br>    <span class="hljs-symbol">image:</span> ikubernetes/<span class="hljs-symbol">myapp:</span>v2<br>    <span class="hljs-symbol">imageID:</span> docker-<span class="hljs-symbol">pullable:</span>/<span class="hljs-regexp">/ikubernetes/myapp</span><span class="hljs-variable">@sha256</span><span class="hljs-symbol">:</span>85a2b81a62f09a414ea33b74fb8aa686ed9b168294b26b4c819df0be0712d358<br></code></pre></td></tr></table></figure><blockquote><p>将剩余的Pod也更新版本，只需要将更新策略的partition值改为0即可，如下：</p></blockquote><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs tap">[root@k8s-master mainfests]<span class="hljs-comment">#  kubectl patch sts myapp -p &#x27;&#123;&quot;spec&quot;:&#123;&quot;updateStrategy&quot;:&#123;&quot;rollingUpdate&quot;:&#123;&quot;partition&quot;:0&#125;&#125;&#125;&#125;&#x27;</span><br>statefulset.apps/myapp patched<br><br>[root@k8s-master ~]<span class="hljs-comment"># kubectl get pods -w</span><br>NAME                     READY     STATUS    RESTARTS   AGE<br>myapp-0                  1/1       Running  <span class="hljs-number"> 0 </span>         58m<br>myapp-1                  1/1       Running  <span class="hljs-number"> 0 </span>         58m<br>myapp-2                  1/1       Running  <span class="hljs-number"> 0 </span>         13m<br>myapp-3                  1/1       Running  <span class="hljs-number"> 0 </span>         13m<br>myapp-1   1/1       Terminating  <span class="hljs-number"> 0 </span>        58m<br>myapp-1   0/1       Terminating  <span class="hljs-number"> 0 </span>        58m<br>myapp-1   0/1       Terminating  <span class="hljs-number"> 0 </span>        58m<br>myapp-1   0/1       Terminating  <span class="hljs-number"> 0 </span>        58m<br>myapp-1   0/1       Pending  <span class="hljs-number"> 0 </span>        0s<br>myapp-1   0/1       Pending  <span class="hljs-number"> 0 </span>        0s<br>myapp-1   0/1       ContainerCreating  <span class="hljs-number"> 0 </span>        0s<br>myapp-1   1/1       Running  <span class="hljs-number"> 0 </span>        2s<br>myapp-0   1/1       Terminating  <span class="hljs-number"> 0 </span>        58m<br>myapp-0   0/1       Terminating  <span class="hljs-number"> 0 </span>        58m<br>myapp-0   0/1       Terminating  <span class="hljs-number"> 0 </span>        58m<br>myapp-0   0/1       Terminating  <span class="hljs-number"> 0 </span>        58m<br>myapp-0   0/1       Pending  <span class="hljs-number"> 0 </span>        0s<br>myapp-0   0/1       Pending  <span class="hljs-number"> 0 </span>        0s<br>myapp-0   0/1       ContainerCreating  <span class="hljs-number"> 0 </span>        0s<br>myapp-0   1/1       Running  <span class="hljs-number"> 0 </span>        2s<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>PodPreset注入信息到 Pods</title>
    <link href="/2019/08/26/PodPreset/"/>
    <url>/2019/08/26/PodPreset/</url>
    
    <content type="html"><![CDATA[<h2 id="PodPreset-介绍"><a href="#PodPreset-介绍" class="headerlink" title="PodPreset 介绍"></a>PodPreset 介绍</h2><blockquote><p>PodPreset 是一种 K8s API 资源，用于在创建 Pod 时注入其他运行时需要的信息，这些信息包括 secrets、volume mounts、environment variables 等，我们可以使用标签选择器来指定某个或某些 Pod，来将 PodPreset 预设信息应用上去。使用 PodPreset 的好处就是我们可以将一些常用 Pod 预设信息配置为模板，这样就不需要显式为每个 Pod 提供所有信息，简化 Pod 初始化配置，还能起到配置统一的效果。</p></blockquote><h2 id="K8s-启用-PodPreset-配置"><a href="#K8s-启用-PodPreset-配置" class="headerlink" title="K8s 启用 PodPreset 配置"></a>K8s 启用 PodPreset 配置</h2><p>K8s 默认不开启 PodPreset 支持的，其 API 类型为 <code>settings.k8s.io/v1alpha1</code>，如果不确认集群是否已开启 PodPreset 支持，可以通过 kubectl api-versions 命令查看是否存在该类型，或者 <code>kubectl get podpreset</code> 命令查看，如果没开启会提示 <code>error: the server doesn&#39;t have a resource type &quot;podpreset&quot;</code> 错误。</p><p>启用 PodPreset，可以通过 K8s ApiServer 增加 <code>--runtime-config=settings.k8s.io/v1alpha1=true</code> 配置即可。Kubeadm 方式安装集群，可以在<code>/etc/kubernetes/manifests</code>路径下的<code>kube-apiserver.yaml</code>中追加如下命令：</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gradle">--<span class="hljs-keyword">runtime</span>-config=api<span class="hljs-regexp">/all,settings.k8s.io/</span>v1alpha1=<span class="hljs-keyword">true</span><br></code></pre></td></tr></table></figure><p>admission中添加：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">--enable-admission-plugins</span>=NamespaceLifecycle,LimitRanger,ServiceAccount,PersistentVolumeClaimResize,DefaultStorageClass,DefaultTolerationSeconds,NodeRestriction,MutatingAdmissionWebhook,ValidatingAdmissionWebhook,ResourceQuota,Priority,PodPreset<br></code></pre></td></tr></table></figure><p>待组件自动重启完毕后，可以再次检查是否已支持 PodPreset。</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs lua">$ kubectl api-versions | grep settings.k8s.<span class="hljs-built_in">io</span><br>settings.k8s.<span class="hljs-built_in">io</span>/v1alpha1<br></code></pre></td></tr></table></figure><h2 id="PodPreset-注入信息示例"><a href="#PodPreset-注入信息示例" class="headerlink" title="PodPreset 注入信息示例"></a>PodPreset 注入信息示例</h2><p>现在我们演示一下，如何使用 PodPreset 注入信息到 Pod 中，这里举两个示例，一个是匹配指定 Pod 加载配置，另一个是匹配某个 Namespace 下所有 Pod 加载配置。</p><h3 id="匹配指定-Pod-加载配置"><a href="#匹配指定-Pod-加载配置" class="headerlink" title="匹配指定 Pod 加载配置"></a>匹配指定 Pod 加载配置</h3><p>上边提到过 <code>使用标签选择器来指定某个或某些 Pod，来将 PodPreset 预设信息应用上去</code>，这里我们来演示下如何匹配指定 Pod 加载配置。首先新建 PodPreset Yaml 资源文件。</p><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-attribute">$ vim podpreset-busybox-hwy.yaml</span><br><span class="hljs-attribute">apiVersion</span><span class="hljs-punctuation">:</span> <span class="hljs-string">settings.k8s.io/v1alpha1</span><br><span class="hljs-attribute">kind</span><span class="hljs-punctuation">:</span> <span class="hljs-string">PodPreset</span><br><span class="hljs-attribute">metadata</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">busybox-hwy</span><br>  <span class="hljs-attribute">namespace</span><span class="hljs-punctuation">:</span> <span class="hljs-string">wanyang3</span><br><span class="hljs-attribute">spec</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">selector</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-attribute">matchLabels</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-attribute">role</span><span class="hljs-punctuation">:</span> <span class="hljs-string">busybox-hwy</span><br>  <span class="hljs-attribute">env</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">name: PODPRESET_MESSAGE</span><br>      <span class="hljs-attribute">value</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;This is podpreset message.&quot;</span><br>  <span class="hljs-attribute">volumeMounts</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">mountPath: /opt/logs</span><br>      <span class="hljs-attribute">name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">logs-volume</span><br>  <span class="hljs-attribute">volumes</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">name: logs-volume</span><br>      <span class="hljs-attribute">emptyDir</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&#123;&#125;</span><br></code></pre></td></tr></table></figure><p>可以看到如下几个关键信息：</p><ul><li>PodPreset 资源 ApiVersion 为 <code>settings.k8s.io/v1alpha1</code></li><li>这里 <code>selector.matchLabels</code> 通过 Labels 匹配标签包含 <code>role: busybox-hwy</code> 的 Pod</li><li>注入了 <code>env</code> 环境变量 <code>PODPRESET_MESSAGE=This is podpreset message.</code> 到匹配的 Pod 中</li><li>注入了 <code>volumes</code> 卷挂载目录到匹配的 Pod 中的 <code>/opt/logs</code> 目录</li></ul><p>创建一下该 PodPreset 资源。</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-variable">$</span> kubectl create ns wanyang3<br>namespace/wanyang3 created<br><br><br><span class="hljs-variable">$</span> kubectl apply <span class="hljs-operator">-f</span> podp<span class="hljs-built_in">reset-busybox</span><span class="hljs-literal">-hwy</span>.yaml<br>podpreset.settings.k8s.io/busybox<span class="hljs-literal">-hwy</span> created<br><br><br><span class="hljs-variable">$</span> kubectl get podpreset <span class="hljs-literal">-n</span> wanyang3<br>NAME          CREATED AT<br>busybox<span class="hljs-literal">-hwy</span>   <span class="hljs-number">2019</span><span class="hljs-literal">-07-07T02</span>:<span class="hljs-number">10</span>:<span class="hljs-number">31</span>Z<br></code></pre></td></tr></table></figure><p>接下来，我们来创建 Pod Yaml 资源文件。</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs dts">$ vim pod-busybox-hwy.yaml <br><span class="hljs-symbol">apiVersion:</span> v1<br><span class="hljs-symbol">kind:</span> Pod<br><span class="hljs-symbol">metadata:</span><br><span class="hljs-symbol">  name:</span> busybox-hwy<br><span class="hljs-symbol">  namespace:</span> wanyang3<br><span class="hljs-symbol">  labels:</span><br><span class="hljs-symbol">    app:</span> busybox-hwy<br><span class="hljs-symbol">    role:</span> busybox-hwy<br><span class="hljs-symbol">spec:</span><br><span class="hljs-symbol">  containers:</span><br>    - name: busybox-hwy<br><span class="hljs-symbol">      image:</span> busybox:latest<br><span class="hljs-symbol">      command:</span> [<span class="hljs-string">&quot;sleep&quot;</span>, <span class="hljs-string">&quot;60000&quot;</span>]<br></code></pre></td></tr></table></figure><p>注意：这里我以 <code>busybox</code> 容器来测试，这里 labels <code>role: busybox-hwy</code> 要跟上边 PodPreset <code>selector.matchLabels</code> 匹配上，否则将没法注入信息。那么创建一下该 Pod 资源。</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-variable">$</span> kubectl apply <span class="hljs-operator">-f</span> pod<span class="hljs-literal">-busybox-hwy</span>.yaml<br>pod/busybox<span class="hljs-literal">-hwy</span> created<br><br><br><span class="hljs-variable">$</span> kubectl get pod <span class="hljs-literal">-n</span> wanyang3<br>NAME          READY   STATUS    RESTARTS   AGE<br>busybox<span class="hljs-literal">-hwy</span>   <span class="hljs-number">1</span>/<span class="hljs-number">1</span>     Running   <span class="hljs-number">0</span>          <span class="hljs-number">15</span>s<br></code></pre></td></tr></table></figure><p>成功创建，进入到容器内验证一下 PodPreset 信息是否正确注入吧！</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs gradle">$ kubectl exec -it busybox-hwy -n wanyang3 <span class="hljs-regexp">/bin/</span>sh<br>/ # printenv |<span class="hljs-keyword">grep</span> PODPRESET<br>PODPRESET_MESSAGE=<span class="hljs-keyword">This</span> is podpreset message.<br>/ # df -h<br>Filesystem                <span class="hljs-keyword">Size</span>      Used Available Use% Mounted on<br>overlay                  <span class="hljs-number">36.0</span>G      <span class="hljs-number">9.3</span>G     <span class="hljs-number">26.7</span>G  <span class="hljs-number">26</span>% /<br>tmpfs                    <span class="hljs-number">64.0</span>M         <span class="hljs-number">0</span>     <span class="hljs-number">64.0</span>M   <span class="hljs-number">0</span>% /dev<br>tmpfs                     <span class="hljs-number">1.8</span>G         <span class="hljs-number">0</span>      <span class="hljs-number">1.8</span>G   <span class="hljs-number">0</span>% <span class="hljs-regexp">/sys/</span>fs/cgroup<br><span class="hljs-regexp">/dev/m</span>apper/centos-root<br>                         <span class="hljs-number">36.0</span>G      <span class="hljs-number">9.3</span>G     <span class="hljs-number">26.7</span>G  <span class="hljs-number">26</span>% <span class="hljs-regexp">/opt/</span>logs<br><span class="hljs-regexp">/dev/m</span>apper/centos-root<br>                         <span class="hljs-number">36.0</span>G      <span class="hljs-number">9.3</span>G     <span class="hljs-number">26.7</span>G  <span class="hljs-number">26</span>% <span class="hljs-regexp">/dev/</span>termination-log<br><span class="hljs-regexp">/dev/m</span>apper/centos-root<br>                         <span class="hljs-number">36.0</span>G      <span class="hljs-number">9.3</span>G     <span class="hljs-number">26.7</span>G  <span class="hljs-number">26</span>% <span class="hljs-regexp">/etc/</span>resolv.conf<br><span class="hljs-regexp">/dev/m</span>apper/centos-root<br>                         <span class="hljs-number">36.0</span>G      <span class="hljs-number">9.3</span>G     <span class="hljs-number">26.7</span>G  <span class="hljs-number">26</span>% <span class="hljs-regexp">/etc/</span>hostname<br><span class="hljs-regexp">/dev/m</span>apper/centos-root<br>                         <span class="hljs-number">36.0</span>G      <span class="hljs-number">9.3</span>G     <span class="hljs-number">26.7</span>G  <span class="hljs-number">26</span>% <span class="hljs-regexp">/etc/</span>hosts<br>......      <br></code></pre></td></tr></table></figure><p>验证没有问题，PodPreset 信息注入到 Pod 里面了，而我们的 Pod yaml 文件就非常简洁了，从而避免了某一个配置更改，所有相关的 Pod 都需要更新 Yaml 配置的麻烦，是不是很方便！咱们在更深入了解一下 PodPreset 实现的方式，此时获取 Pod 的 Yaml 文件看下。</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-meta"># kubectl get pod busybox-hwy -n wanyang3 -o yaml</span><br><span class="hljs-symbol">apiVersion:</span> v1<br><span class="hljs-symbol">kind:</span> Pod<br><span class="hljs-symbol">metadata:</span><br><span class="hljs-symbol">  annotations:</span><br>    podpreset.admission.kubernetes.io/podpreset-busybox-hwy: <span class="hljs-string">&quot;24187&quot;</span><br><span class="hljs-symbol">  creationTimestamp:</span> <span class="hljs-number">2019</span><span class="hljs-number">-07</span><span class="hljs-number">-07</span>T02:<span class="hljs-number">22</span>:<span class="hljs-number">27</span>Z<br><span class="hljs-symbol">  labels:</span><br><span class="hljs-symbol">    app:</span> busybox-hwy<br><span class="hljs-symbol">    role:</span> busybox-hwy<br><span class="hljs-symbol">  name:</span> busybox-hwy<br><span class="hljs-symbol">  namespace:</span> wanyang3<br><span class="hljs-symbol">  resourceVersion:</span> <span class="hljs-string">&quot;24302&quot;</span><br><span class="hljs-symbol">  selfLink:</span> <span class="hljs-keyword">/api/</span>v1<span class="hljs-keyword">/namespaces/</span>wanyang3<span class="hljs-keyword">/pods/</span>busybox-hwy<br><span class="hljs-symbol">  uid:</span> <span class="hljs-number">1066</span>b217-a05e<span class="hljs-number">-11e9</span>-aab0<span class="hljs-number">-080027</span>a076a9<br><span class="hljs-symbol">spec:</span><br><span class="hljs-symbol">  containers:</span><br>  - command:<br>    - sleep<br>    - <span class="hljs-string">&quot;60000&quot;</span><br><span class="hljs-symbol">    env:</span><br>    - name: PODPRESET_MESSAGE<br><span class="hljs-symbol">      value:</span> This is podpreset message.<br><span class="hljs-symbol">    image:</span> busybox:latest<br><span class="hljs-symbol">    imagePullPolicy:</span> Always<br><span class="hljs-symbol">    name:</span> busybox-hwy<br><span class="hljs-symbol">    resources:</span> <span class="hljs-punctuation">&#123;</span><span class="hljs-punctuation">&#125;</span><br><span class="hljs-symbol">    terminationMessagePath:</span> <span class="hljs-keyword">/dev/</span>termination-log<br><span class="hljs-symbol">    terminationMessagePolicy:</span> File<br><span class="hljs-symbol">    volumeMounts:</span><br>    - mountPath: <span class="hljs-keyword">/opt/</span>logs<br><span class="hljs-symbol">      name:</span> logs-volume<br>    - mountPath: <span class="hljs-keyword">/var/</span>run<span class="hljs-keyword">/secrets/</span>kubernetes.io/serviceaccount<br><span class="hljs-symbol">      name:</span> default-token-nnbrm<br><span class="hljs-symbol">      readOnly:</span> true<br><span class="hljs-symbol">  dnsPolicy:</span> ClusterFirst<br><span class="hljs-symbol">  nodeName:</span> minikube<br>  ......<br></code></pre></td></tr></table></figure><p>可以看到，经过 k8s admission controller 之后此时的 Yaml 文件是将 PodPreset 和 Pod 资源 Merge 合并了，同时增加了 <code>podpreset.admission.kubernetes.io/podpreset-busybox-hwy: &quot;24187&quot;</code> 这样的注解，类似模板的 Include 功能，而这个 <code>24187</code> 资源号就是上边 <code>podpreset-busybox-hwy</code> 创建完成之后的 <code>resourceVersion: &quot;24187&quot;</code> 资源版本号。</p><h3 id="匹配某个-Namespace-下所有-Pod-加载配置"><a href="#匹配某个-Namespace-下所有-Pod-加载配置" class="headerlink" title="匹配某个 Namespace 下所有 Pod 加载配置"></a>匹配某个 Namespace 下所有 Pod 加载配置</h3><p>上边演示了匹配一个或多个指定 Pod 注入信息，如果我们想针对某个 Namespace 下的所有的 Pod 注入信息该如何配置呢？方法就是配置 <code>selector.matchLabels</code> 时匹配所有即可。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">$</span> <span class="hljs-string">vim</span> <span class="hljs-string">podpreset-ns-test.yaml</span> <br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">settings.k8s.io/v1alpha1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">PodPreset</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">podpreset-ns-test</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">podpreset-test</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">matchLabels:</span>  <span class="hljs-comment">#关键在这里，匹配所有</span><br>  <span class="hljs-attr">env:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">DB_PORT</span><br>      <span class="hljs-attr">value:</span> <span class="hljs-string">&quot;6379&quot;</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">TZ</span><br>      <span class="hljs-attr">value:</span> <span class="hljs-string">Asia/Shanghai</span><br></code></pre></td></tr></table></figure><p>说明一下：这里 <code>matchLabels:</code> 设置为空，表示匹配该 Namespaces 下所有，这里匹配 <code>podpreset-test</code> 命名空间下所有 Pod，并注入了 <code>DB_PORT= 6379</code> 和 <code>TZ=Asia/Shanghai</code> 两个公用环境变量配置。注意：这里的 <code>TZ=Asia/Shanghai</code> 环境变量配置可以用于修改 Pod 所属时区，从而实现该命名空间所有的 Pod 统一更改时区（毕竟 Centos 默认时间为 <code>UTC</code>）。接下来，创建一下该 PodPreset 资源。</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-variable">$</span> kubectl create ns podp<span class="hljs-built_in">reset-test</span><br>namespace/podp<span class="hljs-built_in">reset-test</span> created<br><br><br><span class="hljs-variable">$</span> kubectl apply <span class="hljs-operator">-f</span> podp<span class="hljs-built_in">reset-ns</span><span class="hljs-literal">-test</span>.yaml<br>podpreset.settings.k8s.io/podp<span class="hljs-built_in">reset-ns</span><span class="hljs-literal">-test</span> created<br><br><br><span class="hljs-variable">$</span> kubectl get podpreset <span class="hljs-literal">-n</span> podp<span class="hljs-built_in">reset-test</span><br>NAME                CREATED AT<br>podp<span class="hljs-built_in">reset-ns</span><span class="hljs-literal">-test</span>   <span class="hljs-number">2019</span><span class="hljs-literal">-07-07T03</span>:<span class="hljs-number">52</span>:<span class="hljs-number">42</span>Z<br></code></pre></td></tr></table></figure><p>然后，分别创建多个 Pod 来注入该 PodPreset 信息。</p><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-attribute">$ vim pod-nginx-test-1.yaml </span><br><span class="hljs-attribute">apiVersion</span><span class="hljs-punctuation">:</span> <span class="hljs-string">v1</span><br><span class="hljs-attribute">kind</span><span class="hljs-punctuation">:</span> <span class="hljs-string">Pod</span><br><span class="hljs-attribute">metadata</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">nginx-test-1</span><br>  <span class="hljs-attribute">namespace</span><span class="hljs-punctuation">:</span> <span class="hljs-string">podpreset-test</span><br>  <span class="hljs-attribute">labels</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-attribute">app</span><span class="hljs-punctuation">:</span> <span class="hljs-string">nginx-test-1</span><br><span class="hljs-attribute">spec</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">containers</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">name: nginx-test-1</span><br>      <span class="hljs-attribute">image</span><span class="hljs-punctuation">:</span> <span class="hljs-string">nginx:latest</span><br></code></pre></td></tr></table></figure><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-attribute">$ vim pod-nginx-test-2.yaml </span><br><span class="hljs-attribute">apiVersion</span><span class="hljs-punctuation">:</span> <span class="hljs-string">v1</span><br><span class="hljs-attribute">kind</span><span class="hljs-punctuation">:</span> <span class="hljs-string">Pod</span><br><span class="hljs-attribute">metadata</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">nginx-test-2</span><br>  <span class="hljs-attribute">namespace</span><span class="hljs-punctuation">:</span> <span class="hljs-string">podpreset-test</span><br>  <span class="hljs-attribute">labels</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-attribute">app</span><span class="hljs-punctuation">:</span> <span class="hljs-string">nginx-test-2</span><br><span class="hljs-attribute">spec</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">containers</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">name: nginx-test-2</span><br>      <span class="hljs-attribute">image</span><span class="hljs-punctuation">:</span> <span class="hljs-string">nginx:latest   </span><br></code></pre></td></tr></table></figure><p>创建以上 Pod 资源，并分别验证是否注入信息成功。</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs cmake">$ kubectl apply -f pod-nginx-<span class="hljs-keyword">test</span>-<span class="hljs-number">1</span>.yaml<br>pod/nginx-<span class="hljs-keyword">test</span>-<span class="hljs-number">1</span> created<br><br><br>$ kubectl apply -f pod-nginx-<span class="hljs-keyword">test</span>-<span class="hljs-number">2</span>.yaml<br>pod/nginx-<span class="hljs-keyword">test</span>-<span class="hljs-number">2</span> created<br><br><br>$ kubectl get pod -n podpreset-<span class="hljs-keyword">test</span><br>NAME           READY   STATUS    RESTARTS   AGE<br>nginx-<span class="hljs-keyword">test</span>-<span class="hljs-number">1</span>   <span class="hljs-number">1</span>/<span class="hljs-number">1</span>     Running   <span class="hljs-number">0</span>          <span class="hljs-number">26</span>s<br>nginx-<span class="hljs-keyword">test</span>-<span class="hljs-number">2</span>   <span class="hljs-number">1</span>/<span class="hljs-number">1</span>     Running   <span class="hljs-number">0</span>          <span class="hljs-number">20</span>s<br></code></pre></td></tr></table></figure><p>分别进入容器内验证是否注入成功</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs routeros">$ kubectl exec -it nginx-test-1 -n podpreset-test /bin/sh<br><span class="hljs-comment"># printenv</span><br><span class="hljs-attribute">KUBERNETES_PORT</span>=tcp://10.96.0.1:443<br><span class="hljs-attribute">KUBERNETES_SERVICE_PORT</span>=443<br><span class="hljs-attribute">HOSTNAME</span>=nginx-test-1<br><span class="hljs-attribute">DB_PORT</span>=6379<br><span class="hljs-attribute">HOME</span>=/root<br><span class="hljs-attribute">PKG_RELEASE</span>=1~stretch<br><span class="hljs-attribute">TERM</span>=xterm<br><span class="hljs-attribute">KUBERNETES_PORT_443_TCP_ADDR</span>=10.96.0.1<br><span class="hljs-attribute">NGINX_VERSION</span>=1.17.1<br><span class="hljs-built_in">..</span><span class="hljs-built_in">..</span><span class="hljs-built_in">..</span><br><span class="hljs-attribute">PWD</span>=/<br><span class="hljs-attribute">TZ</span>=Asia/Shanghai<br><span class="hljs-comment"># date</span><br>Sun Jul  7 12:16:53 CST 2019<br></code></pre></td></tr></table></figure><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs routeros">$ kubectl exec -it nginx-test-2 -n podpreset-test /bin/sh<br><span class="hljs-comment"># printenv</span><br><span class="hljs-attribute">KUBERNETES_SERVICE_PORT</span>=443<br><span class="hljs-attribute">KUBERNETES_PORT</span>=tcp://10.96.0.1:443<br><span class="hljs-attribute">HOSTNAME</span>=nginx-test-2<br><span class="hljs-attribute">DB_PORT</span>=6379<br><span class="hljs-attribute">HOME</span>=/root<br><span class="hljs-attribute">PKG_RELEASE</span>=1~stretch<br><span class="hljs-attribute">TERM</span>=xterm<br><span class="hljs-attribute">KUBERNETES_PORT_443_TCP_ADDR</span>=10.96.0.1<br><span class="hljs-attribute">NGINX_VERSION</span>=1.17.1<br><span class="hljs-built_in">..</span><span class="hljs-built_in">..</span><span class="hljs-built_in">..</span><br><span class="hljs-attribute">PWD</span>=/<br><span class="hljs-attribute">TZ</span>=Asia/Shanghai<br><span class="hljs-comment"># date</span><br>Sun Jul  7 12:17:26 CST 2019<br></code></pre></td></tr></table></figure><p>可以看到，该 Namespace 下的两个 Pod 都成功注入了配置信息，时区也改过来了，是不是很方便了。不过，如果想指定该 Namespace 下某个 Pod 不使用该 PodPreset 该如何配置呢？毕竟有些个性化的 Pod 不使用通用配置。我们可以配置 <code>podpreset.admission.kubernetes.io/exclude: &quot;true&quot;</code> 注解来注明该 Pod 不注入 PodPreset，接下来演示一下。</p><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-attribute">$ vim pod-nginx-test-3.yaml </span><br><span class="hljs-attribute">apiVersion</span><span class="hljs-punctuation">:</span> <span class="hljs-string">v1</span><br><span class="hljs-attribute">kind</span><span class="hljs-punctuation">:</span> <span class="hljs-string">Pod</span><br><span class="hljs-attribute">metadata</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">nginx-test-3</span><br>  <span class="hljs-attribute">namespace</span><span class="hljs-punctuation">:</span> <span class="hljs-string">podpreset-test</span><br>  <span class="hljs-attribute">annotations</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-attribute">podpreset.admission.kubernetes.io/exclude</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;true&quot;</span><br>  <span class="hljs-attribute">labels</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-attribute">app</span><span class="hljs-punctuation">:</span> <span class="hljs-string">nginx-test-3</span><br><span class="hljs-attribute">spec</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">containers</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">name: nginx-test-3</span><br>      <span class="hljs-attribute">image</span><span class="hljs-punctuation">:</span> <span class="hljs-string">nginx:latest</span><br></code></pre></td></tr></table></figure><p>创建该 Pod 资源，验证信息是否注入容器进去。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">kubectl apply -f pod-nginx-test-3.yaml</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">kubectl <span class="hljs-built_in">exec</span> -it nginx-test-3 -n podpreset-test /bin/sh</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">printenv</span> | grep TZ</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">printenv</span> | grep DB_PORT</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">date</span></span><br>Sun Jul  7 04:18:54 UTC 2019<br></code></pre></td></tr></table></figure><p>可以看到，添加了忽略 PodPreset 注入 annotations 后，没有将信息注入进去，时间还是默认的 UTC 时间。</p><p>PodPreset 除了上边演示的两种用法外，还支持多 PodPreset 应用到同一 Pod，支持多种资源类型（ReplicaSet 等），支持从 ConfigMap 中取值。同时要说明一下，当 PodPreset 跟 Pod 配置有冲突时，例如 Pod Yaml 容器挂载配置跟 PodPreset 容器挂载配置为同一路径时，会报错提示冲突。</p><p>最后要提一下注意的问题：</p><ul><li>目前 PodPreset 的预设功能这块还在演进中，不过已经能大大简化了相关的管理工作，将这些公用配置从开发者手中分离出来，变成系统管理配置。</li><li>PodPreset 是 Namespace 级别的对象，其作用范围只能是同一个命名空间下容器。</li><li>目前为 <code>v1alpha1</code> 版本，还不成熟，例如当我们对已创建的 PodPreset 执行非常少量的修改时，重新 apply 或者 replace 时，服务端并没有更新过来（亲测会有问题，只能删除重建），大家可以自己尝试下。</li></ul><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ul><li><a href="https://kubernetes.io/docs/tasks/inject-data-application/podpreset/">PodPreset Doc</a></li><li><a href="https://kubernetes.io/docs/concepts/workloads/pods/podpreset/">Enable PodPreset</a></li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Kubernetes之Secret</title>
    <link href="/2019/08/26/Kubernetes-Secret/"/>
    <url>/2019/08/26/Kubernetes-Secret/</url>
    
    <content type="html"><![CDATA[<blockquote><p>前面我们讲了ConfigMap的使用，我们说ConfigMap这个资源对象是Kubernetes当中非常重要的一个对象，一般情况下ConfigMap是用来存储一些非安全的配置信息，如果涉及到一些安全相关的数据的话用ConfigMap就非常不妥了，因为ConfigMap是明文存储的，我们说这个时候我们就需要用到另外一个资源对象了：Secret，Secret用来保存敏感信息，例如密码、OAuth 令牌和 ssh key等等，将这些信息放在Secret中比放在Pod的定义中或者docker镜像中来说更加安全和灵活。</p></blockquote><blockquote><h2 id="Secret有四种TYPE（类型）："><a href="#Secret有四种TYPE（类型）：" class="headerlink" title="Secret有四种TYPE（类型）："></a>Secret有四种TYPE（类型）：</h2></blockquote><ul><li>generic ：base64编码格式的Secret，用来存储密码、密钥、信息、证书等，类型标识符为<code>Opaque</code>；</li><li>docker-registry ：用来存储私有docker registry的认证信息，类型标识为<code>kubernetes.io/dockerconfigjson</code>。</li><li>tls：用于为SSL通信模式存储证书和私钥文件，命令式创建类型标识为<code>kubernetes.io/tls</code>。</li><li>kubernetes.io&#x2F;service-account-token：用来访问Kubernetes API，由Kubernetes自动创建，并且会自动挂载到Pod的<code>/var/run/secrets/kubernetes.io/serviceaccount</code>目录中；</li></ul><h3 id="Opaque："><a href="#Opaque：" class="headerlink" title="Opaque："></a>Opaque：</h3><blockquote><p>Opaque 类型的数据是一个 map 类型，要求value是base64编码格式，比如我们来创建一个用户名为 admin，密码为 admin321 的 Secret 对象，首先我们先把这用户名和密码做 base64 编码，</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">echo</span> -n <span class="hljs-string">&quot;admin&quot;</span> | <span class="hljs-built_in">base64</span></span><br>YWRtaW4=<br><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">echo</span> -n <span class="hljs-string">&quot;admin321&quot;</span> | <span class="hljs-built_in">base64</span></span><br>YWRtaW4zMjE=<br></code></pre></td></tr></table></figure><p>然后我们就可以利用上面编码过后的数据来编写一个YAML文件：(secret-demo.yaml)</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">apiVersion:</span> v1<br><span class="hljs-symbol">kind:</span> Secret<br><span class="hljs-symbol">metadata:</span><br><span class="hljs-symbol">  name:</span> mysecret<br><span class="hljs-symbol">type:</span> Opaque<br><span class="hljs-symbol">data:</span><br><span class="hljs-symbol">  username:</span> YWRtaW4=<br><span class="hljs-symbol">  password:</span> YWRtaW4zMjE=<br></code></pre></td></tr></table></figure><p>然后同样的我们就可以使用kubectl命令来创建了：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-variable">$</span> kubectl create <span class="hljs-operator">-f</span> secret<span class="hljs-literal">-demo</span>.yaml<br>secret <span class="hljs-string">&quot;mysecret&quot;</span> created<br></code></pre></td></tr></table></figure><p>利用get secret命令查看：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">$ kubectl <span class="hljs-keyword">get</span> secret<br><span class="hljs-type">NAME</span>                  <span class="hljs-keyword">TYPE</span>                                  DATA   AGE<br><span class="hljs-keyword">default</span>-token-zmv4x   kubernetes.io/service-account-token   <span class="hljs-number">3</span>      <span class="hljs-number">40</span>h<br>mysecret              <span class="hljs-type">Opaque</span>                                <span class="hljs-number">2</span>      <span class="hljs-number">45</span>m<br><br><br>其中<span class="hljs-keyword">default</span>-token-zmv4x为创建集群时默认创建的secret，被serviceacount/<span class="hljs-keyword">default</span> 引用。<br></code></pre></td></tr></table></figure><p>使用describe命令，查看详情：</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc">$ kubectl describe secret mysecret<br>Name:         mysecret<br>Namespace:    default<br>Labels:       &lt;none&gt;<br>Annotations:  &lt;none&gt;<br><br>Type:  Opaque<br><br><span class="hljs-section">Data</span><br><span class="hljs-section">====</span><br>password:  8 bytes<br>username:  5 bytes<br></code></pre></td></tr></table></figure><p>我们可以看到利用describe命令查看到的Data没有直接显示出来，如果想看到Data里面的详细信息，同样我们可以输出成YAML文件进行查看：</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs dts">$ kubectl get secret mysecret -o yaml<br><span class="hljs-symbol">apiVersion:</span> v1<br><span class="hljs-symbol">data:</span><br><span class="hljs-symbol">  password:</span> YWRtaW4zMjE=<br><span class="hljs-symbol">  username:</span> YWRtaW4=<br><span class="hljs-symbol">kind:</span> Secret<br><span class="hljs-symbol">metadata:</span><br><span class="hljs-symbol">  creationTimestamp:</span> <span class="hljs-number">2018</span><span class="hljs-number">-06</span><span class="hljs-number">-19</span>T15:<span class="hljs-number">27</span>:<span class="hljs-number">06</span>Z<br><span class="hljs-symbol">  name:</span> mysecret<br><span class="hljs-symbol">  namespace:</span> default<br><span class="hljs-symbol">  resourceVersion:</span> <span class="hljs-string">&quot;3694084&quot;</span><br><span class="hljs-symbol">  selfLink:</span> <span class="hljs-keyword">/api/</span>v1<span class="hljs-keyword">/namespaces/</span>default<span class="hljs-keyword">/secrets/</span>mysecret<br><span class="hljs-symbol">  uid:</span> <span class="hljs-number">39</span>c139f5<span class="hljs-number">-73</span>d5<span class="hljs-number">-11e8</span>-a101<span class="hljs-number">-525400</span>db4df7<br><span class="hljs-symbol">type:</span> Opaque<br></code></pre></td></tr></table></figure><p>Opaque类型也可以存放证书类型。</p><figure class="highlight sas"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sas">[root@k8s-m1 certs]# kubectl <span class="hljs-keyword">create</span> secret generic kubernetes-dashboard-certs --<span class="hljs-keyword">from</span>-<span class="hljs-keyword">file</span>=./dashboard.crt --<span class="hljs-keyword">from</span>-<span class="hljs-keyword">file</span>=dashboard.<span class="hljs-keyword">key</span>=./dashboard.<span class="hljs-keyword">key</span> -n kube-system<br></code></pre></td></tr></table></figure><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">[root@k8s-m1 certs]# kubectl <span class="hljs-keyword">get</span> secrets kubernetes-dashboard-certs -n kube-<span class="hljs-keyword">system</span><br><span class="hljs-type">NAME</span>                         <span class="hljs-keyword">TYPE</span>     DATA   AGE<br>kubernetes-dashboard-certs   <span class="hljs-type">Opaque</span>   <span class="hljs-number">2</span>      <span class="hljs-number">7</span>m34s<br></code></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs yaml">[<span class="hljs-string">root@k8s-m1</span> <span class="hljs-string">certs</span>]<span class="hljs-comment"># kubectl describe secret kubernetes-dashboard-certs -n kube-system</span><br><span class="hljs-attr">Name:</span>         <span class="hljs-string">kubernetes-dashboard-certs</span><br><span class="hljs-attr">Namespace:</span>    <span class="hljs-string">kube-system</span><br><span class="hljs-attr">Labels:</span>       <span class="hljs-string">k8s-app=kubernetes-dashboard</span><br><span class="hljs-attr">Annotations:</span>  <br><span class="hljs-attr">Type:</span>         <span class="hljs-string">Opaque</span><br><br><span class="hljs-string">Data</span><br><span class="hljs-string">====</span><br><span class="hljs-attr">dashboard.key:</span>  <span class="hljs-number">1704 </span><span class="hljs-string">bytes</span><br><span class="hljs-attr">dashboard.crt:</span>  <span class="hljs-number">1005 </span><span class="hljs-string">bytes</span><br></code></pre></td></tr></table></figure><h3 id="kubernetes-io-x2F-dockerconfigjson"><a href="#kubernetes-io-x2F-dockerconfigjson" class="headerlink" title="kubernetes.io&#x2F;dockerconfigjson"></a>kubernetes.io&#x2F;dockerconfigjson</h3><p>除了上面的Opaque这种类型外，我们还可以来创建用户docker registry认证的Secret，直接使用kubectl create命令创建即可，如下：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros">$ kubectl create<span class="hljs-built_in"> secret </span>docker-registry myregistry <span class="hljs-attribute">--docker-server</span>=DOCKER_SERVER <span class="hljs-attribute">--docker-username</span>=DOCKER_USER <span class="hljs-attribute">--docker-password</span>=DOCKER_PASSWORD <span class="hljs-attribute">--docker-email</span>=DOCKER_EMAIL<span class="hljs-built_in"></span><br><span class="hljs-built_in">secret </span><span class="hljs-string">&quot;myregistry&quot;</span> created<br></code></pre></td></tr></table></figure><p>然后查看Secret列表：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">$ kubectl <span class="hljs-keyword">get</span> secret<br><span class="hljs-type">NAME</span>                  <span class="hljs-keyword">TYPE</span>                                  DATA      AGE<br><span class="hljs-keyword">default</span>-token-n9w2d   kubernetes.io/service-account-token   <span class="hljs-number">3</span>         <span class="hljs-number">33</span>d<br>myregistry            kubernetes.io/dockerconfigjson        <span class="hljs-number">1</span>         <span class="hljs-number">15</span>s<br>mysecret              <span class="hljs-type">Opaque</span>                                <span class="hljs-number">2</span>         <span class="hljs-number">34</span>m<br></code></pre></td></tr></table></figure><p>注意看上面的TYPE类型，myregistry是不是对应的kubernetes.io&#x2F;dockerconfigjson，同样的可以使用describe命令来查看详细信息：</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc">$ kubectl describe secret myregistry<br>Name:         myregistry<br>Namespace:    default<br>Labels:       &lt;none&gt;<br>Annotations:  &lt;none&gt;<br><br>Type:  kubernetes.io/dockerconfigjson<br><br><span class="hljs-section">Data</span><br><span class="hljs-section">====</span><br><span class="hljs-title">.dockerconfigjson:  152 bytes</span><br></code></pre></td></tr></table></figure><p>同样的可以看到Data区域没有直接展示出来，如果想查看的话可以使用-o yaml来输出展示出来：</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs dts">$ kubectl get secret myregistry -o yaml<br><span class="hljs-symbol">apiVersion:</span> v1<br><span class="hljs-symbol">data:</span><br>  .dockerconfigjson: eyJhdXRocyI6eyJET0NLRVJfU0VSVkVSIjp7InVzZXJuYW1lIjoiRE9DS0VSX1VTRVIiLCJwYXNzd29yZCI6IkRPQ0tFUl9QQVNTV09SRCIsImVtYWlsIjoiRE9DS0VSX0VNQUlMIiwiYXV0aCI6IlJFOURTMFZTWDFWVFJWSTZSRTlEUzBWU1gxQkJVMU5YVDFKRSJ9fX0=<br><span class="hljs-symbol">kind:</span> Secret<br><span class="hljs-symbol">metadata:</span><br><span class="hljs-symbol">  creationTimestamp:</span> <span class="hljs-number">2018</span><span class="hljs-number">-06</span><span class="hljs-number">-19</span>T16:<span class="hljs-number">01</span>:<span class="hljs-number">05</span>Z<br><span class="hljs-symbol">  name:</span> myregistry<br><span class="hljs-symbol">  namespace:</span> default<br><span class="hljs-symbol">  resourceVersion:</span> <span class="hljs-string">&quot;3696966&quot;</span><br><span class="hljs-symbol">  selfLink:</span> <span class="hljs-keyword">/api/</span>v1<span class="hljs-keyword">/namespaces/</span>default<span class="hljs-keyword">/secrets/</span>myregistry<br><span class="hljs-symbol">  uid:</span> f91db707<span class="hljs-number">-73</span>d9<span class="hljs-number">-11e8</span>-a101<span class="hljs-number">-525400</span>db4df7<br><span class="hljs-symbol">type:</span> kubernetes.io/dockerconfigjson<br></code></pre></td></tr></table></figure><p>可以把上面的data.dockerconfigjson下面的数据做一个base64解码，看看里面的数据是怎样的呢？</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs gcode">$ echo eyJhdXRocyI<span class="hljs-number">6</span>eyJET<span class="hljs-number">0</span><span class="hljs-symbol">NLRVJfU0</span><span class="hljs-attr">VSVkVSIjp7</span>I<span class="hljs-symbol">nVzZXJuYW1</span>lIjoiRE<span class="hljs-number">9</span>DS<span class="hljs-number">0</span><span class="hljs-attr">VSX1</span>VTRVIiLCJwYX<span class="hljs-symbol">Nzd29</span>yZCI<span class="hljs-number">6</span>IkRPQ<span class="hljs-number">0</span>tFUl<span class="hljs-number">9</span>QQV<span class="hljs-symbol">NTV09</span>SRCIsImVtYWlsIjoiRE<span class="hljs-number">9</span>DS<span class="hljs-number">0</span><span class="hljs-attr">VSX0</span>V<span class="hljs-symbol">NQUlMIiwiYXV0</span>aCI<span class="hljs-number">6</span>IlJFOURTMFZTWDFWVFJWSTZSRTlEUzBWU<span class="hljs-number">1</span>gxQkJVMU<span class="hljs-number">5</span>YVDFKRSJ<span class="hljs-number">9</span>fX<span class="hljs-number">0</span>= | base<span class="hljs-number">64</span> -d<br>&#123;<span class="hljs-string">&quot;auths&quot;</span>:&#123;<span class="hljs-string">&quot;DOCKER_SERVER&quot;</span>:&#123;<span class="hljs-string">&quot;username&quot;</span>:<span class="hljs-string">&quot;DOCKER_USER&quot;</span>,<span class="hljs-string">&quot;password&quot;</span>:<span class="hljs-string">&quot;DOCKER_PASSWORD&quot;</span>,<span class="hljs-string">&quot;email&quot;</span>:<span class="hljs-string">&quot;DOCKER_EMAIL&quot;</span>,<span class="hljs-string">&quot;auth&quot;</span>:<span class="hljs-string">&quot;RE9DS0VSX1VTRVI6RE9DS0VSX1BBU1NXT1JE&quot;</span>&#125;&#125;&#125;<br></code></pre></td></tr></table></figure><p>如果我们需要拉取私有仓库中的docker镜像的话就需要使用到上面的myregistry这个Secret：</p><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-attribute">apiVersion</span><span class="hljs-punctuation">:</span> <span class="hljs-string">v1</span><br><span class="hljs-attribute">kind</span><span class="hljs-punctuation">:</span> <span class="hljs-string">Pod</span><br><span class="hljs-attribute">metadata</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">foo</span><br><span class="hljs-attribute">spec</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">containers</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">name: foo</span><br>    <span class="hljs-attribute">image</span><span class="hljs-punctuation">:</span> <span class="hljs-string">192.168.1.100:5000/test:v1</span><br>  <span class="hljs-attribute">imagePullSecrets</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">name: myregistry</span><br></code></pre></td></tr></table></figure><p>我们需要拉取私有仓库镜像192.168.1.100:5000&#x2F;test:v1，我们就需要针对该私有仓库来创建一个如上的Secret，然后在Pod的 YAML 文件中指定imagePullSecrets，我们会在后面的私有仓库搭建的课程中跟大家详细说明的。</p><h3 id="kubernetes-io-x2F-tls"><a href="#kubernetes-io-x2F-tls" class="headerlink" title="kubernetes.io&#x2F;tls"></a>kubernetes.io&#x2F;tls</h3><p><code>kubernetes.io/tls</code>用于为SSL通信模式存储证书和私钥文件，一般用于构建TLS站点。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs csharp">[<span class="hljs-meta">root@k8s-m1 ye</span>]<span class="hljs-meta"># openssl genrsa -out tls.key 2048</span><br>Generating RSA <span class="hljs-keyword">private</span> key, <span class="hljs-number">2048</span> bit <span class="hljs-built_in">long</span> modulus<br>.........................................................+++<br>.......................................+++<br>e <span class="hljs-keyword">is</span> <span class="hljs-number">65537</span> (<span class="hljs-number">0x10001</span>)<br></code></pre></td></tr></table></figure><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gradle">[root@k8s-m1 ye]# openssl req -<span class="hljs-keyword">new</span> -x509 -key tls.key -out tls.crt -subj <span class="hljs-regexp">/C=CN/</span>ST=Beijing<span class="hljs-regexp">/L=Beijing/</span>O=DevOps/CN=demo.tomcat.com <br></code></pre></td></tr></table></figure><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros">[root@k8s-m1 ye]# kubectl create<span class="hljs-built_in"> secret </span>tls tomcat-secret <span class="hljs-attribute">--cert</span>=tls.crt <span class="hljs-attribute">--key</span>=tls.key        <br>secret/tomcat-secret created<br></code></pre></td></tr></table></figure><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs fortran">[root@k8s-m1 ye]# kubectl get secret<br><span class="hljs-keyword">NAME</span>                                     <span class="hljs-keyword">TYPE</span>                                  <span class="hljs-keyword">DATA</span>   AGE<br><span class="hljs-keyword">default</span>-token-pkx6j                      kubernetes.io/service-account-token   <span class="hljs-number">3</span>      <span class="hljs-number">120</span>d<br>tomcat-secret                            kubernetes.io/tls                     <span class="hljs-number">2</span>      <span class="hljs-number">34</span>s<br></code></pre></td></tr></table></figure><h3 id="kubernetes-io-x2F-service-account-token"><a href="#kubernetes-io-x2F-service-account-token" class="headerlink" title="kubernetes.io&#x2F;service-account-token"></a>kubernetes.io&#x2F;service-account-token</h3><p>有些情况下，我们希望在 pod 内部访问 apiserver，获取集群的信息，甚至对集群进行改动。针对这种情况，kubernetes 提供了一种特殊的认证方式：Service Account。 Service Account 是面向 namespace 的，每个 namespace 创建的时候，kubernetes 会自动在这个 namespace 下面创建一个默认的 Service Account；并且这个 Service Account 只能访问该 namespace 的资源。Service Account 和 pod、service、deployment 一样是kubernetes 集群中的一种资源，用户也可以创建自己的 serviceaccount。</p><p>ServiceAccount 主要包含了三个内容：namespace、Token 和 CA。namespace 指定了 pod 所在的 namespace，CA 用于验证 apiserver 的证书，token 用作身份验证。它们都通过mount 的方式挂载到 pod 中，其中 token 保存的路径是 &#x2F;var&#x2F;run&#x2F;secrets&#x2F;kubernetes.io&#x2F;serviceaccount&#x2F;token ，是 kube-controller-manager 通过–service-account-private-key-file私钥签发的token； CA 保存的路径是 &#x2F;var&#x2F;run&#x2F;secrets&#x2F;kubernetes.io&#x2F;serviceaccount&#x2F;ca.crt ，namespace 保存的路径是 &#x2F;var&#x2F;run&#x2F;secrets&#x2F;kubernetes.io&#x2F;serviceaccount&#x2F;namespace 。</p><p>如果 token 能够通过认证，那么请求的用户名将被设置为 system:serviceaccount:(NAMESPACE):(SERVICEACCOUNT) ，而请求的组名有两个： system:serviceaccounts 和 system:serviceaccounts:(NAMESPACE)。</p><h3 id="API-Server的service-account验证过程"><a href="#API-Server的service-account验证过程" class="headerlink" title="API Server的service account验证过程"></a>API Server的service account验证过程</h3><p>以kube-system namespace下的“default” service account为例，Pod的usrname全称为：system:serviceaccount:kube-system:default。有了username，那么credentials呢？就是上面提到的service-account-token中的token。API Server的验证环节支持多种身份校验方式：CA 证书认证、Token 认证、Base 认证。一旦API Server发现client发起的request使用的是service account token的方式，API Server就会自动采用signed bearer token方式进行身份校验。而request就会使用携带的service account token参与验证。该token是API Server在创建service account时用API server启动参数：–service-account-key-file&#x3D;&#x2F;etc&#x2F;kubernetes&#x2F;pki&#x2F;sa.pub的值签署(sign)生成的。如果–service-account-key-file&#x3D;未传入任何值，那么将默认使用–tls-private-key-file的值，即API Server的私钥。</p><p>这里我们使用一个nginx镜像来验证一下，大家想一想为什么不是呀busybox镜像来验证？当然也是可以的，但是我们就不能在command里面来验证了，因为token是需要Pod运行起来过后才会被挂载上去的，直接在command命令中去查看肯定是还没有 token 文件的。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">kubectl run secret-pod3 --image nginx:1.7.9</span><br>deployment.apps &quot;secret-pod3&quot; created<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">kubectl get pods</span><br>NAME                           READY     STATUS    RESTARTS   AGE<br>...<br>secret-pod3-78c8c76db8-7zmqm   1/1       Running   0          13s<br>...<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">kubectl <span class="hljs-built_in">exec</span> secret-pod3-78c8c76db8-7zmqm <span class="hljs-built_in">ls</span> /run/secrets/kubernetes.io/serviceaccount</span><br>ca.crt<br>namespace<br>token<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">kubectl <span class="hljs-built_in">exec</span> secret-pod3-78c8c76db8-7zmqm <span class="hljs-built_in">cat</span> /run/secrets/kubernetes.io/serviceaccount/token</span><br>eyJhbGciOiJSUzI1NiIsImtpZCI6IiJ9.eyJpc3MiOiJrdWJlcm5ldGVzL3NlcnZpY2VhY2NvdW50Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9uYW1lc3BhY2UiOiJkZWZhdWx0Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9zZWNyZXQubmFtZSI6ImRlZmF1bHQtdG9rZW4tbjl3MmQiLCJrdWJlcm5ldGVzLmlvL3NlcnZpY2VhY2NvdW50L3NlcnZpY2UtYWNjb3VudC5uYW1lIjoiZGVmYXVsdCIsImt1YmVybmV0ZXMuaW8vc2VydmljZWFjY291bnQvc2VydmljZS1hY2NvdW50LnVpZCI6IjMzY2FkOWQxLTU5MmYtMTFlOC1hMTAxLTUyNTQwMGRiNGRmNyIsInN1YiI6InN5c3RlbTpzZXJ2aWNlYWNjb3VudDpkZWZhdWx0OmRlZmF1bHQifQ.0FpzPD8WO_fwnMjwpGIOphdVu4K9wUINwpXpBOJAQ-Tawd0RTbAUHcgYy3sEHSk9uvgnl1FJRQpbQN3yVR_DWSIlAtbmd4dIPxK4O7ZVdd4UnmC467cNXEBqL1sDWLfS5f03d7D1dw1ljFJ_pJw2P65Fjd13reKJvvTQnpu5U0SDcfxj675-Z3z-iOO3XSalZmkFIw2MfYMzf_WpxW0yMFCVkUZ8tBSTegA9-NJZededceA_VCOdKcUjDPrDo-CNti3wZqax5WPw95Ou8RJDMAIS5EcVym7M2_zjGiqHEL3VTvcwXbdFKxsNX-1VW6nr_KKuMGKOyx-5vgxebl71QQ<br></code></pre></td></tr></table></figure><h2 id="创建好Secret对象后，有两种方式来使用它："><a href="#创建好Secret对象后，有两种方式来使用它：" class="headerlink" title="创建好Secret对象后，有两种方式来使用它："></a>创建好Secret对象后，有两种方式来使用它：</h2><ul><li>以环境变量的形式</li><li>以Volume的形式挂载</li></ul><h3 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a>环境变量</h3><p>首先我们来测试下环境变量的方式，同样的，我们来使用一个简单的busybox镜像来测试下:(secret1-pod.yaml)</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">apiVersion:</span> v1<br><span class="hljs-symbol">kind:</span> Pod<br><span class="hljs-symbol">metadata:</span><br><span class="hljs-symbol">  name:</span> secret1-pod<br><span class="hljs-symbol">spec:</span><br><span class="hljs-symbol">  containers:</span><br>  - name: secret1<br><span class="hljs-symbol">    image:</span> busybox<br><span class="hljs-symbol">    command:</span> [ <span class="hljs-string">&quot;/bin/sh&quot;</span>, <span class="hljs-string">&quot;-c&quot;</span>, <span class="hljs-string">&quot;env&quot;</span> ]<br><span class="hljs-symbol">    env:</span><br>    - name: USERNAME<br><span class="hljs-symbol">      valueFrom:</span><br><span class="hljs-symbol">        secretKeyRef:</span><br><span class="hljs-symbol">          name:</span> mysecret<br><span class="hljs-symbol">          key:</span> username<br>    - name: PASSWORD<br><span class="hljs-symbol">      valueFrom:</span><br><span class="hljs-symbol">        secretKeyRef:</span><br><span class="hljs-symbol">          name:</span> mysecret<br><span class="hljs-symbol">          key:</span> password<br></code></pre></td></tr></table></figure><p>主要上面环境变量中定义的secretKeyRef关键字，和我们上节课的configMapKeyRef是不是比较类似，一个是从Secret对象中获取，一个是从ConfigMap对象中获取，创建上面的Pod：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-variable">$</span> kubectl create <span class="hljs-operator">-f</span> secret1<span class="hljs-literal">-pod</span>.yaml<br>pod <span class="hljs-string">&quot;secret1-pod&quot;</span> created<br></code></pre></td></tr></table></figure><p>然后我们查看Pod的日志输出：</p><figure class="highlight node-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs node-repl">$ kubectl logs secret1-pod<br><span class="hljs-meta prompt_">...</span><br>USERNAME=admin<br>PASSWORD=admin321<br><span class="hljs-meta prompt_">...</span><br></code></pre></td></tr></table></figure><p>可以看到有 USERNAME 和 PASSWORD 两个环境变量输出出来。</p><h3 id="Volume-挂载"><a href="#Volume-挂载" class="headerlink" title="Volume 挂载"></a>Volume 挂载</h3><p>同样的我们用一个Pod来验证下Volume挂载，创建一个Pod文件：(secret2-pod.yaml)</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">apiVersion:</span> v1<br><span class="hljs-symbol">kind:</span> Pod<br><span class="hljs-symbol">metadata:</span><br><span class="hljs-symbol">  name:</span> secret2-pod<br><span class="hljs-symbol">spec:</span><br><span class="hljs-symbol">  containers:</span><br>  - name: secret2<br><span class="hljs-symbol">    image:</span> busybox<br><span class="hljs-symbol">    command:</span> [<span class="hljs-string">&quot;/bin/sh&quot;</span>, <span class="hljs-string">&quot;-c&quot;</span>, <span class="hljs-string">&quot;ls /etc/secrets&quot;</span>]<br><span class="hljs-symbol">    volumeMounts:</span><br>    - name: secrets<br><span class="hljs-symbol">      mountPath:</span> <span class="hljs-keyword">/etc/</span>secrets<br><span class="hljs-symbol">  volumes:</span><br>  - name: secrets<br><span class="hljs-symbol">    secret:</span><br><span class="hljs-symbol">     secretName:</span> mysecret<br></code></pre></td></tr></table></figure><p>创建Pod:</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-variable">$</span> kubectl create <span class="hljs-operator">-f</span> secret<span class="hljs-literal">-pod2</span>.yaml<br>pod <span class="hljs-string">&quot;secret2-pod&quot;</span> created<br></code></pre></td></tr></table></figure><p>然后我们查看输出日志：</p><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs crystal"><span class="hljs-variable">$ </span>kubectl logs secret2-pod<br>password<br>username<br></code></pre></td></tr></table></figure><p>可以看到secret把两个key挂载成了两个对应的文件。当然如果想要挂载到指定的文件上面，是不是也可以使用上一节课的方法：在secretName下面添加items指定 key 和 path，这个大家可以参考上节课ConfigMap中的方法去测试下。</p><h2 id="Secret-与-ConfigMap-对比"><a href="#Secret-与-ConfigMap-对比" class="headerlink" title="Secret 与 ConfigMap 对比"></a>Secret 与 ConfigMap 对比</h2><p>最后我们来对比下Secret和ConfigMap这两种资源对象的异同点：</p><blockquote><h3 id="相同点："><a href="#相同点：" class="headerlink" title="相同点："></a>相同点：</h3></blockquote><ul><li>key&#x2F;value 的形式</li><li>属于某个特定的namespace</li><li>可以导出到环境变量</li><li>可以通过目录&#x2F;文件形式挂载</li><li>通过volume挂载的配置信息均可热更新</li></ul><blockquote><h3 id="不同点："><a href="#不同点：" class="headerlink" title="不同点："></a>不同点：</h3></blockquote><ul><li>Secret 可以被ServerAccount关联</li><li>Secret 可以存储docker register的鉴权信息，用在ImagePullSecret 参数中，用于拉取私有仓库的镜像</li><li>Secret 支持Base64加密</li><li>Secret 分为 kubernetes.io&#x2F;service-account-token、kubernetes.io&#x2F;dockerconfigjson、Opaque 、kubernetes.io&#x2F;tls 四种类型，而Configmap不区分类型</li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Kubernetes之configMap</title>
    <link href="/2019/08/26/Kubernetes-configMap/"/>
    <url>/2019/08/26/Kubernetes-configMap/</url>
    
    <content type="html"><![CDATA[<blockquote><p>我们知道，在几乎所有的应用开发中，都会涉及到配置文件的变更，比如说在web的程序中，需要连接数据库，缓存甚至是队列等等。而我们的一个应用程序从写第一行代码开始，要经历开发环境、测试环境、预发布环境只到最终的线上环境。而每一个环境都要定义其独立的各种配置。如果我们不能很好的管理这些配置文件，你的运维工作将顿时变的无比的繁琐。为此业内的一些大公司专门开发了自己的一套配置管理中心，如360的Qcon，百度的disconf等。kubernetes也提供了自己的一套方案，即ConfigMap。kubernetes通过ConfigMap来实现对容器中应用的配置管理。</p></blockquote><h3 id="ConfigMap（配置文件注入Pod）-概述："><a href="#ConfigMap（配置文件注入Pod）-概述：" class="headerlink" title="ConfigMap（配置文件注入Pod） 概述："></a>ConfigMap（配置文件注入Pod） 概述：</h3><blockquote><h4 id="ConfigMap-供容器使用的典型用法如下："><a href="#ConfigMap-供容器使用的典型用法如下：" class="headerlink" title="ConfigMap 供容器使用的典型用法如下："></a>ConfigMap 供容器使用的典型用法如下：</h4></blockquote><ul><li>生成为容器的环境变量。</li><li>以 Volume 的形式挂载为容器内部的文件或目录。</li></ul><blockquote><p>ConfiMap 以一个或多个 key:value 的形式保存在 Kubernetes 系统中提供应用使用，即可以用于表示一个变量的值（例如 apploglevel&#x3D;info），也可以用于表示一个完整配置文件的内容（例如：server.xml&#x3D;&lt;?xml…&gt;…）</p></blockquote><h3 id="创建-ConfigMap-资源对象"><a href="#创建-ConfigMap-资源对象" class="headerlink" title="创建 ConfigMap 资源对象"></a>创建 ConfigMap 资源对象</h3><blockquote><h4 id="通过-yaml-配置文件方式创建"><a href="#通过-yaml-配置文件方式创建" class="headerlink" title="通过 yaml 配置文件方式创建"></a>通过 yaml 配置文件方式创建</h4><p>下面的例子 cm-appvars.yaml 描述了将几个应用所需的变量定义为 ConfigMap 的用法：</p></blockquote><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs dts">cm-appvars.yaml<br><span class="hljs-symbol">apiVersion:</span> v1<br><span class="hljs-symbol">kind:</span> ConfigMap<br><span class="hljs-symbol">metadata:</span><br><span class="hljs-symbol">  name:</span> cm-appvars<br><span class="hljs-symbol">data:</span><br><span class="hljs-symbol">  apploglevel:</span> info<br><span class="hljs-symbol">  appdatadir:</span> <span class="hljs-keyword">/var/</span>data<br></code></pre></td></tr></table></figure><h4 id="执行创建："><a href="#执行创建：" class="headerlink" title="执行创建："></a>执行创建：</h4><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs autoit">[root<span class="hljs-symbol">@master</span><span class="hljs-number">-1</span> app]<span class="hljs-meta">#  kubectl apply -f cm-appvars.yaml</span><br></code></pre></td></tr></table></figure><h4 id="查看创建好的-ConfigMap："><a href="#查看创建好的-ConfigMap：" class="headerlink" title="查看创建好的 ConfigMap："></a>查看创建好的 ConfigMap：</h4><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs autoit">[root<span class="hljs-symbol">@master</span><span class="hljs-number">-1</span> app]<span class="hljs-meta"># kubectl get configmap</span><br>NAME         DATA   AGE<br>cm-appvars   <span class="hljs-number">2</span>      <span class="hljs-number">63</span>m<br></code></pre></td></tr></table></figure><h4 id="查看详细信息："><a href="#查看详细信息：" class="headerlink" title="查看详细信息："></a>查看详细信息：</h4><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc">[root@master-1 app]# kubectl describe configmap cm-appvars<br>Name:         cm-appvars<br>Namespace:    default<br>Labels:       &lt;none&gt;<br>Annotations:  kubectl.kubernetes.io/last-applied-configuration:<br><span class="hljs-code">                &#123;&quot;apiVersion&quot;:&quot;v1&quot;,&quot;data&quot;:&#123;&quot;appdatadir&quot;:&quot;/var/data&quot;,&quot;apploglevel&quot;:&quot;info&quot;&#125;,&quot;kind&quot;:&quot;ConfigMap&quot;,&quot;metadata&quot;:&#123;&quot;annotations&quot;:&#123;&#125;,&quot;name&quot;:&quot;cm-appva...</span><br><br><span class="hljs-section">Data</span><br><span class="hljs-section">====</span><br><span class="hljs-section">appdatadir:</span><br><span class="hljs-section">----</span><br>/var/data<br><span class="hljs-section">apploglevel:</span><br><span class="hljs-section">----</span><br>info<br>Events:  &lt;none&gt;<br></code></pre></td></tr></table></figure><h4 id="查看-yaml-形式数据："><a href="#查看-yaml-形式数据：" class="headerlink" title="查看 yaml 形式数据："></a>查看 yaml 形式数据：</h4><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs dts">[root@master<span class="hljs-number">-1</span> app]<span class="hljs-meta"># kubectl get  configmap cm-appvars -o yaml</span><br><span class="hljs-symbol">apiVersion:</span> v1<br><span class="hljs-symbol">data:</span><br><span class="hljs-symbol">  appdatadir:</span> <span class="hljs-keyword">/var/</span>data<br><span class="hljs-symbol">  apploglevel:</span> info<br><span class="hljs-symbol">kind:</span> ConfigMap<br><span class="hljs-symbol">metadata:</span><br><span class="hljs-symbol">  annotations:</span><br>    kubectl.kubernetes.io/last-applied-configuration: |<br>      <span class="hljs-punctuation">&#123;</span><span class="hljs-string">&quot;apiVersion&quot;</span>:<span class="hljs-string">&quot;v1&quot;</span>,<span class="hljs-string">&quot;data&quot;</span>:<span class="hljs-punctuation">&#123;</span><span class="hljs-string">&quot;appdatadir&quot;</span>:<span class="hljs-string">&quot;/var/data&quot;</span>,<span class="hljs-string">&quot;apploglevel&quot;</span>:<span class="hljs-string">&quot;info&quot;</span><span class="hljs-punctuation">&#125;</span>,<span class="hljs-string">&quot;kind&quot;</span>:<span class="hljs-string">&quot;ConfigMap&quot;</span>,<span class="hljs-string">&quot;metadata&quot;</span>:<span class="hljs-punctuation">&#123;</span><span class="hljs-string">&quot;annotations&quot;</span>:<span class="hljs-punctuation">&#123;</span><span class="hljs-punctuation">&#125;</span>,<span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;cm-appvars&quot;</span>,<span class="hljs-string">&quot;namespace&quot;</span>:<span class="hljs-string">&quot;default&quot;</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">&#125;</span><br><span class="hljs-symbol">  creationTimestamp:</span> <span class="hljs-string">&quot;2019-01-23T01:41:49Z&quot;</span><br><span class="hljs-symbol">  name:</span> cm-appvars<br><span class="hljs-symbol">  namespace:</span> default<br><span class="hljs-symbol">  resourceVersion:</span> <span class="hljs-string">&quot;81484&quot;</span><br><span class="hljs-symbol">  selfLink:</span> <span class="hljs-keyword">/api/</span>v1<span class="hljs-keyword">/namespaces/</span>default<span class="hljs-keyword">/configmaps/</span>cm-appvars<br><span class="hljs-symbol">  uid:</span> <span class="hljs-number">0</span>cf43d8e<span class="hljs-number">-1</span>eb0<span class="hljs-number">-11e9</span>-a8c7-d8490b8af3ae<br></code></pre></td></tr></table></figure><h3 id="通过-kubectl-命令行方式创建"><a href="#通过-kubectl-命令行方式创建" class="headerlink" title="通过 kubectl 命令行方式创建"></a>通过 kubectl 命令行方式创建</h3><blockquote><p>如果不想使用 yaml 文件，可直接通过 kubectl 也可以创建 ConfigMap，可以使用参数 –from-file 或 –from-literal 指定内容，并且可以在一行命令中指定多个参数。</p></blockquote><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs gradle"><span class="hljs-number">1</span>、通过 --<span class="hljs-keyword">from</span>-<span class="hljs-keyword">file</span> 参数从文件中进行创建，可以指定 key 的名称，也可以在一个命令行中创建多个 key 的 ConfigMap，文件的内容被设置为 value，语法为：<br>kubectl create configmap my-config --<span class="hljs-keyword">from</span>-<span class="hljs-keyword">file</span>=key1=<span class="hljs-regexp">/path/</span>to<span class="hljs-regexp">/bar/</span>file1.txt --<span class="hljs-keyword">from</span>-<span class="hljs-keyword">file</span>=key2=<span class="hljs-regexp">/path/</span>to<span class="hljs-regexp">/bar/</span>file2.txt<br></code></pre></td></tr></table></figure><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs gradle"><span class="hljs-number">2</span>、通过 --<span class="hljs-keyword">from</span>-<span class="hljs-keyword">file</span> 参数从文件中进行创建，文件名都被设置为 key，文件的内容被设置为 value，语法为：<br>kubectl create configmap my-config --<span class="hljs-keyword">from</span>-<span class="hljs-keyword">file</span>=path<span class="hljs-regexp">/to/</span>bar/file1.txt<br></code></pre></td></tr></table></figure><figure class="highlight sas"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sas">3、--<span class="hljs-keyword">from</span>-literal 从文本中进行创建，直接将指定的 <span class="hljs-keyword">key</span>:value 创建为 ConfigMap 的内容语法为：<br>kubectl <span class="hljs-keyword">create</span> configmap my-config --<span class="hljs-keyword">from</span>-literal=key1=config1 --<span class="hljs-keyword">from</span>-literal=key2=config2<br></code></pre></td></tr></table></figure><h3 id="容器应用对-ConfigMap-的使用有以下两种方法。"><a href="#容器应用对-ConfigMap-的使用有以下两种方法。" class="headerlink" title="容器应用对 ConfigMap 的使用有以下两种方法。"></a>容器应用对 ConfigMap 的使用有以下两种方法。</h3><blockquote><p>1、通过环境变量获取 ConfigMap 中的内容。(不支持动态更新)<br>2、通过 Volume 挂载的方式将 ConfigMap 中的内容关在为容器内部的文件或目录。(支持动态更新)</p></blockquote><h4 id="第一种方式示例（通过环境变量的方式使用-ConfigMap）："><a href="#第一种方式示例（通过环境变量的方式使用-ConfigMap）：" class="headerlink" title="第一种方式示例（通过环境变量的方式使用 ConfigMap）："></a>第一种方式示例（通过环境变量的方式使用 ConfigMap）：</h4><blockquote><p>ConfigMap文件：</p></blockquote><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">apiVersion:</span> v1<br><span class="hljs-symbol">kind:</span> ConfigMap<br><span class="hljs-symbol">metadata:</span><br><span class="hljs-symbol">  name:</span> cm-appvars<br><span class="hljs-symbol">data:</span><br><span class="hljs-symbol">  apploglevel:</span> info<br><span class="hljs-symbol">  appdatadir:</span> <span class="hljs-keyword">/var/</span>data<br></code></pre></td></tr></table></figure><blockquote><p>在 Pod 定义中，将 ConfigMap “cm-appvars” 中的内容以环境变量设置为容器内部的环境变量，容器的启动命令将显示这两个环境变量的值：</p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Pod</span> <br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">nginx-test4</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">default</span><br>  <span class="hljs-attr">labels:</span><br>    <span class="hljs-attr">app:</span> <span class="hljs-string">nginx1</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">containers:</span> <br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">nginxtest</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">nginx:latest</span><br>    <span class="hljs-attr">env:</span><br>     <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">APP_DATA_DIR</span>         <span class="hljs-comment">#自定义pod内环境变量名称（必须是“大写”、“下划线”）</span><br>       <span class="hljs-attr">valueFrom:</span><br>         <span class="hljs-attr">configMapKeyRef:</span><br>           <span class="hljs-attr">name:</span> <span class="hljs-string">cm-appvars</span>          <span class="hljs-comment">#configmap的name</span><br>           <span class="hljs-attr">key:</span> <span class="hljs-string">appdatadir</span>           <span class="hljs-comment">#configmap的key</span><br>     <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">APP_LOG_LEVEL</span><br>       <span class="hljs-attr">valueFrom:</span><br>         <span class="hljs-attr">configMapKeyRef:</span><br>           <span class="hljs-attr">name:</span> <span class="hljs-string">cm-appvars</span>   <br>           <span class="hljs-attr">key:</span> <span class="hljs-string">apploglevel</span>    <br>    <span class="hljs-attr">imagePullPolicy:</span> <span class="hljs-string">IfNotPresent</span><br>    <span class="hljs-attr">ports:</span><br>     <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">http</span><br>       <span class="hljs-attr">containerPort:</span> <span class="hljs-number">80</span><br>     <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">https</span><br>       <span class="hljs-attr">containerPort:</span> <span class="hljs-number">443</span><br></code></pre></td></tr></table></figure><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs autoit"><span class="hljs-meta">#进入查看是否成功加载</span><br>[root<span class="hljs-symbol">@master</span><span class="hljs-number">-1</span> app]<span class="hljs-meta"># kubectl exec  -it nginx-test4 -- printenv</span><br></code></pre></td></tr></table></figure><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs crmsh"><span class="hljs-comment">#编辑configmap</span><br>[root@k8s-<span class="hljs-keyword">master</span> <span class="hljs-title">volumes</span>]<span class="hljs-comment">#  kubectl edit cm cm-appvars</span><br>configmap/cm-appvars edited<br></code></pre></td></tr></table></figure><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs autoit"><span class="hljs-meta">#查看是否编辑生效（是没有生效的，使用环境变量的方式注入不支持动态更新，因为pod在启动的时候就加载了环境变量）</span><br>[root<span class="hljs-symbol">@master</span><span class="hljs-number">-1</span> app]<span class="hljs-meta"># kubectl exec -it nginx-test4 -- printenv</span><br></code></pre></td></tr></table></figure><blockquote><p>从 Kubernetes 1.6 开始，引入了一个新的字段 envFrom，实现在 Pod 环境内将 ConfigMap（也可以用于 Secret 资源对象）中所有定义的 key&#x3D;value 自动生成为环境变量：</p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Pod</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">nginx-test4</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">default</span><br>  <span class="hljs-attr">labels:</span><br>    <span class="hljs-attr">app:</span> <span class="hljs-string">nginx1</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">containers:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">nginxtest</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">nginx:latest</span><br>    <span class="hljs-attr">envFrom:</span>             <span class="hljs-comment">#将configmap自动生成为环境变量</span><br>     <span class="hljs-bullet">-</span> <span class="hljs-attr">configMapRef:</span><br>         <span class="hljs-attr">name:</span> <span class="hljs-string">cm-appvars</span><br>    <span class="hljs-attr">imagePullPolicy:</span> <span class="hljs-string">IfNotPresent</span><br>    <span class="hljs-attr">ports:</span><br>     <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">http</span><br>       <span class="hljs-attr">containerPort:</span> <span class="hljs-number">80</span><br>     <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">https</span><br>       <span class="hljs-attr">containerPort:</span> <span class="hljs-number">443</span><br></code></pre></td></tr></table></figure><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs autoit"><span class="hljs-meta">#进入查看是否成功加载</span><br>[root<span class="hljs-symbol">@master</span><span class="hljs-number">-1</span> app]<span class="hljs-meta"># kubectl exec  -it nginx-test4 -- printenv</span><br></code></pre></td></tr></table></figure><h4 id="第二种方式示例（通过-VolumeMount-使用-ConfigMap）"><a href="#第二种方式示例（通过-VolumeMount-使用-ConfigMap）" class="headerlink" title="第二种方式示例（通过 VolumeMount 使用 ConfigMap）"></a>第二种方式示例（通过 VolumeMount 使用 ConfigMap）</h4><blockquote><p>使用volume将ConfigMap作为文件或目录直接挂载，其中每一个key-value键值对都会生成一个文件，key为文件名，value为文件内容，下面是一个示例：(当一个configmap中有多个key-value键值对时要注意每一个key-value键值对都会生成一个文件)</p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Pod</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">nginx-test4</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">default</span><br>  <span class="hljs-attr">labels:</span><br>    <span class="hljs-attr">app:</span> <span class="hljs-string">nginx1</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">containers:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">nginxtest</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">nginx:latest</span><br>    <span class="hljs-attr">volumeMounts:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">config</span>      <span class="hljs-comment"># 指定要挂在的名称</span><br>        <span class="hljs-attr">mountPath:</span> <span class="hljs-string">/etc/nginx/conf.d/</span>    <span class="hljs-comment">#指定要挂在到哪里</span><br>    <span class="hljs-attr">imagePullPolicy:</span> <span class="hljs-string">IfNotPresent</span><br>    <span class="hljs-attr">ports:</span><br>     <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">http</span><br>       <span class="hljs-attr">containerPort:</span> <span class="hljs-number">80</span><br>     <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">https</span><br>       <span class="hljs-attr">containerPort:</span> <span class="hljs-number">443</span><br>  <span class="hljs-attr">volumes:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">config</span>         <span class="hljs-comment"># 定义一个挂在名称</span><br>      <span class="hljs-attr">configMap:</span><br>        <span class="hljs-attr">name:</span> <span class="hljs-string">cm-appvars</span>         <span class="hljs-comment">#configmap name</span><br><br><span class="hljs-comment"># 注意：cm-appvars中有两个key-value键值对，也就是会在/etc/nginx/conf.d/创建两个文件，key为文件名，value为文件内容</span><br></code></pre></td></tr></table></figure><h4 id="验证是否是把两个key生成了两个文件，value是文件中的内容"><a href="#验证是否是把两个key生成了两个文件，value是文件中的内容" class="headerlink" title="验证是否是把两个key生成了两个文件，value是文件中的内容"></a>验证是否是把两个key生成了两个文件，value是文件中的内容</h4><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs gradle">[root@master-<span class="hljs-number">1</span> app]# kubectl exec -it nginx-test4 -- ls <span class="hljs-regexp">/etc/</span>nginx<span class="hljs-regexp">/conf.d/</span><br>appdatadir  apploglevel<br></code></pre></td></tr></table></figure><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs crmsh"><span class="hljs-comment">#编辑configmap</span><br>[root@k8s-<span class="hljs-keyword">master</span> <span class="hljs-title">volumes</span>]<span class="hljs-comment">#  kubectl edit cm cm-appvars</span><br>configmap/cm-appvars edited<br></code></pre></td></tr></table></figure><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs autoit"><span class="hljs-meta">#查看是否编辑生效（修改已经生效）</span><br>[root<span class="hljs-symbol">@master</span><span class="hljs-number">-1</span> app]<span class="hljs-meta"># kubectl exec -it nginx-test4 -- printenv</span><br></code></pre></td></tr></table></figure><h3 id="configmap单key-value配置文件挂载："><a href="#configmap单key-value配置文件挂载：" class="headerlink" title="configmap单key-value配置文件挂载："></a>configmap单key-value配置文件挂载：</h3><blockquote><p>使用volume将ConfigMap作为文件或目录直接挂载到某个服务上做服务的配置文件，例如下面将<a href="http://www.conf配置文件使用configmap的方式挂载到nginx的配置文件目录下作为nginx的配置文件.此方式还支持动态修改/">www.conf配置文件使用configmap的方式挂载到nginx的配置文件目录下作为nginx的配置文件。此方式还支持动态修改</a></p></blockquote><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs abnf">server &#123;<br>    server_name myapp.magedu.com<span class="hljs-comment">;</span><br>    listen <span class="hljs-number">80</span><span class="hljs-comment">;</span><br>    root /data/web/html<span class="hljs-comment">;</span><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript"><span class="hljs-comment">#使用文件名作为key，文件名作为value创建一个configmap</span><br>[root@master<span class="hljs-number">-1</span> app]<span class="hljs-comment"># kubectl create configmap my-config --from-file=./www.conf </span><br><br></code></pre></td></tr></table></figure><h4 id="使用VolumeMount方式挂载"><a href="#使用VolumeMount方式挂载" class="headerlink" title="使用VolumeMount方式挂载"></a>使用VolumeMount方式挂载</h4><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-attribute">apiVersion</span><span class="hljs-punctuation">:</span> <span class="hljs-string">v1</span><br><span class="hljs-attribute">kind</span><span class="hljs-punctuation">:</span> <span class="hljs-string">Pod</span><br><span class="hljs-attribute">metadata</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">nginx-test4</span><br>  <span class="hljs-attribute">namespace</span><span class="hljs-punctuation">:</span> <span class="hljs-string">default</span><br>  <span class="hljs-attribute">labels</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-attribute">app</span><span class="hljs-punctuation">:</span> <span class="hljs-string">nginx1</span><br><span class="hljs-attribute">spec</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">containers</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">name: nginxtest</span><br>    <span class="hljs-attribute">image</span><span class="hljs-punctuation">:</span> <span class="hljs-string">nginx:latest</span><br>    <span class="hljs-attribute">volumeMounts</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">name: nginxconfig</span><br>        <span class="hljs-attribute">mountPath</span><span class="hljs-punctuation">:</span> <span class="hljs-string">/etc/nginx/conf.d/</span><br>    <span class="hljs-attribute">imagePullPolicy</span><span class="hljs-punctuation">:</span> <span class="hljs-string">IfNotPresent</span><br>    <span class="hljs-attribute">ports</span><span class="hljs-punctuation">:</span><br>     <span class="hljs-bullet">-</span> <span class="hljs-string">name: http</span><br>       <span class="hljs-attribute">containerPort</span><span class="hljs-punctuation">:</span> <span class="hljs-string">80</span><br>     <span class="hljs-bullet">-</span> <span class="hljs-string">name: https</span><br>       <span class="hljs-attribute">containerPort</span><span class="hljs-punctuation">:</span> <span class="hljs-string">443</span><br>  <span class="hljs-attribute">volumes</span><span class="hljs-punctuation">:</span><br>   <span class="hljs-bullet">-</span> <span class="hljs-string">name: nginxconfig</span><br>     <span class="hljs-attribute">configMap</span><span class="hljs-punctuation">:</span><br>       <span class="hljs-attribute">name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">my-config</span><br></code></pre></td></tr></table></figure><blockquote><p>此yaml的意思是将<a href="http://www.conf文件的内容注入到pod中,nginx将加载www.conf中的内容.创建出一个server出来./">www.conf文件的内容注入到pod中，nginx将加载www.conf中的内容。创建出一个server出来。</a></p></blockquote><h4 id="验证是否生效："><a href="#验证是否生效：" class="headerlink" title="验证是否生效："></a>验证是否生效：</h4><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs gradle">[root@master-<span class="hljs-number">1</span> app]# kubectl exec -it nginx-test4 -- cat <span class="hljs-regexp">/etc/</span>nginx<span class="hljs-regexp">/conf.d/</span>www.conf<br>server &#123;<br>    server_name myapp.magedu.com;<br>    listen <span class="hljs-number">80</span>;<br>    root <span class="hljs-regexp">/data/</span>web/html;<br>&#125;<br><br>#注释：表示已经挂载成功<br></code></pre></td></tr></table></figure><h4 id="查看nginx是否加载配置"><a href="#查看nginx是否加载配置" class="headerlink" title="查看nginx是否加载配置"></a>查看nginx是否加载配置</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">[root<span class="hljs-variable">@master</span><span class="hljs-number">-1</span> app]# kubectl <span class="hljs-keyword">exec</span> <span class="hljs-operator">-</span>it nginx<span class="hljs-operator">-</span>test4 <span class="hljs-comment">-- nginx -T</span><br></code></pre></td></tr></table></figure><h3 id="使用-ConfigMap-的限制条件"><a href="#使用-ConfigMap-的限制条件" class="headerlink" title="使用 ConfigMap 的限制条件"></a>使用 ConfigMap 的限制条件</h3><blockquote><ul><li>ConfigMap 必须在 Pod 之前创建。</li></ul></blockquote><ul><li>ConfigMap 受 Namespace 限制，只有处于同 Namespace 的 Pod 可以引用它。</li><li>ConfigMap 中的配额管理还未能实现。</li><li>kubelet 只支持可以被 API Server 管理的 Pod 使用 ConfigMap。kubelet 在本 Node 上通过 –manifest-url 或 –config 自动创建的静态 Pod 将无法引用 ConfigMap。</li><li>在 Pod 对 ConfigMap 进行挂载（VolumeMount）操作时，容器内部只能挂载为 ”目录“，无法挂在为文件。在挂载到容器内部后，目录中将包含 ConfigMap 定义的每个 item，如果该目录下原来还有其他文件，则容器内的该目录将会被挂载的 ConfigMap 覆盖。如果应用程序需要保留原来的其他文件，则需要进行额外的处理。可以将 ConfigMap 挂载到容器内部的临时目录，在通过启动脚本将配置文件复制或者链接到（cp 或者 link、ln 命令）应用所用的实际配置目录下。</li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Kubernetes之存储卷</title>
    <link href="/2019/08/26/Kubernetes-StorageVolume/"/>
    <url>/2019/08/26/Kubernetes-StorageVolume/</url>
    
    <content type="html"><![CDATA[<h3 id="一、存储卷的概念和类型"><a href="#一、存储卷的概念和类型" class="headerlink" title="一、存储卷的概念和类型"></a>一、存储卷的概念和类型</h3><blockquote><p>为了保证数据的持久性，必须保证数据在外部存储在docker容器中，为了实现数据的持久性存储，在宿主机和容器内做映射，可以保证在容器的生命周期结束，数据依旧可以实现持久性存储。但是在k8s中，由于pod分布在各个不同的节点之上，并不能实现不同节点之间持久性数据的共享，并且，在节点故障时，可能会导致数据的永久性丢失。为此，k8s就引入了外部存储卷的功能。</p></blockquote><h4 id="k8s的存储卷类型："><a href="#k8s的存储卷类型：" class="headerlink" title="k8s的存储卷类型："></a>k8s的存储卷类型：</h4><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">[root@k8s-<span class="hljs-keyword">master</span> <span class="hljs-title">~]# kubectl</span> explain pod.<span class="hljs-keyword">spec</span>.volumes <span class="hljs-comment">#查看k8s支持的存储类型</span><br>KIND:     Pod<br><span class="hljs-keyword">VERSION</span>:  v1<br><br>常用分类：<br>emptyDir（临时目录）:Pod删除，数据也会被清除，这种存储成为emptyDir，用于数据的临时存储。<br>hostPath (宿主机目录映射):<br>本地的SAN (iSCSI,FC)、NAS(nfs,cifs,http)存储<br>分布式存储（glusterfs，rbd，cephfs）<br>云存储（EBS，Azure Disk）<br></code></pre></td></tr></table></figure><h4 id="k8s要使用存储卷，需要2步："><a href="#k8s要使用存储卷，需要2步：" class="headerlink" title="k8s要使用存储卷，需要2步："></a>k8s要使用存储卷，需要2步：</h4><blockquote><p>1、在pod定义volume，并指明关联到哪个存储设备<br>2、在容器使用volume mount进行挂载</p></blockquote><h3 id="二、emptyDir存储卷演示"><a href="#二、emptyDir存储卷演示" class="headerlink" title="二、emptyDir存储卷演示"></a>二、emptyDir存储卷演示</h3><blockquote><p>一个emptyDir 第一次创建是在一个pod被指定到具体node的时候，并且会一直存在在pod的生命周期当中，正如它的名字一样，它初始化是一个空的目录，pod中的容器都可以读写这个目录，这个目录可以被挂在到各个容器相同或者不相同的的路径下。当一个pod因为任何原因被移除的时候，这些数据会被永久删除。注意：一个容器崩溃了不会导致数据的丢失，因为容器的崩溃并不移除pod.</p></blockquote><h4 id="emptyDir-磁盘的作用："><a href="#emptyDir-磁盘的作用：" class="headerlink" title="emptyDir 磁盘的作用："></a>emptyDir 磁盘的作用：</h4><blockquote><p>（1）普通空间，基于磁盘的数据存储<br>（2）作为从崩溃中恢复的备份点<br>（3）存储那些那些需要长久保存的数据，例web服务中的数据<br>默认的，emptyDir 磁盘会存储在主机所使用的媒介上，可能是SSD，或者网络硬盘，这主要取决于你的环境。当然，我们也可以将emptyDir.medium的值设置为Memory来告诉Kubernetes 来挂在一个基于内存的目录tmpfs，因为tmpfs速度会比硬盘块度了，但是，当主机重启的时候所有的数据都会丢失。</p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs yaml">[<span class="hljs-string">root@k8s-master</span> <span class="hljs-string">~</span>]<span class="hljs-comment"># kubectl explain pods.spec.volumes.emptyDir  #查看emptyDir存储定义</span><br>[<span class="hljs-string">root@k8s-master</span> <span class="hljs-string">~</span>]<span class="hljs-comment"># kubectl explain pods.spec.containers.volumeMounts  #查看容器挂载方式</span><br>[<span class="hljs-string">root@k8s-master</span> <span class="hljs-string">~</span>]<span class="hljs-comment"># vim pod-vol-demo.yaml   #创建emptyDir的清单</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Pod</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">pod-demo</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">default</span><br>  <span class="hljs-attr">labels:</span><br>    <span class="hljs-attr">app:</span> <span class="hljs-string">myapp</span><br>    <span class="hljs-attr">tier:</span> <span class="hljs-string">frontend</span><br>  <span class="hljs-attr">annotations:</span><br>    <span class="hljs-string">magedu.com/create-by:&quot;cluster</span> <span class="hljs-string">admin&quot;</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">containers:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">myapp</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">ikubernetes/myapp:v1</span><br>    <span class="hljs-attr">imagePullPolicy:</span> <span class="hljs-string">IfNotPresent</span><br>    <span class="hljs-attr">ports:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">http</span><br>      <span class="hljs-attr">containerPort:</span> <span class="hljs-number">80</span><br>    <span class="hljs-attr">volumeMounts:</span>    <span class="hljs-comment">#在容器内定义挂载存储名称和挂载路径</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">html</span><br>      <span class="hljs-attr">mountPath:</span> <span class="hljs-string">/usr/share/nginx/html/</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">busybox</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">busybox:latest</span><br>    <span class="hljs-attr">imagePullPolicy:</span> <span class="hljs-string">IfNotPresent</span><br>    <span class="hljs-attr">volumeMounts:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">html</span><br>      <span class="hljs-attr">mountPath:</span> <span class="hljs-string">/data/</span>    <span class="hljs-comment">#在容器内定义挂载存储名称和挂载路径</span><br>    <span class="hljs-attr">command:</span> [<span class="hljs-string">&#x27;/bin/sh&#x27;</span>,<span class="hljs-string">&#x27;-c&#x27;</span>,<span class="hljs-string">&#x27;while true;do echo $(date) &gt;&gt; /data/index.html;sleep 2;done&#x27;</span>]<br>  <span class="hljs-attr">volumes:</span>  <span class="hljs-comment">#定义存储卷</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">html</span>    <span class="hljs-comment">#定义存储卷名称  </span><br>    <span class="hljs-attr">emptyDir:</span> &#123;&#125;  <span class="hljs-comment">#定义存储卷类型</span><br></code></pre></td></tr></table></figure><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">[root@k8s-<span class="hljs-keyword">master</span> <span class="hljs-title">volumes</span>]<span class="hljs-comment"># kubectl apply -f pod-vol-demo.yaml </span><br>pod/pod-vol-demo created <br></code></pre></td></tr></table></figure><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">[root@k8s-<span class="hljs-keyword">master</span> <span class="hljs-title">volumes</span>]<span class="hljs-comment"># kubectl get pods -o wide</span><br>NAME                      READY     STATUS    RESTARTS   AGE       IP            <span class="hljs-keyword">NODE</span><br><span class="hljs-title">pod-vol-demo</span>              <span class="hljs-number">2</span>/<span class="hljs-number">2</span>       Running   <span class="hljs-number">0</span>          <span class="hljs-number">16s</span>       <span class="hljs-number">10.244</span>.<span class="hljs-number">2.34</span>   k8s-node02<br></code></pre></td></tr></table></figure><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs dns">在上面，我们定义了<span class="hljs-number">2</span>个容器，其中一个容器是输入日期到index.html中，然后验证访问nginx的html是否可以获取日期。以验证两个容器之间挂载的emptyDir实现共享。如下访问验证:<br>[root@k8s-master volumes]# curl <span class="hljs-number">10.244.2.34</span>  #访问验证<br>Tue Oct <span class="hljs-number">9 03:56:53</span> UTC <span class="hljs-number">2018</span><br>Tue Oct <span class="hljs-number">9 03:56:55</span> UTC <span class="hljs-number">2018</span><br>Tue Oct <span class="hljs-number">9 03:56:57</span> UTC <span class="hljs-number">2018</span><br>Tue Oct <span class="hljs-number">9 03:56:59</span> UTC <span class="hljs-number">2018</span><br>Tue Oct <span class="hljs-number">9 03:57:01</span> UTC <span class="hljs-number">2018</span><br>Tue Oct <span class="hljs-number">9 03:57:03</span> UTC <span class="hljs-number">2018</span><br>Tue Oct <span class="hljs-number">9 03:57:05</span> UTC <span class="hljs-number">2018</span><br>Tue Oct <span class="hljs-number">9 03:57:07</span> UTC <span class="hljs-number">2018</span><br>Tue Oct <span class="hljs-number">9 03:57:09</span> UTC <span class="hljs-number">2018</span><br>Tue Oct <span class="hljs-number">9 03:57:11</span> UTC <span class="hljs-number">2018</span><br>Tue Oct <span class="hljs-number">9 03:57:13</span> UTC <span class="hljs-number">2018</span><br>Tue Oct <span class="hljs-number">9 03:57:15</span> UTC <span class="hljs-number">2018</span><br></code></pre></td></tr></table></figure><h3 id="三、hostPath存储卷演示"><a href="#三、hostPath存储卷演示" class="headerlink" title="三、hostPath存储卷演示"></a>三、hostPath存储卷演示</h3><blockquote><p>hostPath宿主机路径，就是把pod所在的宿主机之上的脱离pod中的容器名称空间的之外的宿主机的文件系统的某一目录和pod建立关联关系，在pod删除时，存储数据不会丢失。（hostPath可以实现持久存储，但是在node节点故障时，也会导致数据的丢失）</p></blockquote><h4 id="1、查看hostPath存储类型定义"><a href="#1、查看hostPath存储类型定义" class="headerlink" title="1、查看hostPath存储类型定义"></a>1、查看hostPath存储类型定义</h4><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs n1ql">[root@k8s-master volumes]# kubectl <span class="hljs-keyword">explain</span> pods.spec.volumes.hostPath  <br>KIND:     Pod<br>VERSION:  v1<br><br>RESOURCE: hostPath &lt;<span class="hljs-keyword">Object</span>&gt;<br><br>DESCRIPTION:<br>     HostPath represents a pre-existing file <span class="hljs-keyword">or</span> directory <span class="hljs-keyword">on</span> the host machine<br>     that <span class="hljs-keyword">is</span> directly exposed <span class="hljs-keyword">to</span> the container. This <span class="hljs-keyword">is</span> generally used <span class="hljs-keyword">for</span><br>     <span class="hljs-keyword">system</span> agents <span class="hljs-keyword">or</span> other privileged things that are allowed <span class="hljs-keyword">to</span> see the host<br>     machine. Most containers will <span class="hljs-keyword">NOT</span> need this. More info:<br>     https://kubernetes.io/docs/concepts/storage/volumes#hostpath<br><br>     Represents a host <span class="hljs-keyword">path</span> mapped <span class="hljs-keyword">into</span> a pod. Host <span class="hljs-keyword">path</span> volumes <span class="hljs-keyword">do</span> <span class="hljs-keyword">not</span> support<br>     ownership management <span class="hljs-keyword">or</span> SELinux relabeling.<br><br>FIELDS:<br>   <span class="hljs-keyword">path</span> &lt;<span class="hljs-keyword">string</span>&gt; -required-  #指定宿主机的路径<br>     <span class="hljs-keyword">Path</span> of the directory <span class="hljs-keyword">on</span> the host. <span class="hljs-keyword">If</span> the <span class="hljs-keyword">path</span> <span class="hljs-keyword">is</span> a symlink, it will follow<br>     the link <span class="hljs-keyword">to</span> the real <span class="hljs-keyword">path</span>. More info:<br>     https://kubernetes.io/docs/concepts/storage/volumes#hostpath<br><br>   <span class="hljs-built_in">type</span> &lt;<span class="hljs-keyword">string</span>&gt;<br>     <span class="hljs-built_in">Type</span> <span class="hljs-keyword">for</span> HostPath Volume Defaults <span class="hljs-keyword">to</span> <span class="hljs-string">&quot;&quot;</span> More info:<br>     https://kubernetes.io/docs/concepts/storage/volumes#hostpath<br><br><span class="hljs-built_in">type</span>：<br>DirectoryOrCreate  宿主机上不存在创建此目录  <br>Directory 必须存在挂载目录  <br>FileOrCreate 宿主机上不存在挂载文件就创建  <br>File 必须存在文件  <br></code></pre></td></tr></table></figure><h4 id="2、清单定义"><a href="#2、清单定义" class="headerlink" title="2、清单定义"></a>2、清单定义</h4><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs dts">[root@k8s-master volumes]<span class="hljs-meta"># vim pod-hostpath-vol.yaml</span><br><span class="hljs-symbol">apiVersion:</span> v1<br><span class="hljs-symbol">kind:</span> Pod<br><span class="hljs-symbol">metadata:</span><br><span class="hljs-symbol">  name:</span> pod-vol-hostpath<br><span class="hljs-symbol">  namespace:</span> default<br><span class="hljs-symbol">spec:</span><br><span class="hljs-symbol">  containers:</span><br>  - name: myapp<br><span class="hljs-symbol">    image:</span> ikubernetes/myapp:v1<br><span class="hljs-symbol">    volumeMounts:</span><br>    - name: html<br><span class="hljs-symbol">      mountPath:</span> <span class="hljs-keyword">/usr/</span>share<span class="hljs-keyword">/nginx/</span>html<br><span class="hljs-symbol">  volumes:</span><br>    - name: html<br><span class="hljs-symbol">      hostPath:</span><br><span class="hljs-symbol">        path:</span> <span class="hljs-keyword">/data/</span>pod/volume1<br><span class="hljs-symbol">        type:</span> DirectoryOrCreate<br></code></pre></td></tr></table></figure><h4 id="3、在node节点上创建挂载目录"><a href="#3、在node节点上创建挂载目录" class="headerlink" title="3、在node节点上创建挂载目录"></a>3、在node节点上创建挂载目录</h4><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs gradle">[root@k8s-node01 ~]# mkdir -p <span class="hljs-regexp">/data/</span>pod/volume1<br>[root@k8s-node01 ~]# vim <span class="hljs-regexp">/data/</span>pod<span class="hljs-regexp">/volume1/i</span>ndex.html<br>node01.magedu.com<br>[root@k8s-node02 ~]# mkdir -p <span class="hljs-regexp">/data/</span>pod/volume1<br>[root@k8s-node02 ~]# vim <span class="hljs-regexp">/data/</span>pod<span class="hljs-regexp">/volume1/i</span>ndex.html<br>node02.magedu.com<br>[root@k8s-master volumes]# kubectl apply -f pod-hostpath-vol.yaml <br>pod/pod-vol-hostpath created<br></code></pre></td></tr></table></figure><h4 id="4、访问测试"><a href="#4、访问测试" class="headerlink" title="4、访问测试"></a>4、访问测试</h4><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">[root@k8s-<span class="hljs-keyword">master</span> <span class="hljs-title">volumes</span>]<span class="hljs-comment"># kubectl get pods -o wide</span><br>NAME                                 READY     STATUS    RESTARTS   AGE       IP            <span class="hljs-keyword">NODE</span><br><span class="hljs-title">......</span><br><span class="hljs-title">pod-vol-hostpath</span>                     <span class="hljs-number">1</span>/<span class="hljs-number">1</span>       Running   <span class="hljs-number">0</span>          <span class="hljs-number">37s</span>       <span class="hljs-number">10.244</span>.<span class="hljs-number">2.35</span>   k8s-node02<br>......<br>[root@k8s-<span class="hljs-keyword">master</span> <span class="hljs-title">volumes</span>]<span class="hljs-comment"># curl 10.244.2.35</span><br>node02.magedu.com<br>[root@k8s-<span class="hljs-keyword">master</span> <span class="hljs-title">volumes</span>]<span class="hljs-comment"># kubectl delete -f pod-hostpath-vol.yaml  #删除pod，再重建，验证是否依旧可以访问原来的内容</span><br>[root@k8s-<span class="hljs-keyword">master</span> <span class="hljs-title">volumes</span>]<span class="hljs-comment"># kubectl apply -f pod-hostpath-vol.yaml </span><br>pod/pod-vol-hostpath created<br>[root@k8s-<span class="hljs-keyword">master</span> <span class="hljs-title">volumes</span>]<span class="hljs-comment"># curl  10.244.2.37 </span><br>node02.magedu.com<br></code></pre></td></tr></table></figure><h3 id="四、subPath使用演示"><a href="#四、subPath使用演示" class="headerlink" title="四、subPath使用演示"></a>四、subPath使用演示</h3><h4 id="1、subPath的使用场景"><a href="#1、subPath的使用场景" class="headerlink" title="1、subPath的使用场景"></a>1、subPath的使用场景</h4><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs gauss"><span class="hljs-number">1</span>个pod中可以拉起多个容器，有时候希望将不同容器的路径挂载在存储卷<span class="hljs-built_in">volume</span>的子路径，这个时候需要用到subpath<br><span class="hljs-built_in">volume</span>支持将configMap/Secret以文件形式挂载在容器中，但是会覆盖掉挂载路径下原有的文件，如何支持选定configMap/Secret的每个<span class="hljs-built_in">key</span>-value挂载在容器中，且不会覆盖掉原目录下的文件，这个时候也可以用到subpath<br></code></pre></td></tr></table></figure><h4 id="2、1个pod中多个容器时使用subPath"><a href="#2、1个pod中多个容器时使用subPath" class="headerlink" title="2、1个pod中多个容器时使用subPath"></a>2、1个pod中多个容器时使用subPath</h4><p>有时，在单个 <code>Pod</code> 中多个container使用同一个volume。 <code>volumeMounts.subPath</code> 属性可用于指定所引用的卷内的子路径，而不是其根路径。</p><p>下面例子展示了如何配置某包含 LAMP 堆栈（Linux Apache MySQL PHP）的 Pod 使用同一共享卷。 此示例中的 subPath 配置不建议在生产环境中使用。 PHP 应用的代码和相关数据映射到卷的 <code>html</code> 文件夹，MySQL 数据库存储在卷的 <code>mysql</code> 文件夹中：</p><p>例如pv路径为 <code>/data/pod/volume5</code> 那么他们存储路径为  <code>/data/pod/volume5/html</code>  <code>/data/pod/volume5/mysql</code> 目录下</p><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-attribute">apiVersion</span><span class="hljs-punctuation">:</span> <span class="hljs-string">v1</span><br><span class="hljs-attribute">kind</span><span class="hljs-punctuation">:</span> <span class="hljs-string">Pod</span><br><span class="hljs-attribute">metadata</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">my-lamp-site</span><br><span class="hljs-attribute">spec</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-attribute">containers</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">name: mysql</span><br>      <span class="hljs-attribute">image</span><span class="hljs-punctuation">:</span> <span class="hljs-string">mysql</span><br>      <span class="hljs-attribute">env</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">name: MYSQL_ROOT_PASSWORD</span><br>        <span class="hljs-attribute">value</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;rootpasswd&quot;</span><br>      <span class="hljs-attribute">volumeMounts</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">mountPath: /var/lib/mysql</span><br>        <span class="hljs-attribute">name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">site-data</span><br>        <span class="hljs-attribute">subPath</span><span class="hljs-punctuation">:</span> <span class="hljs-string">mysql</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">name: php</span><br>      <span class="hljs-attribute">image</span><span class="hljs-punctuation">:</span> <span class="hljs-string">php:7.0-apache</span><br>      <span class="hljs-attribute">volumeMounts</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">mountPath: /var/www/html</span><br>        <span class="hljs-attribute">name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">site-data</span><br>        <span class="hljs-attribute">subPath</span><span class="hljs-punctuation">:</span> <span class="hljs-string">html</span><br>    <span class="hljs-attribute">volumes</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">name: site-data</span><br>      <span class="hljs-attribute">persistentVolumeClaim</span><span class="hljs-punctuation">:</span><br>        <span class="hljs-attribute">claimName</span><span class="hljs-punctuation">:</span> <span class="hljs-string">my-lamp-site-data</span><br></code></pre></td></tr></table></figure><h4 id="3、在config-x2F-secret中使用subPath"><a href="#3、在config-x2F-secret中使用subPath" class="headerlink" title="3、在config&#x2F;secret中使用subPath"></a>3、在config&#x2F;secret中使用subPath</h4><p>有些时候我们希望将 <code>config/secret</code> 作为文件挂载到容器中的某个目录下而不覆盖挂载目录下的文件。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs yaml">[<span class="hljs-string">root@devops010015001030</span> <span class="hljs-string">~</span>]<span class="hljs-comment"># kubectl describe secret test-secret</span><br><span class="hljs-attr">Name:</span>         <span class="hljs-string">test-secret</span><br><span class="hljs-attr">Namespace:</span>    <span class="hljs-string">default</span><br><span class="hljs-attr">Labels:</span>       <span class="hljs-string">&lt;none&gt;</span><br><span class="hljs-attr">Annotations:</span>  <span class="hljs-string">&lt;none&gt;</span><br><br><span class="hljs-attr">Type:</span>  <span class="hljs-string">kubernetes.io/tls</span><br><br><span class="hljs-string">Data</span><br><span class="hljs-string">====</span><br><span class="hljs-attr">tls.crt:</span>  <span class="hljs-number">4422 </span><span class="hljs-string">bytes</span>                   <span class="hljs-comment"># subPath中用到的名字</span><br><span class="hljs-attr">tls.key:</span>  <span class="hljs-number">3243 </span><span class="hljs-string">bytes</span>                   <span class="hljs-comment"># subPath中用到的名字</span><br></code></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Pod</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">secret-pod</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">containers:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">secret</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">zhangguanzhang/centos</span> <br>    <span class="hljs-attr">command:</span> <br>      <span class="hljs-bullet">-</span> <span class="hljs-string">sleep</span> <br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;36000&quot;</span><br>    <span class="hljs-attr">volumeMounts:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">secrets</span> <br>      <span class="hljs-attr">mountPath:</span> <span class="hljs-string">/root/yedong.key</span>       <span class="hljs-comment"># 挂载到pod中的路径</span><br>      <span class="hljs-attr">subPath:</span> <span class="hljs-string">tls.key</span>                  <span class="hljs-comment"># secret中的名字</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">secrets</span><br>      <span class="hljs-attr">mountPath:</span> <span class="hljs-string">/root/yedong.crt</span>       <span class="hljs-comment"># 挂载到pod中的路径</span><br>      <span class="hljs-attr">subPath:</span> <span class="hljs-string">tls.crt</span>                  <span class="hljs-comment"># secret中的文件名字</span><br>  <span class="hljs-attr">volumes:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">secrets</span>                       <br>    <span class="hljs-attr">secret:</span><br>     <span class="hljs-attr">secretName:</span> <span class="hljs-string">test-secret</span> <br></code></pre></td></tr></table></figure><h3 id="五、nfs共享存储卷演示"><a href="#五、nfs共享存储卷演示" class="headerlink" title="五、nfs共享存储卷演示"></a>五、nfs共享存储卷演示</h3><blockquote><p>nfs使的我们可以挂在已经存在的共享到的我们的Pod中，和emptyDir不同的是，emptyDir会被删除当我们的Pod被删除的时候，但是nfs不会被删除，仅仅是解除挂在状态而已，这就意味着NFS能够允许我们提前对数据进行处理，而且这些数据可以在Pod之间相互传递.并且，nfs可以同时被多个pod挂在并进行读写</p></blockquote><blockquote><p>注意：必须先保证NFS服务器正常运行在我们进行挂在nfs的时候</p></blockquote><h4 id="1、在stor01节点上安装nfs，并配置nfs服务"><a href="#1、在stor01节点上安装nfs，并配置nfs服务" class="headerlink" title="1、在stor01节点上安装nfs，并配置nfs服务"></a>1、在stor01节点上安装nfs，并配置nfs服务</h4><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs crystal">[root<span class="hljs-variable">@stor01</span> ~]<span class="hljs-comment"># yum install -y nfs-utils  -----------&gt;192.168.56.14</span><br>[root<span class="hljs-variable">@stor01</span> ~]<span class="hljs-comment"># mkdir /data/volumes -pv</span><br>[root<span class="hljs-variable">@stor01</span> ~]<span class="hljs-comment"># vim /etc/exports</span><br><span class="hljs-regexp">/data/volumes</span> <span class="hljs-number">192.168</span>.<span class="hljs-number">56.0</span>/<span class="hljs-number">24</span>(rw,no_root_squash)<br>[root<span class="hljs-variable">@stor01</span> ~]<span class="hljs-comment"># systemctl start nfs</span><br>[root<span class="hljs-variable">@stor01</span> ~]<span class="hljs-comment"># showmount -e</span><br>Export list <span class="hljs-keyword">for</span> <span class="hljs-symbol">stor01:</span><br><span class="hljs-regexp">/data/volumes</span> <span class="hljs-number">192.168</span>.<span class="hljs-number">56.0</span>/<span class="hljs-number">24</span><br></code></pre></td></tr></table></figure><h4 id="2、在node01和node02节点上安装nfs-utils，并测试挂载"><a href="#2、在node01和node02节点上安装nfs-utils，并测试挂载" class="headerlink" title="2、在node01和node02节点上安装nfs-utils，并测试挂载"></a>2、在node01和node02节点上安装nfs-utils，并测试挂载</h4><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">[root@k8s-node01 ~]<span class="hljs-comment"># yum install -y nfs-utils</span><br>[root@k8s-node02 ~]<span class="hljs-comment"># yum install -y nfs-utils</span><br>[root@k8s-node02 ~]<span class="hljs-comment"># mount -t nfs stor01:/data/volumes /mnt</span><br>[root@k8s-node02 ~]<span class="hljs-comment"># mount</span><br><span class="hljs-string">......</span><br>stor01:<span class="hljs-string">/data/volumes</span> on <span class="hljs-string">/mnt</span> type nfs4 <span class="hljs-params">(rw,relatime,<span class="hljs-attr">vers</span>=4.1,<span class="hljs-attr">rsize</span>=131072,<span class="hljs-attr">wsize</span>=131072,<span class="hljs-attr">namlen</span>=255,hard,<span class="hljs-attr">proto</span>=tcp,<span class="hljs-attr">port</span>=0,<span class="hljs-attr">timeo</span>=600,<span class="hljs-attr">retrans</span>=2,<span class="hljs-attr">sec</span>=sys,<span class="hljs-attr">clientaddr</span>=192.168.56.13,<span class="hljs-attr">local_lock</span>=none,<span class="hljs-attr">addr</span>=192.168.56.14)</span><br>[root@k8s-node02 ~]<span class="hljs-comment"># umount /mnt/</span><br></code></pre></td></tr></table></figure><h4 id="3、创建nfs存储卷的使用清单"><a href="#3、创建nfs存储卷的使用清单" class="headerlink" title="3、创建nfs存储卷的使用清单"></a>3、创建nfs存储卷的使用清单</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs yaml">[<span class="hljs-string">root@k8s-master</span> <span class="hljs-string">volumes</span>]<span class="hljs-comment"># cp pod-hostpath-vol.yaml pod-nfs-vol.yaml</span><br>[<span class="hljs-string">root@k8s-master</span> <span class="hljs-string">volumes</span>]<span class="hljs-comment"># vim pod-nfs-vol.yaml</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Pod</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">pod-vol-nfs</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">default</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">containers:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">myapp</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">ikubernetes/myapp:v1</span><br>    <span class="hljs-attr">volumeMounts:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">html</span><br>      <span class="hljs-attr">mountPath:</span> <span class="hljs-string">/usr/share/nginx/html</span><br>  <span class="hljs-attr">volumes:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">html</span><br>      <span class="hljs-attr">nfs:</span><br>        <span class="hljs-attr">path:</span> <span class="hljs-string">/data/volumes</span><br>        <span class="hljs-attr">server:</span> <span class="hljs-string">stor01</span>            <span class="hljs-comment">#必须要先做名称解析或者直接使用IP地址</span><br>[<span class="hljs-string">root@k8s-master</span> <span class="hljs-string">volumes</span>]<span class="hljs-comment"># kubectl apply -f pod-nfs-vol.yaml </span><br><span class="hljs-string">pod/pod-vol-nfs</span> <span class="hljs-string">created</span><br>[<span class="hljs-string">root@k8s-master</span> <span class="hljs-string">volumes</span>]<span class="hljs-comment"># kubectl get pods -o wide</span><br><span class="hljs-string">NAME</span>                     <span class="hljs-string">READY</span>     <span class="hljs-string">STATUS</span>    <span class="hljs-string">RESTARTS</span>   <span class="hljs-string">AGE</span>       <span class="hljs-string">IP</span>            <span class="hljs-string">NODE</span><br><span class="hljs-string">pod-vol-nfs</span>              <span class="hljs-number">1</span><span class="hljs-string">/1</span>       <span class="hljs-string">Running</span>   <span class="hljs-number">0</span>          <span class="hljs-string">21s</span>       <span class="hljs-number">10.244</span><span class="hljs-number">.2</span><span class="hljs-number">.38</span>   <span class="hljs-string">k8s-node02</span><br></code></pre></td></tr></table></figure><h4 id="4、在nfs服务器上创建index-html"><a href="#4、在nfs服务器上创建index-html" class="headerlink" title="4、在nfs服务器上创建index.html"></a>4、在nfs服务器上创建index.html</h4><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">[root@stor01 ~]<span class="hljs-comment"># cd /data/volumes</span><br>[root@stor01 volumes ~]<span class="hljs-comment"># vim index.html</span><br><span class="hljs-tag">&lt;h1&gt;</span> nfs stor01<span class="hljs-tag">&lt;/h1&gt;</span><br>[root@k8s-<span class="hljs-keyword">master</span> <span class="hljs-title">volumes</span>]<span class="hljs-comment"># curl 10.244.2.38</span><br><span class="hljs-tag">&lt;h1&gt;</span> nfs stor01<span class="hljs-tag">&lt;/h1&gt;</span><br>[root@k8s-<span class="hljs-keyword">master</span> <span class="hljs-title">volumes</span>]<span class="hljs-comment"># kubectl delete -f pod-nfs-vol.yaml   #删除nfs相关pod，再重新创建，可以得到数据的持久化存储</span><br>pod <span class="hljs-string">&quot;pod-vol-nfs&quot;</span> deleted<br>[root@k8s-<span class="hljs-keyword">master</span> <span class="hljs-title">volumes</span>]<span class="hljs-comment"># kubectl apply -f pod-nfs-vol.yaml </span><br></code></pre></td></tr></table></figure><h3 id="六、PVC和PV的概念"><a href="#六、PVC和PV的概念" class="headerlink" title="六、PVC和PV的概念"></a>六、PVC和PV的概念</h3><blockquote><p>我们有通过 hostPath 或者 emptyDir 的方式来持久化我们的数据，但是显然我们还需要更加可靠的存储来保存应用的持久化数据，这样容器在重建后，依然可以使用之前的数据。首先kubernetes的各个Node节点能管理这些存储，但是各种存储参数也需要专业的存储工程师才能了解，由此我们的kubernetes管理变的更加复杂，为了屏蔽底层的技术实现细节，让用户更加方便的使用， Kubernetes 便引入了 PV 和 PVC 两个重要的资源对象来实现对存储的管理。</p></blockquote><h4 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h4><blockquote><p>PV 的全称是：PersistentVolume(持久化卷)，PV又分为静态PV和动态PV。是对底层的共享存储的一种抽象，PV 由管理员进行创建和配置，它和具体的底层的共享存储技术的实现方式有关，比如 Ceph、GlusterFS、NFS 等，都是通过插件机制完成与共享存储的对接。</p></blockquote><p><img src="/images/volumes-1.png" alt="volumes-1"></p><blockquote><p>PVC 的全称是：PersistentVolumeClaim(持久化卷声明)，PVC 是用户存储的一种声明，PVC 通常由普通用户创建和维护。需要为 Pod 分配存储资源时，用户可以创建一个 PVC，指明存储资源的容量大小和访问模式（比如只读）等信息，Kubernetes 会查找并提供满足条件的 PV。<br>有了 PersistentVolumeClaim，用户只需要告诉 Kubernetes 需要什么样的存储资源，而不必关心真正的空间从哪里分配，如何访问等底层细节信息。这些 Storage Provider 的底层信息交给管理员来处理，只有管理员才应该关心创建 PersistentVolume 的细节信息。</p></blockquote><blockquote><h4 id="动态PV"><a href="#动态PV" class="headerlink" title="动态PV"></a>动态PV</h4><p>虽然PersistentVolumeClaims允许用户使用抽象存储资源，但是常见的需求是，用户需要根据不同的需求去创建PV，用于不同的场景。而此时需要集群管理员提供不同需求的PV，而不仅仅是PV的大小和访问模式，但又不需要用户了解这些卷的实现细节。 对于这样的需求，此时可以采用StorageClass资源。</p></blockquote><blockquote><p>PV是集群中的资源，PVC是对这些资源的请求，同时也是这些资源的“提取证”。PV和PVC的交互遵循以下生命周期：<br>Provisioning（配置）—&gt; Binding（绑定）—&gt;Using（使用）—&gt; Releasing（释放） —&gt; Recycling（回收）</p></blockquote><blockquote><h4 id="Provisioning"><a href="#Provisioning" class="headerlink" title="Provisioning"></a>Provisioning</h4><p>这里有两种PV的提供方式:静态或者动态</p></blockquote><ul><li>静态–&gt;直接固定存储空间：<br>集群管理员创建一些 PV。它们携带可供集群用户使用的真实存储的详细信息。 它们存在于Kubernetes API中，可用于消费。</li><li>动态–&gt;通过存储类进行动态创建存储空间：<br>当管理员创建的静态 PV 都不匹配用户的 PVC 时，集群可能会尝试动态地为 PVC 配置卷。此配置基于StorageClasses：PVC 必须请求存储类，并且管理员必须已创建并配置该类才能进行动态配置。 要求该类的声明有效地为自己禁用动态配置。</li></ul><blockquote><h4 id="Binding（绑定）"><a href="#Binding（绑定）" class="headerlink" title="Binding（绑定）"></a>Binding（绑定）</h4><p>用户创建一个PVC（或者之前就已经就为动态供给创建了），指定要求存储的大小和访问模式。master中有一个控制回路用于监控新的PVC，查找匹配的PV（如果有），并把PVC和PV绑定在一起。如果一个PV曾经动态供给到了一个新的PVC，那么这个回路会一直绑定这个PV和PVC。另外，用户总是至少能得到它们所要求的存储，但是volume可能超过它们的请求。一旦绑定了，PVC绑定就是专属的，无论它们的绑定模式是什么。<br>如果没找到匹配的PV，那么PVC会无限期得处于unbound未绑定状态，一旦PV可用了，PVC就会又变成绑定状态。比如，如果一个供给了很多50G的PV集群，不会匹配要求100G的PVC。直到100G的PV添加到该集群时，PVC才会被绑定。注意，PV和PVC是一一对应的，一个PV只能被一个PVC绑定。</p></blockquote><blockquote><h4 id="Using（使用）"><a href="#Using（使用）" class="headerlink" title="Using（使用）"></a>Using（使用）</h4><p>当系统为用户创建的PVC绑定PV后，表明用户成功申请了存储资源。用户在pod中定义PVC类型的volume，当创建POD实例时系统将与PVC绑定的PV挂载到POD实例。如果PV支持多种访问模式（accessModes），用户需要pod的PVC volume中指定期望的类型。注意，pod与PVC必需位于相同namespace之下。</p></blockquote><blockquote><h4 id="Releasing（释放）"><a href="#Releasing（释放）" class="headerlink" title="Releasing（释放）"></a>Releasing（释放）</h4><p>当用户使用PV完毕后，他们可以通过API来删除PVC对象。当PVC被删除后，对应的PV就被认为是已经是“released”了，但还不能再给另外一个PVC使用。前一个PVC的数据还存在于该PV中，必须根据策略来处理掉。</p></blockquote><ul><li></li></ul><blockquote><h4 id="Reclaiming（回收）"><a href="#Reclaiming（回收）" class="headerlink" title="Reclaiming（回收）"></a>Reclaiming（回收）</h4><p>PV的回收策略告诉集群，在PV被释放之后集群应该如何处理该PV。</p></blockquote><ul><li>Retain<br>保护被PVC释放的PV及其上数据，并将PV状态改成”released”，不将被其它PVC绑定。集群管理员手动通过如下步骤释放存储资源：<ul><li>手动删除PV，但与其相关的后端存储资源如(AWS EBS, GCE PD, Azure Disk, or Cinder volume)仍然存在。</li><li>手动清空后端存储volume上的数据。</li><li>手动删除后端存储volume，或者重复使用后端volume，为其创建新的PV。</li></ul></li><li>Delete<br>删除被PVC释放的PV及其后端存储volume。对于动态PV其”reclaim policy”继承自其”storage class”，默认是Delete。集群管理员负责将”storage class”的”reclaim policy”设置成用户期望的形式，否则需要用户手动为创建后的动态PV编辑”reclaim policy”。</li><li>Recycle <br>如果PV卷支持再利用，再利用会在PV卷上执行一个基础的擦除操作（rm -rf &#x2F;thevolume&#x2F;*），使得它可以再次被其他PVC声明利用。（Recycle回收政策已弃用）</li></ul><h3 id="七、NFS使用PV和PVC"><a href="#七、NFS使用PV和PVC" class="headerlink" title="七、NFS使用PV和PVC"></a>七、NFS使用PV和PVC</h3><blockquote><p>实验图如下：</p></blockquote><p><img src="/images/volumes-2.png" alt="volumes-2"></p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">[root@k8s-<span class="hljs-keyword">master</span> <span class="hljs-title">~]# kubectl</span> explain pv    <span class="hljs-comment">#查看pv的定义方式</span><br>FIELDS:<br>    apiVersion<br>    kind<br>    metadata<br>    <span class="hljs-keyword">spec</span><br>[root@k8s-<span class="hljs-keyword">master</span> <span class="hljs-title">~]# kubectl</span> explain pv.<span class="hljs-keyword">spec</span>    <span class="hljs-comment">#查看pv定义的规格</span><br><span class="hljs-keyword">spec</span>:<br>  nfs（定义存储类型）<br>    path（定义挂载卷路径）<br>    server（定义服务器名称）<br>  accessModes（定义访问模型，有以下三种访问模型，以列表的方式存在，也就是说可以定义多个访问模式）<br>    ReadWriteOnce（RWO）  单节点读写<br>    ReadOnlyMany（ROX）  多节点只读<br>    ReadWriteMany（RWX）  多节点读写<br>  capacity（定义PV空间的大小）<br>    storage（指定大小）<br><br>[root@k8s-<span class="hljs-keyword">master</span> <span class="hljs-title">volumes</span>]<span class="hljs-comment"># kubectl explain pvc   #查看PVC的定义方式</span><br>KIND:     PersistentVolumeClaim<br><span class="hljs-keyword">VERSION</span>:  v1<br>FIELDS:<br>   apiVersion   <span class="hljs-tag">&lt;string&gt;</span><br>   kind <span class="hljs-tag">&lt;string&gt;</span>  <br>   metadata <span class="hljs-tag">&lt;Object&gt;</span><br>   <span class="hljs-keyword">spec</span> <span class="hljs-tag">&lt;Object&gt;</span><br>[root@k8s-<span class="hljs-keyword">master</span> <span class="hljs-title">volumes</span>]<span class="hljs-comment"># kubectl explain pvc.spec</span><br><span class="hljs-keyword">spec</span>:<br>  accessModes（定义访问模式，必须是PV的访问模式的子集）<br>  resources（定义申请资源的大小）<br>    requests:<br>      storage: <br></code></pre></td></tr></table></figure><h4 id="1、配置nfs存储"><a href="#1、配置nfs存储" class="headerlink" title="1、配置nfs存储"></a>1、配置nfs存储</h4><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs awk">[root@stor01 volumes]<span class="hljs-comment"># mkdir v&#123;1,2,3,4,5&#125;</span><br><br>[root@stor01 volumes]<span class="hljs-comment"># vim /etc/exports</span><br><span class="hljs-regexp">/data/</span>volumes<span class="hljs-regexp">/v1 192.168.56.0/</span><span class="hljs-number">24</span>(rw,no_root_squash)<br><span class="hljs-regexp">/data/</span>volumes<span class="hljs-regexp">/v2 192.168.56.0/</span><span class="hljs-number">24</span>(rw,no_root_squash)<br><span class="hljs-regexp">/data/</span>volumes<span class="hljs-regexp">/v3 192.168.56.0/</span><span class="hljs-number">24</span>(rw,no_root_squash)<br><span class="hljs-regexp">/data/</span>volumes<span class="hljs-regexp">/v4 192.168.56.0/</span><span class="hljs-number">24</span>(rw,no_root_squash)<br><span class="hljs-regexp">/data/</span>volumes<span class="hljs-regexp">/v5 192.168.56.0/</span><span class="hljs-number">24</span>(rw,no_root_squash)<br><br>[root@stor01 volumes]<span class="hljs-comment"># exportfs -arv</span><br>exporting <span class="hljs-number">192.168</span>.<span class="hljs-number">56.0</span><span class="hljs-regexp">/24:/</span>data<span class="hljs-regexp">/volumes/</span>v5<br>exporting <span class="hljs-number">192.168</span>.<span class="hljs-number">56.0</span><span class="hljs-regexp">/24:/</span>data<span class="hljs-regexp">/volumes/</span>v4<br>exporting <span class="hljs-number">192.168</span>.<span class="hljs-number">56.0</span><span class="hljs-regexp">/24:/</span>data<span class="hljs-regexp">/volumes/</span>v3<br>exporting <span class="hljs-number">192.168</span>.<span class="hljs-number">56.0</span><span class="hljs-regexp">/24:/</span>data<span class="hljs-regexp">/volumes/</span>v2<br>exporting <span class="hljs-number">192.168</span>.<span class="hljs-number">56.0</span><span class="hljs-regexp">/24:/</span>data<span class="hljs-regexp">/volumes/</span>v1<br><br>[root@stor01 volumes]<span class="hljs-comment"># showmount -e</span><br>Export list <span class="hljs-keyword">for</span> stor01:<br><span class="hljs-regexp">/data/</span>volumes<span class="hljs-regexp">/v5 192.168.56.0/</span><span class="hljs-number">24</span><br><span class="hljs-regexp">/data/</span>volumes<span class="hljs-regexp">/v4 192.168.56.0/</span><span class="hljs-number">24</span><br><span class="hljs-regexp">/data/</span>volumes<span class="hljs-regexp">/v3 192.168.56.0/</span><span class="hljs-number">24</span><br><span class="hljs-regexp">/data/</span>volumes<span class="hljs-regexp">/v2 192.168.56.0/</span><span class="hljs-number">24</span><br><span class="hljs-regexp">/data/</span>volumes<span class="hljs-regexp">/v1 192.168.56.0/</span><span class="hljs-number">24</span><br></code></pre></td></tr></table></figure><h4 id="2、定义PV（非常注意：在创建PV时一定不要指定namespace空间PV）"><a href="#2、定义PV（非常注意：在创建PV时一定不要指定namespace空间PV）" class="headerlink" title="2、定义PV（非常注意：在创建PV时一定不要指定namespace空间PV）"></a>2、定义PV（非常注意：在创建PV时一定不要指定namespace空间PV）</h4><blockquote><p>这里定义5个PV，并且定义挂载的路径以及访问模式，还有PV划分的大小。</p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><code class="hljs yaml">[<span class="hljs-string">root@k8s-master</span> <span class="hljs-string">volumes</span>]<span class="hljs-comment"># kubectl explain pv</span><br><br>[<span class="hljs-string">root@k8s-master</span> <span class="hljs-string">volumes</span>]<span class="hljs-comment"># kubectl explain pv.spec.nfs</span><br><br>[<span class="hljs-string">root@k8s-master</span> <span class="hljs-string">volumes</span>]<span class="hljs-comment"># vim pv-demo.yaml</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">PersistentVolume</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">pv001</span><br>  <span class="hljs-attr">labels:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">pv001</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">nfs:</span><br>    <span class="hljs-attr">path:</span> <span class="hljs-string">/data/volumes/v1</span><br>    <span class="hljs-attr">server:</span> <span class="hljs-string">stor01</span><br>  <span class="hljs-attr">accessModes:</span> [<span class="hljs-string">&quot;ReadWriteMany&quot;</span>,<span class="hljs-string">&quot;ReadWriteOnce&quot;</span>]<br>  <span class="hljs-attr">capacity:</span><br>    <span class="hljs-attr">storage:</span> <span class="hljs-string">1Gi</span><br><span class="hljs-meta">---</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">PersistentVolume</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">pv002</span><br>  <span class="hljs-attr">labels:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">pv002</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">nfs:</span><br>    <span class="hljs-attr">path:</span> <span class="hljs-string">/data/volumes/v2</span><br>    <span class="hljs-attr">server:</span> <span class="hljs-string">stor01</span><br>  <span class="hljs-attr">accessModes:</span> [<span class="hljs-string">&quot;ReadWriteOnce&quot;</span>]<br>  <span class="hljs-attr">capacity:</span><br>    <span class="hljs-attr">storage:</span> <span class="hljs-string">2Gi</span><br><span class="hljs-meta">---</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">PersistentVolume</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">pv003</span><br>  <span class="hljs-attr">labels:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">pv003</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">nfs:</span><br>    <span class="hljs-attr">path:</span> <span class="hljs-string">/data/volumes/v3</span><br>    <span class="hljs-attr">server:</span> <span class="hljs-string">stor01</span><br>  <span class="hljs-attr">accessModes:</span> [<span class="hljs-string">&quot;ReadWriteMany&quot;</span>,<span class="hljs-string">&quot;ReadWriteOnce&quot;</span>]<br>  <span class="hljs-attr">capacity:</span><br>    <span class="hljs-attr">storage:</span> <span class="hljs-string">2Gi</span><br><span class="hljs-meta">---</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">PersistentVolume</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">pv004</span><br>  <span class="hljs-attr">labels:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">pv004</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">nfs:</span><br>    <span class="hljs-attr">path:</span> <span class="hljs-string">/data/volumes/v4</span><br>    <span class="hljs-attr">server:</span> <span class="hljs-string">stor01</span><br>  <span class="hljs-attr">accessModes:</span> [<span class="hljs-string">&quot;ReadWriteMany&quot;</span>,<span class="hljs-string">&quot;ReadWriteOnce&quot;</span>]<br>  <span class="hljs-attr">capacity:</span><br>    <span class="hljs-attr">storage:</span> <span class="hljs-string">4Gi</span><br><span class="hljs-meta">---</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">PersistentVolume</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">pv005</span><br>  <span class="hljs-attr">labels:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">pv005</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">nfs:</span><br>    <span class="hljs-attr">path:</span> <span class="hljs-string">/data/volumes/v5</span><br>    <span class="hljs-attr">server:</span> <span class="hljs-string">stor01</span><br>  <span class="hljs-attr">accessModes:</span> [<span class="hljs-string">&quot;ReadWriteMany&quot;</span>,<span class="hljs-string">&quot;ReadWriteOnce&quot;</span>]<br>  <span class="hljs-attr">capacity:</span><br>    <span class="hljs-attr">storage:</span> <span class="hljs-string">5Gi</span><br><br>[<span class="hljs-string">root@k8s-master</span> <span class="hljs-string">volumes</span>]<span class="hljs-comment"># kubectl apply -f pv-demo.yaml </span><br><span class="hljs-string">persistentvolume/pv001</span> <span class="hljs-string">created</span><br><span class="hljs-string">persistentvolume/pv002</span> <span class="hljs-string">created</span><br><span class="hljs-string">persistentvolume/pv003</span> <span class="hljs-string">created</span><br><span class="hljs-string">persistentvolume/pv004</span> <span class="hljs-string">created</span><br><span class="hljs-string">persistentvolume/pv005</span> <span class="hljs-string">created</span><br><br>[<span class="hljs-string">root@k8s-master</span> <span class="hljs-string">volumes</span>]<span class="hljs-comment"># kubectl get pv</span><br><span class="hljs-string">NAME</span>      <span class="hljs-string">CAPACITY</span>   <span class="hljs-string">ACCESS</span> <span class="hljs-string">MODES</span>   <span class="hljs-string">RECLAIM</span> <span class="hljs-string">POLICY</span>   <span class="hljs-string">STATUS</span>      <span class="hljs-string">CLAIM</span>     <span class="hljs-string">STORAGECLASS</span>   <span class="hljs-string">REASON</span>    <span class="hljs-string">AGE</span><br><span class="hljs-string">pv001</span>     <span class="hljs-string">1Gi</span>        <span class="hljs-string">RWO,RWX</span>        <span class="hljs-string">Retain</span>           <span class="hljs-string">Available</span>                                      <span class="hljs-string">7s</span><br><span class="hljs-string">pv002</span>     <span class="hljs-string">2Gi</span>        <span class="hljs-string">RWO</span>            <span class="hljs-string">Retain</span>           <span class="hljs-string">Available</span>                                      <span class="hljs-string">7s</span><br><span class="hljs-string">pv003</span>     <span class="hljs-string">2Gi</span>        <span class="hljs-string">RWO,RWX</span>        <span class="hljs-string">Retain</span>           <span class="hljs-string">Available</span>                                      <span class="hljs-string">7s</span><br><span class="hljs-string">pv004</span>     <span class="hljs-string">4Gi</span>        <span class="hljs-string">RWO,RWX</span>        <span class="hljs-string">Retain</span>           <span class="hljs-string">Available</span>                                      <span class="hljs-string">7s</span><br><span class="hljs-string">pv005</span>     <span class="hljs-string">5Gi</span>        <span class="hljs-string">RWO,RWX</span>        <span class="hljs-string">Retain</span>           <span class="hljs-string">Available</span>                                      <span class="hljs-string">7s</span><br></code></pre></td></tr></table></figure><blockquote><h4 id="Capacity（存储能力）"><a href="#Capacity（存储能力）" class="headerlink" title="Capacity（存储能力）"></a>Capacity（存储能力）</h4><p>一般来说，一个 PV 对象都要指定一个存储能力，通过 PV 的 capacity属性来设置的，目前只支持存储空间的设置，就是我们这里的 storage&#x3D;1Gi，不过未来可能会加入 IOPS、吞吐量等指标的配置。</p></blockquote><blockquote><h4 id="AccessModes（访问模式）"><a href="#AccessModes（访问模式）" class="headerlink" title="AccessModes（访问模式）"></a>AccessModes（访问模式）</h4><p>AccessModes 是用来对 PV 进行访问模式的设置，用于描述用户应用对存储资源的访问权限，访问权限包括下面几种方式：</p></blockquote><ul><li>ReadWriteOnce（RWO）：读写权限，但是只能被单个节点挂载</li><li>ReadOnlyMany（ROX）：只读权限，可以被多个节点挂载</li><li>ReadWriteMany（RWX）：读写权限，可以被多个节点挂载</li></ul><h4 id="下图是一些常用的-Volume-插件支持的访问模式："><a href="#下图是一些常用的-Volume-插件支持的访问模式：" class="headerlink" title="下图是一些常用的 Volume 插件支持的访问模式："></a>下图是一些常用的 Volume 插件支持的访问模式：</h4><p><img src="/images/volumes-3.png" alt="volumes-3"></p><blockquote><h4 id="persistentVolumeReclaimPolicy（回收策略）"><a href="#persistentVolumeReclaimPolicy（回收策略）" class="headerlink" title="persistentVolumeReclaimPolicy（回收策略）"></a>persistentVolumeReclaimPolicy（回收策略）</h4><p>我这里指定的 PV 的回收策略为 Recycle，目前 PV 支持的策略有三种：<br>Retain（保留）- 保留数据，需要管理员手工清理数据<br>Recycle（回收）- 清除 PV 中的数据，效果相当于执行 rm -rf &#x2F;thevoluem&#x2F;*<br>Delete（删除）- 关联的存储资产（例如 AWS EBS、GCE PD、Azure Disk 和 OpenStack Cinder 卷）将被删除。<br>不过需要注意的是，目前只有 NFS 和 HostPath 两种类型支持回收策略。当然一般来说还是设置为 Retain 这种策略保险一点。</p></blockquote><blockquote><h4 id="状态"><a href="#状态" class="headerlink" title="状态"></a>状态</h4><p>一个 PV 的生命周期中，可能会处于4中不同的阶段：<br>Available（可用）：表示可用状态，还未被任何 PVC 绑定<br>Bound（已绑定）：表示 PVC 已经被 PVC 绑定<br>Released（已释放）：PVC 被删除，但是资源还未被集群重新声明<br>Failed（失败）： 表示该 PV 的自动回收失败</p></blockquote><h4 id="3、定义PVC（非常注意：在创建PVC时PVC的namespace空间一定和Pod在同一namespace空间中）"><a href="#3、定义PVC（非常注意：在创建PVC时PVC的namespace空间一定和Pod在同一namespace空间中）" class="headerlink" title="3、定义PVC（非常注意：在创建PVC时PVC的namespace空间一定和Pod在同一namespace空间中）"></a>3、定义PVC（非常注意：在创建PVC时PVC的namespace空间一定和Pod在同一namespace空间中）</h4><blockquote><p>这里定义了pvc的访问模式为多路读写，该访问模式必须在前面pv定义的访问模式之中。定义PVC申请的大小为2Gi，此时PVC会自动去匹配多路读写且大小为2Gi的PV，匹配成功获取PVC的状态即为Bound</p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs yaml">[<span class="hljs-string">root@k8s-master</span> <span class="hljs-string">volumes</span> <span class="hljs-string">~</span>]<span class="hljs-comment"># vim pod-vol-pvc.yaml</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">PersistentVolumeClaim</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">mypvc</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">default</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">accessModes:</span> [<span class="hljs-string">&quot;ReadWriteMany&quot;</span>]<br>  <span class="hljs-attr">resources:</span><br>    <span class="hljs-attr">requests:</span><br>      <span class="hljs-attr">storage:</span> <span class="hljs-string">2Gi</span><br><span class="hljs-meta">---</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Pod</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">pod-vol-pvc</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">default</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">containers:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">myapp</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">ikubernetes/myapp:v1</span><br>    <span class="hljs-attr">volumeMounts:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">html</span><br>      <span class="hljs-attr">mountPath:</span> <span class="hljs-string">/usr/share/nginx/html</span><br>  <span class="hljs-attr">volumes:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">html</span><br>      <span class="hljs-attr">persistentVolumeClaim:</span><br>        <span class="hljs-attr">claimName:</span> <span class="hljs-string">mypvc</span><br><br>[<span class="hljs-string">root@k8s-master</span> <span class="hljs-string">volumes</span>]<span class="hljs-comment"># kubectl apply -f pod-vol-pvc.yaml </span><br><span class="hljs-string">persistentvolumeclaim/mypvc</span> <span class="hljs-string">created</span><br><span class="hljs-string">pod/pod-vol-pvc</span> <span class="hljs-string">created</span><br><br>[<span class="hljs-string">root@k8s-master</span> <span class="hljs-string">volumes</span>]<span class="hljs-comment"># kubectl get pv</span><br><span class="hljs-string">NAME</span>      <span class="hljs-string">CAPACITY</span>   <span class="hljs-string">ACCESS</span> <span class="hljs-string">MODES</span>   <span class="hljs-string">RECLAIM</span> <span class="hljs-string">POLICY</span>   <span class="hljs-string">STATUS</span>      <span class="hljs-string">CLAIM</span>           <span class="hljs-string">STORAGECLASS</span>   <span class="hljs-string">REASON</span>    <span class="hljs-string">AGE</span><br><span class="hljs-string">pv001</span>     <span class="hljs-string">1Gi</span>        <span class="hljs-string">RWO,RWX</span>        <span class="hljs-string">Retain</span>           <span class="hljs-string">Available</span>                                            <span class="hljs-string">19m</span><br><span class="hljs-string">pv002</span>     <span class="hljs-string">2Gi</span>        <span class="hljs-string">RWO</span>            <span class="hljs-string">Retain</span>           <span class="hljs-string">Available</span>                                            <span class="hljs-string">19m</span><br><span class="hljs-string">pv003</span>     <span class="hljs-string">2Gi</span>        <span class="hljs-string">RWO,RWX</span>        <span class="hljs-string">Retain</span>           <span class="hljs-string">Bound</span>       <span class="hljs-string">default/mypvc</span>                            <span class="hljs-string">19m</span><br><span class="hljs-string">pv004</span>     <span class="hljs-string">4Gi</span>        <span class="hljs-string">RWO,RWX</span>        <span class="hljs-string">Retain</span>           <span class="hljs-string">Available</span>                                            <span class="hljs-string">19m</span><br><span class="hljs-string">pv005</span>     <span class="hljs-string">5Gi</span>        <span class="hljs-string">RWO,RWX</span>        <span class="hljs-string">Retain</span>           <span class="hljs-string">Available</span>                                            <span class="hljs-string">19m</span><br><br>[<span class="hljs-string">root@k8s-master</span> <span class="hljs-string">volumes</span>]<span class="hljs-comment"># kubectl get pvc</span><br><span class="hljs-string">NAME</span>      <span class="hljs-string">STATUS</span>    <span class="hljs-string">VOLUME</span>    <span class="hljs-string">CAPACITY</span>   <span class="hljs-string">ACCESS</span> <span class="hljs-string">MODES</span>   <span class="hljs-string">STORAGECLASS</span>   <span class="hljs-string">AGE</span><br><span class="hljs-string">mypvc</span>     <span class="hljs-string">Bound</span>     <span class="hljs-string">pv003</span>     <span class="hljs-string">2Gi</span>        <span class="hljs-string">RWO,RWX</span>                       <span class="hljs-string">22s</span><br></code></pre></td></tr></table></figure><h4 id="4、测试访问"><a href="#4、测试访问" class="headerlink" title="4、测试访问"></a>4、测试访问</h4><blockquote><p>在存储服务器上创建index.html，并写入数据，通过访问Pod进行查看，可以获取到相应的页面。</p></blockquote><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">[root@stor01 volumes]<span class="hljs-comment"># cd v3/</span><br><br>[root@stor01 v3]<span class="hljs-comment"># echo &quot;welcome to use pv3&quot; &gt; index.html</span><br><br>[root@k8s-<span class="hljs-keyword">master</span> <span class="hljs-title">volumes</span>]<span class="hljs-comment"># kubectl get pods -o wide</span><br>pod-vol-pvc             <span class="hljs-number">1</span>/<span class="hljs-number">1</span>       Running   <span class="hljs-number">0</span>          <span class="hljs-number">3m</span>        <span class="hljs-number">10.244</span>.<span class="hljs-number">2.39</span>   k8s-node02<br><br>[root@k8s-<span class="hljs-keyword">master</span> <span class="hljs-title">volumes</span>]<span class="hljs-comment"># curl  10.244.2.39</span><br>welcome to use pv3<br></code></pre></td></tr></table></figure><h3 id="八、StorageClass"><a href="#八、StorageClass" class="headerlink" title="八、StorageClass"></a>八、StorageClass</h3><blockquote><p>在pv和pvc使用过程中存在的问题，在pvc申请存储空间时，未必就有现成的pv符合pvc申请的需求，上面nfs在做pvc可以成功的因素是因为我们做了指定的需求处理。那么当PVC申请的存储空间不一定有满足PVC要求的PV时，又该如何处理呢？？？为此，Kubernetes为管理员提供了描述存储”class（类）”的方法（StorageClass）。举个例子，在存储系统中划分一个1TB的存储空间提供给Kubernetes使用，当用户使用PVC申请需要一个10G的PV时，会立即通过restful发送请求，从而让存储空间创建一个10G的image，之后在我们的集群中定义成10G的PV供给给当前的PVC作为挂载使用。在此之前我们的存储系统必须支持restful接口，比如ceph分布式存储，而glusterfs则需要借助第三方接口完成这样的请求。如图：</p></blockquote><p><img src="/images/volumes-4.png" alt="volumes-4"></p><h4 id="StorageClass-中包含-provisioner、parameters-和-reclaimPolicy-字段，当-class-需要动态分配-PersistentVolume-时会使用到。"><a href="#StorageClass-中包含-provisioner、parameters-和-reclaimPolicy-字段，当-class-需要动态分配-PersistentVolume-时会使用到。" class="headerlink" title="StorageClass 中包含 provisioner、parameters 和 reclaimPolicy 字段，当 class 需要动态分配 PersistentVolume 时会使用到。"></a>StorageClass 中包含 provisioner、parameters 和 reclaimPolicy 字段，当 class 需要动态分配 PersistentVolume 时会使用到。</h4><blockquote><h4 id="1、提供者（Provisioner）"><a href="#1、提供者（Provisioner）" class="headerlink" title="1、提供者（Provisioner）"></a>1、提供者（Provisioner）</h4><p>描述存储资源的提供者，也可以看做后端存储驱动。目前 Kubernetes 支持的 Provisioner 都以 “kubernetes.io&#x2F;” 为开头，用户也可以使用自定义的后端存储提供者。为了符合 StorageClass 的用法，自定义 Provisioner 需要符合存储卷的开发规范。</p></blockquote><blockquote><h4 id="2、参数（Parameters）"><a href="#2、参数（Parameters）" class="headerlink" title="2、参数（Parameters）"></a>2、参数（Parameters）</h4><p>后端存储资源提供者的参数设置，不同的 Provisioner 包括不同的参数设置。某些参数可以不显示设定，Provisioner 将使用其默认值。</p></blockquote><blockquote><p>接下来通过几种常见的 Provisioner 对 StorageClass 的定义进行详细说明。</p></blockquote><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs gherkin">[root<span class="hljs-meta">@k8s-master</span> ~]<span class="hljs-comment"># kubectl explain storageclass  #storageclass也是k8s上的资源</span><br>KIND:     StorageClass<br>VERSION:  storage.k8s.io/v1<br>FIELDS:<br>   allowVolumeExpansion <span class="hljs-variable">&lt;boolean&gt;</span>     <br>   allowedTopologies    <span class="hljs-variable">&lt;[]Object&gt;</span>   <br>   apiVersion   <span class="hljs-variable">&lt;string&gt;</span>   <br>   kind <span class="hljs-variable">&lt;string&gt;</span>     <br>   metadata <span class="hljs-variable">&lt;Object&gt;</span>     <br>   mountOptions <span class="hljs-variable">&lt;[]string&gt;</span>    <span class="hljs-comment">#挂载选项</span><br>   parameters   <span class="hljs-variable">&lt;map[string]string&gt;</span>  <span class="hljs-comment">#参数，取决于分配器，可以接受不同的参数。 例如，参数 type 的值 io1 和参数 iopsPerGB 特定于 EBS PV。当参数被省略时，会使用默认值。  </span><br>   provisioner  <span class="hljs-variable">&lt;string&gt;</span> -required-  <span class="hljs-comment">#存储分配器，用来决定使用哪个卷插件分配 PV。该字段必须指定。</span><br>   reclaimPolicy    <span class="hljs-variable">&lt;string&gt;</span>   <span class="hljs-comment">#回收策略，可以是 Delete 或者 Retain。如果 StorageClass 对象被创建时没有指定 reclaimPolicy ，它将默认为 Delete。 </span><br>   volumeBindingMode    <span class="hljs-variable">&lt;string&gt;</span>  <span class="hljs-comment">#卷的绑定模式</span><br></code></pre></td></tr></table></figure><h4 id="Glusterfs"><a href="#Glusterfs" class="headerlink" title="Glusterfs"></a>Glusterfs</h4><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">apiVersion:</span> storage.k8s.io/v1<br><span class="hljs-symbol">kind:</span> StorageClass<br><span class="hljs-symbol">metadata:</span><br><span class="hljs-symbol">  name:</span> slow           <span class="hljs-meta">#定义一个名字，PVC storageClassName时就要用到这个名字</span><br><span class="hljs-symbol">provisioner:</span> kubernetes.io/glusterfs<br><span class="hljs-symbol">parameters:</span><br><span class="hljs-symbol">  resturl:</span> <span class="hljs-string">&quot;http://127.0.0.1:8081&quot;</span><br><span class="hljs-symbol">  clusterid:</span> <span class="hljs-string">&quot;630372ccdc720a92c681fb928f27b53f&quot;</span><br><span class="hljs-symbol">  restauthenabled:</span> <span class="hljs-string">&quot;true&quot;</span><br><span class="hljs-symbol">  restuser:</span> <span class="hljs-string">&quot;admin&quot;</span><br><span class="hljs-symbol">  secretNamespace:</span> <span class="hljs-string">&quot;default&quot;</span><br><span class="hljs-symbol">  secretName:</span> <span class="hljs-string">&quot;heketi-secret&quot;</span><br><span class="hljs-symbol">  gidMin:</span> <span class="hljs-string">&quot;40000&quot;</span><br><span class="hljs-symbol">  gidMax:</span> <span class="hljs-string">&quot;50000&quot;</span><br><span class="hljs-symbol">  volumetype:</span> <span class="hljs-string">&quot;replicate:3&quot;</span><br></code></pre></td></tr></table></figure><blockquote><p>resturl：分配 gluster 卷的需求的 Gluster REST 服务&#x2F;Heketi 服务 url。 通用格式应该是 IPaddress:Port，这是 GlusterFS 动态分配器的必需参数。 如果 Heketi 服务在 openshift&#x2F;kubernetes 中安装并暴露为可路由服务，则可以使用类似于 <a href="http://heketi-storage-project.cloudapps.mystorage.com/">http://heketi-storage-project.cloudapps.mystorage.com</a> 的格式，其中 fqdn 是可解析的 heketi 服务 url。</p></blockquote><blockquote><p>restauthenabled：Gluster REST 服务身份验证布尔值，用于启用对 REST 服务器的身份验证。 如果此值为 ‘true’，则必须填写 restuser 和 restuserkey 或 secretNamespace+ secretName。 此选项已弃用，当在指定 restuser，restuserkey，secretName 或 secretNamespace 时，身份验证被启用。</p></blockquote><blockquote><p>restuser：在 Gluster 可信池中有权创建卷的 Gluster REST服务&#x2F;Heketi 用户。</p></blockquote><blockquote><p>restuserkey：Gluster REST 服务&#x2F;Heketi 用户的密码将被用于对 REST 服务器进行身份验证。此参数已弃用，取而代之的是 secretNamespace + secretName。</p></blockquote><blockquote><p>secretNamespace，secretName：Secret 实例的标识，包含与 Gluster REST 服务交互时使用的用户密码。 这些参数是可选的，secretNamespace 和 secretName 都省略是使用空密码。提供的密码必须有 “kubernetes.io&#x2F;glusterfs” type，例如以这种方式创建：<br>kubectl create secret generic heketi-secret <br>  –type&#x3D;”kubernetes.io&#x2F;glusterfs” –from-literal&#x3D;key&#x3D;’opensesame’ <br>  –namespace&#x3D;default</p></blockquote><h4 id="secret-都例子可以在-glusterfs-provisioning-secret-yaml-中找到。"><a href="#secret-都例子可以在-glusterfs-provisioning-secret-yaml-中找到。" class="headerlink" title="secret 都例子可以在 glusterfs-provisioning-secret.yaml 中找到。"></a>secret 都例子可以在 glusterfs-provisioning-secret.yaml 中找到。</h4><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">apiVersion:</span> v1<br><span class="hljs-symbol">kind:</span> Secret<br><span class="hljs-symbol">metadata:</span><br><span class="hljs-symbol">  name:</span> heketi-secret<br><span class="hljs-symbol">  namespace:</span> default<br><span class="hljs-symbol">data:</span><br>  <span class="hljs-meta"># base64 encoded password. E.g.: echo -n <span class="hljs-string">&quot;mypassword&quot;</span> | base64</span><br><span class="hljs-symbol">  key:</span> bXlwYXNzd29yZA==<br><span class="hljs-symbol">type:</span> kubernetes.io/glusterfs<br></code></pre></td></tr></table></figure><blockquote><p>clusterid：630372ccdc720a92c681fb928f27b53f 是集群的 ID，当分配卷时，Heketi 将会使用这个文件。 它也可以是一个 clusterid 列表，例如： “8452344e2becec931ece4e33c4674e4e,42982310de6c63381718ccfa6d8cf397”。这个是可选参数。</p></blockquote><blockquote><p>gidMin，gidMax：storage class GID 范围的最小值和最大值。在此范围（gidMin-gidMax）内的唯一值（GID）将用于动态分配卷。 这些是可选的值。如果不指定，卷将被分配一个 2000-2147483647 之间的值，这是 gidMin 和 gidMax 的默认值。</p></blockquote><blockquote><p>volumetype：卷的类型及其参数可以用这个可选值进行配置。如果未声明卷类型，则由分配器决定卷的类型。<br>例如：<br>Replica volume: volumetype: replicate:3 其中 ‘3’ 是 replica 数量<br>Disperse&#x2F;EC volume: volumetype: disperse:4:2 其中 ‘4’ 是数据，’2’ 是冗余数量.<br>Distribute volume: volumetype: none</p></blockquote><blockquote><p>当动态分配 persistent volume 时，Gluster 插件自动创建一个端点和一个 以 gluster-dynamic- <claimname> 命名的 headless 服务。当 persistent volume claim 删除时，动态端点和服务是自动删除的。</p></blockquote><h4 id="pvc-storageClassName"><a href="#pvc-storageClassName" class="headerlink" title="pvc storageClassName"></a>pvc storageClassName</h4><blockquote><p>声明可以通过使用属性 storageClassName 指定 StorageClass 的名称来请求特定的类。只有所请求的类与 PVC 具有相同 storageClassName 的 PV 才能绑定到 PVC。</p></blockquote><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-attribute">kind</span><span class="hljs-punctuation">:</span> <span class="hljs-string">PersistentVolumeClaim</span><br><span class="hljs-attribute">apiVersion</span><span class="hljs-punctuation">:</span> <span class="hljs-string">v1</span><br><span class="hljs-attribute">metadata</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">myclaim</span><br><span class="hljs-attribute">spec</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">accessModes</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">ReadWriteOnce</span><br>  <span class="hljs-attribute">resources</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-attribute">requests</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-attribute">storage</span><span class="hljs-punctuation">:</span> <span class="hljs-string">8Gi</span><br>  <span class="hljs-attribute">storageClassName</span><span class="hljs-punctuation">:</span> <span class="hljs-string">slow</span><br></code></pre></td></tr></table></figure><blockquote><p>例如：PVC指定了storageClassName&#x3D;slow。那么Kubernetes会在集群中寻找是否存在metadata.name&#x3D;slow的StorageClass，如果存在，此StorageClass会自动为此PVC创建一个accessModes &#x3D; ReadWriteOnce，并且大小为8GB的PV。</p></blockquote><h4 id="DefaultStorageClass"><a href="#DefaultStorageClass" class="headerlink" title="DefaultStorageClass"></a>DefaultStorageClass</h4><blockquote><p>前面我们说到，PVC和PV的绑定是通过StorageClassName进行的。然而如果定义PVC时没有指定StorageClassName呢？这取决与admission插件是否开启了DefaultDefaultStorageClass功能：</p></blockquote><ul><li>如果DefaultDefaultStorageClass功能开启，那么此PVC的StorageClassName就会被指定为DefaultStorageClass。DefaultStorageClass从何处而来呢？原来在定义StorageClass时，可以在Annotation中添加一个键值对：storageclass.kubernetes.io&#x2F;is-default-class: true，那么此StorageClass就变成默认的StorageClass了。</li><li>如果DefaultDefaultStorageClass功能没有开启，那么没有指定StorageClassName的PVC只能被绑定到同样没有指定StorageClassName的PV。没有指定storageClassName 的 PVC 的处理方式与 storageClassName 设置为 “” 的 PVC 的处理方式相同。</li></ul><h4 id="设置默认的（Default）StorageClass"><a href="#设置默认的（Default）StorageClass" class="headerlink" title="设置默认的（Default）StorageClass"></a>设置默认的（Default）StorageClass</h4><blockquote><p>要在系统中设置一个默认的 StorageClass，首先需要启用名为 “DefaultStorageClass” 的 admission controller。即在 kube-apiserver 的命令行使用 –enable-admission-plugins&#x3D;DefaultStorageClass 或 –disable-admission-plugins 指定需要打开或者关闭的 Admission Controller。</p></blockquote><blockquote><p>然后，在 StorageClass 的定义中设置一个 annotation：</p></blockquote><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">kind:</span> StorageClass<br><span class="hljs-symbol">apiVersion:</span> storage.k8s.io/v1<br><span class="hljs-symbol">metadata:</span><br><span class="hljs-symbol">  name:</span> gold<br><span class="hljs-symbol">  annotations:</span><br>    storageclass.beta.kubernetes.io/<span class="hljs-attr">is-default-class</span><span class="hljs-operator">=</span><span class="hljs-string">&quot;true&quot;</span><br><span class="hljs-symbol">provisioner:</span> kubernetes.io/gce-pd<br><span class="hljs-symbol">parameters:</span><br><span class="hljs-symbol">  type:</span> pd-ssd<br></code></pre></td></tr></table></figure><blockquote><p>通过 kuberctl 命令创建成功后，查看 StorageClass 列表，可以看到名为 gold 的 StorageClass 被标记为 “default”：</p></blockquote><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">$ kubectl <span class="hljs-keyword">get</span> sc<br><span class="hljs-type">NAME</span>          <span class="hljs-keyword">TYPE</span><br>gold (<span class="hljs-keyword">default</span>)  kubetnetes.io/gce-pd<br></code></pre></td></tr></table></figure><h3 id="九、动态PV扩容"><a href="#九、动态PV扩容" class="headerlink" title="九、动态PV扩容"></a>九、动态PV扩容</h3><ul><li><p>v1.11之前需要在<code>feature gate</code>中开启<code>ExpandPersistentVolumes</code>，还建议启用<code>PersistentVolumeClaimResize</code>准入控制器。默认情况下，该准入控制器防止调整所有<code>PersistentVolumeClaim</code>的大小（防止在底层存储不支持扩容的情况下对 PVC 进行扩容），除非<code>PersistentVolumeClaim</code>的<code>StorageClass</code>通过将<code>allowVolumeExpansion</code>设置为<code>true</code>显式地启用大小调整。一旦管理员确定底层提供程序支持卷扩展，管理员就可以通过在自己的<code>StorageClass</code>对象中将<code>allowVolumeExpansion</code>字段设置为<code>true</code>来开启该特性。</p></li><li><p>调整使用中的持久卷大小，v1.15之前需要在<code>feature gate</code>中开启<code>ExpandInUsePersistentVolumes</code>，在开启这种功能的情况下，你不需要删除和重新创建使用现有PVC的Pod或Deployment。只要扩展了文件系统，任何正在使用的PVC都会自动对Pod可用。</p></li></ul><h4 id="以下持久化卷支持扩展持久化卷声明："><a href="#以下持久化卷支持扩展持久化卷声明：" class="headerlink" title="以下持久化卷支持扩展持久化卷声明："></a>以下持久化卷支持扩展持久化卷声明：</h4><ul><li>AWS-EBS</li><li>GCE-PD</li><li>Azure Disk</li><li>Azure File</li><li>Glusterfs</li><li>Cinder</li><li>Portworx</li><li>Ceph RBD</li></ul><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">apiVersion:</span> storage.k8s.io/v1<br><span class="hljs-symbol">kind:</span> StorageClass<br><span class="hljs-symbol">metadata:</span><br><span class="hljs-symbol">  name:</span> gluster-vol-default<br><span class="hljs-symbol">provisioner:</span> kubernetes.io/glusterfs<br><span class="hljs-symbol">parameters:</span><br><span class="hljs-symbol">  resturl:</span> <span class="hljs-string">&quot;http://192.168.10.100:8080&quot;</span><br><span class="hljs-symbol">  restuser:</span> <span class="hljs-string">&quot;&quot;</span><br><span class="hljs-symbol">  secretNamespace:</span> <span class="hljs-string">&quot;&quot;</span><br><span class="hljs-symbol">  secretName:</span> <span class="hljs-string">&quot;&quot;</span><br><span class="hljs-symbol">allowVolumeExpansion:</span> true<br></code></pre></td></tr></table></figure><blockquote><p>要为PVC请求更大的卷，请编辑PVC对象并指定更大的空间。这将触发与其绑定的PV扩容。不是创建新的PV，而是在原有基础上resize，原有数据不会丢失。</p></blockquote><h4 id="扩容操作"><a href="#扩容操作" class="headerlink" title="扩容操作"></a>扩容操作</h4><blockquote><p>修改PVC的size使用<code>kubectl edit pvc xxx</code>，直接修改PVC的容量即可。</p></blockquote><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-attribute">apiVersion</span><span class="hljs-punctuation">:</span> <span class="hljs-string">v1</span><br><span class="hljs-attribute">kind</span><span class="hljs-punctuation">:</span> <span class="hljs-string">PersistentVolumeClaim</span><br><span class="hljs-attribute">metadata</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">annotations</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-attribute">volume.beta.kubernetes.io/storage-provisioner</span><span class="hljs-punctuation">:</span> <span class="hljs-string">ceph.com/rbd</span><br>  <span class="hljs-attribute">name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">resize</span><br><span class="hljs-attribute">spec</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">resources</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-attribute">requests</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-attribute">storage</span><span class="hljs-punctuation">:</span> <span class="hljs-string">5Gi</span><br>  <span class="hljs-attribute">storageClassName</span><span class="hljs-punctuation">:</span> <span class="hljs-string">sata</span><br></code></pre></td></tr></table></figure><blockquote><p>之后PVC会进入<code>FileSystemResizePending</code>状态，等待Pod重启。</p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">PersistentVolumeClaim</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">annotations:</span><br>    <span class="hljs-attr">volume.beta.kubernetes.io/storage-provisioner:</span> <span class="hljs-string">ceph.com/rbd</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">resize</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">resources:</span><br>    <span class="hljs-attr">requests:</span><br>      <span class="hljs-attr">storage:</span> <span class="hljs-string">6Gi</span><br>  <span class="hljs-attr">storageClassName:</span> <span class="hljs-string">sata</span><br><span class="hljs-attr">status:</span><br>  <span class="hljs-attr">accessModes:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">ReadWriteOnce</span><br>  <span class="hljs-attr">capacity:</span><br>    <span class="hljs-attr">storage:</span> <span class="hljs-string">5Gi</span><br>  <span class="hljs-attr">conditions:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">lastProbeTime:</span> <span class="hljs-literal">null</span><br>    <span class="hljs-attr">lastTransitionTime:</span> <span class="hljs-number">2019-04-14T03:51:36Z</span><br>    <span class="hljs-attr">message:</span> <span class="hljs-string">Waiting</span> <span class="hljs-string">for</span> <span class="hljs-string">user</span> <span class="hljs-string">to</span> <span class="hljs-string">(re-)start</span> <span class="hljs-string">a</span> <span class="hljs-string">pod</span> <span class="hljs-string">to</span> <span class="hljs-string">finish</span> <span class="hljs-string">file</span> <span class="hljs-string">system</span> <span class="hljs-string">resize</span> <span class="hljs-string">of</span><br>      <span class="hljs-string">volume</span> <span class="hljs-string">on</span> <span class="hljs-string">node.</span><br>    <span class="hljs-attr">status:</span> <span class="hljs-string">&quot;True&quot;</span><br>    <span class="hljs-attr">type:</span> <span class="hljs-string">FileSystemResizePending</span><br>  <span class="hljs-attr">phase:</span> <span class="hljs-string">Bound</span><br></code></pre></td></tr></table></figure><blockquote><p>重启挂载该PVC的Pod之后，<code>controller manager</code> 会调用 resize命令，更新image的大小，并重新挂载卷到Pod上去。</p></blockquote>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Kubernetes之Ingress</title>
    <link href="/2019/08/26/Kubernetes-Ingress/"/>
    <url>/2019/08/26/Kubernetes-Ingress/</url>
    
    <content type="html"><![CDATA[<p>&amp;emsp;&amp;emsp;从前面的学习，我们可以了解到Kubernetes暴露服务的方式目前只有三种：LoadBlancer Service、ExternalName、NodePort Service、Ingress；而我们需要将集群内服务提供外界访问就会产生以下几个问题：</p><h3 id="Pod-漂移问题："><a href="#Pod-漂移问题：" class="headerlink" title="Pod 漂移问题："></a>Pod 漂移问题：</h3><p>&amp;emsp;&amp;emsp;Kubernetes 具有强大的副本控制能力，能保证在任意副本（Pod）挂掉时自动从其他机器启动一个新的，还可以动态扩容等，通俗地说，这个 Pod 可能在任何时刻出现在任何节点上，也可能在任何时刻死在任何节点上；那么自然随着 Pod 的创建和销毁，Pod IP 肯定会动态变化；那么如何把这个动态的 Pod IP 暴露出去？这里借助于 Kubernetes 的 Service 机制，Service 可以以标签的形式选定一组带有指定标签的 Pod，并监控和自动负载他们的 Pod IP，那么我们向外暴露只暴露 Service IP 就行了；这就是 NodePort 模式：即在每个节点上开起一个端口，然后转发到内部 Pod IP 上，如下图所示：</p><p><img src="/images/ingress-1.png" alt="ingress-1"></p><h3 id="端口管理问题："><a href="#端口管理问题：" class="headerlink" title="端口管理问题："></a>端口管理问题：</h3><p>&amp;emsp;&amp;emsp;采用 NodePort 方式暴露服务面临问题是，服务一旦多起来，NodePort 在每个节点上开启的端口会及其庞大，而且难以维护。这时，我们可以使用一个Nginx直接对内进行转发呢？众所周知的是，Pod与Pod之间是可以互相通信的，而Pod是可以共享宿主机的网络名称空间的，也就是说当在共享网络名称空间时，Pod上所监听的就是Node上的端口。那么这又该如何实现呢？简单的实现就是使用 DaemonSet 在每个 Node 上监听 80，然后写好规则，因为 Nginx 外面绑定了宿主机 80 端口（就像 NodePort），本身又在集群内，那么向后直接转发到相应 Service IP 就行了，如下图所示：</p><p><img src="/images/ingress-2.png" alt="ingress-2"></p><h3 id="域名分配及动态更新问题："><a href="#域名分配及动态更新问题：" class="headerlink" title="域名分配及动态更新问题："></a>域名分配及动态更新问题：</h3><p>&amp;emsp;&amp;emsp;从上面的方法，采用 Nginx-Pod 似乎已经解决了问题，但是其实这里面有一个很大缺陷：当每次有新服务加入又该如何修改 Nginx 配置呢？？我们知道使用Nginx可以通过虚拟主机域名进行区分不同的服务，而每个服务通过upstream进行定义不同的负载均衡池，再加上location进行负载均衡的反向代理，在日常使用中只需要修改nginx.conf即可实现，那在K8S中又该如何实现这种方式的调度呢？？？</p><p>&amp;emsp;&amp;emsp;假设后端的服务初始服务只有ecshop，后面增加了bbs和member服务，那么又该如何将这2个服务加入到Nginx-Pod进行调度呢？总不能每次手动改或者Rolling Update 前端 Nginx Pod 吧！！此时 Ingress 出现了，如果不算上面的Nginx，Ingress 包含两大组件：Ingress Controller 和 Ingress。</p><p><img src="/images/ingress-3.png" alt="ingress-3"></p><p>&amp;emsp;&amp;emsp;Ingress 简单的理解就是你原来需要改 Nginx 配置，然后配置各种域名对应哪个 Service，现在把这个动作抽象出来，变成一个 Ingress 对象，你可以用 yaml 创建，每次不要去改 Nginx 了，直接改 yaml 然后创建&#x2F;更新就行了；那么问题来了：”Nginx 该怎么处理？”</p><p>&amp;emsp;&amp;emsp;Ingress Controller 这东西就是解决 “Nginx 的处理方式” 的；Ingress Controoler 通过与 Kubernetes API 交互，动态的去感知集群中 Ingress 规则变化，然后读取他，按照他自己模板生成一段 Nginx 配置，再写到 Nginx Pod 里，最后 reload 一下，工作流程如下图：</p><p><img src="/images/ingress-4.png" alt="ingress-4"></p><h3 id="Ingress-Controller工作架构如下-借用traefik官方的图："><a href="#Ingress-Controller工作架构如下-借用traefik官方的图：" class="headerlink" title="Ingress Controller工作架构如下,借用traefik官方的图："></a>Ingress Controller工作架构如下,借用traefik官方的图：</h3><p><img src="/images/ingress-5.png" alt="ingress-5"><br>&amp;emsp;&amp;emsp;你可以将api.domain.com进来的流量路由到集群里api的pod上,你可以将backoffice.domain.com流量路由到backoffice的一组pod上（注意：ingress nginx是怎么识别那些Pod是那个应该加入那个upstream呢？这里就用到了service使用service的labels将一组服务关联起来，虽然创建了service但是ingress controller在解析service的是时候实际是解析到后面的Pod上。）</p><p><img src="/images/ingress-6.png" alt="ingress-6"></p><p>看起来按照nginx来理解转发是client——&gt;nginx——&gt;svc——&gt;pod;<br>实际上转发是client—–&gt;nginx——&gt;pod,是直接负载到svc后面的Pod上面的</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment">#例如上面trafik图里的Ingress大致就是下面这样:</span><br><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">extensions/v1beta1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Ingress</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">my-ingress</span><br>  <span class="hljs-attr">annotations:</span><br>    <span class="hljs-attr">nginx.ingress.kubernetes.io/use-regex:</span> <span class="hljs-string">&quot;true&quot;</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">rules:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">host:</span> <span class="hljs-string">api.mydomain.com</span><br>    <span class="hljs-attr">http:</span><br>      <span class="hljs-attr">paths:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">backend:</span><br>          <span class="hljs-attr">serviceName:</span> <span class="hljs-string">api</span><br>          <span class="hljs-attr">servicePort:</span> <span class="hljs-number">80</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">host:</span> <span class="hljs-string">domain.com</span><br>    <span class="hljs-attr">http:</span><br>      <span class="hljs-attr">paths:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">path:</span> <span class="hljs-string">/web/*</span><br>        <span class="hljs-attr">backend:</span><br>          <span class="hljs-attr">serviceName:</span> <span class="hljs-string">web</span><br>          <span class="hljs-attr">servicePort:</span> <span class="hljs-number">8080</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">host:</span> <span class="hljs-string">backoffice.domain.com</span><br>    <span class="hljs-attr">http:</span><br>      <span class="hljs-attr">paths:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">backend:</span><br>          <span class="hljs-attr">serviceName:</span> <span class="hljs-string">backoffice</span><br>          <span class="hljs-attr">servicePort:</span> <span class="hljs-number">8080</span><br><br><span class="hljs-comment">#只要创建了上面的Ingress后,ingress controller里会监听到从而生成对应的配置段后动态reload配置文件</span><br></code></pre></td></tr></table></figure><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-comment">#另外ingress也能多路径,如下:</span><br><br><span class="hljs-attribute">spec</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">rules</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">host: xxxx.xxxx.xxx</span><br>    <span class="hljs-attribute">http</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-attribute">paths</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">backend:</span><br>          <span class="hljs-attribute">serviceName</span><span class="hljs-punctuation">:</span> <span class="hljs-string">service-index</span><br>          <span class="hljs-attribute">servicePort</span><span class="hljs-punctuation">:</span> <span class="hljs-string">80</span><br>        <span class="hljs-attribute">path</span><span class="hljs-punctuation">:</span> <span class="hljs-string">/</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">backend:</span><br>          <span class="hljs-attribute">serviceName</span><span class="hljs-punctuation">:</span> <span class="hljs-string">service-test-api</span><br>          <span class="hljs-attribute">servicePort</span><span class="hljs-punctuation">:</span> <span class="hljs-string">80</span><br>        <span class="hljs-attribute">path</span><span class="hljs-punctuation">:</span> <span class="hljs-string">/api/</span><br></code></pre></td></tr></table></figure><h3 id="部署Ingress-Nginx："><a href="#部署Ingress-Nginx：" class="headerlink" title="部署Ingress Nginx："></a>部署Ingress Nginx：</h3><p>使用Ingress功能步骤：(注意先后顺序，如果先执行了mandatory.yaml文件在执行service-nodeport.yaml文件使用kubectl logs -f 看ingress-controller的pod的日志会有很多报错信息)</p><ul><li>下载Ingress-controller相关的YAML文件，并给Ingress-controller创建独立的名称空间命名为ingress-nginx；</li><li>创建Ingress-controller的service，以实现接入集群外部流量；</li><li>部署Ingress-controller；</li><li>部署后端的服务，如tomcat，并通过service进行暴露；</li><li>部署Ingress，进行定义规则，使Ingress-controller和后端服务的Pod组进行关联。</li></ul><h4 id="1、创建名称空间："><a href="#1、创建名称空间：" class="headerlink" title="1、创建名称空间："></a>1、创建名称空间：</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Namespace</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">ingress-nginx</span><br>  <span class="hljs-attr">labels:</span><br>    <span class="hljs-attr">app.kubernetes.io/name:</span> <span class="hljs-string">ingress-nginx</span><br>    <span class="hljs-attr">app.kubernetes.io/part-of:</span> <span class="hljs-string">ingress-nginx</span><br><br><span class="hljs-meta">---</span><br></code></pre></td></tr></table></figure><h4 id="2、创建Ingress-controller的service（使用Nodeport的方式实现的接入集群外部流量）"><a href="#2、创建Ingress-controller的service（使用Nodeport的方式实现的接入集群外部流量）" class="headerlink" title="2、创建Ingress-controller的service（使用Nodeport的方式实现的接入集群外部流量）"></a>2、创建Ingress-controller的service（使用Nodeport的方式实现的接入集群外部流量）</h4><p>下载YAML文件：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">wget https:<span class="hljs-regexp">//</span>raw.githubusercontent.com<span class="hljs-regexp">/kubernetes/i</span>ngress-nginx<span class="hljs-regexp">/master/</span>deploy<span class="hljs-regexp">/provider/</span>baremetal/service-nodeport.yaml<br></code></pre></td></tr></table></figure><p>修改成如下配置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Service</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">ingress-nginx</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">ingress-nginx</span><br>  <span class="hljs-attr">labels:</span><br>    <span class="hljs-attr">app.kubernetes.io/name:</span> <span class="hljs-string">ingress-nginx</span><br>    <span class="hljs-attr">app.kubernetes.io/part-of:</span> <span class="hljs-string">ingress-nginx</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">NodePort</span><br>  <span class="hljs-attr">ports:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">http</span><br>      <span class="hljs-attr">port:</span> <span class="hljs-number">80</span><br>      <span class="hljs-attr">targetPort:</span> <span class="hljs-number">80</span><br>      <span class="hljs-attr">protocol:</span> <span class="hljs-string">TCP</span><br>      <span class="hljs-attr">nodePort:</span> <span class="hljs-number">30080</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">https</span><br>      <span class="hljs-attr">port:</span> <span class="hljs-number">443</span><br>      <span class="hljs-attr">targetPort:</span> <span class="hljs-number">443</span><br>      <span class="hljs-attr">protocol:</span> <span class="hljs-string">TCP</span><br>      <span class="hljs-attr">nodePort:</span> <span class="hljs-number">30443</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">app.kubernetes.io/name:</span> <span class="hljs-string">ingress-nginx</span><br>    <span class="hljs-attr">app.kubernetes.io/part-of:</span> <span class="hljs-string">ingress-nginx</span><br><br><br><span class="hljs-meta">---</span><br><span class="hljs-meta"></span><br><span class="hljs-meta"></span><br></code></pre></td></tr></table></figure><h4 id="4、执行部署Ingress-Nginx-YAML文件"><a href="#4、执行部署Ingress-Nginx-YAML文件" class="headerlink" title="4、执行部署Ingress Nginx YAML文件"></a>4、执行部署Ingress Nginx YAML文件</h4><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">kubectl apply -f https:<span class="hljs-regexp">//</span>raw.githubusercontent.com<span class="hljs-regexp">/kubernetes/i</span>ngress-nginx<span class="hljs-regexp">/master/</span>deploy/mandatory.yaml<br></code></pre></td></tr></table></figure><h4 id="5、创建后端服务"><a href="#5、创建后端服务" class="headerlink" title="5、创建后端服务"></a>5、创建后端服务</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment">#创建后端服务的service</span><br><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Deployment</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">nginx-deployment</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">matchLabels:</span><br>      <span class="hljs-attr">app:</span> <span class="hljs-string">nginx</span><br>  <span class="hljs-attr">replicas:</span> <span class="hljs-number">2</span> <span class="hljs-comment"># tells deployment to run 2 pods matching the template</span><br>  <span class="hljs-attr">template:</span><br>    <span class="hljs-attr">metadata:</span><br>      <span class="hljs-attr">labels:</span><br>        <span class="hljs-attr">app:</span> <span class="hljs-string">nginx</span><br>    <span class="hljs-attr">spec:</span><br>      <span class="hljs-attr">containers:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">nginx</span><br>        <span class="hljs-attr">image:</span> <span class="hljs-string">nginx:1.7.9</span><br>        <span class="hljs-attr">ports:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">containerPort:</span> <span class="hljs-number">80</span><br><br><span class="hljs-meta">---</span><br><span class="hljs-comment">#创建后端服务的pod</span><br><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Service</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">nginx-service</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">default</span> <br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">ClusterIP</span><br>  <span class="hljs-attr">ports:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">protocol:</span> <span class="hljs-string">TCP</span><br>      <span class="hljs-attr">port:</span> <span class="hljs-number">8080</span><br>      <span class="hljs-attr">targetPort:</span> <span class="hljs-number">80</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">app:</span> <span class="hljs-string">nginx</span><br></code></pre></td></tr></table></figure><h3 id="如何创建Ingress资源："><a href="#如何创建Ingress资源：" class="headerlink" title="如何创建Ingress资源："></a>如何创建Ingress资源：</h3><figure class="highlight pf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs pf"><br>[root@k8s-master ~]<span class="hljs-comment"># kubectl explain ingress</span><br>KIND:     Ingress<br>VERSION:  extensions/v1beta1<br><br>DESCRIPTION:<br>     Ingress is a collection of rules that allow inbound connections <span class="hljs-keyword">to</span> reach<br>     the endpoints defined by a backend. An Ingress can be configured <span class="hljs-keyword">to</span> give<br>     services externally-reachable urls, <span class="hljs-built_in">load</span> balance traffic, terminate SSL,<br>     offer name based virtual hosting etc.<br><br>FIELDS:<br>   apiVersion   <span class="hljs-variable">&lt;string&gt;</span><br>     APIVersion defines the versioned schema of this representation of an<br>     object. Servers should convert recognized schemas <span class="hljs-keyword">to</span> the latest internal<br>     value, and may reject unrecognized values. More info:<br>     https://git.k8s.io/community/contributors/devel/api-conventions.md<span class="hljs-comment">#resources</span><br><br>   kind <span class="hljs-variable">&lt;string&gt;</span><br>     Kind is a string value representing the REST resource this object<br>     represents. Servers may infer this <span class="hljs-keyword">from</span> the endpoint the client submits<br>     requests <span class="hljs-keyword">to</span>. Cannot be updated. In CamelCase. More info:<br>     https://git.k8s.io/community/contributors/devel/api-conventions.md<span class="hljs-comment">#types-kinds</span><br><br>   metadata <span class="hljs-variable">&lt;Object&gt;</span><br>     Standard object&#x27;s metadata. More info:<br>     https://git.k8s.io/community/contributors/devel/api-conventions.md<span class="hljs-comment">#metadata</span><br><br>   spec <span class="hljs-variable">&lt;Object&gt;</span><br>     Spec is the desired <span class="hljs-keyword">state</span> of the Ingress. More info:<br>     https://git.k8s.io/community/contributors/devel/api-conventions.md<span class="hljs-comment">#spec-and-status</span><br><br>   status   <span class="hljs-variable">&lt;Object&gt;</span><br>     Status is the current <span class="hljs-keyword">state</span> of the Ingress. More info:<br>     https://git.k8s.io/community/contributors/devel/api-conventions.md<span class="hljs-comment">#spec-and-status</span><br></code></pre></td></tr></table></figure><figure class="highlight pf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs pf">[root@k8s-master ingress-nginx]<span class="hljs-comment"># kubectl explain ingress.spec</span><br>KIND:     Ingress<br>VERSION:  extensions/v1beta1<br><br>RESOURCE: spec <span class="hljs-variable">&lt;Object&gt;</span><br><br>DESCRIPTION:<br>     Spec is the desired <span class="hljs-keyword">state</span> of the Ingress. More info:<br>     https://git.k8s.io/community/contributors/devel/api-conventions.md<span class="hljs-comment">#spec-and-status</span><br><br>     IngressSpec describes the Ingress the <span class="hljs-keyword">user</span> wishes <span class="hljs-keyword">to</span> exist.<br><br>FIELDS:<br>   backend  <span class="hljs-variable">&lt;Object&gt;</span>     <span class="hljs-comment">#定义后端有哪几个主机</span><br>     A <span class="hljs-keyword">default</span> backend capable of servicing requests that don&#x27;t <span class="hljs-built_in">match</span> <span class="hljs-literal">any</span> <span class="hljs-keyword">rule</span>.<br>     At least one of &#x27;backend&#x27; or &#x27;rules&#x27; must be specified. This field is<br>     optional <span class="hljs-keyword">to</span> allow the loadbalancer controller or defaulting logic <span class="hljs-keyword">to</span><br>     specify a <span class="hljs-keyword">global</span> <span class="hljs-keyword">default</span>.<br><br>   rules    <span class="hljs-variable">&lt;[]Object&gt;</span>    <span class="hljs-comment">#定义规则</span><br>     A list of host rules used <span class="hljs-keyword">to</span> configure the Ingress. If unspecified, or <span class="hljs-keyword">no</span><br>     <span class="hljs-keyword">rule</span> matches, <span class="hljs-literal">all</span> traffic is sent <span class="hljs-keyword">to</span> the <span class="hljs-keyword">default</span> backend.<br><br>   tls  <span class="hljs-variable">&lt;[]Object&gt;</span>       <span class="hljs-comment">#HTTPS服务</span><br>     TLS configuration. Currently the Ingress only supports a single TLS <span class="hljs-keyword">port</span>,<br>     <span class="hljs-number">1</span>.   If multiple members of this list specify different hosts, they will be<br>     multiplexed <span class="hljs-keyword">on</span> the same <span class="hljs-keyword">port</span> according <span class="hljs-keyword">to</span> the hostname specified through<br>     the SNI TLS extension, if the ingress controller fulfilling the ingress<br>     supports SNI.<br></code></pre></td></tr></table></figure><h4 id="编写ingress的配置清单："><a href="#编写ingress的配置清单：" class="headerlink" title="编写ingress的配置清单："></a>编写ingress的配置清单：</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs yaml">[<span class="hljs-string">root@k8s-master</span> <span class="hljs-string">ingress</span>]<span class="hljs-comment"># vim ingress-myapp.yaml</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">extensions/v1beta1</span>      <span class="hljs-comment">#api版本</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Ingress</span>       <span class="hljs-comment">#清单类型</span><br><span class="hljs-attr">metadata:</span>           <span class="hljs-comment">#元数据</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">ingress-myapp</span>    <span class="hljs-comment">#ingress的名称</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">default</span>     <span class="hljs-comment">#所属名称空间</span><br>  <span class="hljs-attr">annotations:</span>           <span class="hljs-comment">#注解信息</span><br>    <span class="hljs-attr">kubernetes.io/ingress.class:</span> <span class="hljs-string">&quot;nginx&quot;</span><br><span class="hljs-attr">spec:</span>      <span class="hljs-comment">#规格</span><br>  <span class="hljs-attr">rules:</span>   <span class="hljs-comment">#定义后端转发的规则</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">host:</span> <span class="hljs-string">nginx.testdomain.com</span>    <span class="hljs-comment">#通过域名进行转发</span><br>    <span class="hljs-attr">http:</span><br>      <span class="hljs-attr">paths:</span>       <br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">path:</span>       <span class="hljs-comment">#配置访问路径，如果通过url进行转发，需要修改；空默认为访问的路径为&quot;/&quot;</span><br>        <span class="hljs-attr">backend:</span>    <span class="hljs-comment">#配置后端服务</span><br>          <span class="hljs-attr">serviceName:</span> <span class="hljs-string">nginx-service</span><br>          <span class="hljs-attr">servicePort:</span> <span class="hljs-number">8080</span><br></code></pre></td></tr></table></figure><p>找到ingress nginx的pod名字后通过命令查看里面nginx配置文件能找到有对应的配置段生成</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs routeros">$ kubectl -n ingress-nginx exec nginx-ingress-controller-6cdcfd8ff9-t5sxl -- cat /etc/nginx/nginx.conf<br><span class="hljs-built_in">..</span>.<br>## start<span class="hljs-built_in"> server </span>nginx.testdomain.com<br><span class="hljs-built_in">server </span>&#123;<br>server_name nginx.testdomain.com ;<br><br>listen 80;<br><br><span class="hljs-built_in">set</span> <span class="hljs-variable">$proxy_upstream_name</span> <span class="hljs-string">&quot;-&quot;</span>;<br><br>location / &#123;<br><br><span class="hljs-built_in">set</span> <span class="hljs-variable">$namespace</span>      <span class="hljs-string">&quot;default&quot;</span>;<br><span class="hljs-built_in">set</span> <span class="hljs-variable">$ingress_name</span>   <span class="hljs-string">&quot;nginx-ingress&quot;</span>;<br><span class="hljs-built_in">set</span> <span class="hljs-variable">$service_name</span>   <span class="hljs-string">&quot;nginx&quot;</span>;<br><span class="hljs-built_in">set</span> <span class="hljs-variable">$service_port</span>   <span class="hljs-string">&quot;8080&quot;</span>;<br><span class="hljs-built_in">set</span> <span class="hljs-variable">$location_path</span>  <span class="hljs-string">&quot;/&quot;</span>;<br>            <span class="hljs-built_in">..</span><span class="hljs-built_in">..</span><span class="hljs-built_in">..</span><span class="hljs-built_in">..</span><br>## end<span class="hljs-built_in"> server </span>nginx.testdomain.com      <br><span class="hljs-built_in">..</span>.<br></code></pre></td></tr></table></figure><p>找一台非集群的机器,设置hosts文件把域名nginx.testdomain.com设置到对svc的那个node的ip上,打开浏览器访问nginx.testdomain.com即可发现集群内的nginx已经暴露在集群外。</p><h4 id="配置域名解析（Node节点IP）"><a href="#配置域名解析（Node节点IP）" class="headerlink" title="配置域名解析（Node节点IP）"></a>配置域名解析（Node节点IP）</h4><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs accesslog"><span class="hljs-number">192.168.91.22</span> nginx.testdomain.com<br><span class="hljs-number">192.168.91.22</span> tomcat.testdomain.com<br></code></pre></td></tr></table></figure><h4 id="多个Ingress-controllers："><a href="#多个Ingress-controllers：" class="headerlink" title="多个Ingress controllers："></a>多个Ingress controllers：</h4><p>如果您的环境中运行多个Ingress controllers，则需要<code>kubernetes.io/ingress.class: &quot;nginx&quot;</code>指定将ingress对象加入到那个Ingress controllers中</p><p>例如：</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">metadata:</span><br><span class="hljs-symbol">  name:</span> foo<br><span class="hljs-symbol">  annotations:</span><br>    kubernetes.io/ingress.class: <span class="hljs-string">&quot;gce&quot;</span><br></code></pre></td></tr></table></figure><p>将以GCE控制器作为目标，迫使它忽略nginx控制器。</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">metadata:</span><br><span class="hljs-symbol">  name:</span> foo<br><span class="hljs-symbol">  annotations:</span><br>    kubernetes.io/ingress.class: <span class="hljs-string">&quot;nginx&quot;</span><br></code></pre></td></tr></table></figure><p>将以nginx控制器作为目标，迫使它忽略GCE控制器。</p><h4 id="Rewrite（重写）："><a href="#Rewrite（重写）：" class="headerlink" title="Rewrite（重写）："></a>Rewrite（重写）：</h4><p>必须条件：当您集群中有多个Ingress controller时您必须通过指定Ingress.class注释来确保您的Ingress只针对一个Ingress controller生效，并且您的集群中必须运行着这个Ingress controller。</p><p>ingress可以使用以下annotations标签控制重写：</p><table><thead><tr><th>名称</th><th>描述</th><th>值</th></tr></thead><tbody><tr><td>nginx.ingress.kubernetes.io&#x2F;rewrite-target</td><td>必须重定向流量的目标URI</td><td>string</td></tr><tr><td>nginx.ingress.kubernetes.io&#x2F;ssl-redirect</td><td>指示位置部分是否仅可访问SSL（当Ingress包含证书时默认为True）</td><td>bool</td></tr><tr><td>nginx.ingress.kubernetes.io&#x2F;force-ssl-redirect</td><td>即使Ingress未启用TLS，也强制重定向到HTTPS</td><td>bool</td></tr><tr><td>nginx.ingress.kubernetes.io&#x2F;app-root</td><td>定义Controller必须重定向的应用程序根，如果它在’&#x2F;‘上下文中</td><td>string</td></tr><tr><td>nginx.ingress.kubernetes.io&#x2F;use-regex</td><td>指示Ingress上定义的路径是否使用正则表达式</td><td>bool</td></tr></tbody></table><h4 id="配置无host字段ingress"><a href="#配置无host字段ingress" class="headerlink" title="配置无host字段ingress"></a>配置无host字段ingress</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">extensions/v1beta1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Ingress</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">andmu-open-web</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">sh-andmuopen</span><br>  <span class="hljs-attr">annotations:</span><br>    <span class="hljs-attr">nginx.ingress.kubernetes.io/server-alias:</span> <span class="hljs-string">&quot;open.andmu.cn&quot;</span><br>    <span class="hljs-attr">kubernetes.io/ingress.class:</span> <span class="hljs-string">&quot;sh-andmuopen&quot;</span><br>    <span class="hljs-attr">nginx.ingress.kubernetes.io/use-regex:</span> <span class="hljs-string">&quot;true&quot;</span>   <span class="hljs-comment">#支持nginx的rui的正则匹配</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">rules:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">http:</span><br>      <span class="hljs-attr">paths:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">path:</span> <span class="hljs-string">/(.*)</span><br>        <span class="hljs-attr">backend:</span><br>          <span class="hljs-attr">serviceName:</span> <span class="hljs-string">andmuopen-web</span><br>          <span class="hljs-attr">servicePort:</span> <span class="hljs-number">80</span><br><span class="hljs-meta">---</span><br></code></pre></td></tr></table></figure><p>在配置中我们没有<code>host</code>字段，这将在ingress-nginx配置中会以如下形式展示，此种方式我们可以用IP或域名的方式访问，因为我们还配置了<code>nginx.ingress.kubernetes.io/server-alias: &quot;open.andmu.cn&quot;</code>，所以当我们用域名访问时用<code>open.andmu.cn</code>访问。</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-comment">## start server _</span><br><span class="hljs-built_in"> server </span>&#123;<br>         server_name _ open.andmu.cn;<br><br>         listen 80 default_server reuseport <span class="hljs-attribute">backlog</span>=65535;<br><br>         listen [::]:80 default_server reuseport <span class="hljs-attribute">backlog</span>=65535;<br><br>         <span class="hljs-built_in">set</span> <span class="hljs-variable">$proxy_upstream_name</span> <span class="hljs-string">&quot;-&quot;</span>;<br>         <span class="hljs-built_in">set</span> <span class="hljs-variable">$pass_access_scheme</span> <span class="hljs-variable">$scheme</span>;<br>         <span class="hljs-built_in">set</span> <span class="hljs-variable">$pass_server_port</span> <span class="hljs-variable">$server_port</span>;<br>         <span class="hljs-built_in">set</span> <span class="hljs-variable">$best_http_host</span> <span class="hljs-variable">$http_host</span>;<br>         <span class="hljs-built_in">set</span> <span class="hljs-variable">$pass_port</span> <span class="hljs-variable">$pass_server_port</span>;<br></code></pre></td></tr></table></figure><h4 id="构建TLS站点：-注：必须是标准的证书格式不能key-server-ca放在一个pem文件中"><a href="#构建TLS站点：-注：必须是标准的证书格式不能key-server-ca放在一个pem文件中" class="headerlink" title="构建TLS站点：(注：必须是标准的证书格式不能key+server+ca放在一个pem文件中)"></a>构建TLS站点：(注：必须是标准的证书格式不能key+server+ca放在一个pem文件中)</h4><p>（1）准备证书</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs csharp">[<span class="hljs-meta">root@k8s-master ingress</span>]<span class="hljs-meta"># openssl genrsa -out tls.key 2048 </span><br>Generating RSA <span class="hljs-keyword">private</span> key, <span class="hljs-number">2048</span> bit <span class="hljs-built_in">long</span> modulus<br>.......+++<br>.......................+++<br>e <span class="hljs-keyword">is</span> <span class="hljs-number">65537</span> (<span class="hljs-number">0x10001</span>)<br></code></pre></td></tr></table></figure><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gradle">[root@k8s-master ingress]# openssl req -<span class="hljs-keyword">new</span> -x509 -key tls.key -out tls.crt -subj <span class="hljs-regexp">/C=CN/</span>ST=Beijing<span class="hljs-regexp">/L=Beijing/</span>O=DevOps/CN=tomcat.magedu.com<br></code></pre></td></tr></table></figure><p>（2）生成secret</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">[root@k8s-<span class="hljs-keyword">master</span> <span class="hljs-title">ingress</span>]<span class="hljs-comment"># kubectl create secret tls tomcat-ingress-secret --cert=tls.crt --key=tls.key</span><br>secret/tomcat-ingress-secret created<br></code></pre></td></tr></table></figure><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">[root@k8s-<span class="hljs-keyword">master</span> <span class="hljs-title">ingress</span>]<span class="hljs-comment"># kubectl get secret</span><br>NAME                    <span class="hljs-keyword">TYPE</span>                                  DATA      AGE<br>default-token-j5pf5     kubernetes.io/service-account-token   <span class="hljs-number">3</span>         <span class="hljs-number">39</span>d<br>tomcat-ingress-secret   kubernetes.io/tls                     <span class="hljs-number">2</span>         <span class="hljs-number">9s</span><br></code></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs yaml">[<span class="hljs-string">root@k8s-master</span> <span class="hljs-string">ingress</span>]<span class="hljs-comment"># kubectl describe secret tomcat-ingress-secret</span><br><span class="hljs-attr">Name:</span>         <span class="hljs-string">tomcat-ingress-secret</span><br><span class="hljs-attr">Namespace:</span>    <span class="hljs-string">default</span><br><span class="hljs-attr">Labels:</span>       <span class="hljs-string">&lt;none&gt;</span><br><span class="hljs-attr">Annotations:</span>  <span class="hljs-string">&lt;none&gt;</span><br><br><span class="hljs-attr">Type:</span>  <span class="hljs-string">kubernetes.io/tls</span><br><br><span class="hljs-string">Data</span><br><span class="hljs-string">====</span><br><span class="hljs-attr">tls.crt:</span>  <span class="hljs-number">1294 </span><span class="hljs-string">bytes</span><br><span class="hljs-attr">tls.key:</span>  <span class="hljs-number">1679 </span><span class="hljs-string">bytes</span><br></code></pre></td></tr></table></figure><p>（3）创建ingress</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs yaml">[<span class="hljs-string">root@k8s-master</span> <span class="hljs-string">ingress</span>]<span class="hljs-comment"># cp ingress-tomcat.yaml ingress-tomcat-tls.yaml</span><br>[<span class="hljs-string">root@k8s-master</span> <span class="hljs-string">ingress</span>]<span class="hljs-comment"># vim ingress-tomcat-tls.yaml </span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">extensions/v1beta1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Ingress</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">ingress-tomcat-tls</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">default</span><br>  <span class="hljs-attr">annotations:</span><br>    <span class="hljs-attr">kubernetes.io/ingress.class:</span> <span class="hljs-string">&quot;nginx&quot;</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">tls:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">hosts:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">tomcat.magedu.com</span><br>    <span class="hljs-attr">secretName:</span> <span class="hljs-string">tomcat-ingress-secret</span><br>  <span class="hljs-attr">rules:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">host:</span> <span class="hljs-string">tomcat.magedu.com</span><br>    <span class="hljs-attr">http:</span><br>      <span class="hljs-attr">paths:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">path:</span><br>        <span class="hljs-attr">backend:</span><br>          <span class="hljs-attr">serviceName:</span> <span class="hljs-string">tomcat</span><br>          <span class="hljs-attr">servicePort:</span> <span class="hljs-number">8080</span><br></code></pre></td></tr></table></figure><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">[root@k8s-<span class="hljs-keyword">master</span> <span class="hljs-title">ingress</span>]<span class="hljs-comment"># kubectl apply -f ingress-tomcat-tls.yaml </span><br>ingress.extensions/ingress-tomcat-tls created<br></code></pre></td></tr></table></figure><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">[root@k8s-<span class="hljs-keyword">master</span> <span class="hljs-title">ingress</span>]<span class="hljs-comment"># kubectl get ingress</span><br>NAME                 HOSTS               ADDRESS   PORTS     AGE<br>ingress-myapp        myapp.magedu.com              <span class="hljs-number">80</span>        <span class="hljs-number">4h</span><br>ingress-tomcat-tls   tomcat.magedu.com             <span class="hljs-number">80</span>, <span class="hljs-number">443</span>   <span class="hljs-number">5s</span><br>tomcat               tomcat.magedu.com             <span class="hljs-number">80</span>        <span class="hljs-number">1h</span><br></code></pre></td></tr></table></figure><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">[root@k8s-master ingress]<span class="hljs-comment"># kubectl describe ingress ingress-tomcat-tls</span><br>Name:             ingress-tomcat-tls<br>Namespace:        default<br>Address:          <br>Default backend:  default-http-backend<span class="hljs-function">:80</span> <span class="hljs-params">(&lt;none&gt;)</span><br>TLS:<br>  tomcat-ingress-secret terminates tomcat.magedu.com<br>Rules:<br>  Host               Path  Backends<br>  <span class="hljs-params">----</span>               <span class="hljs-params">----</span>  <span class="hljs-params">--------</span><br>  tomcat.magedu.com  <br>                        tomcat<span class="hljs-function">:8080</span> <span class="hljs-params">(&lt;none&gt;)</span><br>Annotations:<br>  kubectl.kubernetes.io/last-applied-configuration:  &#123;<span class="hljs-string">&quot;apiVersion&quot;</span>:<span class="hljs-string">&quot;extensions/v1beta1&quot;</span>,<span class="hljs-string">&quot;kind&quot;</span>:<span class="hljs-string">&quot;Ingress&quot;</span>,<span class="hljs-string">&quot;metadata&quot;</span>:&#123;<span class="hljs-string">&quot;annotations&quot;</span>:&#123;<span class="hljs-string">&quot;kubernetes.io/ingress.class&quot;</span>:<span class="hljs-string">&quot;nginx&quot;</span>&#125;,<span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;ingress-tomcat-tls&quot;</span>,<span class="hljs-string">&quot;namespace&quot;</span>:<span class="hljs-string">&quot;default&quot;</span>&#125;,<span class="hljs-string">&quot;spec&quot;</span>:&#123;<span class="hljs-string">&quot;rules&quot;</span>:[&#123;<span class="hljs-string">&quot;host&quot;</span>:<span class="hljs-string">&quot;tomcat.magedu.com&quot;</span>,<span class="hljs-string">&quot;http&quot;</span>:&#123;<span class="hljs-string">&quot;paths&quot;</span>:[&#123;<span class="hljs-string">&quot;backend&quot;</span>:&#123;<span class="hljs-string">&quot;serviceName&quot;</span>:<span class="hljs-string">&quot;tomcat&quot;</span>,<span class="hljs-string">&quot;servicePort&quot;</span><span class="hljs-function">:8080</span>&#125;,<span class="hljs-string">&quot;path&quot;</span><span class="hljs-function">:null</span>&#125;]&#125;&#125;],<span class="hljs-string">&quot;tls&quot;</span>:[&#123;<span class="hljs-string">&quot;hosts&quot;</span>:[<span class="hljs-string">&quot;tomcat.magedu.com&quot;</span>],<span class="hljs-string">&quot;secretName&quot;</span>:<span class="hljs-string">&quot;tomcat-ingress-secret&quot;</span>&#125;]&#125;&#125;<br><br>  kubernetes.io/ingress.class:  nginx<br>Events:<br>  Type    Reason  Age   From                      Message<br>  <span class="hljs-params">----</span>    <span class="hljs-params">------</span>  <span class="hljs-params">----</span>  <span class="hljs-params">----</span>                      <span class="hljs-params">-------</span><br>  Normal  CREATE  20s   nginx-ingress-controller  Ingress default/ingress-tomcat-tls<br></code></pre></td></tr></table></figure><p>（4）访问测试：<a href="https://tomcat.magedu.com:30443/">https://tomcat.magedu.com:30443</a></p><p><img src="/images/ingress-7.png" alt="ingress-7"></p><h3 id="Ingress-Controller高可用："><a href="#Ingress-Controller高可用：" class="headerlink" title="Ingress Controller高可用："></a>Ingress Controller高可用：</h3><p>&amp;emsp;&amp;emsp;这里来讨论下Ingress Controller的Nginx pod高可用。上面的例子里svc我使用的nodePort，Nodeport端口不是web端口(但是可以修改Nodeport的范围改成web端口),如果当流量进来负载到某个node上的时候因为Ingress Controller的pod不在这个node上,会走这个node的kube-proxy转发到Ingress Controller的pod上,多走一趟路。(例如：我们Ingress Controller的pod在192.168.91.22上，但是你域名解析的是192.168.91.21 nginx.testdomain.com这样，这个时候192.168.91.21这个node上的kube-proxy会把请求转发到192.168.91.22上)。故建议使用daemonset+nodeSelector的方式来ingress controller的Pod负载（每个Node节点一个ingress controller的Pod）。</p><p>&amp;emsp;&amp;emsp;不创建svc，效率最高。如果我们使用Nodeport的方式，流量是NodeIP——-&gt;svc—-ingress-controller(pod)这样的话会多走一层svc层，不管svc层是使用iptables还是lvs都会降低效率。如果使用hostNetwork的方式就是直接走Node节点的主机网络，唯一要注意的是hostNetwork下pod会继承宿主机的网络协议,也就是使用了主机的dns,会导致svc的请求直接走宿主机的上到公网的dns服务器而非集群里的dns server,需要设置pod的dnsPolicy: ClusterFirstWithHostNet即可解决</p><h3 id="Ingress-Controller部署方式没多大区别开心就好："><a href="#Ingress-Controller部署方式没多大区别开心就好：" class="headerlink" title="Ingress Controller部署方式没多大区别开心就好："></a>Ingress Controller部署方式没多大区别开心就好：</h3><ul><li>daemonSet + nodeSeletor (一个Node节点运行一个Ingress Controller的Pod，当有多个Node的时候可以使用污点或者通过指定nodeSelector来指定部分主机来运行Ingress Controller的Pod)</li><li>deploy的方式部署多个ingress controller：设置replicas数量（不能大于node节点数） + nodeSeletor + pod互斥</li></ul><h4 id="1-1、使用-daemonSet-nodeSeletor-方式部署"><a href="#1-1、使用-daemonSet-nodeSeletor-方式部署" class="headerlink" title="1.1、使用 daemonSet + nodeSeletor 方式部署"></a>1.1、使用 daemonSet + nodeSeletor 方式部署</h4><p>&amp;emsp;&amp;emsp;首先我们要创建一个ingress-nginx的svc不然ingress nginx的log里会一直刷找不到ingress-nginx的svc不处理的话会狂刷log导致机器load过高,创建一个同名的svc即可解决,例如创建一个不带选择器clusterip为None的</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">kind:</span> <span class="hljs-string">Service</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">ingress-nginx</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">ingress-nginx</span><br>  <span class="hljs-attr">labels:</span><br>    <span class="hljs-attr">app.kubernetes.io/name:</span> <span class="hljs-string">ingress-nginx</span><br>    <span class="hljs-attr">app.kubernetes.io/part-of:</span> <span class="hljs-string">ingress-nginx</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">ClusterIP</span><br>  <span class="hljs-attr">clusterIP:</span> <span class="hljs-string">&quot;None&quot;</span><br>  <span class="hljs-attr">ports:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">http</span><br>      <span class="hljs-attr">port:</span> <span class="hljs-number">80</span><br>      <span class="hljs-attr">targetPort:</span> <span class="hljs-number">80</span><br>      <span class="hljs-attr">protocol:</span> <span class="hljs-string">TCP</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">https</span><br>      <span class="hljs-attr">port:</span> <span class="hljs-number">443</span><br>      <span class="hljs-attr">targetPort:</span> <span class="hljs-number">443</span><br>      <span class="hljs-attr">protocol:</span> <span class="hljs-string">TCP</span><br><span class="hljs-meta">---</span><br></code></pre></td></tr></table></figure><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">[root@k8s-m1 ~]# kubectl <span class="hljs-keyword">get</span> svc -n ingress-nginx<br><span class="hljs-type">NAME</span>            <span class="hljs-keyword">TYPE</span>        <span class="hljs-keyword">CLUSTER</span>-IP   <span class="hljs-keyword">EXTERNAL</span>-IP   PORT(S)          AGE<br>ingress-nginx   ClusterIP   <span class="hljs-keyword">None</span>         &lt;<span class="hljs-keyword">none</span>&gt;        <span class="hljs-number">80</span>/TCP,<span class="hljs-number">443</span>/TCP   <span class="hljs-number">14</span>h<br></code></pre></td></tr></table></figure><h4 id="1-2、修改ingress-controller-mandatory-yaml文件"><a href="#1-2、修改ingress-controller-mandatory-yaml文件" class="headerlink" title="1.2、修改ingress-controller mandatory.yaml文件"></a>1.2、修改ingress-controller mandatory.yaml文件</h4><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">apiVersion:</span> apps/v1<br><span class="hljs-symbol">kind:</span> DaemonSet<br><span class="hljs-symbol">metadata:</span><br><span class="hljs-symbol">  name:</span> nginx-ingress-controller<br><span class="hljs-symbol">  namespace:</span> ingress-nginx<br><span class="hljs-symbol">  labels:</span><br></code></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">template:</span><br>  <span class="hljs-attr">metadata:</span><br>    <span class="hljs-attr">labels:</span><br>      <span class="hljs-attr">app.kubernetes.io/name:</span> <span class="hljs-string">ingress-nginx</span><br>      <span class="hljs-attr">app.kubernetes.io/part-of:</span> <span class="hljs-string">ingress-nginx</span><br>    <span class="hljs-attr">annotations:</span><br>      <span class="hljs-attr">prometheus.io/port:</span> <span class="hljs-string">&quot;10254&quot;</span><br>      <span class="hljs-attr">prometheus.io/scrape:</span> <span class="hljs-string">&quot;true&quot;</span><br>  <span class="hljs-attr">spec:</span><br>    <span class="hljs-attr">hostNetwork:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">dnsPolicy:</span> <span class="hljs-string">ClusterFirstWithHostNet</span><br>    <span class="hljs-attr">serviceAccountName:</span> <span class="hljs-string">nginx-ingress-serviceaccount</span><br></code></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql">[root<span class="hljs-variable">@k8s</span><span class="hljs-operator">-</span>m1 <span class="hljs-operator">~</span>]# kubectl  <span class="hljs-keyword">get</span> pod <span class="hljs-operator">-</span>n ingress<span class="hljs-operator">-</span>nginx <span class="hljs-operator">-</span>o wide<br>NAME                             READY   STATUS    RESTARTS   AGE   IP          NODE     NOMINATED NODE   READINESS GATES<br>nginx<span class="hljs-operator">-</span>ingress<span class="hljs-operator">-</span>controller<span class="hljs-operator">-</span>m64rj   <span class="hljs-number">1</span><span class="hljs-operator">/</span><span class="hljs-number">1</span>     <span class="hljs-keyword">Running</span>   <span class="hljs-number">0</span>          <span class="hljs-number">19</span>m   <span class="hljs-number">10.15</span><span class="hljs-number">.1</span><span class="hljs-number">.6</span>   k8s<span class="hljs-operator">-</span>n1   <span class="hljs-operator">&lt;</span><span class="hljs-keyword">none</span><span class="hljs-operator">&gt;</span>           <span class="hljs-operator">&lt;</span><span class="hljs-keyword">none</span><span class="hljs-operator">&gt;</span><br>nginx<span class="hljs-operator">-</span>ingress<span class="hljs-operator">-</span>controller<span class="hljs-operator">-</span>w5ts8   <span class="hljs-number">1</span><span class="hljs-operator">/</span><span class="hljs-number">1</span>     <span class="hljs-keyword">Running</span>   <span class="hljs-number">0</span>          <span class="hljs-number">19</span>m   <span class="hljs-number">10.15</span><span class="hljs-number">.1</span><span class="hljs-number">.7</span>   k8s<span class="hljs-operator">-</span>n2   <span class="hljs-operator">&lt;</span><span class="hljs-keyword">none</span><span class="hljs-operator">&gt;</span>           <span class="hljs-operator">&lt;</span><span class="hljs-keyword">none</span><span class="hljs-operator">&gt;</span><br></code></pre></td></tr></table></figure><p>&amp;emsp;&amp;emsp;修改部署方式为<code>DaemonSet</code>以及删除<code>replicas</code>副本集参数，新增<code> hostNetwork: true</code> 和 <code>dnsPolicy: ClusterFirstWithHostNet</code>参数。我们可以看到Pod的IP就直接是Node节点的IP。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>kubernetes之DNS</title>
    <link href="/2019/08/23/kubernetes-DNS/"/>
    <url>/2019/08/23/kubernetes-DNS/</url>
    
    <content type="html"><![CDATA[<blockquote><p>Kubernetes 从 1.3 版本起， DNS 是内置的服务，通过插件管理器 集群插件 自动被启动。Kubernetes DNS 在集群中调度 DNS Pod 和 Service ，配置 kubelet 以通知个别容器使用 DNS Service 的 IP 解析 DNS 名字。</p></blockquote><h3 id="怎样获取-DNS-名字："><a href="#怎样获取-DNS-名字：" class="headerlink" title="怎样获取 DNS 名字："></a>怎样获取 DNS 名字：</h3><blockquote><p>在集群中定义的每个 Service（包括 DNS 服务器自身）都会被指派一个 DNS 名称。 默认，一个客户端 Pod 的 DNS 搜索列表将包含该 Pod 自己的 Namespace 和集群默认域。 通过如下示例可以很好地说明：<br>例如，有一个名称为 <code>nginx-service</code> 的 <code>Service</code>，它在 Kubernetes 集群中名为 <code>kube-system</code> 的 <code>Namespace</code> 中，会创建一条为 <code>nginx-service.kube-system.svc.cluster.local. </code>的DNS 记录。<br>资源记录的格式为：<code>SVC_NAME.NS_NAME.DOMAIN.LTD.</code><br>SVC_NAME:<code>service名称</code><br>NS_NAME:<code>(Namespace )名称空间</code><br>DOMAIN.LTD: <code>默认的集群service 的A记录：svc.cluster.local.</code><br>redis服务创建的A记录：<code>redis.default.svc.cluster.local.</code></p></blockquote><h3 id="支持的-DNS-模式："><a href="#支持的-DNS-模式：" class="headerlink" title="支持的 DNS 模式："></a>支持的 DNS 模式：</h3><h4 id="Service："><a href="#Service：" class="headerlink" title="Service："></a>Service：</h4><blockquote><ul><li>A 记录<br>“正常” Service（除了 Headless Service）会以 my-svc.my-namespace.svc.cluster.local 这种名字的形式被指派一个 DNS A 记录。这会解析成该 Service 的 Cluster IP。</li></ul></blockquote><blockquote><p>“Headless” Service（没有Cluster IP）也会以 my-svc.my-namespace.svc.cluster.local 这种名字的形式被指派一个 DNS A 记录。 不像正常 Service，它会解析成该 Service 选择的一组 Pod 的 IP。 希望客户端能够使用这一组 IP，否则就使用标准的 round-robin 策略从这一组 IP 中进行选择</p></blockquote><blockquote><ul><li>SRV 记录<br>命名端口需要创建 SRV 记录，这些端口是正常 Service或 Headless Services 的一部分。 对每个命名端口，SRV 记录具有 _my-port-name._my-port-protocol.my-svc.my-namespace.svc.cluster.local 这种形式。 对普通 Service，这会被解析成端口号和 CNAME：my-svc.my-namespace.svc.cluster.local。 对 Headless Service，这会被解析成多个结果，Service 对应的每个 backend Pod 各一个，包含 auto-generated-name.my-svc.my-namespace.svc.cluster.local 这种形式 Pod 的端口号和 CNAME。</li></ul></blockquote><h3 id="Pod："><a href="#Pod：" class="headerlink" title="Pod："></a>Pod：</h3><blockquote><ul><li>A 记录<br>如果启用，Pod 会以 pod-ip-address.my-namespace.pod.cluster.local 这种形式被指派一个 DNS A 记录。<br>例如，default Namespace 具有 DNS 名字 cluster.local，在该 Namespace 中一个 IP 为 1.2.3.4 的 Pod 将具有一个条目：1-2-3-4.default.pod.cluster.local。</li></ul></blockquote><h3 id="Kubernetes配置使用CoreDNS："><a href="#Kubernetes配置使用CoreDNS：" class="headerlink" title="Kubernetes配置使用CoreDNS："></a>Kubernetes配置使用CoreDNS：</h3><blockquote><p>kubelet的大多数命令行参数都改为推荐在<code>--config</code>指定位置的配置文件中进行配置，包括<code>--cluster-dns和--cluster-domain</code>两个参数，在kubelet的配置文件中配置如下：</p></blockquote><p><img src="/images/dns1.png" alt="dns1"></p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc">apiVersion: kubelet.config.k8s.io/v1beta1<br>kind: KubeletConfiguration<br><span class="hljs-code">......</span><br><span class="hljs-code">clusterDNS:</span><br><span class="hljs-code">- 10.254.0.2</span><br><span class="hljs-code">clusterDomain: cluster.local</span><br><span class="hljs-code">......</span><br></code></pre></td></tr></table></figure><blockquote><p>其中clusterDNS指定了集群中所有容器将使用的DNS Server，即kubelet会在每个Pod内部设置DNS服务的地址为clusterDNS配置的地址。前面的配置中设置了Kubernetes集群访问内DNS服务器的地址是10.254.0.2，将由起完成Service Name到Cluster Ip的解析。有了这个配置，我们还需要在集群内部署DNS服务，DNS服务一般都是作为addon组件部署在Kubernetes集群内的。</p></blockquote><blockquote><p>在Kubernetes中部署CoreDNS作为集群内的DNS服务有很多种方式。这里继承我们之前部署kubeDNS的传统，使用Kubernetes中addon库中的yaml文件部署，地址在这里：<br><code>https://github.com/kubernetes/kubernetes/tree/master/cluster/addons/dns/coredns</code></p></blockquote><blockquote><p>查看transforms2sed.sed的内容：<br><img src="/images/dns2.png" alt="dns2"></p></blockquote><blockquote><p>将$DNS_SERVER_IP和DNS_DOMAIN替换成kubelet配置的内容。这里将$DNS_SERVER_IP替换成10.254.0.2，将DNS_DOMAIN替换成cluster.local.。</p></blockquote><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stylus">#执行下面的命令，生成部署coreDNS所需的coredns.yaml文件：<br>sed -f transforms2sed<span class="hljs-selector-class">.sed</span> coredns<span class="hljs-selector-class">.yaml</span><span class="hljs-selector-class">.base</span> &gt; coredns.yaml<br></code></pre></td></tr></table></figure><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-comment">#对coredns.yaml做微调，如修改镜像地址为私有镜像仓库，调整副本数量等等。</span><br><span class="hljs-attribute">kubectl</span> apply -f coredns.yaml      <span class="hljs-comment">#注意使用镜像加速器不然可能无法下载镜像</span><br></code></pre></td></tr></table></figure><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-comment">#查看coredns的Pod，确认所有Pod都处于Running状态：</span><br><br><span class="hljs-attribute">kubectl</span> get pods -n kube-system -l k8s-app=kube-dns<br><span class="hljs-attribute">NAME</span>                       READY     STATUS    RESTARTS   AGE<br><span class="hljs-attribute">coredns</span>-<span class="hljs-number">699477</span>c54d-<span class="hljs-number">9</span>fsl2   <span class="hljs-number">1</span>/<span class="hljs-number">1</span>       Running   <span class="hljs-number">0</span>          <span class="hljs-number">5</span>m<br><span class="hljs-attribute">coredns</span>-<span class="hljs-number">699477</span>c54d-d6tb2   <span class="hljs-number">1</span>/<span class="hljs-number">1</span>       Running   <span class="hljs-number">0</span>          <span class="hljs-number">5</span>m<br><span class="hljs-attribute">coredns</span>-<span class="hljs-number">699477</span>c54d-qh54v   <span class="hljs-number">1</span>/<span class="hljs-number">1</span>       Running   <span class="hljs-number">0</span>          <span class="hljs-number">5</span>m<br><span class="hljs-attribute">coredns</span>-<span class="hljs-number">699477</span>c54d-vvqj9   <span class="hljs-number">1</span>/<span class="hljs-number">1</span>       Running   <span class="hljs-number">0</span>          <span class="hljs-number">5</span>m<br><span class="hljs-attribute">coredns</span>-<span class="hljs-number">699477</span>c54d-xcv8h   <span class="hljs-number">1</span>/<span class="hljs-number">1</span>       Running   <span class="hljs-number">0</span>          <span class="hljs-number">6</span>m<br></code></pre></td></tr></table></figure><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs autoit"><span class="hljs-meta">#测试一下DNS功能是否好用：</span><br>dig -t A nginx-service.<span class="hljs-literal">default</span>.svc.cluster.<span class="hljs-keyword">local</span>. <span class="hljs-symbol">@10</span><span class="hljs-number">.254</span><span class="hljs-number">.0</span><span class="hljs-number">.2</span><br></code></pre></td></tr></table></figure><blockquote><p>修改master节点和所有node节点的&#x2F;etc&#x2F;systemd&#x2F;system&#x2F;kube-kubelet.service，修改–cluster-dns和 –cluster-domain内容如下，与上面的Corefile中的值对应。</p></blockquote><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs routeros">[Service]<br><span class="hljs-attribute">WorkingDirectory</span>=/var/lib/kubelet<br><span class="hljs-attribute">ExecStart</span>=/usr/k8s/bin/kubelet \<br>  <span class="hljs-attribute">--fail-swap-on</span>=<span class="hljs-literal">false</span> \<br>  <span class="hljs-attribute">--cgroup-driver</span>=cgroupfs \<br>  <span class="hljs-attribute">--address</span>=192.168.91.21 \<br>  <span class="hljs-attribute">--hostname-override</span>=192.168.91.21 \<br>  <span class="hljs-attribute">--experimental-bootstrap-kubeconfig</span>=/etc/kubernetes/bootstrap.kubeconfig \<br>  <span class="hljs-attribute">--kubeconfig</span>=/etc/kubernetes/kubelet.kubeconfig \<br>  <span class="hljs-attribute">--cert-dir</span>=/etc/kubernetes/ssl \<br>  <span class="hljs-attribute">--cluster-dns</span>=10.254.0.2 \<br>  <span class="hljs-attribute">--cluster-domain</span>=cluster.local. \<br>  --hairpin-mode promiscuous-bridge \<br>  <span class="hljs-attribute">--allow-privileged</span>=<span class="hljs-literal">true</span> \<br>  <span class="hljs-attribute">--serialize-image-pulls</span>=<span class="hljs-literal">false</span> \<br>  <span class="hljs-attribute">--logtostderr</span>=<span class="hljs-literal">true</span> \<br>  <span class="hljs-attribute">--v</span>=2<br><span class="hljs-attribute">Restart</span>=on-failure<br><span class="hljs-attribute">RestartSec</span>=5<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Kubernetes之Service</title>
    <link href="/2019/08/23/Kubernetes-Service/"/>
    <url>/2019/08/23/Kubernetes-Service/</url>
    
    <content type="html"><![CDATA[<h3 id="概述："><a href="#概述：" class="headerlink" title="概述："></a>概述：</h3><blockquote><p>Service是Kubernetes中最核心的概念，正是因为对此概念的支持，Kubernetes在某种角度下可以被看成是一种微服务平台。Kubernetes中的pod并不稳定，比如由ReplicaSet、Deployment、DaemonSet等副本控制器创建的pod，其副本数量、pod名称、pod所运行的节点、pod的IP地址等，会随着集群规模、节点状态、用户缩放等因素动态变化。Service是一组逻辑pod的抽象，为一组pod提供统一入口，用户只需与service打交道，service提供DNS解析名称，负责追踪pod动态变化并更新转发表，通过负载均衡算法最终将流量转发到后端的pod。</p></blockquote><h3 id="Service的实现模型："><a href="#Service的实现模型：" class="headerlink" title="Service的实现模型："></a>Service的实现模型：</h3><blockquote><p>在 Kubernetes 集群中，每个 Node 运行一个 kube-proxy 进程。kube-proxy 负责为 Service 实现了一种 VIP（虚拟 IP）的形式，而不是 ExternalName 的形式。 在 Kubernetes v1.0 版本，代理完全在 userspace。在 Kubernetes v1.1 版本，新增了 iptables 代理，但并不是默认的运行模式。 从 Kubernetes v1.2 起，默认就是 iptables 代理。在Kubernetes v1.8.0-beta.0中，添加了ipvs代理。在 Kubernetes v1.0 版本，Service 是 “4层”（TCP&#x2F;UDP over IP）概念。 在 Kubernetes v1.1 版本，新增了 Ingress API（beta 版），用来表示 “7层”（HTTP）服务。</p></blockquote><blockquote><p>kube-proxy 这个组件始终监视着apiserver中有关service的变动信息，获取任何一个与service资源相关的变动状态，通过watch监视，一旦有service资源相关的变动和创建，kube-proxy都要转换为当前节点上的能够实现资源调度规则（例如：iptables、ipvs）</p></blockquote><p><img src="/images/service-kube-proxy.png" alt="service-kube-proxy"></p><blockquote><p>如果某个服务后端pod发生变化，标签选择器适应的pod有多一个，适应的信息会立即反映到apiserver上,而kube-proxy一定可以watch到etc中的信息变化，而将它立即转为ipvs或者iptables中的规则，这一切都是动态和实时的，删除一个pod也是同样的原理。如图：</p></blockquote><p><img src="/images/service-kube-proxy2.png" alt="service-kube-proxy2"></p><h3 id="原理："><a href="#原理：" class="headerlink" title="原理："></a>原理：</h3><blockquote><p>本节定义一个service示例并说明其工作原理。假设已经通过Deployment副本控制器创建了3个pod，每个pod包含”app&#x3D;Myapp”标签，每个pod暴露端口9376。之所以假设已经有3个pod实例是为了方便说明service工作原理，推荐的做法是先创建service后创建pod。以下是service声明：(service是靠标签选择器来识别是不是同一个service，service不是一个应用程序也不是一个组件，只是在iptables创建了一个DNAT转发规则而已。)</p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">kind:</span> <span class="hljs-string">Service</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">my-service</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">app:</span> <span class="hljs-string">MyApp</span><br>  <span class="hljs-attr">ports:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">protocol:</span> <span class="hljs-string">TCP</span><br>    <span class="hljs-attr">port:</span> <span class="hljs-number">80</span><br>    <span class="hljs-attr">targetPort:</span> <span class="hljs-number">9376</span><br></code></pre></td></tr></table></figure><blockquote><h3 id="工作过程如下-（Endpoint-x3D-Pod-IP-ContainerPort）："><a href="#工作过程如下-（Endpoint-x3D-Pod-IP-ContainerPort）：" class="headerlink" title="工作过程如下 （Endpoint&#x3D;Pod IP+ContainerPort）："></a>工作过程如下 （Endpoint&#x3D;Pod IP+ContainerPort）：</h3></blockquote><ul><li>为实例分配置集群虚拟IP。如果在声明时明确指定集群虚拟IP，则分配指定IP，如未指定则自动分配。</li><li>根据实例名称、分配的集群虚拟IP、端口号创建DNS条目。</li><li>根据标签选择器聚合符合条件的节点，并创建相应endpoint，endpoint包含所有符合条件pod的ip地址与端口号。</li><li>kube-proxy运行在集群中每一个节点上，并持续监控集群中service、endpoint变更，根据监控结果设置转发规则，将一个集群虚拟IP、端口与一个或者多个pod的IP、端口映射起来。</li><li>当在集群内部通过服务名称访问创建的service时，首先由DNS将服务名称转换成集群虚拟IP与端口号，kube-proxy根据转发规则对service的流量计算负载均衡、转发到位于后端的pod。</li></ul><h3 id="无标签选择器service"><a href="#无标签选择器service" class="headerlink" title="无标签选择器service"></a>无标签选择器service</h3><blockquote><p>当与service对应的后端位于集群外部时，因为集群中没有相关的pod实例，因此这种情况下就不需要标签选择器。有标签选择器时系统自动查询pod并创建相应的endpoint，无标签选择器时需要用户手动创建endpoint。<br>如下情况下可以使用：</p></blockquote><ul><li>希望在生产环境中使用外部的数据库集群，但测试环境使用自己的数据库。</li><li>希望服务指向另一个 Namespace 中或其它集群中的服务。</li><li>正在将工作负载转移到 Kubernetes 集群，和运行在 Kubernetes 集群之外的 backend。</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment">#定义如下service：</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Service</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">my-service</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">ports:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">protocol:</span> <span class="hljs-string">TCP</span><br>    <span class="hljs-attr">port:</span> <span class="hljs-number">80</span><br>    <span class="hljs-attr">targetPort:</span> <span class="hljs-number">9376</span><br></code></pre></td></tr></table></figure><blockquote><p>由于这个 Service 没有标签选择器，就不会创建相关的 Endpoints 对象。可以手动将 Service 映射到指定的 Endpoints：</p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">kind:</span> <span class="hljs-string">Endpoints</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">my-service</span><br><span class="hljs-attr">subsets:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">addresses:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">ip:</span> <span class="hljs-number">1.2</span><span class="hljs-number">.3</span><span class="hljs-number">.4</span><br>    <span class="hljs-attr">ports:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">port:</span> <span class="hljs-number">9376</span><br></code></pre></td></tr></table></figure><blockquote><p>注意：Endpoint IP 地址不能是 loopback（127.0.0.0&#x2F;8）、 link-local（169.254.0.0&#x2F;16）、或者 link-local 多播（224.0.0.0&#x2F;24）。<br>注意：除需要手动创建endpoint外，无标签选择器与有标签选择器的servcie工作过程完全相同。请求将被路由到用户定义的 Endpoint（该示例中为 1.2.3.4:9376）</p></blockquote><h3 id="kube-proxy有以下三种工作模式"><a href="#kube-proxy有以下三种工作模式" class="headerlink" title="kube-proxy有以下三种工作模式:"></a>kube-proxy有以下三种工作模式:</h3><blockquote><ul><li>userspace 代理模式：</li></ul></blockquote><ul><li>iptables 代理模式：</li><li>ipvs 代理模式：</li></ul><h3 id="ipvs-vs-iptables"><a href="#ipvs-vs-iptables" class="headerlink" title="ipvs vs. iptables"></a>ipvs vs. iptables</h3><blockquote><p>我们知道kube-proxy支持 iptables 和 ipvs 两种模式， 在kubernetes v1.8 中引入了 ipvs 模式，在 v1.9 中处于 beta 阶段，在 v1.11 中已经正式可用了。iptables 模式在 v1.1 中就添加支持了，从 v1.2 版本开始 iptables 就是 kube-proxy 默认的操作模式，ipvs 和 iptables 都是基于netfilter的，那么 ipvs 模式和 iptables 模式之间有哪些差异呢？</p></blockquote><ul><li>1、ipvs 为大型集群提供了更好的可扩展性和性能</li><li>2、ipvs 支持比 iptables 更复杂的负载均衡算法（最小负载、最少连接、加权等等）</li><li>3、ipvs 支持服务器健康检查和连接重试等功能</li></ul><h3 id="ipvs-依赖-iptables"><a href="#ipvs-依赖-iptables" class="headerlink" title="ipvs 依赖 iptables"></a>ipvs 依赖 iptables</h3><blockquote><p>ipvs 会使用 iptables 进行包过滤、SNAT、masquared(伪装)。具体来说，ipvs 将使用ipset来存储需要DROP或masquared的流量的源或目标地址，以确保 iptables 规则的数量是恒定的，这样我们就不需要关心我们有多少服务了</p></blockquote><blockquote><p>既然每个Pod都会被分配一个单独的IP地址，而且每个Pod都提供了一个独立的Endpoint(Pod IP+ContainerPort)以被客户端访问，现在多个Pod副本组成了一个集群来提供服务，那么客户端如何来访问它们呢？一般的做法是部署一个负载均衡器（软件或硬件），为这组Pod开启一个对外的服务端口如9376端口，并且将这些Pod的Endpoint列表加入9376端口的转发列表中，客户端就可以通过负载均衡器的对外IP地址+服务端口来访问服务，而客户端的请求最后会被转发到哪个Pod，则由负载均衡器的算法所决定。</p></blockquote><blockquote><p>Kubernetes也遵循了上述常规做法，运行在每个Node上的kube-proxy进程其实就是一个智能的软件负载均衡器，它负责把对Service的请求转发到后端的某个Pod实例上，并在内部实现服务的负载均衡与会话机制。但Kubernetes发明了一种很巧妙又影响深远的设计：Service不是共用一个负载均衡的IP地址，而是每个Service分配了全局唯一的虚拟IP地址，这个虚拟IP地址被称为Cluster IP。这样一来，每个服务就变成了具备唯一IP地址的“通信节点”，服务调用就变成了最基础的TCP网络通信问题。</p></blockquote><blockquote><p>我们知道，Pod的Endpoint地址会随着Pod的销毁和重新创建而发生改变，因为新Pod的IP地址与之前旧Pod的不同。而Service一旦被创建，Kubernetes就会自动为它分配一个可用的Cluster IP，而且在Service的整个生命周期内。它的Cluster IP不会发生改变。于是，服务发现这个棘手的问题在Kubernetes的架构里也得到轻松解决：只要用Service的Name与Service的Cluster IP地址做一个DNS域名映射即可完美解决问题。现在想想，这真是一个很棒的设计。</p></blockquote><h3 id="定义-Service"><a href="#定义-Service" class="headerlink" title="定义 Service"></a>定义 Service</h3><blockquote><p>说了这么久，下面我们动手创建一个Service，来加深对它的理解。首先我们创建一个名为tomcat-service.yaml的定义文件，内容如下：</p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Service</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">tomcat-service</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">ports:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">port:</span> <span class="hljs-number">8080</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">tier:</span> <span class="hljs-string">frontend</span><br></code></pre></td></tr></table></figure><blockquote><p>上述内容定义了一个名为“tomcat-service”的Service，它的服务端口为8080，拥有“tier-frontend”这个Label的所有Pod实例都属于它，运行下面的命令进行创建：</p></blockquote><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-comment"># kubectl create -f tomcat-service.yaml</span><br><span class="hljs-attribute">service</span> <span class="hljs-string">&quot;tomcat-service&quot;</span> created<br></code></pre></td></tr></table></figure><blockquote><p>运行下面的命令可以查看tomcat-service的Endpoint列表，其中172.17.1.3是Pod的IP地址，端口8080是Container暴露的端口：</p></blockquote><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-comment"># kubectl get endpoints</span><br><span class="hljs-attribute">NAME</span>            ENDPOINTS           AGE<br><span class="hljs-attribute">kubernetes</span>      <span class="hljs-number">192.168.18.131:6443</span>     <span class="hljs-number">15</span>d<br><span class="hljs-attribute">tomcat</span>-service  <span class="hljs-number">172.17.1.3:8080</span>         <span class="hljs-number">1</span>m<br></code></pre></td></tr></table></figure><blockquote><p>你可能有疑问：“说好的Service的Cluster IP呢？怎么没有看到？”我们运行下面的命令即可看到tomcat-service被分配的Cluster IP及更多的信息：</p></blockquote><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-comment"># kubectl get svc tomcat-service -o yaml</span><br></code></pre></td></tr></table></figure><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">apiVersion:</span> v1<br><span class="hljs-symbol">kind:</span> Service<br><span class="hljs-symbol">metadata:</span><br><span class="hljs-symbol">  creationTimestamp:</span> <span class="hljs-number">2018</span><span class="hljs-number">-10</span><span class="hljs-number">-17</span>T10:<span class="hljs-number">04</span>:<span class="hljs-number">21</span>Z<br><span class="hljs-symbol">  name:</span> tomcat-service<br><span class="hljs-symbol">  namespace:</span> default<br><span class="hljs-symbol">  resourceVersion:</span> <span class="hljs-string">&quot;10169415&quot;</span><br><span class="hljs-symbol">  selfLink:</span> <span class="hljs-keyword">/api/</span>v1<span class="hljs-keyword">/namespaces/</span>default<span class="hljs-keyword">/services/</span>tomcat-service<br><span class="hljs-symbol">  uid:</span> <span class="hljs-number">04</span>caf53f-d1f4<span class="hljs-number">-11e8</span><span class="hljs-number">-83</span>a3<span class="hljs-number">-5254008</span>f2a0b<br><span class="hljs-symbol">spec:</span><br><span class="hljs-symbol">  clusterIP:</span> <span class="hljs-number">10.254</span><span class="hljs-number">.169</span><span class="hljs-number">.39</span><br><span class="hljs-symbol">  ports:</span><br>  - port: <span class="hljs-number">8080</span><br><span class="hljs-symbol">    protocol:</span> TCP<br><span class="hljs-symbol">    targetPort:</span> <span class="hljs-number">8080</span><br><span class="hljs-symbol">  selector:</span><br><span class="hljs-symbol">    tier:</span> frontend<br><span class="hljs-symbol">  sessionAffinity:</span> None<br><span class="hljs-symbol">  type:</span> ClusterIP<br><span class="hljs-symbol">status:</span><br><span class="hljs-symbol">  loadBalancer:</span> <span class="hljs-punctuation">&#123;</span><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><blockquote><p>在spec.ports的定义中，targetPort属性用来确定提供该服务的容器所暴露（EXPOSE）的端口号，即具体业务进程在容器内的targetPort上提供TCP&#x2F;IP接入；而port属性则定义了Service的虚拟端口。如果没有指定targetPort，则默认targetPort与port相同。</p></blockquote><h3 id="选择自己的-IP-地址"><a href="#选择自己的-IP-地址" class="headerlink" title="选择自己的 IP 地址"></a>选择自己的 IP 地址</h3><blockquote><p>在 Service 创建的请求中，可以通过设置 spec.clusterIP 字段来指定自己的集群 IP 地址。比如，希望替换一个已经已存在的 DNS 条目，或者遗留系统已经配置了一个固定的 IP 且很难重新配置。用户选择的 IP 地址必须合法，并且这个 IP 地址在 service-cluster-ip-range CIDR 范围内，这对 API Server 来说是通过一个标识来指定的。如果 IP 地址不合法，API Server 会返回 HTTP 状态码 422，表示值不合法。</p></blockquote><h3 id="Service多端口问题。"><a href="#Service多端口问题。" class="headerlink" title="Service多端口问题。"></a>Service多端口问题。</h3><blockquote><p>很多服务都存在多个端口的问题，通常一个端口提供业务服务，另外一个端口提供管理服务，比如Mycat、Codis等常见中间件。Kubernetes Service支持多个Endpoint，在存在多个Endpoint的情况下，要求每个Endpoint定义一个名字区分。下面是Tomcat多端口的Service定义样例：</p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Service</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">tomcat-service</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">ports:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">port:</span> <span class="hljs-number">8080</span><br>   <span class="hljs-attr">name:</span> <span class="hljs-string">service-port</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">port:</span> <span class="hljs-number">8005</span><br>   <span class="hljs-attr">name:</span> <span class="hljs-string">shutdown-port</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">tier:</span> <span class="hljs-string">frontend</span><br></code></pre></td></tr></table></figure><blockquote><p>多端口为什么需要給每个端口命名呢？这就涉及Kubernetes的服务发现机制了，我们接下来进行讲解。</p></blockquote><h3 id="Kubernetes的服务发现机制"><a href="#Kubernetes的服务发现机制" class="headerlink" title="Kubernetes的服务发现机制"></a>Kubernetes的服务发现机制</h3><blockquote><p>kubernetes 提供了 service 的概念可以通过 VIP 访问 pod 提供的服务，但是在使用的时候还有一个问题：怎么知道某个应用的 VIP？比如我们有两个应用，一个 app，一个 是 db，每个应用使用RC(控制器)进行管理，并通过 service 暴露出端口提供服务。app 需要连接到 db 应用，我们只知道 db 应用的名称，但是并不知道它的 VIP 地址。</p></blockquote><h4 id="环境变量方式"><a href="#环境变量方式" class="headerlink" title="环境变量方式"></a>环境变量方式</h4><blockquote><p>最早时Kubernetes采用了Linux环境变量的方式解决这个问题，即每个Service生成一些对应的Linux环境变量（ENV），并在每个Pod的容器在启动时，自动注入这些环境变量。<br>不同服务的环境变量用名称区分，例如：<br>{SVCNAME}_SERVICE_HOST and {SVCNAME}_SERVICE_PORT<br>如果服务有多个端口则端口的环境变量名称为 {SVCNAME}<em>SERVICE</em>{PORTNAME}_PORT。<br>以下是tomcat-service产生的环境变量条目：</p></blockquote><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">TOMCAT_SERVICE_SERVICE_HOST</span>=<span class="hljs-number">10.254</span>.<span class="hljs-number">93.4</span><br><span class="hljs-attr">TOMCAT_SERVICE_SERVICE_PORT_SERVICE_PORT</span>=<span class="hljs-number">8080</span><br><span class="hljs-attr">TOMCAT_SERVICE_SERVICE_PORT_SHUTDOWN_PORT</span>=<span class="hljs-number">8005</span><br><span class="hljs-attr">TOMCAT_SERVICE_SERVICE_PORT</span>=<span class="hljs-number">8080</span><br><span class="hljs-attr">TOMCAT_SERVICE_PORT</span>=tcp://<span class="hljs-number">10.254</span>.<span class="hljs-number">93.4</span>:<span class="hljs-number">8080</span><br><span class="hljs-attr">TOMCAT_SERVICE_PORT_8080_TCP_ADDR</span>=<span class="hljs-number">10.254</span>.<span class="hljs-number">93.4</span><br><span class="hljs-attr">TOMCAT_SERVICE_PORT_8080_TCP</span>=tcp://<span class="hljs-number">10.254</span>.<span class="hljs-number">93.4</span>:<span class="hljs-number">8080</span><br><span class="hljs-attr">TOMCAT_SERVICE_PORT_8080_TCP_PROTO</span>=tcp<br><span class="hljs-attr">TOMCAT_SERVICE_PORT_8080_TCP_PORT</span>=<span class="hljs-number">8080</span><br><span class="hljs-attr">TOMCAT_SERVICE_PORT_8005_TCP</span>=tcp://<span class="hljs-number">10.254</span>.<span class="hljs-number">93.4</span>:<span class="hljs-number">8005</span><br><span class="hljs-attr">TOMCAT_SERVICE_PORT_8005_TCP_ADDR</span>=<span class="hljs-number">10.254</span>.<span class="hljs-number">93.4</span><br><span class="hljs-attr">TOMCAT_SERVICE_PORT_8005_TCP_PROTO</span>=tcp<br><span class="hljs-attr">TOMCAT_SERVICE_PORT_8005_TCP_PORT</span>=<span class="hljs-number">8005</span><br></code></pre></td></tr></table></figure><h4 id="DNS方式："><a href="#DNS方式：" class="headerlink" title="DNS方式："></a>DNS方式：</h4><blockquote><p>一个可选（尽管强烈推荐）集群插件 是 DNS 服务器。 DNS 服务器监视着创建新 Service 的 Kubernetes API，从而为每一个 Service 创建一组 DNS 记录。 如果整个集群的 DNS 一直被启用，那么所有的 Pod 应该能够自动对 Service 进行名称解析。</p></blockquote><blockquote><p>例如，有一个名称为 “my-service” 的 Service，它在 Kubernetes 集群中名为 “my-ns” 的 Namespace 中，为 “my-service.my-ns” 创建了一条 DNS 记录。 在名称为 “my-ns” 的 Namespace 中的 Pod 应该能够简单地通过名称查询找到 “my-service”。 在另一个 Namespace 中的 Pod 必须限定名称为 “my-service.my-ns”。 这些名称查询的结果是 Cluster IP。</p></blockquote><blockquote><p>Kubernetes 也支持对端口名称的 DNS SRV（Service）记录。 如果名称为 “my-service.my-ns” 的 Service 有一个名为 “http” 的 TCP 端口，可以对 “_http._tcp.my-service.my-ns” 执行 DNS SRV 查询，得到 “http” 的端口号。</p></blockquote><blockquote><p>Kubernetes DNS 服务器是唯一的一种能够访问 ExternalName 类型的 Service 的方式。 更多信息可以查看DNS Pod 和 Service。</p></blockquote><h3 id="Headless-Service（无头服务）："><a href="#Headless-Service（无头服务）：" class="headerlink" title="Headless Service（无头服务）："></a>Headless Service（无头服务）：</h3><blockquote><p>在定义service时，如果.spec.clusterIP被指定为固定值则为服务分配指定的IP，如果.spec.clusterIP字段没有出现在配置中，则自动分配集群虚拟IP。但如果.spect.clusterIP的值被指定为”None”，此时创建的服务就被称为无头服务，其行为与普通服务有很大区别。首先不为服务分配集群虚拟IP，自然也就不能在DNS插件中添加服务相关条目。运行在各节点上的kube-proxy不为其添加转发规则，自然也就无法利用kube-proxy的转发、负载均衡功能。</p></blockquote><blockquote><p>虽然不向DNS插件添加服务相关条目，但可能添加其它条目，DNS 如何实现自动配置，依赖于 Service 是否定义了 selector。</p></blockquote><h4 id="配置-Selector："><a href="#配置-Selector：" class="headerlink" title="配置 Selector："></a>配置 Selector：</h4><blockquote><p>此种情况下，系统仍然根据标签选择器创建endpoint，并根据endpoint向DNS插件中添加条目。比如命名空间为”my-ns”，服务名称为”my-headless”，endpoing指向的pod名称为pod1、pod2，则向DNS插件中添加的条目类似于”pod1.my-headless.my-ns”与”pod1.my-headless.my-ns”，此时DNS中的条目直接指向pod。在StatefulSet类型资源中，使用无头服务为其中的pod提供名称解析服务，只所以可行，其实是因为StatefulSet能保证其管理的pod有序，名称地址等特征保持不变。</p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment">#配置如下：</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Service</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">nginx-service</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">default</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">clusterIP:</span> <span class="hljs-string">None</span><br>  <span class="hljs-attr">ports:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">protocol:</span> <span class="hljs-string">TCP</span><br>      <span class="hljs-attr">port:</span> <span class="hljs-number">8080</span><br>      <span class="hljs-attr">targetPort:</span> <span class="hljs-number">80</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">app:</span> <span class="hljs-string">nginx</span><br><br></code></pre></td></tr></table></figure><h4 id="不配置-Selector："><a href="#不配置-Selector：" class="headerlink" title="不配置 Selector："></a>不配置 Selector：</h4><blockquote><p>对没有定义 selector 的 Headless Service，Endpoint 控制器不会创建 Endpoints 记录。 然而 DNS 系统会查找并配置，无论是：</p></blockquote><ul><li>ExternalName 类型 Service 的 CNAME 记录</li><li>记录：与 Service 共享一个名称的任何 Endpoints，以及所有其它类型</li></ul><h3 id="DNS解析正常-Service如下："><a href="#DNS解析正常-Service如下：" class="headerlink" title="DNS解析正常 Service如下："></a>DNS解析正常 Service如下：</h3><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">[root@devops192168111034 K8s-res]# kubectl <span class="hljs-keyword">get</span> svc<br><span class="hljs-type">NAME</span>            <span class="hljs-keyword">TYPE</span>        <span class="hljs-keyword">CLUSTER</span>-IP       <span class="hljs-keyword">EXTERNAL</span>-IP   PORT(S)    AGE<br>kubernetes      ClusterIP   <span class="hljs-number">10.254</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>       &lt;<span class="hljs-keyword">none</span>&gt;        <span class="hljs-number">443</span>/TCP    <span class="hljs-number">41</span>d<br>nginx-service   ClusterIP   <span class="hljs-number">10.254</span><span class="hljs-number">.142</span><span class="hljs-number">.201</span>   &lt;<span class="hljs-keyword">none</span>&gt;        <span class="hljs-number">8080</span>/TCP   <span class="hljs-number">5</span>s<br><br></code></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-attr">[root@devops192168111034 K8s-res]</span># dig -t <span class="hljs-selector-tag">A</span> nginx-service<span class="hljs-selector-class">.default</span><span class="hljs-selector-class">.svc</span><span class="hljs-selector-class">.cluster</span><span class="hljs-selector-class">.local</span>. <span class="hljs-keyword">@10</span>.254.0.2<br><br>; &lt;&lt;&gt;&gt; DiG <span class="hljs-number">9.9</span>.<span class="hljs-number">4</span>-RedHat-<span class="hljs-number">9.9</span>.<span class="hljs-number">4</span>-<span class="hljs-number">72</span><span class="hljs-selector-class">.el7</span> &lt;&lt;&gt;&gt; -t <span class="hljs-selector-tag">A</span> nginx-service<span class="hljs-selector-class">.default</span><span class="hljs-selector-class">.svc</span><span class="hljs-selector-class">.cluster</span><span class="hljs-selector-class">.local</span>. <span class="hljs-keyword">@10</span>.254.0.2<br>;; global options: +cmd<br>;; Got answer:<br>;; -&gt;&gt;<span class="hljs-selector-tag">HEADER</span>&lt;&lt;- opcode: QUERY, status: NOERROR, id: <span class="hljs-number">42184</span><br>;; flags: qr aa rd ra; QUERY: <span class="hljs-number">1</span>, ANSWER: <span class="hljs-number">1</span>, AUTHORITY: <span class="hljs-number">0</span>, ADDITIONAL: <span class="hljs-number">1</span><br><br>;; OPT PSEUDOSECTION:<br>; EDNS: version: <span class="hljs-number">0</span>, flags:; udp: <span class="hljs-number">4096</span><br>;; QUESTION <span class="hljs-selector-tag">SECTION</span>:<br>;nginx-service<span class="hljs-selector-class">.default</span><span class="hljs-selector-class">.svc</span><span class="hljs-selector-class">.cluster</span><span class="hljs-selector-class">.local</span>. IN <span class="hljs-selector-tag">A</span><br><br>;; ANSWER <span class="hljs-selector-tag">SECTION</span>:<br>nginx-service.default.svc.cluster.local. <span class="hljs-number">5</span> IN A <span class="hljs-number">10.254</span>.<span class="hljs-number">142.201</span><br><br>;; Query <span class="hljs-selector-tag">time</span>: <span class="hljs-number">1</span> msec<br>;; SERVER: <span class="hljs-number">10.254</span>.<span class="hljs-number">0.2</span>#<span class="hljs-number">53</span>(<span class="hljs-number">10.254</span>.<span class="hljs-number">0.2</span>)<br>;; WHEN: Tue Jan <span class="hljs-number">08</span> <span class="hljs-number">15</span>:<span class="hljs-number">36</span>:<span class="hljs-number">51</span> CST <span class="hljs-number">2019</span><br>;; MSG SIZE  rcvd: <span class="hljs-number">123</span><br></code></pre></td></tr></table></figure><h3 id="DNS解析Headless-Service如下："><a href="#DNS解析Headless-Service如下：" class="headerlink" title="DNS解析Headless Service如下："></a>DNS解析Headless Service如下：</h3><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><br>[root@devops192168111034 K8s-res]# kubectl <span class="hljs-keyword">get</span> svc<br><span class="hljs-type">NAME</span>            <span class="hljs-keyword">TYPE</span>        <span class="hljs-keyword">CLUSTER</span>-IP   <span class="hljs-keyword">EXTERNAL</span>-IP   PORT(S)    AGE<br>kubernetes      ClusterIP   <span class="hljs-number">10.254</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>   &lt;<span class="hljs-keyword">none</span>&gt;        <span class="hljs-number">443</span>/TCP    <span class="hljs-number">41</span>d<br>nginx-service   ClusterIP   <span class="hljs-keyword">None</span>         &lt;<span class="hljs-keyword">none</span>&gt;        <span class="hljs-number">8080</span>/TCP   <span class="hljs-number">44</span>m<br><br></code></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs yaml">[<span class="hljs-string">root@devops192168091021</span> <span class="hljs-string">overlord</span>]<span class="hljs-comment"># dig -t A nginx-service.default.svc.cluster.local. @10.254.0.2</span><br><br><span class="hljs-string">;</span> <span class="hljs-string">&lt;&lt;&gt;&gt;</span> <span class="hljs-string">DiG</span> <span class="hljs-number">9.9</span><span class="hljs-number">.4</span><span class="hljs-string">-RedHat-9.9.4-72.el7</span> <span class="hljs-string">&lt;&lt;&gt;&gt;</span> <span class="hljs-string">-t</span> <span class="hljs-string">A</span> <span class="hljs-string">nginx-service.default.svc.cluster.local.</span> <span class="hljs-string">@10.254.0.2</span><br><span class="hljs-string">;;</span> <span class="hljs-attr">global options:</span> <span class="hljs-string">+cmd</span><br><span class="hljs-string">;;</span> <span class="hljs-attr">Got answer:</span><br><span class="hljs-string">;;</span> <span class="hljs-string">-&gt;&gt;HEADER&lt;&lt;-</span> <span class="hljs-attr">opcode:</span> <span class="hljs-string">QUERY,</span> <span class="hljs-attr">status:</span> <span class="hljs-string">NOERROR,</span> <span class="hljs-attr">id:</span> <span class="hljs-number">57770</span><br><span class="hljs-string">;;</span> <span class="hljs-attr">flags:</span> <span class="hljs-string">qr</span> <span class="hljs-string">aa</span> <span class="hljs-string">rd</span> <span class="hljs-string">ra;</span> <span class="hljs-attr">QUERY:</span> <span class="hljs-number">1</span><span class="hljs-string">,</span> <span class="hljs-attr">ANSWER:</span> <span class="hljs-number">2</span><span class="hljs-string">,</span> <span class="hljs-attr">AUTHORITY:</span> <span class="hljs-number">0</span><span class="hljs-string">,</span> <span class="hljs-attr">ADDITIONAL:</span> <span class="hljs-number">1</span><br><br><span class="hljs-string">;;</span> <span class="hljs-attr">OPT PSEUDOSECTION:</span><br><span class="hljs-string">;</span> <span class="hljs-attr">EDNS: version:</span> <span class="hljs-number">0</span><span class="hljs-string">,</span> <span class="hljs-string">flags:;</span> <span class="hljs-attr">udp:</span> <span class="hljs-number">4096</span><br><span class="hljs-string">;;</span> <span class="hljs-attr">QUESTION SECTION:</span><br><span class="hljs-string">;nginx-service.default.svc.cluster.local.</span> <span class="hljs-string">IN</span> <span class="hljs-string">A</span><br><br><span class="hljs-string">;;</span> <span class="hljs-attr">ANSWER SECTION:</span><br><span class="hljs-string">nginx-service.default.svc.cluster.local.</span> <span class="hljs-number">5</span> <span class="hljs-string">IN</span> <span class="hljs-string">A</span> <span class="hljs-number">10.30</span><span class="hljs-number">.25</span><span class="hljs-number">.2</span>     <span class="hljs-comment">#同一个域名解析到不同的IP上</span><br><span class="hljs-string">nginx-service.default.svc.cluster.local.</span> <span class="hljs-number">5</span> <span class="hljs-string">IN</span> <span class="hljs-string">A</span> <span class="hljs-number">10.30</span><span class="hljs-number">.55</span><span class="hljs-number">.2</span><br><br><span class="hljs-string">;;</span> <span class="hljs-attr">Query time:</span> <span class="hljs-number">0</span> <span class="hljs-string">msec</span><br><span class="hljs-string">;;</span> <span class="hljs-attr">SERVER:</span> <span class="hljs-number">10.254</span><span class="hljs-number">.0</span><span class="hljs-number">.2</span><span class="hljs-comment">#53(10.254.0.2)</span><br><span class="hljs-string">;;</span> <span class="hljs-attr">WHEN:</span> <span class="hljs-string">Tue</span> <span class="hljs-string">Jan</span> <span class="hljs-number">08</span> <span class="hljs-number">14</span><span class="hljs-string">:54:17</span> <span class="hljs-string">CST</span> <span class="hljs-number">2019</span><br><span class="hljs-string">;;</span> <span class="hljs-attr">MSG SIZE  rcvd:</span> <span class="hljs-number">178</span><br></code></pre></td></tr></table></figure><h3 id="外部系统访问Service的问题"><a href="#外部系统访问Service的问题" class="headerlink" title="外部系统访问Service的问题"></a>外部系统访问Service的问题</h3><blockquote><p>本文以上示例都以默认服务类型为前提，实际上kubernetes暴露服务IP的类型有四种，service.spec.type允许指定一个需要的类型，默认是 ClusterIP 类型。Type 的取值以及行为如下：</p></blockquote><ul><li>ClusterIP：通过集群的内部 IP 暴露服务，选择该值，服务只能够在集群内部可以访问，这也是默认的 ServiceType。</li><li>NodePort：通过每个 Node 上的 IP 和静态端口（NodePort）暴露服务。NodePort 服务会路由到 ClusterIP 服务，这个 ClusterIP 服务会自动创建。通过请求 <NodeIP>:<NodePort>，可以从集群的外部访问一个 NodePort 服务。</li><li>LoadBalancer：使用云提供商的负载均衡器，可以向外部暴露服务。外部的负载均衡器可以路由到 NodePort 服务和 ClusterIP 服务。</li><li>ExternalName：通过返回 CNAME 和它的值，可以将服务映射到 externalName 字段的内容（例如， foo.bar.example.com）。没有任何类型代理被创建，这只有 Kubernetes 1.7 或更高版本的 kube-dns 才支持。</li></ul><blockquote><p>首先，Node IP是Kubernetes集群中每个节点的物理网卡的IP地址，这是一个真实存在的物理网络，所有属于这个网络的服务器之间都能通过这个网络直接通信，不管它们中是否有部分节点不属于这个Kubernetes集群。这也表明了Kubernetes集群之外的节点访问Kubernetes集群之内的某个节点或者TCP&#x2F;IP服务时，必须要通过Node IP进行通信。</p></blockquote><blockquote><p>其次，Pod IP是每个Pod的IP地址，它是Docker Engine根据docker0网桥的IP地址段进行分配的，通常是一个虚拟的二层网络，前面我们说过，Kubernetes里一个Pod里的容器访问另外一个Pod里的容器，就是通过Pod IP所在的虚拟二层网络进行通信的，而真实的TCP&#x2F;IP流量则是通过Node IP所在的物理网卡流出的。</p></blockquote><blockquote><p>最后，我们说说Service的Cluster IP，它也是一个虚拟的IP，但更像是一个“伪造”的IP网络，原因有以下几点。</p></blockquote><ul><li>Cluster IP仅仅作用于Kubernetes Service这个对象，并由Kubernetes管理和分配IP地址（来源于Cluster IP地址池）。</li><li>Cluster IP无法被Ping，因为没有一个“实体网络对象”来响应。</li><li>Cluster IP只能结合Service Port组成一个具体的通信端口，单独的Cluster IP不具备TCP&#x2F;IP通信的基础，并且它们属于Kubernetes集群这样一个封闭的空间，集群之外的节点如果要访问这个通信端口，则需要做一些额外的工作。</li><li>在Kubernetes集群之内，Node IP网、Pod IP网与Clsuter IP之间的通信，采用的是Kubernetes自己设计的一种编程方式的特殊的路由规则，与我们所熟知的IP路由有很大的不同。</li></ul><blockquote><p>根据上面的分析和总结，我们基本明白了：Service的Cluster IP属于Kubernetes集群内部的地址，无法在集群外部直接使用这个地址。那么矛盾来了：实际上我们开发的业务系统中肯定多少由一部分服务是要提供給Kubernetes集群外部的应用或者用户来使用的，典型的例子就是Web端的服务模块，比如上面的tomcat-service，那么用户怎么访问它？</p></blockquote><blockquote><p>采用NodePort是解决上述问题的最直接、最常用的做法。具体做法如下，以tomcat-service为例，我们在Service的定义里做如下扩展即可（黑体字部分）：</p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Service</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">tomcat-service</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">NodePort</span><br>  <span class="hljs-attr">ports:</span><br>   <span class="hljs-bullet">-</span> <span class="hljs-attr">port:</span> <span class="hljs-number">8080</span><br>     <span class="hljs-attr">nodePort:</span> <span class="hljs-number">31002</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">tier:</span> <span class="hljs-string">frontend</span><br></code></pre></td></tr></table></figure><blockquote><p>其中，nodePort:31002这个属性表明我们手动指定tomcat-service的NodePort为31002，否则Kubernetes会自动分配一个可用的端口。接下来，我们在浏览器里访问http:&#x2F;&#x2F;<nodePort IP>:31002，就可以看到Tomcat的欢迎界面了，如图所示。</p></blockquote><p><img src="/images/service-1.png" alt="service-1"></p><h3 id="通过NodePort访问Service"><a href="#通过NodePort访问Service" class="headerlink" title="通过NodePort访问Service"></a>通过NodePort访问Service</h3><blockquote><p>NodePort的实现方式是在Kubernetes集群里的每个Node上为需要外部访问的Service开启一个对应的TCP监听端口，外部系统只要用任意一个Node的IP地址+具体的NodePort端口号即可访问此服务，在任意Node上运行netstat命令，我们就可以看到有NodePort端口被监听：</p></blockquote><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs elixir"><span class="hljs-comment"># netstat -tlp|grep 31002</span><br>tcp6       <span class="hljs-number">0</span>      <span class="hljs-number">0</span> [::]<span class="hljs-symbol">:</span><span class="hljs-number">31002</span>              [::]<span class="hljs-symbol">:*</span>                  <span class="hljs-title class_">LISTEN</span>      <span class="hljs-number">19043</span>/kube-proxy<br></code></pre></td></tr></table></figure><blockquote><p>但NodePort还没有完全解决外部访问Service的所有问题，比如负载均衡问题，假如我们的集群中有10个Node，则此时最好有一个负载均衡器，外部的请求只需要访问此负载均衡器的IP地址，由负载均衡负责转发流量到后面某个Node的NodePort上。</p></blockquote><h3 id="externalIPs"><a href="#externalIPs" class="headerlink" title="externalIPs"></a>externalIPs</h3><blockquote><p>注意事项：对于使用了<code>externalIPs</code>的Service，当开启IPVS后，<code>externalIP</code>也会作为VIP被ipvs接管，因此如果在externalIp指定的Kubernetes集群中Node节点的IP，需将externalIp替换成预先规划好的VIP(在同一网段找一个未被使用的IP)，否则会出现VIP和Node节点IP冲突的问题。使用命令行将VIP绑定到物理网卡上<code>ens192</code>网口，而不是绑定到<code>kube-ipvs0</code>网口</p></blockquote><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">ip</span> addr add <span class="hljs-number">192.168.110.209</span>/<span class="hljs-number">24</span> brd <span class="hljs-number">192.168.110.255</span> dev ens192<br></code></pre></td></tr></table></figure><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-attribute">kind</span><span class="hljs-punctuation">:</span> <span class="hljs-string">Service</span><br><span class="hljs-attribute">apiVersion</span><span class="hljs-punctuation">:</span> <span class="hljs-string">v1</span><br><span class="hljs-attribute">metadata</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">andmu-open-be-app</span><br>  <span class="hljs-attribute">namespace</span><span class="hljs-punctuation">:</span> <span class="hljs-string">sh-andmuopen</span><br><span class="hljs-attribute">spec</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">selector</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-attribute">k8s-app</span><span class="hljs-punctuation">:</span> <span class="hljs-string">andmu-open-be-app</span><br>  <span class="hljs-attribute">ports</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">name: http</span><br>    <span class="hljs-attribute">port</span><span class="hljs-punctuation">:</span> <span class="hljs-string">80</span><br>    <span class="hljs-attribute">targetPort</span><span class="hljs-punctuation">:</span> <span class="hljs-string">80</span><br>  <span class="hljs-attribute">externalIPs</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">192.168.110.209</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Kubernetes之CronJob</title>
    <link href="/2019/08/23/Kubernetes-CronJob/"/>
    <url>/2019/08/23/Kubernetes-CronJob/</url>
    
    <content type="html"><![CDATA[<blockquote><p>类似于Linux的Cron模块，CronJob用来运行定时性任务，或者周期性、重复性任务。注意CronJob启动的是kubernetes中的Job，不是ReplicaSet、DaemonSet等其它控制器类型。</p></blockquote><h3 id="示例："><a href="#示例：" class="headerlink" title="示例："></a>示例：</h3><blockquote><p>以下CronJob每分钟运行一次，打印出当前时间与hello消息。</p></blockquote><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-attribute">apiVersion</span><span class="hljs-punctuation">:</span> <span class="hljs-string">batch/v1beta1</span><br><span class="hljs-attribute">kind</span><span class="hljs-punctuation">:</span> <span class="hljs-string">CronJob</span><br><span class="hljs-attribute">metadata</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">hello</span><br><span class="hljs-attribute">spec</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">schedule</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;*/1 * * * *&quot;</span><br>  <span class="hljs-attribute">jobTemplate</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-attribute">spec</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-attribute">template</span><span class="hljs-punctuation">:</span><br>        <span class="hljs-attribute">spec</span><span class="hljs-punctuation">:</span><br>          <span class="hljs-attribute">containers</span><span class="hljs-punctuation">:</span><br>          <span class="hljs-bullet">-</span> <span class="hljs-string">name: hello</span><br>            <span class="hljs-attribute">image</span><span class="hljs-punctuation">:</span> <span class="hljs-string">busybox</span><br>            <span class="hljs-attribute">args</span><span class="hljs-punctuation">:</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">/bin/sh</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">-c</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">date; echo Hello from the Kubernetes cluster</span><br>          <span class="hljs-attribute">restartPolicy</span><span class="hljs-punctuation">:</span> <span class="hljs-string">OnFailure</span><br></code></pre></td></tr></table></figure><blockquote><p>以上内容，<code>schedule: &quot;*/1 * * * *&quot;</code>与Linux Cron意义相同，表示每分钟启动一次。</p></blockquote><h3 id="运行CronJob"><a href="#运行CronJob" class="headerlink" title="运行CronJob"></a>运行CronJob</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-variable">$</span> kubectl create <span class="hljs-operator">-f</span> ./cronjob.yaml<br>cronjob <span class="hljs-string">&quot;hello&quot;</span> created<br></code></pre></td></tr></table></figure><h3 id="或者通过命令行方式："><a href="#或者通过命令行方式：" class="headerlink" title="或者通过命令行方式："></a>或者通过命令行方式：</h3><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros">$ kubectl <span class="hljs-built_in">run</span> hello <span class="hljs-attribute">--schedule</span>=<span class="hljs-string">&quot;*/1 * * * *&quot;</span> <span class="hljs-attribute">--restart</span>=OnFailure <span class="hljs-attribute">--image</span>=busybox -- /bin/sh -c <span class="hljs-string">&quot;date; echo Hello from the Kubernetes cluster&quot;</span><br>cronjob <span class="hljs-string">&quot;hello&quot;</span> created<br></code></pre></td></tr></table></figure><h3 id="查看CronJob状态："><a href="#查看CronJob状态：" class="headerlink" title="查看CronJob状态："></a>查看CronJob状态：</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql">$ kubectl <span class="hljs-keyword">get</span> cronjob hello<br>NAME      SCHEDULE      SUSPEND   ACTIVE    <span class="hljs-keyword">LAST</span><span class="hljs-operator">-</span>SCHEDULE<br>hello     <span class="hljs-operator">*</span><span class="hljs-operator">/</span><span class="hljs-number">1</span> <span class="hljs-operator">*</span> <span class="hljs-operator">*</span> <span class="hljs-operator">*</span> <span class="hljs-operator">*</span>   <span class="hljs-literal">False</span>     <span class="hljs-number">0</span>         <span class="hljs-operator">&lt;</span><span class="hljs-keyword">none</span><span class="hljs-operator">&gt;</span><br></code></pre></td></tr></table></figure><blockquote><ul><li>NAME：CronJob名称。</li></ul></blockquote><ul><li>SCHEDULE：基于时间的调度规则。</li><li>SUSPEND：如果其值为True表示此CronJob暂时失效，不变成False之前不再创建新任务。对于已经创建的任务没有影响。</li><li>ACTIVE：表示当前活动的任务数，0表示当前没有活动任务。1表示有一个活动任务。此值可能大于1，原因如下：<ul><li>任务允许重复启动，如前一次启动后还没有退出，下一次已经启动。</li><li>允许延后启动，当CronJob Controller发现因为某种原因错误启动，并且任务允许延后启动，则会启动任务。</li></ul></li><li>LAST-SCHEDULE：表示最后一次调度时间，<none>表示未曾调度过任务。</li></ul><blockquote><p>从CronJob状态可以看出，其输出中并没有相关字段指示其所创建的JOB是否运行成功，运行如上命令查看JOB的详细信息：</p></blockquote><h3 id="查看CronJob创建的Job："><a href="#查看CronJob创建的Job：" class="headerlink" title="查看CronJob创建的Job："></a>查看CronJob创建的Job：</h3><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">$ kubectl <span class="hljs-keyword">get</span> jobs <span class="hljs-comment">--watch</span><br><span class="hljs-type">NAME</span>               DESIRED   SUCCESSFUL   AGE<br>hello<span class="hljs-number">-4111706356</span>   <span class="hljs-number">1</span>         <span class="hljs-number">1</span>         <span class="hljs-number">2</span>s<br></code></pre></td></tr></table></figure><ul><li>NAME：表示CronJob创建的Job名称，后边的数字由系统自动生成，保证不重复。</li><li>DESIRED：表示CronJob只创建的是最简单的一次Job，只创建一个pod。</li><li>SUCCESSFUL：表示pod成功个数。</li><li>AGE：表示上JOB生存时间。</li></ul><h3 id="再次查看CronJob"><a href="#再次查看CronJob" class="headerlink" title="再次查看CronJob:"></a>再次查看CronJob:</h3><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">$ kubectl <span class="hljs-keyword">get</span> cronjob hello<br><span class="hljs-type">NAME</span>      SCHEDULE      SUSPEND   ACTIVE    LAST-SCHEDULE<br>hello     */<span class="hljs-number">1</span> * * * *   <span class="hljs-keyword">False</span>     <span class="hljs-number">0</span>         Mon, <span class="hljs-number">29</span> Aug <span class="hljs-number">2016</span> <span class="hljs-number">14</span>:<span class="hljs-number">34</span>:<span class="hljs-number">00</span> <span class="hljs-number">-0700</span><br></code></pre></td></tr></table></figure><blockquote><p>LAST-SCHEDULE表示最近一次调度时间，ACTIVE为０表示实例已经运行结束。</p></blockquote><blockquote><p>CronJob创建Job，Job创建pod，已经获知CronJob创建的Job名称：hello-4111706356，查看pod方法如下：</p></blockquote><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"># Replace <span class="hljs-string">&quot;hello-4111706356&quot;</span> <span class="hljs-keyword">with</span> the job name <span class="hljs-keyword">in</span> your system<br>$ pods=<span class="hljs-constructor">$(<span class="hljs-params">kubectl</span> <span class="hljs-params">get</span> <span class="hljs-params">pods</span> --<span class="hljs-params">show</span>-<span class="hljs-params">all</span> --<span class="hljs-params">selector</span>=<span class="hljs-params">job</span>-<span class="hljs-params">name</span>=<span class="hljs-params">hello</span>-4111706356 --<span class="hljs-params">output</span>=<span class="hljs-params">jsonpath</span>=&#123;.<span class="hljs-params">items</span>..<span class="hljs-params">metadata</span>.<span class="hljs-params">name</span>&#125;)</span><br> <br>$ echo $pods<br>hello-<span class="hljs-number">4111706356</span>-o9qcm<br> <br>$ kubectl logs $pods<br>Mon Aug <span class="hljs-number">29</span> <span class="hljs-number">21</span>:<span class="hljs-number">34</span>:<span class="hljs-number">09</span> UTC <span class="hljs-number">2016</span><br>Hello from the Kubernetes cluster<br></code></pre></td></tr></table></figure><h3 id="删除CronJob："><a href="#删除CronJob：" class="headerlink" title="删除CronJob："></a>删除CronJob：</h3><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs actionscript">$ kubectl <span class="hljs-keyword">delete</span> cronjob hello<br>cronjob <span class="hljs-string">&quot;hello&quot;</span> deleted<br></code></pre></td></tr></table></figure><blockquote><p>删除CronJob会导致其创建的Job、pod一起被删除。</p></blockquote><blockquote><p>简单起见，以上示例控制CronJob行为的字段没有设置或者也可以说是采用了默认值，下面解释CronJob中的重要字段。</p></blockquote><ul><li>.spec.startingDeadlineSeconds：单位是秒，表示如果Job因为某种原因无法按调度准时启动，在spec.startingDeadlineSeconds时间段之内，CronJob仍然试图重新启动Job，如果在.spec.startingDeadlineSeconds时间之内没有启动成功，则不再试图重新启动。如果spec.startingDeadlineSeconds的值没有设置，则没有按时启动的任务不会被尝试重新启动。spec.startingDeadlineSeconds同时也影响到CronJob计算任务损失率。如果指定，那么CronJob计算有多少Job没有按时启动时是从当前时间向后推spec.startingDeadlineSeconds秒数，如果没有指定，那么是从当前时间向后推到最后一次成功调度的时间。无论那种算法，如果损失的按时任务超过一定个数，那么CronJob会报错并停止运行。</li><li>.spec.concurrencyPolicy：是否允许Job并发，可能的聚会有３个。<br>Allow：上一次Job没有完成，本次Job可以启动。<br>Forbid：上一次Job没有完成，本次Job不可以启动。<br>Replace：上一次Job没有完成，本次Job取而代之，将上一次Job杀死。</li><li>.spec.suspend：true或者false，表示是否临时阻塞CronJob。</li><li>.spec.successfulJobsHistoryLimit：保存成功历史Job的数量，默认３，如果为０则CronJob在Job成功后立即删除。</li><li>.spec.failedJobsHistoryLimit：保存失败历史Job的数量，默认１，如果为0则CronJob在Job失败后立即删除。</li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Kubernetes之Job</title>
    <link href="/2019/08/23/Kubernetes-Job/"/>
    <url>/2019/08/23/Kubernetes-Job/</url>
    
    <content type="html"><![CDATA[<blockquote><p>对于ReplicaSet、ReplicationController等类型的控制器而言，它希望pod保持预期数目、持久运行下去，除非用户明确删除，否则这些对象一直存在，它们针对的是耐久性任务，如web服务等。对于非耐久性任务，比如压缩文件，任务完成后，pod需要结束运行，不需要pod继续保持在系统中，这个时候就要用到Job。因此说Job是对ReplicaSet、ReplicationController等持久性控制器的补充。</p></blockquote><h3 id="Job与其它控制器的细微差别："><a href="#Job与其它控制器的细微差别：" class="headerlink" title="Job与其它控制器的细微差别："></a>Job与其它控制器的细微差别：</h3><ul><li>Job定义方法与ReplicaSet等控制器相似，只有细微差别，如下：<ul><li>Job中的restartPolicy必需是”Never”或者”OnFailure”，这个很好理解，因为pod要运行到结束，而不是反复重新启动。</li><li>Job不需要选择器，其中的pod也不需要标签，系统在创建Job时会自动添加相关内容。当然用户也可以出于资源组织的目的添加标签，但这个与Job本身的实现没有关系。</li><li>Job新增加两个字段：.spec.completions、.spec.parallelism。</li><li>backoffLimit字段</li></ul></li></ul><h3 id="Job参数："><a href="#Job参数：" class="headerlink" title="Job参数："></a>Job参数：</h3><blockquote><p><code>.spec.completions</code>标志Job结束需要成功运行的Pod个数，默认为1<br><code>.spec.parallelism</code>标志并行运行的Pod的个数，默认为1<br><code>.spec.backoffLimit</code>指定在此Job在标记为失败之前重试的次数，默认为6次</p></blockquote><blockquote><p>根据.spec.completions和.spec.Parallelism的设置，可以将Job划分为以下几种pattern：</p></blockquote><p><img src="/images/job.png" alt="job"></p><h3 id="Job-Controller："><a href="#Job-Controller：" class="headerlink" title="Job Controller："></a>Job Controller：</h3><blockquote><p>Job Controller负责根据Job Spec创建Pod，并持续监控Pod的状态，直至其成功结束。如果失败，则根据restartPolicy（只支持OnFailure和Never，不支持Always）决定是否创建新的Pod再次重试任务。</p></blockquote><h4 id="Job-注意："><a href="#Job-注意：" class="headerlink" title="Job 注意："></a>Job 注意：</h4><blockquote><p>1、RestartPolicy仅支持Never或OnFailure<br>2、单个Pod时，默认Pod成功运行后Job即结束</p></blockquote><p>一个简单的例子：</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">apiVersion:</span> batch/v1<br><span class="hljs-symbol">kind:</span> Job<br><span class="hljs-symbol">metadata:</span><br><span class="hljs-symbol">  name:</span> pi<br><span class="hljs-symbol">spec:</span><br><span class="hljs-symbol">  template:</span><br><span class="hljs-symbol">    metadata:</span><br><span class="hljs-symbol">      name:</span> pi<br><span class="hljs-symbol">    spec:</span><br><span class="hljs-symbol">      containers:</span><br>      - name: pi<br><span class="hljs-symbol">        image:</span> perl<br><span class="hljs-symbol">        command:</span> [<span class="hljs-string">&quot;perl&quot;</span>,  <span class="hljs-string">&quot;-Mbignum=bpi&quot;</span>, <span class="hljs-string">&quot;-wle&quot;</span>, <span class="hljs-string">&quot;print bpi(2000)&quot;</span>]<br><span class="hljs-symbol">      restartPolicy:</span> Never<br></code></pre></td></tr></table></figure><p>命令：</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">$ kubectl create -f ./job.yaml<br>job <span class="hljs-string">&quot;pi&quot;</span> created<br>$ pods=<span class="hljs-constructor">$(<span class="hljs-params">kubectl</span> <span class="hljs-params">get</span> <span class="hljs-params">pods</span> --<span class="hljs-params">selector</span>=<span class="hljs-params">job</span>-<span class="hljs-params">name</span>=<span class="hljs-params">pi</span> --<span class="hljs-params">output</span>=<span class="hljs-params">jsonpath</span>=&#123;.<span class="hljs-params">items</span>..<span class="hljs-params">metadata</span>.<span class="hljs-params">name</span>&#125;)</span><br>$ kubectl logs $pods<br><span class="hljs-number">3.141592653589793238462643383279502</span>...<br></code></pre></td></tr></table></figure><p>固定结束次数的Job示例：</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">apiVersion:</span> batch/v1<br><span class="hljs-symbol">kind:</span> Job<br><span class="hljs-symbol">metadata:</span><br><span class="hljs-symbol">  name:</span> busybox<br><span class="hljs-symbol">spec:</span><br><span class="hljs-symbol">  completions:</span> <span class="hljs-number">3</span><br><span class="hljs-symbol">  template:</span><br><span class="hljs-symbol">    metadata:</span><br><span class="hljs-symbol">      name:</span> busybox<br><span class="hljs-symbol">    spec:</span><br><span class="hljs-symbol">      containers:</span><br>      - name: busybox<br><span class="hljs-symbol">        image:</span> busybox<br><span class="hljs-symbol">        command:</span> [<span class="hljs-string">&quot;echo&quot;</span>, <span class="hljs-string">&quot;hello&quot;</span>]<br><span class="hljs-symbol">      restartPolicy:</span> Never<br></code></pre></td></tr></table></figure><h3 id="裸Pods："><a href="#裸Pods：" class="headerlink" title="裸Pods："></a>裸Pods：</h3><blockquote><p>所谓裸Pods是指直接用PodSpec来创建的Pod（即不在ReplicaSets或者ReplicationCtroller的管理之下的Pods）。这些Pod在Node重启后不会自动重启，但Job则会创建新的Pod继续任务。所以，推荐使用Job来替代裸Pods，即便是应用只需要一个Pod。</p></blockquote>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>kuburnetes的Taints与Tolerations</title>
    <link href="/2019/08/23/kuburnetes-Taints-Tolerations/"/>
    <url>/2019/08/23/kuburnetes-Taints-Tolerations/</url>
    
    <content type="html"><![CDATA[<blockquote><p>Taints（污点）与tolerations（容忍度）一起工作确保Pod不会被调度到不合适的节点上。单个节点可以应用多个taint（污点），node不接受无法容忍taint（污点）的pod调度。Toleration（容忍度）是pod的属性，允许（非强制）pod调度到taints（污点）相匹配的node上去。（注意taints是node的属性，affinity是pod的属性。）</p></blockquote><h3 id="概念："><a href="#概念：" class="headerlink" title="概念："></a>概念：</h3><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-comment">#通过kubectl taint为node添加taint，如：</span><br>kubectl taint nodes node1 <span class="hljs-attribute">key</span>=value:NoSchedule<br></code></pre></td></tr></table></figure><blockquote><p>为node节点 node1增加一条taint（污点）。Taint（污点）的关键字为key，值为value，taint（污点）影响NoSchedule。意味着没有pod会被调度到node1上，除非Pod它有匹配的toleration（容忍度）。</p></blockquote><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs gauss"><span class="hljs-meta">#为node1删除刚才添加的taints，如下：</span><br>kubectl taint nodes node1 <span class="hljs-built_in">key</span>:NoSchedule-<br></code></pre></td></tr></table></figure><blockquote><p>可以为pod指定toleration（容忍度）。以下的两种toleration（容忍度）都与上文中创建的taint（污点）匹配，因此这个pod有可能被调试到node1上。</p></blockquote><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">tolerations:</span><br>- key: <span class="hljs-string">&quot;key&quot;</span><br><span class="hljs-symbol">  operator:</span> <span class="hljs-string">&quot;Equal&quot;</span><br><span class="hljs-symbol">  value:</span> <span class="hljs-string">&quot;value&quot;</span><br><span class="hljs-symbol">  effect:</span> <span class="hljs-string">&quot;NoSchedule&quot;</span><br><span class="hljs-symbol">tolerations:</span><br>- key: <span class="hljs-string">&quot;key&quot;</span><br><span class="hljs-symbol">  operator:</span> <span class="hljs-string">&quot;Exists&quot;</span><br><span class="hljs-symbol">  effect:</span> <span class="hljs-string">&quot;NoSchedule&quot;</span><br></code></pre></td></tr></table></figure><blockquote><p>Toleration（容忍度）与taint（污点）匹配的条件是key相同、effect相同，并且：</p></blockquote><ul><li>Operator的值是Exists（无需指定values的值）</li><li>Operator是Equal，并且values的值相等<br>如果不指定，operator默认是Equal。</li></ul><h3 id="注意：两种特殊情况。"><a href="#注意：两种特殊情况。" class="headerlink" title="注意：两种特殊情况。"></a>注意：两种特殊情况。</h3><figure class="highlight vbnet"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs vbnet">#<span class="hljs-keyword">Key</span>为空，<span class="hljs-keyword">operator</span>为Exists表示匹配所有的<span class="hljs-keyword">key</span>。如下例表示匹配所有的taint（污点）：<br><span class="hljs-symbol">tolerations:</span><br>- <span class="hljs-keyword">operator</span>: <span class="hljs-string">&quot;Exists&quot;</span><br></code></pre></td></tr></table></figure><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-meta">#空effect表示匹配所有effect，如：</span><br><span class="hljs-symbol">tolerations:</span><br>- key: <span class="hljs-string">&quot;key&quot;</span><br><span class="hljs-symbol">  operator:</span> <span class="hljs-string">&quot;Exists&quot;</span><br></code></pre></td></tr></table></figure><blockquote><p>上例中用到了NoSchedule的effect。另外，可以使用PreferNoSchedule的effect，这是NoSchedule的“偏好”或者“软“版本。系统尽量避免非tolerate的pod调度到taint node上，但非强制要求。第三种可用的effect是NoExecute，后文描述。</p></blockquote><blockquote><p>可以为单个node指定多条taint（污点），也可以为单个pod指定多条toleration（容忍度）。系统采用过滤的方式处理这种情况：首先从node的所有taint（污点）开始，然后将与pod中的toleration（容忍度）相匹配的taint（污点）删除，余下的taint（污点）对部署进来的pod产生影响。特别地：</p></blockquote><ul><li>如果余下的taint（污点）中至少有一条的effect是NoSchedule，kubernetes将不会高度这个pod到的node上。</li><li>如果余下的taint（污点）中没有effect为NoSchedule的taint（污点），但至少有一条effect为PreferNoSchedule，则系统尝试着不将pod部署在node上（也就是有可能还是会部署到这个node上）。</li><li>如果余下的taint（污点）中至少有一条的effect是NoExecute，那么不旦新的pod不会被调度到这个node上，而且已经运行在这个node上的pod还会被驱逐出去。</li></ul><blockquote><p>例如，假如像这样taint一个node：</p></blockquote><ul><li><code>kubectl taint nodes node1 key1=value1:NoSchedule</code></li><li><code>kubectl taint nodes node1 key1=value1:NoExecute</code></li><li><code>kubectl taint nodes node1 key2=value2:NoSchedule</code></li></ul><h3 id="pod有两个toleration："><a href="#pod有两个toleration：" class="headerlink" title="pod有两个toleration："></a>pod有两个toleration：</h3><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">tolerations:</span><br>- key: <span class="hljs-string">&quot;key1&quot;</span><br><span class="hljs-symbol">  operator:</span> <span class="hljs-string">&quot;Equal&quot;</span><br><span class="hljs-symbol">  value:</span> <span class="hljs-string">&quot;value1&quot;</span><br><span class="hljs-symbol">  effect:</span> <span class="hljs-string">&quot;NoSchedule&quot;</span><br>- key: <span class="hljs-string">&quot;key1&quot;</span><br><span class="hljs-symbol">  operator:</span> <span class="hljs-string">&quot;Equal&quot;</span><br><span class="hljs-symbol">  value:</span> <span class="hljs-string">&quot;value1&quot;</span><br><span class="hljs-symbol">  effect:</span> <span class="hljs-string">&quot;NoExecute&quot;</span><br></code></pre></td></tr></table></figure><blockquote><p>这种情况下，pod不能调度到node上。因为pod没有toleration（容忍度）与node的第三条taint（污点）匹配。但是在添加taint（污点）之前已经运行在node上的pod不受影响（这里之前运行的pod指添加了toleration（容忍度）的pod），可能将pod排除出node的noExecute因为被过滤而没有生效。</p></blockquote><blockquote><p>一般情况下，如果一个effect为NoExecute的taint（污点）应用于node，运行在node上的所有不能容忍这条taint（污点）的pod都会被排挤出node，能容忍这种taint（污点）的pod则不会被排挤。然而，如果effect为NoExecute的toleration（容忍度）指定给pod，同时添加可选的tolerationSeconds字段，则表示pod被排挤出node之前，以taint（污点）的添加时间为起点，允许此pod在此node上的生存时间。</p></blockquote><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-meta">#例如：</span><br><span class="hljs-symbol"></span><br><span class="hljs-symbol">tolerations:</span><br>- key: <span class="hljs-string">&quot;key1&quot;</span><br><span class="hljs-symbol">  operator:</span> <span class="hljs-string">&quot;Equal&quot;</span><br><span class="hljs-symbol">  value:</span> <span class="hljs-string">&quot;value1&quot;</span><br><span class="hljs-symbol">  effect:</span> <span class="hljs-string">&quot;NoExecute&quot;</span><br><span class="hljs-symbol">  tolerationSeconds:</span> <span class="hljs-number">3600</span><br><br><span class="hljs-meta">#表示可以多存活3600秒。</span><br></code></pre></td></tr></table></figure><h3 id="使用案例："><a href="#使用案例：" class="headerlink" title="使用案例："></a>使用案例：</h3><blockquote><p>Taints与tolerations可以灵活的控制pod远离node，或者将不应该运行的pod从node上排挤出去。以下是几个使用案例：</p></blockquote><ul><li>专用node：如果打算指定特定node集合供特定用户专用，那么可以给这些node添加一条taint（kubectl taint nodes nodename dedicated&#x3D;groupName:NoSchedule），然后在相应的pod上添加匹配的toleration（容忍度）。拥有toleration的pod被允许像使用集群中的其它node一样使用拥有taint的node。如果打算让pod只使用taint性质的node，并且只能使用taint的node的话，可以对这些taint的node再额外增加标签（例如：dedicated&#x3D;groupName），然后再通过入口控制器为这些pod额外再增加亲和性要求它们只能部署到拥有dedicated&#x3D;groupName的node上。总结就是通过标签的亲和性控制pod部署到特定的node上，通过为node增加taint并且为pod增加toleration抵制其它pod部署到这些node上，从而实现node专用。</li><li>拥有特殊硬件的node：在集群中，有少数node拥有特殊的硬件配置（例如 GPUs），希望那些不使用特殊的硬件的pod尽量不要部署到这些拥有特殊硬件的node上，为后续到达的需要使用特殊硬件的pod预留出空间。通过如下方法达到这个目的。首先为node添加taint，taint表示node拥有特殊硬件（例如： kubectl taint nodes nodename special&#x3D;true:NoSchedule 或者 kubectl taint nodes nodename special&#x3D;true:PreferNoSchedule），然后为需要使用特殊硬件的pod添加相应的toleration。像专用node的例子一样，通过入口控制器很容易为pod添加对应的toleration。例如：推荐使用“扩展资源”代表特殊硬件，使用“扩展资源”的名称为拥有特殊硬件的node添加taint，当提交的pod被配置为需要使用特殊硬件时，扩展资源入口控制器自动为其加上正确的toleration。</li><li>基于taint的驱逐（测试特性）：一种当node出现问题时per-pod-configurable的驱逐行为，下节介绍。</li></ul><h3 id="基于taint的驱逐"><a href="#基于taint的驱逐" class="headerlink" title="基于taint的驱逐:"></a>基于taint的驱逐:</h3><blockquote><p>先前提到的effect为NoExecute的taint，它对已经运行在node上的pod的影响如下：</p></blockquote><ul><li>如果pod没有toleration这个taint的话，pod立即被驱逐。</li><li>如果toleration了这个taint，并且没有指定tolerationSeconds的值，则一直不会驱逐</li><li>如果toleration了这个taint，但是指定tolerationSeconds限定了容忍的时间，则到期后驱逐</li></ul><blockquote><p>此外，Kubernetes用taint代表node出了问题（1.13beta版）。换句话说，当Node某些条件为<code>True</code>时，节点控制器自动为Node节点添加污点，而在状态为Ready的Node上，之前设置过的普通的驱逐逻辑将会被禁用。内置以下污点：</p></blockquote><ul><li><code>node.kubernetes.io/not-ready</code>：节点尚未就绪。这对应于NodeCondition Ready为“ False”。</li><li><code>node.kubernetes.io/unreachable</code>：Node controlloer无法访问节点。这对应于NodeCondition Ready为“ Unknown”。</li><li><code>node.kubernetes.io/out-of-disk</code>：节点变得磁盘不足。</li><li><code>node.kubernetes.io/memory-pressure</code>：节点有内存压力。</li><li><code>node.kubernetes.io/disk-pressure</code>：节点有磁盘压力。</li><li><code>node.kubernetes.io/network-unavailable</code>：节点的网络不可用。</li><li><code>node.kubernetes.io/unschedulable</code>：节点是不可调度的。</li><li><code>node.cloudprovider.kubernetes.io/uninitialized</code>：当使用“外部”云提供程序启动kubelet时，会在节点上设置此污点以将其标记为不可用。在cloud-controller-manager的控制器初始化此节点后，kubelet将删除此污点。</li></ul><blockquote><p>注意：在节点故障的情况下，为了保持现存的Pod驱逐的限速设置，系统将会以限速的模式逐步给Node设置Taint，这就能避免在一些特定情况下（比如Master暂时失联）大量的Pod被驱逐。这一功能兼容于<code>tolerationSeconds</code>允许Pod定义节点故障时持续多久才被逐出。<br>例如：一个包含很多本地状态的应用可能需要在网络发生故障时，还能持续在节点上运行，期望网络能够快速恢复，从而避免被从这个节点上驱逐。Pod的toleration可以这样定义：</p></blockquote><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">tolerations:</span><br>- key: <span class="hljs-string">&quot;node.kubernetes.io/unreachable&quot;</span><br><span class="hljs-symbol">  operator:</span> <span class="hljs-string">&quot;Exists&quot;</span><br><span class="hljs-symbol">  effect:</span> <span class="hljs-string">&quot;NoExecute&quot;</span><br><span class="hljs-symbol">  tolerationSeconds:</span> <span class="hljs-number">6000</span><br></code></pre></td></tr></table></figure><blockquote><ul><li>对于Node未就绪状态，可以把Key设置为<code>node.kubernetes.io/not-ready</code>如果没有为Pod指定<code>node.kubernetes.io/not-ready</code> 的<code>Tolerations</code>，那么Kubernetes会自动为Pod加入<code>tolerationSeconds= 300</code>的<code>node.kubernetes.io/not-ready </code>类型的<code>Tolerations</code></li></ul></blockquote><ul><li>同样如果Pod没有定义<code>node.kubernetes.io/unreachable</code>的<code>Tolerations</code>那么系统会自动为其加入<code>tolerationSeconds=300</code>的<code>node.kubernetes.io/unreachable</code>类型的<code>Tolerations</code></li></ul><blockquote><p> 这些系统自动设置的<code>Tolerations</code>在Node发现问题时，能够为Pod确保驱逐前再运行5min。</p></blockquote><h4 id="其阈值由kubelet如下参数控制："><a href="#其阈值由kubelet如下参数控制：" class="headerlink" title="其阈值由kubelet如下参数控制："></a>其阈值由kubelet如下参数控制：</h4><blockquote><ul><li><code>--eviction-hard</code>：驱逐阈值(例如memory.available&lt;1Gi)，如果满足这些阈值，就会触发pod驱逐。(默认imagefs.available &lt; 15%, memory.available &lt; 100 mi, nodefs.available &lt; 10%, nodefs.inodesFree &lt; 5%)</li></ul></blockquote><ul><li><code>--eviction-soft</code>：驱逐阈值(例如memory.available&lt;1.5Gi)，如果在相应的宽限期内达到该阈值，就会触发pod驱逐。</li><li><code>--eviction-minimum-reclaim</code>：最小回收(例如imagef .available&#x3D;2Gi)，描述kubelet在执行pod回收(如果该资源处于压力之下)时回收的最小资源量。</li><li><code>--eviction-pressure-transition-period</code>：kubelet必须等待一段时间才能从驱逐压力状态过渡出来。(默认5m0)</li></ul><h4 id="编辑kubelet-conf-yml文件修改默认阈值来调整驱逐条件："><a href="#编辑kubelet-conf-yml文件修改默认阈值来调整驱逐条件：" class="headerlink" title="编辑kubelet-conf.yml文件修改默认阈值来调整驱逐条件："></a>编辑kubelet-conf.yml文件修改默认阈值来调整驱逐条件：</h4><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-bullet">-</span> <span class="hljs-string">pods</span><br><span class="hljs-attribute">eventBurst</span><span class="hljs-punctuation">:</span> <span class="hljs-string">10</span><br><span class="hljs-attribute">eventRecordQPS</span><span class="hljs-punctuation">:</span> <span class="hljs-string">5</span><br><span class="hljs-attribute">evictionHard</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">imagefs.available</span><span class="hljs-punctuation">:</span> <span class="hljs-string">15%</span><br>  <span class="hljs-attribute">memory.available</span><span class="hljs-punctuation">:</span> <span class="hljs-string">100Mi</span><br>  <span class="hljs-attribute">nodefs.available</span><span class="hljs-punctuation">:</span> <span class="hljs-string">10%</span><br>  <span class="hljs-attribute">nodefs.inodesFree</span><span class="hljs-punctuation">:</span> <span class="hljs-string">5%</span><br><span class="hljs-attribute">evictionPressureTransitionPeriod</span><span class="hljs-punctuation">:</span> <span class="hljs-string">5m0s</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Kubernetes之DaemonSet</title>
    <link href="/2019/08/23/Kubernetes-DaemonSet/"/>
    <url>/2019/08/23/Kubernetes-DaemonSet/</url>
    
    <content type="html"><![CDATA[<blockquote><p>DaemonSet 确保全部（或者一些）Node 上运行一个 Pod 的副本。当有 Node 加入集群时，也会为他们新增一个 Pod 。当有 Node 从集群移除时，这些 Pod 也会被回收。删除 DaemonSet 将会删除它创建的所有 Pod。</p></blockquote><h3 id="使用-DaemonSet-的一些典型用法："><a href="#使用-DaemonSet-的一些典型用法：" class="headerlink" title="使用 DaemonSet 的一些典型用法："></a>使用 DaemonSet 的一些典型用法：</h3><blockquote><ul><li>运行集群存储 daemon，例如在每个 Node 上运行 glusterd、ceph。</li></ul></blockquote><ul><li>在每个 Node 上运行日志收集 daemon，例如fluentd、logstash。</li><li>在每个 Node 上运行监控 daemon，例如 Prometheus Node Exporter、collectd、Datadog 代理、New Relic 代理，或 Ganglia gmond。</li></ul><h3 id="创建DaemonSet："><a href="#创建DaemonSet：" class="headerlink" title="创建DaemonSet："></a>创建DaemonSet：</h3><blockquote><p>以下是DaemonSet的示例spec文件，运行fluentd-elasticsearch image：</p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">apps/v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">DaemonSet</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">fluentd-elasticsearch</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">kube-system</span><br>  <span class="hljs-attr">labels:</span><br>    <span class="hljs-attr">k8s-app:</span> <span class="hljs-string">fluentd-logging</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">matchLabels:</span><br>      <span class="hljs-attr">name:</span> <span class="hljs-string">fluentd-elasticsearch</span><br>  <span class="hljs-attr">template:</span><br>    <span class="hljs-attr">metadata:</span><br>      <span class="hljs-attr">labels:</span><br>        <span class="hljs-attr">name:</span> <span class="hljs-string">fluentd-elasticsearch</span><br>    <span class="hljs-attr">spec:</span><br>      <span class="hljs-attr">tolerations:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">key:</span> <span class="hljs-string">node-role.kubernetes.io/master</span><br>        <span class="hljs-attr">effect:</span> <span class="hljs-string">NoSchedule</span><br>      <span class="hljs-attr">containers:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">fluentd-elasticsearch</span><br>        <span class="hljs-attr">image:</span> <span class="hljs-string">k8s.gcr.io/fluentd-elasticsearch:1.20</span><br>        <span class="hljs-attr">resources:</span><br>          <span class="hljs-attr">limits:</span><br>            <span class="hljs-attr">memory:</span> <span class="hljs-string">200Mi</span><br>          <span class="hljs-attr">requests:</span><br>            <span class="hljs-attr">cpu:</span> <span class="hljs-string">100m</span><br>            <span class="hljs-attr">memory:</span> <span class="hljs-string">200Mi</span><br>        <span class="hljs-attr">volumeMounts:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">varlog</span><br>          <span class="hljs-attr">mountPath:</span> <span class="hljs-string">/var/log</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">varlibdockercontainers</span><br>          <span class="hljs-attr">mountPath:</span> <span class="hljs-string">/var/lib/docker/containers</span><br>          <span class="hljs-attr">readOnly:</span> <span class="hljs-literal">true</span><br>      <span class="hljs-attr">terminationGracePeriodSeconds:</span> <span class="hljs-number">30</span>   <span class="hljs-comment">#k8s将会给应用发送SIGTERM信号，可以用来正确、优雅地关闭应用,默认为30秒</span><br>      <span class="hljs-attr">volumes:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">varlog</span><br>        <span class="hljs-attr">hostPath:</span><br>          <span class="hljs-attr">path:</span> <span class="hljs-string">/var/log</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">varlibdockercontainers</span><br>        <span class="hljs-attr">hostPath:</span><br>          <span class="hljs-attr">path:</span> <span class="hljs-string">/var/lib/docker/containers</span><br></code></pre></td></tr></table></figure><blockquote><p>以上DaemonSet中没有RestartPolicy字段，默认为Always。如果有的话，必需将值设置成Always，否则在创建时出现不可用错误。</p></blockquote><blockquote><p>DaemonSet同样会受到Taint（污点）的抵制，如果不在Pod中配置匹配的Toleration（容忍度），那么DaemonSet不会在拥有Taint（污点）属性的node上部署Pod。上例中有如下内容：</p></blockquote><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">tolerations:<br>    - key: <span class="hljs-keyword">node</span><span class="hljs-title">-role</span>.kubernetes.io/<span class="hljs-keyword">master</span><br>      <span class="hljs-title">effect</span>: NoSchedule<br></code></pre></td></tr></table></figure><blockquote><p>原因就是系统默认为master节点增加了 “node-role.kubernetes.io&#x2F;master”的Taint（污点），以抵制普通Pod部署在Master节点上，为了使master成为专用节点而添加的Taint（污点）。因为我们预期上例DaemonSet在集群内全局部署，因此需要加入相匹配的Toleration（容忍度）这样Master节点也会部署DaemonSet。</p></blockquote><h3 id="仅在相同的-Node-上运行-Pod："><a href="#仅在相同的-Node-上运行-Pod：" class="headerlink" title="仅在相同的 Node 上运行 Pod："></a>仅在相同的 Node 上运行 Pod：</h3><blockquote><p>如果指定了 .spec.template.spec.nodeSelector，则DaemonSet只会在满足条件的node上部署pod。 类似这种情况，可以指定 .spec.template.spec.affinity，然后 DaemonSet Controller 将在能够与 Node Affinity 匹配的节点上创建 Pod。 如果根本就没有指定，则 DaemonSet Controller 将在所有节点上创建 Pod。<br>总之，可以通过Taint（污点）、Toleration（容忍度）、Affinity（亲和力）、node label控制DaemonSet部署pod的节点范围。</p></blockquote><h3 id="系统如何调度DaemonSet-pod（自1-12起默认禁用）："><a href="#系统如何调度DaemonSet-pod（自1-12起默认禁用）：" class="headerlink" title="系统如何调度DaemonSet pod（自1.12起默认禁用）："></a>系统如何调度DaemonSet pod（自1.12起默认禁用）：</h3><blockquote><p>默认情况下DaemonSet在创建pod时如果为其增加.spec.template.spec.nodeName字段，也就是说所创建的pod运行在那个节上在创建阶段就已经确定，所以DaemonSet中的pod实际上没有接受kubernetes scheduler的调度，它不需要调度，因此产生以下两个特性：</p></blockquote><ul><li>DaemonSet中的pod不遵从节点的unreachable条件，也就是即使节点被系统判定为不可达，DaemonSet仍然试图在其上部署pod。</li><li>在集群引导阶段，即使kubernetes scheduler还没有部署生效，DaemonSet仍然可以将pod部署到集群中的任何节点，此特性主要是在集群引导阶段使用。</li></ul><h3 id="因为DaemonSet不同于常规pod的调度特性，它带来两个问题："><a href="#因为DaemonSet不同于常规pod的调度特性，它带来两个问题：" class="headerlink" title="因为DaemonSet不同于常规pod的调度特性，它带来两个问题："></a>因为DaemonSet不同于常规pod的调度特性，它带来两个问题：</h3><blockquote><ul><li>pod行为不一致。普通pod被创建以后等待调度的阶段称为pending，因为DaemonSet中的pod无需调度，因而无此状态，用户会因此产生迷惑。</li></ul></blockquote><ul><li>pod优先级特性由kubernetes scheduler实现，DaemonSet无此特性。当系统打开pod优先级功能时，pod优先级特性会被DaemonSet忽略，DaemonSet控制器将自己做出调度决策。</li></ul><blockquote><p>为了解决以上两个问题可以使用ScheduleDaemonSetPods，ScheduleDaemonSetPods允许您使用默认调度器(而不是DaemonSet controller)调度DaemonSets，方法是向DaemonSet pods添加NodeAffinity项，而不是.spec.template.spec.nodeName。然后使用默认调度程序将pod绑定到目标主机。如果DaemonSet pod的节点关联性已经存在，则替换它。DaemonSet controller仅在创建或修改DaemonSet pods时执行这些操作，并且对DaemonSet的spec.template不做任何更改。</p></blockquote><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-attribute">nodeAffinity</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">requiredDuringSchedulingIgnoredDuringExecution</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-attribute">nodeSelectorTerms</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">matchFields:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">key: metadata.name</span><br>        <span class="hljs-attribute">operator</span><span class="hljs-punctuation">:</span> <span class="hljs-string">In</span><br>        <span class="hljs-attribute">values</span><span class="hljs-punctuation">:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">target-host-name</span><br></code></pre></td></tr></table></figure><blockquote><p>其中”target-host-name”就是原来.spec.nodeName的值，这样pod就会被kubernetes scheduler调度。通过以上操作解决了上述两个问题。但DaemonSet的调度有自己因有的特性，在上文中提到的“不受节点unreachable条件限制”，为了使DaemonSet在使用kubernetes scheduler时仍然保持此特性需要打开集群的”TaintNodesByCondition”特性。</p></blockquote><blockquote><p>如果DaemonSet使用主机网络那么必需在DaemonSet中添加如下的Toleration：</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">node.kubernetes.io/network-unavailable:NoSchedule<br></code></pre></td></tr></table></figure><h3 id="DaemonSet自动添加的Toleration："><a href="#DaemonSet自动添加的Toleration：" class="headerlink" title="DaemonSet自动添加的Toleration："></a>DaemonSet自动添加的Toleration：</h3><blockquote><p>系统在某此条件下会自动为节点添加Taint，比如硬盘不足、网络不可达等，以阻止新pod往不满足条件的节点上调度。但DaemonSet的目的是在全部有资格的node上部署，不希望被这种Taint打断，因经系统也默认为DaemonSet上的pod添加Toleration。如下表：</p></blockquote><table><thead><tr><th>容忍度</th><th>Effect</th><th>版本</th><th>描述</th></tr></thead><tbody><tr><td>node.kubernetes.io&#x2F;not-ready</td><td>NoExecute</td><td>1.13+</td><td>当存在诸如网络分区之类的节点问题时，不会驱逐DaemonSet pod。</td></tr><tr><td>node.kubernetes.io&#x2F;unreachable</td><td>NoExecute</td><td>1.13+</td><td>当存在诸如网络分区之类的节点问题时，不会驱逐DaemonSet pod。</td></tr><tr><td>node.kubernetes.io&#x2F;disk-pressure</td><td>NoSchedule</td><td>1.8+</td><td></td></tr><tr><td>node.kubernetes.io&#x2F;memory-pressure</td><td>NoSchedule</td><td>1.8+</td><td></td></tr><tr><td>node.kubernetes.io&#x2F;unschedulable</td><td>NoExecute</td><td>1.12+</td><td>DaemonSet pods可以通过默认调度程序容忍不可调度的属性。</td></tr><tr><td>node.kubernetes.io&#x2F;unreachable</td><td>NoExecute</td><td>1.12+</td><td>使用主机网络的DaemonSet pod可以通过默认调度程序容忍网络不可用的属性。</td></tr></tbody></table><h3 id="对-DaemonSet-执行回滚"><a href="#对-DaemonSet-执行回滚" class="headerlink" title="对 DaemonSet 执行回滚"></a>对 DaemonSet 执行回滚</h3><p>找到想要 DaemonSet 回滚到的历史版本（revision）<br>列出 DaemonSet 的所有版本：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">kubectl rollout <span class="hljs-built_in">history</span> daemonset &lt;daemon<span class="hljs-built_in">set-name</span>&gt;<br></code></pre></td></tr></table></figure><p>该命令返回 DaemonSet 版本列表：</p><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs erlang">daemonsets <span class="hljs-string">&quot;&lt;daemonset-name&gt;&quot;</span><br>REVISION        CHANGE-CAUSE<br><span class="hljs-number">1</span>               ...<br><span class="hljs-number">2</span>               ...<br>...<br></code></pre></td></tr></table></figure><p>执行以下命令，来查看指定版本的详细信息：</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">kubectl rollout <span class="hljs-keyword">history</span> daemonset &lt;daemonset-name&gt; <span class="hljs-params">--revision=1</span><br></code></pre></td></tr></table></figure><p>该命令返回相应版本的详细信息：</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs dts">daemonsets <span class="hljs-string">&quot;&lt;daemonset-name&gt;&quot;</span> with revision <span class="hljs-meta">#1</span><br>Pod Template:<br><span class="hljs-symbol">Labels:</span>       <span class="hljs-attr">foo</span><span class="hljs-operator">=</span>bar<br><span class="hljs-symbol">Containers:</span><br><span class="hljs-symbol">app:</span><br><span class="hljs-symbol"> Image:</span>       ...<br><span class="hljs-symbol"> Port:</span>        ...<br><span class="hljs-symbol"> Environment:</span> ...<br><span class="hljs-symbol"> Mounts:</span>      ...<br><span class="hljs-symbol">Volumes:</span>       ...<br></code></pre></td></tr></table></figure><p>回滚到指定版本</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs vim"># 在 --<span class="hljs-keyword">to</span>-revision 中指定您从步骤 <span class="hljs-number">1</span> 中获取的版本序号<br>kubectl rollout <span class="hljs-keyword">undo</span> daemonset <span class="hljs-symbol">&lt;daemonset-name&gt;</span> --<span class="hljs-keyword">to</span>-revision=<span class="hljs-symbol">&lt;revision&gt;</span><br></code></pre></td></tr></table></figure><p>如果成功，命令会返回：</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript">daemonset <span class="hljs-string">&quot;&lt;daemonset-name&gt;&quot;</span> rolled <span class="hljs-keyword">back</span><br></code></pre></td></tr></table></figure><p>如果 <code>--to-revision</code> 参数未指定，将选中最近的版本。</p><p>观察 DaemonSet 回滚进度<br><code>kubectl rollout undo daemonset</code> 向服务器表明启动<code> DaemonSet</code> 回滚。 真正的回滚是在服务器端异步完成的。</p><p>执行以下命令，来观察<code>DaemonSet</code>回滚进度：</p><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs fortran">kubectl rollout <span class="hljs-keyword">status</span> ds/&lt;daemonset-<span class="hljs-keyword">name</span>&gt; <br></code></pre></td></tr></table></figure><p>回滚完成时，输出形如：</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">daemonset <span class="hljs-string">&quot;&lt;daemonset-name&gt;&quot;</span> successfully rolled <span class="hljs-keyword">out</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Kubernetes 定义Deployment控制器</title>
    <link href="/2019/08/23/Kubernetes-Deployment/"/>
    <url>/2019/08/23/Kubernetes-Deployment/</url>
    
    <content type="html"><![CDATA[<h3 id="编写-Deployment："><a href="#编写-Deployment：" class="headerlink" title="编写 Deployment："></a>编写 Deployment：</h3><blockquote><p>在所有的 Kubernetes 配置中，Deployment 也需要apiVersion，kind和metadata、 spec 这些配置项。</p></blockquote><h4 id="Pod-Template："><a href="#Pod-Template：" class="headerlink" title="Pod Template："></a>Pod Template：</h4><blockquote><p>deployment.spec.template 是 .spec中唯一必须的字段。</p></blockquote><blockquote><p>deployment.spec.template 是 pod template. 它跟 Pod有一模一样的结构有metadata、spec字段，除了它是嵌套的并且不需要apiVersion 和 kind字段。</p></blockquote><blockquote><p>另外为了划分Pod的范围，Deployment中的pod template必须指定适当的label（不要跟其他controller重复了，例如：在Deployments中定义了一个 labels是app &#x3D; nginx，在Replica Set、Replication Controller 中都不来在定义app&#x3D;nginx这个labels）和适当的重启策略。.spec.template.spec.restartPolicy 可以设置为 Always , 如果不指定的话这就是默认配置。</p></blockquote><h4 id="Replicas："><a href="#Replicas：" class="headerlink" title="Replicas："></a>Replicas：</h4><blockquote><p>.spec.replicas 是可以选字段，指定期望的pod数量，默认是1。</p></blockquote><h4 id="Selector："><a href="#Selector：" class="headerlink" title="Selector："></a>Selector：</h4><blockquote><p>.spec.selector是可选字段，用来指定 label selector ，圈定Deployment管理的pod范围。</p></blockquote><blockquote><p>如果被指定， .spec.selector 必须匹配 .spec.template.metadata.labels，否则它将被API拒绝。如果 .spec.selector 没有被指定， .spec.selector.matchLabels 默认是 .spec.template.metadata.labels。</p></blockquote><blockquote><p>在Pod的template跟.spec.template不同或者数量超过了.spec.replicas规定的数量的情况下，Deployment会杀掉label跟selector不同的Pod。</p></blockquote><blockquote><p>注意： 您不应该再创建其他label跟这个selector匹配的pod，或者通过其他Deployment，或者通过其他Controller，例如ReplicaSet和ReplicationController。否则该Deployment会被把它们当成都是自己创建的。Kubernetes不会阻止您这么做。</p></blockquote><blockquote><p>如果您有多个controller使用了重复的selector，controller们就会互相打架并导致不正确的行为。</p></blockquote><h3 id="策略"><a href="#策略" class="headerlink" title="策略:"></a>策略:</h3><blockquote><p>.spec.strategy 指定新的Pod替换旧的Pod的策略。 .spec.strategy.type 可以是”Recreate”或者是 “RollingUpdate”。”RollingUpdate”是默认值。</p></blockquote><h3 id="Recreate-Deployment"><a href="#Recreate-Deployment" class="headerlink" title="Recreate Deployment:"></a>Recreate Deployment:</h3><blockquote><p>.spec.strategy.type&#x3D;&#x3D;Recreate时，在创建出新的Pod之前会先杀掉所有已存在的Pod。</p></blockquote><h3 id="Rolling-Update-Deployment"><a href="#Rolling-Update-Deployment" class="headerlink" title="Rolling Update Deployment:"></a>Rolling Update Deployment:</h3><blockquote><p>.spec.strategy.type&#x3D;&#x3D;RollingUpdate时，Deployment使用rolling update 的方式更新Pod 。您可以指定maxUnavailable 和 maxSurge 来控制 rolling update 进程。</p></blockquote><h3 id="MAX-UNAVAILABLE："><a href="#MAX-UNAVAILABLE：" class="headerlink" title="MAX UNAVAILABLE："></a>MAX UNAVAILABLE：</h3><blockquote><p>.spec.strategy.rollingUpdate.maxUnavailable 是可选配置项，用来指定在升级过程中不可用Pod的最大数量。该值可以是一个绝对值（例如5），也可以是期望Pod数量的百分比（例如10%）。通过计算百分比的绝对值向下取整。如果.spec.strategy.rollingUpdate.maxSurge 为0时，这个值不可以为0。默认值是1。</p></blockquote><blockquote><p>例如，该值设置成30%，启动rolling update后旧的ReplicatSet将会立即缩容到期望的Pod数量的70%。新的Pod ready后，随着新的ReplicaSet的扩容，旧的ReplicaSet会进一步缩容，确保在升级的所有时刻可以用的Pod数量至少是期望Pod数量的70%。</p></blockquote><h3 id="MAX-SURGE"><a href="#MAX-SURGE" class="headerlink" title="MAX SURGE:"></a>MAX SURGE:</h3><blockquote><p>.spec.strategy.rollingUpdate.maxSurge 是可选配置项，用来指定可以超过期望的Pod数量的最大个数。该值可以是一个绝对值（例如5）或者是期望的Pod数量的百分比（例如10%）。当MaxUnavailable为0时该值不可以为0。通过百分比计算的绝对值向上取整。默认值是1。</p></blockquote><blockquote><p>例如，该值设置成30%，启动rolling update后新的ReplicatSet将会立即扩容，新老Pod的总数不能超过期望的Pod数量的130%。旧的Pod被杀掉后，新的ReplicaSet将继续扩容，旧的ReplicaSet会进一步缩容，确保在升级的所有时刻所有的Pod数量和不会超过期望Pod数量的130%。</p></blockquote><h3 id="Revision-History-Limit"><a href="#Revision-History-Limit" class="headerlink" title="Revision History Limit:"></a>Revision History Limit:</h3><blockquote><p>Deployment revision history存储在它控制的ReplicaSets中。</p></blockquote><blockquote><p>.spec.revisionHistoryLimit 是一个可选配置项，用来指定可以保留的旧的ReplicaSet数量。该理想值取决于心Deployment的频率和稳定性。如果该值没有设置的话，默认所有旧的Replicaset或会被保留，将资源存储在etcd中，是用kubectl get rs查看输出。每个Deployment的该配置都保存在ReplicaSet中，然而，一旦您删除的旧的RepelicaSet，您的Deployment就无法再回退到那个revison了。</p></blockquote><blockquote><p>如果您将该值设置为0，所有具有0个replica的ReplicaSet都会被删除。在这种情况下，新的Deployment rollout无法撤销，因为revision history都被清理掉了。</p></blockquote><h3 id="Paused"><a href="#Paused" class="headerlink" title="Paused:"></a>Paused:</h3><blockquote><p>.spec.paused是可以可选配置项，boolean值。用来指定暂停和恢复Deployment。Paused和没有paused的Deployment之间的唯一区别就是，所有对paused deployment中的PodTemplateSpec的修改都不会触发新的rollout。Deployment被创建之后默认是非paused。</p></blockquote><h3 id="revision清理策略："><a href="#revision清理策略：" class="headerlink" title="revision清理策略："></a>revision清理策略：</h3><blockquote><p>您可以通过设置.spec.revisonHistoryLimit项来指定 deployment 最多保留多少 revision 历史记录。默认的会保留所有的 revision；如果将该项设置为0，Deployment就不允许回退了。</p></blockquote><h3 id="实例："><a href="#实例：" class="headerlink" title="实例："></a>实例：</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">apps/v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Deployment</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">nginx-ye</span>          <span class="hljs-comment">#deployments资源名称</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">kube-system</span>  <span class="hljs-comment">#定义所在的名称空间</span><br>  <span class="hljs-attr">labels:</span><br>    <span class="hljs-attr">app:</span> <span class="hljs-string">myapp</span>        <span class="hljs-comment">#deployments的标签</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">replicas:</span> <span class="hljs-number">5</span>         <span class="hljs-comment">#Pod副本数</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">matchLabels:</span>      <span class="hljs-comment">#标签选择器</span><br>      <span class="hljs-attr">app:</span> <span class="hljs-string">nginx</span>      <span class="hljs-comment">#匹配的标签</span><br>  <span class="hljs-attr">template:</span>          <br>    <span class="hljs-attr">metadata:</span><br>      <span class="hljs-attr">labels:</span><br>        <span class="hljs-attr">app:</span> <span class="hljs-string">nginx</span>      <span class="hljs-comment">#Pod的标签，这里的标签要和上面的matchLabels保持一致deployments将根据这个标签来匹配那些Pod是属于同一个deployments资源。</span><br>    <span class="hljs-attr">spec:</span>                  <span class="hljs-comment">#Pod容器资源定义</span><br>      <span class="hljs-attr">containers:</span><br>       <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">myapp-container</span><br>         <span class="hljs-attr">image:</span> <span class="hljs-string">nginx:1.7.9</span><br>         <span class="hljs-attr">imagePullPolicy:</span> <span class="hljs-string">IfNotPresent</span><br>         <span class="hljs-attr">ports:</span><br>           <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">http</span><br>             <span class="hljs-attr">containerPort:</span> <span class="hljs-number">80</span><br>           <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">https</span><br>             <span class="hljs-attr">containerPort:</span> <span class="hljs-number">443</span><br>         <span class="hljs-attr">livenessProbe:</span>          <span class="hljs-comment">#存活检查</span><br>           <span class="hljs-attr">httpGet:</span><br>             <span class="hljs-attr">path:</span> <span class="hljs-string">/index.html</span><br>             <span class="hljs-attr">port:</span> <span class="hljs-string">http</span><br>           <span class="hljs-attr">initialDelaySeconds:</span> <span class="hljs-number">1</span><br>           <span class="hljs-attr">periodSeconds:</span> <span class="hljs-number">3</span><br></code></pre></td></tr></table></figure><h3 id="查看定义的deployments资源："><a href="#查看定义的deployments资源：" class="headerlink" title="查看定义的deployments资源："></a>查看定义的deployments资源：</h3><blockquote><p>注释：查看当前有哪些deployment<br><img src="/images/deployments.png" alt="deployment"></p></blockquote><h3 id="deployments管理的rs："><a href="#deployments管理的rs：" class="headerlink" title="deployments管理的rs："></a>deployments管理的rs：</h3><blockquote><p>注释：一个deployment可以管理多个rs，但是处于运行状态的只有一个。例如：nginx-ye-5ddd85887。说明当前已经更新了三个版本了其中RS （nginx-ye-5b5d8d5794 、nginx-ye-5d6cc588fd）已经没用了，但是回滚的时候会用到。您可能会注意到 ReplicaSet 的名字总是&lt;Deployment的名字&gt;-&lt;pod 模板的hash值&gt;，只要模板不同后面的HASH值就不同，就表示不同的RS。</p></blockquote><p><img src="/images/rs.png" alt="rs"></p><h3 id="deployments资源详细信息："><a href="#deployments资源详细信息：" class="headerlink" title="deployments资源详细信息："></a>deployments资源详细信息：</h3><p><img src="/images/deployments-info.png" alt="deployments-info"></p><blockquote><p>Deployment为Pod和Replica Set（升级版的 Replication Controller）提供声明式更新。</p></blockquote><blockquote><p>你只需要在 Deployment 中描述您想要的目标状态是什么，Deployment controller 就会帮您将 Pod 和ReplicaSet 的实际状态改变到您的目标状态。您可以定义一个全新的 Deployment 来创建 ReplicaSet 或者删除已有的 Deployment 并创建一个新的来替换。</p></blockquote><blockquote><p>注意：您不该手动管理由 Deployment 创建的 Replica Set，否则您就篡越了 Deployment controller 的职责！下文罗列了 Deployment 对象中已经覆盖了所有的用例。如果未有覆盖您所有需要的用例，请直接在 Kubernetes 的代码库中提 issue。</p></blockquote><h3 id="典型的用例如下："><a href="#典型的用例如下：" class="headerlink" title="典型的用例如下："></a>典型的用例如下：</h3><ul><li>使用Deployment来创建ReplicaSet。ReplicaSet在后台创建pod。检查启动状态，看它是成功还是失败。</li><li>然后，通过更新Deployment的PodTemplateSpec字段来声明Pod的新状态。这会创建一个新的ReplicaSet，Deployment会按照控制的速率将pod从旧的ReplicaSet移动到新的ReplicaSet中。</li><li>如果当前状态不稳定，回滚到之前的Deployment revision。每次回滚都会更新Deployment的revision。</li><li>扩容Deployment以满足更高的负载。</li><li>暂停Deployment来应用PodTemplateSpec的多个修复，然后恢复上线。</li><li>根据Deployment 的状态判断上线是否hang住了。</li><li>清除旧的不必要的 ReplicaSet。</li></ul><h3 id="Deployments滚动升级过程："><a href="#Deployments滚动升级过程：" class="headerlink" title="Deployments滚动升级过程："></a>Deployments滚动升级过程：</h3><blockquote><p>Deployment直接使用kubectl edit deployment&#x2F;deploymentName 或者kubectl set方法就可以直接升级（原理是Pod的template发生变化，例如更新label、更新镜像版本等操作会触发Deployment的滚动升级）：</p></blockquote><p>将nginx的版本进行升级，从1.7.9升级到1.8。第一种方法，直接set镜像：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros">$ kubectl <span class="hljs-built_in">set</span> image deployment/nginx-deployment2 <span class="hljs-attribute">nginx</span>=nginx:1.8<br>deployment <span class="hljs-string">&quot;nginx-deployment2&quot;</span> image updated<br></code></pre></td></tr></table></figure><p>第二种方法，直接edit：</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs gams"><span class="hljs-symbol">$</span> kubectl edit deployment/nginx-deployment -n kube-<span class="hljs-keyword">system</span><br>deployment <span class="hljs-string">&quot;nginx-deployment2&quot;</span> edited<br></code></pre></td></tr></table></figure><p><img src="/images/deployments-1.png" alt="deployments-1"></p><blockquote><p>deployments可以同时控制多个RS控制器。在滚动升级的时候先创建一个RS，然后deploymen在删除V1版本的Pod后在创建一个另个RS里创建一个V2版本。但是只有一个是处于活动状态的。Deployment可以控制更新粒度，例如5个Pod的时候，可以设置最大允许6个Pod，最少允许4个。那么在滚动更新的时候会先更新一个新版本然后在删掉一个老版本，直到更新完成。如果你允许最大是7个Pod那么就是两个Pod一起更新。 如果设置只允许少不允许多，最少允许4个。那么就先删除一个然后在更新一个， 直到更新完成。</p></blockquote><h4 id="最后介绍下Deployment的一些基础命令。"><a href="#最后介绍下Deployment的一些基础命令。" class="headerlink" title="最后介绍下Deployment的一些基础命令。"></a>最后介绍下Deployment的一些基础命令。</h4><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crystal"><span class="hljs-variable">$ </span>kubectl describe deployments  <span class="hljs-comment">#查询详细信息，获取升级进度</span><br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">kubectl rollout pause deployment/nginx-deployment2  <span class="hljs-comment">#暂停升级</span></span><br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">kubectl rollout resume deployment/nginx-deployment2  <span class="hljs-comment">#继续升级</span></span><br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">kubectl rollout undo deployment/nginx-deployment2  <span class="hljs-comment">#升级回滚</span></span><br></code></pre></td></tr></table></figure><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crystal"><span class="hljs-variable">$ </span>kubectl scale deployment nginx-deployment --replicas <span class="hljs-number">10</span>  <span class="hljs-comment">#弹性伸缩Pod数量</span><br></code></pre></td></tr></table></figure><h3 id="Deploymentsce层级关系："><a href="#Deploymentsce层级关系：" class="headerlink" title="Deploymentsce层级关系："></a>Deploymentsce层级关系：</h3><p><img src="/images/deployments-2.png" alt="deployments-2"></p><p><img src="/images/deloyments-annotations.png" alt="deloyments-annotations"></p><blockquote><p>在上述输出中，可以看到自动添加到注解中的“deployment.kubernetes.io&#x2F;revision&#x3D;2”字段，新建Deployment的revision是1，2表示这是更新过的第二版，前缀“deployment.kubernetes.io”表示这是系统保留的供deployment使用的关键字，用户不可以使用引种类型的注解。(注释：revision在回滚到某一个指定版本的时候需要用到)</p></blockquote><h3 id="关于更新失败："><a href="#关于更新失败：" class="headerlink" title="关于更新失败："></a>关于更新失败：</h3><blockquote><p>如果在新版本中指定了错误的image名称，那么更新注定会失败。在本例中如果发生这种情况，首先Deployment会创建新的ReplicaSet，新ReplicaSet在创建每个pod实例就会因为取不到image而失败，整个更新过程会被卡住不再进行下去。即使失败也会产生一个新的修订版本号，并且新创建的ReplicaSet、因无法取到image而失败的pod仍存在于系统中。当然目前对外提供服务的仍然是旧版本的pod。如果发生这种情况就要乃至回滚功能，回到上一个正确的版本。</p></blockquote><h3 id="Rolling-Back-a-Deployment："><a href="#Rolling-Back-a-Deployment：" class="headerlink" title="Rolling Back a Deployment："></a>Rolling Back a Deployment：</h3><blockquote><p>Deployment会记录修订历史，当然对能记录的修订历史个数有限制（可以通过.spec.revisionHistoryLimit参数设置），因此Deployment能回滚到记录在案的以前的历史版本中。注意只有rollout操作才会触发修订历史记录，也就是只有.spec.template发生变更才被认为产生了新的版本。其它的变更，比如修改标签选择器、通过kubectl scalling命令扩缩容、被HPA自动扩缩容等不会被认为是新的版本。只回滚.spec.template部分，比如当前的副本数量是5，回滚的版本副本数量是3，回滚后副本数量不变仍然是5，但副本的内容变回以前。</p></blockquote><blockquote><p>查看修定历史记录，注意后边的CHANGE-CAUSE，需要在kubectl creae创建Deployment时指定–record&#x3D;true才会有：(–record&#x3D;false在资源注释中记录当前的kubectl命令。如果设置为false，则不要记录)</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ kubectl rollout <span class="hljs-built_in">history</span> deployment/nginx-deployment<br>deployments <span class="hljs-string">&quot;nginx-deployment&quot;</span><br>REVISION    CHANGE-CAUSE<br>1           kubectl create -f https://k8s.io/examples/controllers/nginx-deployment.yaml --record<br>2           kubectl <span class="hljs-built_in">set</span> image deployment/nginx-deployment nginx=nginx:1.9.1<br>3           kubectl <span class="hljs-built_in">set</span> image deployment/nginx-deployment nginx=nginx:1.91<br></code></pre></td></tr></table></figure><p>通过指定REVISION号码查看特定修订记录：</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">app</span>]<span class="hljs-comment"># kubectl rollout history deployment/nginx-ye -n kube-system --revision=4</span><br></code></pre></td></tr></table></figure><p><img src="/images/rollout.png" alt="rollout"></p><p>回滚到前一个版本：</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs applescript">$ kubectl rollout undo deployment/nginx-deployment<br>deployment <span class="hljs-string">&quot;nginx-deployment&quot;</span> rolled <span class="hljs-keyword">back</span><br></code></pre></td></tr></table></figure><p>通过revision号回滚到任意版本：</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs vim">$ kubectl rollout <span class="hljs-keyword">undo</span> deployment/nginx-ye --<span class="hljs-keyword">to</span>-revision=<span class="hljs-number">4</span> -n kube-<span class="hljs-built_in">system</span><br>deployment <span class="hljs-string">&quot;nginx-deployment&quot;</span> rolled back<br></code></pre></td></tr></table></figure><p>升级或创建（如果该资源还不存在，将创建它）</p><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs coq">kubectl <span class="hljs-built_in">apply</span> -f xxx.yaml --<span class="hljs-built_in">record</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Kubernetes Pod 初始化容器</title>
    <link href="/2019/08/23/Kubernetes-Pod-init/"/>
    <url>/2019/08/23/Kubernetes-Pod-init/</url>
    
    <content type="html"><![CDATA[<h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>Init Container就是用来做初始化工作的容器，可以是一个或者多个，如果有多个的话，这些容器会按定义的顺序依次执行，只有所有的Init Container执行完后，主容器才会被启动。我们知道一个Pod里面的所有容器是共享数据卷和网络命名空间的，所以Init Container里面产生的数据可以被主容器使用到的。</p><p>是不是感觉Init Container和之前的钩子函数有点类似啊，只是是在容器执行前来做一些工作，是吧？从直观的角度看上去的话，初始化容器的确有点像PreStart，但是钩子函数和我们的Init Container是处在不同的阶段的，我们可以通过下面的图来了解下：</p><p><img src="/images/pod-init-1.png" alt="pod-init-1"></p><p>从上面这张图我们可以直观的看到PostStart和PreStop包括liveness和readiness是属于主容器的生命周期范围内的，而Init Container是独立于主容器之外的，当然他们都属于Pod的生命周期范畴之内的，现在我们应该明白Init Container和钩子函数之类的区别了吧。</p><p>另外我们可以看到上面我们的Pod右边还有一个infra的容器，这是一个什么容器呢？我们可以在集群环境中去查看下人任意一个Pod对应的运行的Docker容器，我们可以发现每一个Pod下面都包含了一个pause-amd64的镜像，这个就是我们的infra镜像，我们知道Pod下面的所有容器是共享同一个网络命名空间的，这个镜像就是来做这个事情的，所以每一个Pod当中都会包含一个这个镜像。</p><p>很多同学最开始 Pod 启动不起来就是因为这个 infra 镜像没有被拉下来，因为默认该镜像是需要到谷歌服务器上拉取的，所以需要提前拉取到节点上面。</p><h3 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h3><p>我们说Init Container主要是来做初始化容器工作的，那么他有哪些应用场景呢？</p><p>等待其他模块Ready：这个可以用来解决服务之间的依赖问题，比如我们有一个 Web 服务，该服务又依赖于另外一个数据库服务，但是在我们启动这个 Web 服务的时候我们并不能保证依赖的这个数据库服务就已经启动起来了，所以可能会出现一段时间内 Web 服务连接数据库异常。要解决这个问题的话我们就可以在 Web 服务的 Pod 中使用一个InitContainer，在这个初始化容器中去检查数据库是否已经准备好了，准备好了过后初始化容器就结束退出，然后我们的主容器 Web 服务被启动起来，这个时候去连接数据库就不会有问题了。</p><p>做初始化配置：比如集群里检测所有已经存在的成员节点，为主容器准备好集群的配置信息，这样主容器起来后就能用这个配置信息加入集群。</p><p>其它场景：如将Pod注册到一个中央数据库、配置中心等。</p><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p>我们先来给大家演示下服务依赖的场景下初始化容器的使用方法，如下Pod的定义方法</p><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-attribute">apiVersion</span><span class="hljs-punctuation">:</span> <span class="hljs-string">v1</span><br><span class="hljs-attribute">kind</span><span class="hljs-punctuation">:</span> <span class="hljs-string">Pod</span><br><span class="hljs-attribute">metadata</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">init-pod1</span><br>  <span class="hljs-attribute">labels</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-attribute">app</span><span class="hljs-punctuation">:</span> <span class="hljs-string">init</span><br><span class="hljs-attribute">spec</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">containers</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">name: main-container</span><br>    <span class="hljs-attribute">image</span><span class="hljs-punctuation">:</span> <span class="hljs-string">busybox</span><br>    <span class="hljs-attribute">command</span><span class="hljs-punctuation">:</span> <span class="hljs-string">[&#x27;sh&#x27;, &#x27;-c&#x27;, &#x27;echo The app is running! &amp;&amp; sleep 3600&#x27;]</span><br>  <span class="hljs-attribute">initContainers</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">name: init-myservice</span><br>    <span class="hljs-attribute">image</span><span class="hljs-punctuation">:</span> <span class="hljs-string">busybox</span><br>    <span class="hljs-attribute">command</span><span class="hljs-punctuation">:</span> <span class="hljs-string">[&#x27;sh&#x27;, &#x27;-c&#x27;, &#x27;until nslookup myservice; do echo waiting for myservice; sleep 2; done;&#x27;]</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">name: init-mydb</span><br>    <span class="hljs-attribute">image</span><span class="hljs-punctuation">:</span> <span class="hljs-string">busybox</span><br>    <span class="hljs-attribute">command</span><span class="hljs-punctuation">:</span> <span class="hljs-string">[&#x27;sh&#x27;, &#x27;-c&#x27;, &#x27;until nslookup mydb; do echo waiting for mydb; sleep 2; done;&#x27;]</span><br></code></pre></td></tr></table></figure><p>然后我们先来创建上面的Pod:(保存为init-pod.yaml)</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs csharp">$ kubectl create -f <span class="hljs-keyword">init</span>-pod.yaml<br>pod <span class="hljs-string">&quot;init-pod&quot;</span> created<br>$ kubectl <span class="hljs-keyword">get</span> pod<br>NAME                 READY     STATUS             RESTARTS   AGE<br><span class="hljs-keyword">init</span>-pod             <span class="hljs-number">0</span>/<span class="hljs-number">1</span>       Init:<span class="hljs-number">0</span>/<span class="hljs-number">2</span>           <span class="hljs-number">0</span>          <span class="hljs-number">26</span>s<br></code></pre></td></tr></table></figure><p>然后我们可以看到STATUS一栏是Init:0&#x2F;2，我们可以 describe 下看看详细信息：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">$</span> <span class="hljs-string">kubectl</span> <span class="hljs-string">describe</span> <span class="hljs-string">pod</span> <span class="hljs-string">init-pod</span><br><span class="hljs-attr">Name:</span>         <span class="hljs-string">init-pod</span><br><span class="hljs-attr">Namespace:</span>    <span class="hljs-string">default</span><br><span class="hljs-attr">Node:</span>         <span class="hljs-string">node01/10.151.30.62</span><br><span class="hljs-attr">Start Time:</span>   <span class="hljs-string">Wed,</span> <span class="hljs-number">30</span> <span class="hljs-string">May</span> <span class="hljs-number">2018 06:39:51</span> <span class="hljs-string">+0800</span><br><span class="hljs-attr">Labels:</span>       <span class="hljs-string">app=init</span><br><span class="hljs-attr">Annotations:</span>  <span class="hljs-string">&lt;none&gt;</span><br><span class="hljs-attr">Status:</span>       <span class="hljs-string">Pending</span><br><span class="hljs-attr">IP:</span>           <span class="hljs-number">10.244</span><span class="hljs-number">.1</span><span class="hljs-number">.23</span><br><span class="hljs-attr">Init Containers:</span><br>  <span class="hljs-attr">init-myservice:</span><br>    <span class="hljs-attr">Container ID:</span>  <span class="hljs-string">docker://99cf46f0fab3841fe7725b386567d03dbd2f427cff5098116a7e3dafb9830b44</span><br>    <span class="hljs-attr">Image:</span>         <span class="hljs-string">busybox</span><br>    <span class="hljs-attr">Image ID:</span>      <span class="hljs-string">docker-pullable://busybox@sha256:141c253bc4c3fd0a201d32dc1f493bcf3fff003b6df416dea4f41046e0f37d47</span><br>    <span class="hljs-attr">Port:</span>          <span class="hljs-string">&lt;none&gt;</span><br>    <span class="hljs-attr">Host Port:</span>     <span class="hljs-string">&lt;none&gt;</span><br>    <span class="hljs-attr">Command:</span><br>      <span class="hljs-string">sh</span><br>      <span class="hljs-string">-c</span><br>      <span class="hljs-string">until</span> <span class="hljs-string">nslookup</span> <span class="hljs-string">myservice;</span> <span class="hljs-string">do</span> <span class="hljs-string">echo</span> <span class="hljs-string">waiting</span> <span class="hljs-string">for</span> <span class="hljs-string">myservice;</span> <span class="hljs-string">sleep</span> <span class="hljs-number">2</span><span class="hljs-string">;</span> <span class="hljs-string">done;</span><br>    <span class="hljs-attr">State:</span>          <span class="hljs-string">Running</span><br>      <span class="hljs-attr">Started:</span>      <span class="hljs-string">Wed,</span> <span class="hljs-number">30</span> <span class="hljs-string">May</span> <span class="hljs-number">2018 06:40:03</span> <span class="hljs-string">+0800</span><br>    <span class="hljs-attr">Ready:</span>          <span class="hljs-literal">False</span><br>    <span class="hljs-attr">Restart Count:</span>  <span class="hljs-number">0</span><br>    <span class="hljs-attr">Environment:</span>    <span class="hljs-string">&lt;none&gt;</span><br>    <span class="hljs-attr">Mounts:</span><br>      <span class="hljs-string">/var/run/secrets/kubernetes.io/serviceaccount</span> <span class="hljs-string">from</span> <span class="hljs-string">default-token-n9w2d</span> <span class="hljs-string">(ro)</span><br>  <span class="hljs-attr">init-mydb:</span><br>    <span class="hljs-attr">Container ID:</span><br>    <span class="hljs-attr">Image:</span>         <span class="hljs-string">busybox</span><br>    <span class="hljs-attr">Image ID:</span><br>    <span class="hljs-attr">Port:</span>          <span class="hljs-string">&lt;none&gt;</span><br>    <span class="hljs-attr">Host Port:</span>     <span class="hljs-string">&lt;none&gt;</span><br>    <span class="hljs-attr">Command:</span><br>      <span class="hljs-string">sh</span><br>      <span class="hljs-string">-c</span><br>      <span class="hljs-string">until</span> <span class="hljs-string">nslookup</span> <span class="hljs-string">mydb;</span> <span class="hljs-string">do</span> <span class="hljs-string">echo</span> <span class="hljs-string">waiting</span> <span class="hljs-string">for</span> <span class="hljs-string">mydb;</span> <span class="hljs-string">sleep</span> <span class="hljs-number">2</span><span class="hljs-string">;</span> <span class="hljs-string">done;</span><br>    <span class="hljs-attr">State:</span>          <span class="hljs-string">Waiting</span><br>      <span class="hljs-attr">Reason:</span>       <span class="hljs-string">PodInitializing</span><br>    <span class="hljs-attr">Ready:</span>          <span class="hljs-literal">False</span><br>    <span class="hljs-attr">Restart Count:</span>  <span class="hljs-number">0</span><br>    <span class="hljs-attr">Environment:</span>    <span class="hljs-string">&lt;none&gt;</span><br>    <span class="hljs-attr">Mounts:</span><br>      <span class="hljs-string">/var/run/secrets/kubernetes.io/serviceaccount</span> <span class="hljs-string">from</span> <span class="hljs-string">default-token-n9w2d</span> <span class="hljs-string">(ro)</span><br><span class="hljs-attr">Containers:</span><br>  <span class="hljs-attr">main-container:</span><br>    <span class="hljs-attr">Container ID:</span><br>    <span class="hljs-attr">Image:</span>         <span class="hljs-string">busybox</span><br>    <span class="hljs-attr">Image ID:</span><br>    <span class="hljs-attr">Port:</span>          <span class="hljs-string">&lt;none&gt;</span><br>    <span class="hljs-attr">Host Port:</span>     <span class="hljs-string">&lt;none&gt;</span><br>    <span class="hljs-attr">Command:</span><br>      <span class="hljs-string">sh</span><br>      <span class="hljs-string">-c</span><br>      <span class="hljs-string">echo</span> <span class="hljs-string">The</span> <span class="hljs-string">app</span> <span class="hljs-string">is</span> <span class="hljs-string">running!</span> <span class="hljs-string">&amp;&amp;</span> <span class="hljs-string">sleep</span> <span class="hljs-number">3600</span><br>    <span class="hljs-attr">State:</span>          <span class="hljs-string">Waiting</span><br>      <span class="hljs-attr">Reason:</span>       <span class="hljs-string">PodInitializing</span><br>    <span class="hljs-attr">Ready:</span>          <span class="hljs-literal">False</span><br>    <span class="hljs-attr">Restart Count:</span>  <span class="hljs-number">0</span><br>    <span class="hljs-attr">Environment:</span>    <span class="hljs-string">&lt;none&gt;</span><br>    <span class="hljs-attr">Mounts:</span><br>      <span class="hljs-string">/var/run/secrets/kubernetes.io/serviceaccount</span> <span class="hljs-string">from</span> <span class="hljs-string">default-token-n9w2d</span> <span class="hljs-string">(ro)</span><br><span class="hljs-attr">Conditions:</span><br>  <span class="hljs-string">Type</span>           <span class="hljs-string">Status</span><br>  <span class="hljs-string">Initialized</span>    <span class="hljs-literal">False</span><br>  <span class="hljs-string">Ready</span>          <span class="hljs-literal">False</span><br>  <span class="hljs-string">PodScheduled</span>   <span class="hljs-literal">True</span><br><span class="hljs-attr">Volumes:</span><br>  <span class="hljs-attr">default-token-n9w2d:</span><br>    <span class="hljs-attr">Type:</span>        <span class="hljs-string">Secret</span> <span class="hljs-string">(a</span> <span class="hljs-string">volume</span> <span class="hljs-string">populated</span> <span class="hljs-string">by</span> <span class="hljs-string">a</span> <span class="hljs-string">Secret)</span><br>    <span class="hljs-attr">SecretName:</span>  <span class="hljs-string">default-token-n9w2d</span><br>    <span class="hljs-attr">Optional:</span>    <span class="hljs-literal">false</span><br><span class="hljs-attr">QoS Class:</span>       <span class="hljs-string">BestEffort</span><br><span class="hljs-attr">Node-Selectors:</span>  <span class="hljs-string">&lt;none&gt;</span><br><span class="hljs-attr">Tolerations:</span>     <span class="hljs-string">node.kubernetes.io/not-ready:NoExecute</span> <span class="hljs-string">for</span> <span class="hljs-string">300s</span><br>                 <span class="hljs-string">node.kubernetes.io/unreachable:NoExecute</span> <span class="hljs-string">for</span> <span class="hljs-string">300s</span><br><span class="hljs-attr">Events:</span><br>  <span class="hljs-string">Type</span>    <span class="hljs-string">Reason</span>                 <span class="hljs-string">Age</span>   <span class="hljs-string">From</span>               <span class="hljs-string">Message</span><br>  <span class="hljs-string">----</span>    <span class="hljs-string">------</span>                 <span class="hljs-string">----</span>  <span class="hljs-string">----</span>               <span class="hljs-string">-------</span><br>  <span class="hljs-string">Normal</span>  <span class="hljs-string">Scheduled</span>              <span class="hljs-string">1m</span>    <span class="hljs-string">default-scheduler</span>  <span class="hljs-string">Successfully</span> <span class="hljs-string">assigned</span> <span class="hljs-string">init-pod</span> <span class="hljs-string">to</span> <span class="hljs-string">node01</span><br>  <span class="hljs-string">Normal</span>  <span class="hljs-string">SuccessfulMountVolume</span>  <span class="hljs-string">1m</span>    <span class="hljs-string">kubelet,</span> <span class="hljs-string">node01</span>    <span class="hljs-string">MountVolume.SetUp</span> <span class="hljs-string">succeeded</span> <span class="hljs-string">for</span> <span class="hljs-string">volume</span> <span class="hljs-string">&quot;default-token-n9w2d&quot;</span><br>  <span class="hljs-string">Normal</span>  <span class="hljs-string">Pulling</span>                <span class="hljs-string">1m</span>    <span class="hljs-string">kubelet,</span> <span class="hljs-string">node01</span>    <span class="hljs-string">pulling</span> <span class="hljs-string">image</span> <span class="hljs-string">&quot;busybox&quot;</span><br>  <span class="hljs-string">Normal</span>  <span class="hljs-string">Pulled</span>                 <span class="hljs-string">1m</span>    <span class="hljs-string">kubelet,</span> <span class="hljs-string">node01</span>    <span class="hljs-string">Successfully</span> <span class="hljs-string">pulled</span> <span class="hljs-string">image</span> <span class="hljs-string">&quot;busybox&quot;</span><br>  <span class="hljs-string">Normal</span>  <span class="hljs-string">Created</span>                <span class="hljs-string">1m</span>    <span class="hljs-string">kubelet,</span> <span class="hljs-string">node01</span>    <span class="hljs-string">Created</span> <span class="hljs-string">container</span><br>  <span class="hljs-string">Normal</span>  <span class="hljs-string">Started</span>                <span class="hljs-string">1m</span>    <span class="hljs-string">kubelet,</span> <span class="hljs-string">node01</span>    <span class="hljs-string">Started</span> <span class="hljs-string">container</span><br></code></pre></td></tr></table></figure><p>因为现在myservice还没有创建，所以init-mydb和main-container都还处于PodInitializing状态，我们可以先创建下面的myservice服务，然后观察下init-mydb和main-container的状态变化，然后在创建init-mydb服务，观察main-container容器的状态变化</p><p>Service的对应YAML内容：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">kind:</span> <span class="hljs-string">Service</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">myservice</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">ports:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">protocol:</span> <span class="hljs-string">TCP</span><br>    <span class="hljs-attr">port:</span> <span class="hljs-number">80</span><br>    <span class="hljs-attr">targetPort:</span> <span class="hljs-number">6376</span><br><span class="hljs-meta">---</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Service</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">mydb</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">ports:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">protocol:</span> <span class="hljs-string">TCP</span><br>    <span class="hljs-attr">port:</span> <span class="hljs-number">80</span><br>    <span class="hljs-attr">targetPort:</span> <span class="hljs-number">6377</span><br></code></pre></td></tr></table></figure><p>我们在Pod启动过程中，初始化容器会按顺序在网络和数据卷初始化之后启动。每个容器必须在下一个容器启动之前成功退出。如果由于运行时或失败退出，导致容器启动失败，它会根据Pod的restartPolicy指定的策略进行重试。 然而，如果 Pod 的 restartPolicy 设置为 Always，Init 容器失败时会使用 RestartPolicy 策略。</p><p>在所有的初始化容器没有成功之前，Pod将不会变成 Ready状态。正在初始化中的Pod处于Pending状态，但应该会将条件Initializing设置为 true。</p><p>接下来我们再来尝试创建一个做初始化配置工作的Pod：</p><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-attribute">apiVersion</span><span class="hljs-punctuation">:</span> <span class="hljs-string">v1</span><br><span class="hljs-attribute">kind</span><span class="hljs-punctuation">:</span> <span class="hljs-string">Pod</span><br><span class="hljs-attribute">metadata</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">init-demo</span><br><span class="hljs-attribute">spec</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">containers</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">name: nginx</span><br>    <span class="hljs-attribute">image</span><span class="hljs-punctuation">:</span> <span class="hljs-string">nginx</span><br>    <span class="hljs-attribute">ports</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">containerPort: 80</span><br>    <span class="hljs-attribute">volumeMounts</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">name: workdir</span><br>      <span class="hljs-attribute">mountPath</span><span class="hljs-punctuation">:</span> <span class="hljs-string">/usr/share/nginx/html</span><br>  <span class="hljs-attribute">initContainers</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">name: install</span><br>    <span class="hljs-attribute">image</span><span class="hljs-punctuation">:</span> <span class="hljs-string">busybox</span><br>    <span class="hljs-attribute">command</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">wget</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;-O&quot;</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;/work-dir/index.html&quot;</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">http://www.baidu.com</span><br>    <span class="hljs-attribute">volumeMounts</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">name: workdir</span><br>      <span class="hljs-attribute">mountPath</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;/work-dir&quot;</span><br>  <span class="hljs-attribute">volumes</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">name: workdir</span><br>    <span class="hljs-attribute">emptyDir</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&#123;&#125;</span><br></code></pre></td></tr></table></figure><p>我们可以看到这里又出现了volumes，spec.volumes指的是Pod中的卷，spec.containers.volumeMounts，是将指定的卷 mount 到容器指定的位置，相当于Docker里面的-v 宿主机目录：容器目录，我们前面用到过hostPath，我们这里使用的是emptyDir{}，这个就相当于一个共享卷，是一个临时的目录，生命周期等同于Pod的生命周期。</p><p>初始化容器执行完，会下载一个 html 文件映射到emptyDir{}，而主容器也是和 spec.volumes 里的 emptyDir{} 进行映射，所以nginx容器的&#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html目录下会映射 index.html 文件。</p><p>我们来创建下该Pod，然后验证nginx容器是否运行:</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-variable">$</span> kubectl crate <span class="hljs-operator">-f</span> init<span class="hljs-literal">-demo</span>.yaml<br>pod <span class="hljs-string">&quot;init-demo&quot;</span> created<br></code></pre></td></tr></table></figure><p>输出显示了nginx容器正在运行：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs csharp">$ kubectl <span class="hljs-keyword">get</span> pod <span class="hljs-keyword">init</span>-demo<br>NAME      READY     STATUS    RESTARTS   AGE<br>nginx     <span class="hljs-number">1</span>/<span class="hljs-number">1</span>       Running   <span class="hljs-number">0</span>          <span class="hljs-number">43</span>m<br></code></pre></td></tr></table></figure><p>在 init-demo 容器里的 nginx 容器打开一个 shell：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">kubectl <span class="hljs-built_in">exec</span> -it init-demo -- /bin/bash</span><br></code></pre></td></tr></table></figure><p>在Shell里，直接查看下 index.html 的内容：</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gradle">root@nginx:~# cat <span class="hljs-regexp">/usr/</span>share<span class="hljs-regexp">/nginx/</span>html/index.html<br></code></pre></td></tr></table></figure><p>如果我们看到有百度相关的信息那么证明我们上面的初始化的工作就完成了。</p><p>这就是我们初始化容器的使用方法，到这里我们就把Pod的整个生命周期当中的几个主要阶段讲完了，第一个是容器的两个钩子函数：PostStart和PreStop，还有就是容器健康检查的两个探针：liveness probe和readiness probe，以及这节课的Init Container。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Kubernetes Pod 生命周期和重启策略</title>
    <link href="/2019/08/23/Kubernetes-Pod-Lifecycle/"/>
    <url>/2019/08/23/Kubernetes-Pod-Lifecycle/</url>
    
    <content type="html"><![CDATA[<p>我们在调度、管理 Pod 时，需要熟悉 Pod 在整个生命周期的各个状态，而设置 Pod 的重启策略也是基于对 Pod 的各种状态的了解。</p><h3 id="Pod-生命周期："><a href="#Pod-生命周期：" class="headerlink" title="Pod 生命周期："></a>Pod 生命周期：</h3><p><img src="/images/pod-restart-1.png" alt="pod-restart-1"></p><ul><li><p>说明：</p><ul><li>初始化容器阶段初始化pod中每一个容器,他们是串行执行的，执行完成后就退出了</li><li>启动主容器main container</li><li>在main container刚刚启动之后可以执行post start命令</li><li>在整个main container执行的过程中可以做两类探测：liveness probe(存活探测)和readiness probe(就绪探测)</li><li>在main container结束前可以执行pre stop命令</li></ul></li><li><p>配置启动后钩子(post start)和终止前钩子(pre stop)</p><ul><li>post start：容器创建之后立即执行，如果失败了就会按照重启策略重启容器</li><li>pre stop：容器终止前立即执行，执行完成之后容器将成功终止</li></ul></li><li><p>可以使用以下命令查看post start和pre stop的设置格式：</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">manifests</span>]<span class="hljs-comment"># kubectl explain pod.spec.containers.lifecycle.preStop</span><br>[root@<span class="hljs-keyword">master</span> <span class="hljs-title">manifests</span>]<span class="hljs-comment"># kubectl explain pod.spec.containers.lifecycle.postStart</span><br></code></pre></td></tr></table></figure></li></ul><h3 id="Pod-的状态（phase）："><a href="#Pod-的状态（phase）：" class="headerlink" title="Pod 的状态（phase）："></a>Pod 的状态（phase）：</h3><ul><li>Pod 的所有状态总共有 5 种，分别如下：<ul><li>挂起（Pending）：Pod 已被 Kubernetes 系统接受，但有一个或者多个容器镜像尚未创建。等待时间包括调度 Pod 的时间和通过网络下载镜像的时间，这可能需要花点时间。</li><li>运行中（Running）：该 Pod 已经绑定到了一个节点上，Pod 中所有的容器都已被创建。至少有一个容器正在运行，或者正处于启动或重启状态。</li><li>成功（Succeeded）：Pod 中的所有容器都被成功终止，并且不会再重启。</li><li>失败（Failed）：Pod 中的所有容器都已终止了，并且至少有一个容器是因为失败终止。也就是说，容器以非0状态退出或者被系统终止。</li><li>未知（Unknown）：因为某些原因无法取得 Pod 的状态，通常是因为与 Pod 所在主机通信失败。</li></ul></li></ul><h3 id="使用命令查看："><a href="#使用命令查看：" class="headerlink" title="使用命令查看："></a>使用命令查看：</h3><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">app</span>]<span class="hljs-comment"># kubectl describe pods test1 -n kube-system</span><br></code></pre></td></tr></table></figure><h4 id="pod状态（phase）："><a href="#pod状态（phase）：" class="headerlink" title="pod状态（phase）："></a>pod状态（phase）：</h4><p><img src="/images/pod-restart-2.png" alt="pod-restart-2"></p><h4 id="容器状态："><a href="#容器状态：" class="headerlink" title="容器状态："></a>容器状态：</h4><p><img src="/images/pod-restart-3.png" alt="pod-restart-3"></p><h4 id="条件状态："><a href="#条件状态：" class="headerlink" title="条件状态："></a>条件状态：</h4><p><img src="/images/pod-restart-4.png" alt="pod-restart-4"></p><h3 id="容器探针："><a href="#容器探针：" class="headerlink" title="容器探针："></a>容器探针：</h3><p>探针 是由 kubelet 对容器执行的定期诊断。要执行诊断，kubelet 调用由容器实现的 Handler。有三种类型的处理程序：</p><ul><li>ExecAction：在容器内执行指定命令。如果命令退出时返回码为 0 则认为诊断成功。</li><li>TCPSocketAction：对指定端口上的容器的 IP 地址进行 TCP 检查。如果端口打开，则诊断被认为是成功的。</li><li>HTTPGetAction：对指定的端口和路径上的容器的 IP 地址执行 HTTP Get 请求。如果响应的状态码大于等于200 且小于 400，则诊断被认为是成功的。</li></ul><h3 id="每次探测都将获得以下三种结果之一："><a href="#每次探测都将获得以下三种结果之一：" class="headerlink" title="每次探测都将获得以下三种结果之一："></a>每次探测都将获得以下三种结果之一：</h3><ul><li>成功：容器通过了诊断。</li><li>失败：容器未通过诊断。</li><li>未知：诊断失败，因此不会采取任何行动。</li></ul><h3 id="Kubelet-可以选择是否执行在容器上运行的两种探针执行和做出反应："><a href="#Kubelet-可以选择是否执行在容器上运行的两种探针执行和做出反应：" class="headerlink" title="Kubelet 可以选择是否执行在容器上运行的两种探针执行和做出反应："></a>Kubelet 可以选择是否执行在容器上运行的两种探针执行和做出反应：</h3><ul><li>livenessProbe：指示容器是否正在运行。如果存活探测失败，则 kubelet 会杀死容器，并且容器将受到其 重启策略 的影响。如果容器不提供存活探针，则默认状态为 Success。</li><li>readinessProbe：就绪探测是用于容器是否准备好服务请求。如果就绪探测失败，端点控制器将从与 Pod 匹配的所有 Service 的端点中删除该 Pod 的 IP 地址。初始延迟之前的就绪状态默认为 Failure。如果容器不提供就绪探针，则默认状态为 Success。</li></ul><h3 id="Pod的重启策略："><a href="#Pod的重启策略：" class="headerlink" title="Pod的重启策略："></a>Pod的重启策略：</h3><p>Pod 的重启策略有 3 种，默认值为 Always。</p><ul><li>Always ： 容器失效时，kubelet 自动重启该容器；</li><li>OnFailure ： 容器终止运行且退出码不为0时重启；</li><li>Never ： 不论状态为何， kubelet 都不重启该容器。<br>失败的容器由 kubelet 以五分钟为上限的指数退避延迟（10秒，20秒，40秒…）重新启动，并在成功执行十分钟后重置。</li></ul><h3 id="Pod-的生命："><a href="#Pod-的生命：" class="headerlink" title="Pod 的生命："></a>Pod 的生命：</h3><p>一般来说，Pod 不会消失，直到人为销毁他们。这可能是一个人或控制器。这个规则的唯一例外是成功或失败的 phase 超过一段时间（由 master 确定）的Pod将过期并被自动销毁。</p><p>有三种可用的控制器：</p><ul><li>使用 Job 运行预期会终止的 Pod，例如批量计算。Job 仅适用于重启策略为 OnFailure 或 Never 的 Pod。</li><li>对预期不会终止的 Pod 使用 ReplicationController、ReplicaSet 和 Deployment ，例如 Web 服务器。ReplicationController 仅适用于具有 restartPolicy 为 Always 的 Pod。</li><li>提供特定于机器的系统服务，使用 DaemonSet 为每台机器运行一个 Pod 。</li></ul><p>所有这三种类型的控制器都包含一个 PodTemplate。建议创建适当的控制器，让它们来创建 Pod，而不是直接自己创建 Pod。这是因为单独的 Pod 在机器故障的情况下没有办法自动复原，而控制器却可以。</p><p>如果节点死亡或与集群的其余部分断开连接，则 Kubernetes 将应用一个策略将丢失节点上的所有 Pod 的 phase 设置为 Failed。</p><h3 id="LivenessProbe-存活检查-："><a href="#LivenessProbe-存活检查-：" class="headerlink" title="LivenessProbe (存活检查)："></a>LivenessProbe (存活检查)：</h3><h4 id="livenessProbe参数解析："><a href="#livenessProbe参数解析：" class="headerlink" title="livenessProbe参数解析："></a>livenessProbe参数解析：</h4><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">[root@k8s-<span class="hljs-keyword">master</span> <span class="hljs-title">~]# kubectl</span> explain pod.<span class="hljs-keyword">spec</span>.containers.livenessProbe<br><br>KIND:     Pod<br><span class="hljs-keyword">VERSION</span>:  v1<br><br>RESOURCE: livenessProbe <span class="hljs-tag">&lt;Object&gt;</span><br><br>exec  command的方式探测,例如 ps 一个进程<br><br>failureThreshold 探测几次失败 才算失败 默认是连续三次<br><br>periodSeconds 每次的多长时间探测一次  默认<span class="hljs-number">10s</span><br><br>timeoutSeconds 探测超市的秒数 默认<span class="hljs-number">1s</span><br><br>initialDelaySeconds  初始化延迟探测，第一次探测的时候，因为主程序未必启动完成<br><br>tcpSocket 检测端口的探测<br><br>httpGet http请求探测<br></code></pre></td></tr></table></figure><h4 id="ExecAction探测方式："><a href="#ExecAction探测方式：" class="headerlink" title="ExecAction探测方式："></a>ExecAction探测方式：</h4><p>举个例子：定义一个liveness的pod资源类型，基础镜像为busybox，在busybox这个容器启动后会执行创建&#x2F;tmp&#x2F;test的文件啊，并删除，然后等待3600秒。随后定义了存活性探测，方式是以exec的方式执行命令判断&#x2F;tmp&#x2F;test是否存在，存在即表示存活，不存在则表示容器已经挂了。</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">apiVersion:</span> v1<br><span class="hljs-symbol">kind:</span> Pod<br><span class="hljs-symbol">metadata:</span><br><span class="hljs-symbol">  name:</span> liveness-exec-pod<br><span class="hljs-symbol">  namespace:</span> default<br><span class="hljs-symbol">  labels:</span><br><span class="hljs-symbol">    name:</span> myapp<br><span class="hljs-symbol">spec:</span><br><span class="hljs-symbol">  containers:</span><br>  - name: livess-exec<br><span class="hljs-symbol">    image:</span> busybox:latest<br><span class="hljs-symbol">    imagePullPolicy:</span> IfNotPresent<br><span class="hljs-symbol">    command:</span> [<span class="hljs-string">&quot;/bin/sh&quot;</span>,<span class="hljs-string">&quot;-c&quot;</span>,<span class="hljs-string">&quot;touch /tmp/test; sleep 30; rm -f /tmp/test; sleep 3600&quot;</span>]<br><span class="hljs-symbol">    livenessProbe:</span><br><span class="hljs-symbol">      exec:</span><br><span class="hljs-symbol">        command:</span> [<span class="hljs-string">&quot;test&quot;</span>,<span class="hljs-string">&quot;-e&quot;</span>,<span class="hljs-string">&quot;/tmp/test&quot;</span>]<br><span class="hljs-symbol">      initialDelaySeconds:</span> <span class="hljs-number">1</span><br><span class="hljs-symbol">      periodSeconds:</span> <span class="hljs-number">3</span><br></code></pre></td></tr></table></figure><h4 id="HTTPGetAction探测方式："><a href="#HTTPGetAction探测方式：" class="headerlink" title="HTTPGetAction探测方式："></a>HTTPGetAction探测方式：</h4><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-attribute">apiVersion</span><span class="hljs-punctuation">:</span> <span class="hljs-string">v1</span><br><span class="hljs-attribute">kind</span><span class="hljs-punctuation">:</span> <span class="hljs-string">Pod</span><br><span class="hljs-attribute">metadata</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">nginx-test1</span><br>  <span class="hljs-attribute">namespace</span><span class="hljs-punctuation">:</span> <span class="hljs-string">kube-system</span><br>  <span class="hljs-attribute">labels</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-attribute">app</span><span class="hljs-punctuation">:</span> <span class="hljs-string">myapp</span><br><span class="hljs-attribute">spec</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">containers</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">name: nginxtest</span><br>    <span class="hljs-attribute">image</span><span class="hljs-punctuation">:</span> <span class="hljs-string">nginx:1.7.9</span><br>    <span class="hljs-attribute">imagePullPolicy</span><span class="hljs-punctuation">:</span> <span class="hljs-string">IfNotPresent</span><br>    <span class="hljs-attribute">ports</span><span class="hljs-punctuation">:</span><br>     <span class="hljs-bullet">-</span> <span class="hljs-string">name: http</span><br>       <span class="hljs-attribute">containerPort</span><span class="hljs-punctuation">:</span> <span class="hljs-string">80</span><br>     <span class="hljs-bullet">-</span> <span class="hljs-string">name: https</span><br>       <span class="hljs-attribute">containerPort</span><span class="hljs-punctuation">:</span> <span class="hljs-string">443</span><br>    <span class="hljs-attribute">livenessProbe</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-attribute">httpGet</span><span class="hljs-punctuation">:</span><br>        <span class="hljs-attribute">path</span><span class="hljs-punctuation">:</span> <span class="hljs-string">/index.html</span><br>        <span class="hljs-attribute">port</span><span class="hljs-punctuation">:</span> <span class="hljs-string">80</span><br>      <span class="hljs-attribute">initialDelaySeconds</span><span class="hljs-punctuation">:</span> <span class="hljs-string">1</span><br>      <span class="hljs-attribute">periodSeconds</span><span class="hljs-punctuation">:</span> <span class="hljs-string">3</span><br></code></pre></td></tr></table></figure><h3 id="Pod状态（phase）示例："><a href="#Pod状态（phase）示例：" class="headerlink" title="Pod状态（phase）示例："></a>Pod状态（phase）示例：</h3><ul><li><p>Pod 中只有一个容器并且正在运行。容器成功退出。</p><ul><li>记录完成事件。</li><li>如果 restartPolicy 为：</li><li>Always：重启容器；Pod phase 仍为 Running。</li><li>OnFailure：Pod phase 变成 Succeeded。</li><li>Never：Pod phase 变成 Succeeded。</li></ul></li><li><p>Pod 中只有一个容器并且正在运行。容器退出失败。</p><ul><li>记录失败事件。</li><li>如果 restartPolicy 为：</li><li>Always：重启容器；Pod phase 仍为 Running。</li><li>OnFailure：重启容器；Pod phase 仍为 Running。</li><li>Never：Pod phase 变成 Failed。</li></ul></li><li><p>Pod 中有两个容器并且正在运行。有一个容器退出失败。</p><ul><li>记录失败事件。</li><li>如果 restartPolicy 为：</li><li>Always：重启容器；Pod phase 仍为 Running。</li><li>OnFailure：重启容器；Pod phase 仍为 Running。</li><li>Never：不重启容器；Pod phase 仍为 Running。<ul><li>如果有一个容器没有处于运行状态，并且两个容器退出：</li><li>记录失败事件。</li><li>如果 restartPolicy 为：</li><li>Always：重启容器；Pod phase 仍为 Running。</li><li>OnFailure：重启容器；Pod phase 仍为 Running。</li><li>Never：Pod phase 变成 Failed。</li></ul></li></ul></li><li><p>Pod 中只有一个容器并处于运行状态。容器运行时内存超出限制：</p><ul><li>容器以失败状态终止。</li><li>记录 OOM 事件。</li><li>如果 restartPolicy 为：</li><li>Always：重启容器；Pod phase 仍为 Running。</li><li>OnFailure：重启容器；Pod phase 仍为 Running。</li><li>Never: 记录失败事件；Pod phase 仍为 Failed。</li></ul></li><li><p>Pod 正在运行，磁盘故障：</p><ul><li>杀掉所有容器。</li><li>记录适当事件。</li><li>Pod phase 变成 Failed。</li><li>如果使用控制器来运行，Pod 将在别处重建。</li></ul></li><li><p>Pod 正在运行，其节点被分段。</p><ul><li>节点控制器等待直到超时。</li><li>节点控制器将 Pod phase 设置为 Failed。</li><li>如果是用控制器来运行，Pod 将在别处重建。</li></ul></li></ul><h3 id="ReadinessProbe-就绪检查-："><a href="#ReadinessProbe-就绪检查-：" class="headerlink" title="ReadinessProbe (就绪检查)："></a>ReadinessProbe (就绪检查)：</h3><p>就绪探测是用于容器是否准备好服务请求。如果就绪探测失败，端点控制器将从与 Pod 匹配的所有 Service 的端点中删除该 Pod 的 IP 地址。初始延迟之前的就绪状态默认为 Failure。如果容器不提供就绪探针，则默认状态为 Success。（注：默认为read状态）</p><p><img src="/images/ReadinessProbe.png" alt="ReadinessProbe"></p><p>有时，应用程序暂时无法对外部流量提供服务。 例如，应用程序可能需要在启动期间加载大量数据或配置文件。 在这种情况下，你不想杀死应用程序，但你也不想发送请求。 Kubernetes提供了readiness probe来检测和减轻这些情况。 Pod中的容器可以报告自己还没有准备，不能处理Kubernetes服务发送过来的流量。（如果在Pod没有ready的情况下是不会被加入到service中，如果已经加入到service中但设置了readiness probe检测发现Pod服务未处于ready状态也会被service移除）</p><p>Readiness probe的配置跟liveness probe很像。唯一的不同是使用 readinessProbe而不是livenessProbe。</p><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-attribute">readinessProbe</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">exec</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-attribute">command</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">cat</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">/tmp/healthy</span><br>  <span class="hljs-attribute">initialDelaySeconds</span><span class="hljs-punctuation">:</span> <span class="hljs-string">5</span><br>  <span class="hljs-attribute">periodSeconds</span><span class="hljs-punctuation">:</span> <span class="hljs-string">5</span><br></code></pre></td></tr></table></figure><p>Readiness probe的HTTP和TCP的探测器配置跟liveness probe一样。</p><p>Readiness和livenss probe可以并行用于同一容器。 使用两者可以确保流量无法到达未准备好的容器，并且容器在失败时重新启动。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Kubernetes 定义Pod资源清单</title>
    <link href="/2019/08/23/Kubernetes-Pod/"/>
    <url>/2019/08/23/Kubernetes-Pod/</url>
    
    <content type="html"><![CDATA[<h3 id="定义一个简单的pod资源清单："><a href="#定义一个简单的pod资源清单：" class="headerlink" title="定义一个简单的pod资源清单："></a>定义一个简单的pod资源清单：</h3><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-attribute">apiVersion</span><span class="hljs-punctuation">:</span> <span class="hljs-string">v1</span><br><span class="hljs-attribute">kind</span><span class="hljs-punctuation">:</span> <span class="hljs-string">Pod</span><br><span class="hljs-attribute">metadata</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">nginx-ye</span><br>  <span class="hljs-attribute">namespace</span><span class="hljs-punctuation">:</span> <span class="hljs-string">kube-system</span><br>  <span class="hljs-attribute">labels</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-attribute">app</span><span class="hljs-punctuation">:</span> <span class="hljs-string">myapp</span><br><span class="hljs-attribute">spec</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">containers</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">name: nginx</span><br>    <span class="hljs-attribute">image</span><span class="hljs-punctuation">:</span> <span class="hljs-string">nginx:1.7.9</span><br></code></pre></td></tr></table></figure><h3 id="yaml格式的pod定义文件完整内容："><a href="#yaml格式的pod定义文件完整内容：" class="headerlink" title="yaml格式的pod定义文件完整内容："></a>yaml格式的pod定义文件完整内容：</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span>       <span class="hljs-comment">#必选，版本号，例如v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Pod</span>       <span class="hljs-comment">#必选，Pod</span><br><span class="hljs-attr">metadata:</span>       <span class="hljs-comment">#必选，元数据</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">string</span>       <span class="hljs-comment">#必选，Pod名称</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">string</span>    <span class="hljs-comment">#必选，Pod所属的命名空间</span><br>  <span class="hljs-attr">labels:</span>      <span class="hljs-comment">#自定义标签</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">string</span>     <span class="hljs-comment">#自定义标签名字</span><br>  <span class="hljs-attr">annotations:</span>       <span class="hljs-comment">#自定义注释列表</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">string</span><br><span class="hljs-attr">spec:</span>         <span class="hljs-comment">#必选，Pod中容器的详细定义</span><br>  <span class="hljs-attr">containers:</span>      <span class="hljs-comment">#必选，Pod中容器列表</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">string</span>     <span class="hljs-comment">#必选，容器名称</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">string</span>    <span class="hljs-comment">#必选，容器的镜像名称</span><br>    <span class="hljs-attr">imagePullPolicy:</span> [<span class="hljs-string">Always</span> <span class="hljs-string">|</span> <span class="hljs-string">Never</span> <span class="hljs-string">|</span> <span class="hljs-string">IfNotPresent</span>] <span class="hljs-comment">#获取镜像的策略 Alawys表示下载镜像 IfnotPresent表示优先使用本地镜像，否则下载镜像，Nerver表示仅使用本地镜像</span><br>    <span class="hljs-attr">command:</span> [<span class="hljs-string">string</span>]    <span class="hljs-comment">#容器的启动命令列表，如不指定，使用打包时使用的启动命令</span><br>    <span class="hljs-attr">args:</span> [<span class="hljs-string">string</span>]     <span class="hljs-comment">#容器的启动命令参数列表</span><br>    <span class="hljs-attr">workingDir:</span> <span class="hljs-string">string</span>     <span class="hljs-comment">#容器的工作目录</span><br>    <span class="hljs-attr">volumeMounts:</span>    <span class="hljs-comment">#挂载到容器内部的存储卷配置</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">string</span>     <span class="hljs-comment">#引用pod定义的共享存储卷的名称，需用volumes[]部分定义的的卷名</span><br>      <span class="hljs-attr">mountPath:</span> <span class="hljs-string">string</span>    <span class="hljs-comment">#存储卷在容器内mount的绝对路径，应少于512字符</span><br>      <span class="hljs-attr">readOnly:</span> <span class="hljs-string">boolean</span>    <span class="hljs-comment">#是否为只读模式</span><br>    <span class="hljs-attr">ports:</span>       <span class="hljs-comment">#需要暴露的端口库号列表</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">string</span>     <span class="hljs-comment">#端口号名称</span><br>      <span class="hljs-attr">containerPort:</span> <span class="hljs-string">int</span>   <span class="hljs-comment">#容器需要监听的端口号</span><br>      <span class="hljs-attr">hostPort:</span> <span class="hljs-string">int</span>    <span class="hljs-comment">#容器所在主机需要监听的端口号，默认与Container相同</span><br>      <span class="hljs-attr">protocol:</span> <span class="hljs-string">string</span>     <span class="hljs-comment">#端口协议，支持TCP和UDP，默认TCP</span><br>    <span class="hljs-attr">env:</span>       <span class="hljs-comment">#容器运行前需设置的环境变量列表</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">string</span>     <span class="hljs-comment">#环境变量名称</span><br>      <span class="hljs-attr">value:</span> <span class="hljs-string">string</span>    <span class="hljs-comment">#环境变量的值</span><br>    <span class="hljs-attr">resources:</span>       <span class="hljs-comment">#资源限制和请求的设置</span><br>      <span class="hljs-attr">limits:</span>      <span class="hljs-comment">#资源限制的设置</span><br>        <span class="hljs-attr">cpu:</span> <span class="hljs-string">string</span>    <span class="hljs-comment">#Cpu的限制，单位为core数，将用于docker run --cpu-shares参数</span><br>        <span class="hljs-attr">memory:</span> <span class="hljs-string">string</span>     <span class="hljs-comment">#内存限制，单位可以为Mib/Gib，将用于docker run --memory参数</span><br>      <span class="hljs-attr">requests:</span>      <span class="hljs-comment">#资源请求的设置</span><br>        <span class="hljs-attr">cpu:</span> <span class="hljs-string">string</span>    <span class="hljs-comment">#Cpu请求，容器启动的初始可用数量</span><br>        <span class="hljs-attr">memory:</span> <span class="hljs-string">string</span>     <span class="hljs-comment">#内存清楚，容器启动的初始可用数量</span><br>    <span class="hljs-attr">livenessProbe:</span>     <span class="hljs-comment">#对Pod内个容器健康检查的设置，当探测无响应几次后将自动重启该容器，检查方法有exec、httpGet和tcpSocket，对一个容器只需设置其中一种方法即可</span><br>      <span class="hljs-attr">exec:</span>      <span class="hljs-comment">#对Pod容器内检查方式设置为exec方式</span><br>        <span class="hljs-attr">command:</span> [<span class="hljs-string">string</span>]  <span class="hljs-comment">#exec方式需要制定的命令或脚本</span><br>      <span class="hljs-attr">httpGet:</span>       <span class="hljs-comment">#对Pod内个容器健康检查方法设置为HttpGet，需要制定Path、port</span><br>        <span class="hljs-attr">path:</span> <span class="hljs-string">string</span><br>        <span class="hljs-attr">port:</span> <span class="hljs-string">number</span><br>        <span class="hljs-attr">host:</span> <span class="hljs-string">string</span><br>        <span class="hljs-attr">scheme:</span> <span class="hljs-string">string</span><br>        <span class="hljs-attr">HttpHeaders:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">string</span><br>          <span class="hljs-attr">value:</span> <span class="hljs-string">string</span><br>      <span class="hljs-attr">tcpSocket:</span>     <span class="hljs-comment">#对Pod内个容器健康检查方式设置为tcpSocket方式</span><br>         <span class="hljs-attr">port:</span> <span class="hljs-string">number</span><br>       <span class="hljs-attr">initialDelaySeconds:</span> <span class="hljs-number">0</span>  <span class="hljs-comment">#容器启动完成后首次探测的时间，单位为秒</span><br>       <span class="hljs-attr">timeoutSeconds:</span> <span class="hljs-number">0</span>   <span class="hljs-comment">#对容器健康检查探测等待响应的超时时间，单位秒，默认1秒</span><br>       <span class="hljs-attr">periodSeconds:</span> <span class="hljs-number">0</span>    <span class="hljs-comment">#对容器监控检查的定期探测时间设置，单位秒，默认10秒一次</span><br>       <span class="hljs-attr">successThreshold:</span> <span class="hljs-number">0</span><br>       <span class="hljs-attr">failureThreshold:</span> <span class="hljs-number">0</span><br>       <span class="hljs-attr">securityContext:</span><br>         <span class="hljs-string">privileged:false</span><br>    <span class="hljs-attr">restartPolicy:</span> [<span class="hljs-string">Always</span> <span class="hljs-string">|</span> <span class="hljs-string">Never</span> <span class="hljs-string">|</span> <span class="hljs-string">OnFailure</span>]<span class="hljs-comment">#Pod的重启策略，Always表示一旦不管以何种方式终止运行，kubelet都将重启，OnFailure表示只有Pod以非0退出码退出才重启，Nerver表示不再重启该Pod</span><br>    <span class="hljs-attr">nodeSelector:</span> <span class="hljs-string">obeject</span>  <span class="hljs-comment">#设置NodeSelector表示将该Pod调度到包含这个label的node上，以key：value的格式指定</span><br>    <span class="hljs-attr">imagePullSecrets:</span>    <span class="hljs-comment">#Pull镜像时使用的secret名称，以key：secretkey格式指定</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">string</span><br>    <span class="hljs-string">hostNetwork:false</span>      <span class="hljs-comment">#是否使用主机网络模式，默认为false，如果设置为true，表示使用宿主机网络</span><br>    <span class="hljs-attr">volumes:</span>       <span class="hljs-comment">#在该pod上定义共享存储卷列表</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">string</span>     <span class="hljs-comment">#共享存储卷名称 （volumes类型有很多种）</span><br>      <span class="hljs-attr">emptyDir:</span> &#123;&#125;     <span class="hljs-comment">#类型为emtyDir的存储卷，与Pod同生命周期的一个临时目录。为空值</span><br>      <span class="hljs-attr">hostPath:</span> <span class="hljs-string">string</span>     <span class="hljs-comment">#类型为hostPath的存储卷，表示挂载Pod所在宿主机的目录</span><br>        <span class="hljs-attr">path:</span> <span class="hljs-string">string</span>     <span class="hljs-comment">#Pod所在宿主机的目录，将被用于同期中mount的目录</span><br>      <span class="hljs-attr">secret:</span>      <span class="hljs-comment">#类型为secret的存储卷，挂载集群与定义的secre对象到容器内部</span><br>        <span class="hljs-attr">scretname:</span> <span class="hljs-string">string</span>  <br>        <span class="hljs-attr">items:</span>     <br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">key:</span> <span class="hljs-string">string</span><br>          <span class="hljs-attr">path:</span> <span class="hljs-string">string</span><br>      <span class="hljs-attr">configMap:</span>     <span class="hljs-comment">#类型为configMap的存储卷，挂载预定义的configMap对象到容器内部</span><br>        <span class="hljs-attr">name:</span> <span class="hljs-string">string</span><br>        <span class="hljs-attr">items:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">key:</span> <span class="hljs-string">string</span><br>          <span class="hljs-attr">path:</span> <span class="hljs-string">string</span><br></code></pre></td></tr></table></figure><h3 id="使用-HostAliases-向-Pod-x2F-etc-x2F-hosts-文件添加条目"><a href="#使用-HostAliases-向-Pod-x2F-etc-x2F-hosts-文件添加条目" class="headerlink" title="使用 HostAliases 向 Pod &#x2F;etc&#x2F;hosts 文件添加条目"></a>使用 HostAliases 向 Pod &#x2F;etc&#x2F;hosts 文件添加条目</h3><p>当 DNS 配置以及其它选项不合理的时候，通过向 Pod 的<code>/etc/hosts</code>文件中添加条目，可以在 Pod 级别覆盖对主机名的解析。用户可以通过 <code>PodSpec</code> 的 <code>HostAliases</code> 字段来添加这些自定义的条目。</p><h4 id="通过-HostAliases-增加额外的条目"><a href="#通过-HostAliases-增加额外的条目" class="headerlink" title="通过 HostAliases 增加额外的条目"></a>通过 HostAliases 增加额外的条目</h4><p>我们可以向 hosts 文件添加额外的条目，将 <code>foo.local</code>、 <code>bar.local</code> 解析为<code>127.0.0.1</code>，将 <code>foo.remote</code>、 <code>bar.remote</code> 解析为 <code>10.1.2.3</code>，我们可以在 <code>.spec.hostAliases</code> 下为 Pod 添加 HostAliases。</p><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-attribute">apiVersion</span><span class="hljs-punctuation">:</span> <span class="hljs-string">v1</span><br><span class="hljs-attribute">kind</span><span class="hljs-punctuation">:</span> <span class="hljs-string">Pod</span><br><span class="hljs-attribute">metadata</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">hostaliases-pod</span><br><span class="hljs-attribute">spec</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">hostAliases</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">ip: &quot;127.0.0.1&quot;</span><br>    <span class="hljs-attribute">hostnames</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;foo.local&quot;</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;bar.local&quot;</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">ip: &quot;10.1.2.3&quot;</span><br>    <span class="hljs-attribute">hostnames</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;foo.remote&quot;</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;bar.remote&quot;</span><br>  <span class="hljs-attribute">containers</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">name: cat-hosts</span><br>    <span class="hljs-attribute">image</span><span class="hljs-punctuation">:</span> <span class="hljs-string">busybox</span><br>    <span class="hljs-attribute">command</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">cat</span><br>    <span class="hljs-attribute">args</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;/etc/hosts&quot;</span><br></code></pre></td></tr></table></figure><h4 id="hosts-文件的内容看起来类似如下这样："><a href="#hosts-文件的内容看起来类似如下这样：" class="headerlink" title="hosts 文件的内容看起来类似如下这样："></a>hosts 文件的内容看起来类似如下这样：</h4><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crystal"><span class="hljs-variable">$ </span>kubectl logs hostaliases-pod<br></code></pre></td></tr></table></figure><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs accesslog"># Kubernetes-managed hosts file.<br><span class="hljs-number">127.0.0.1</span>localhost<br>::<span class="hljs-number">1</span>localhost ip6-localhost ip6-loopback<br>fe00::<span class="hljs-number">0</span>ip6-localnet<br>fe00::<span class="hljs-number">0</span>ip6-mcastprefix<br>fe00::<span class="hljs-number">1</span>ip6-allnodes<br>fe00::<span class="hljs-number">2</span>ip6-allrouters<br><span class="hljs-number">10.200.0.4</span>hostaliases-pod<br><br># Entries added by HostAliases.<br><span class="hljs-number">127.0.0.1</span>foo.local<br><span class="hljs-number">127.0.0.1</span>bar.local<br><span class="hljs-number">10.1.2.3</span>foo.remote<br><span class="hljs-number">10.1.2.3</span>bar.remote<br></code></pre></td></tr></table></figure><h4 id="限制"><a href="#限制" class="headerlink" title="限制"></a>限制</h4><p>如果 Pod 启用 <code>hostNetwork</code>，那么将不能使用这个特性，因为 kubelet 只管理非 hostNetwork 类型 Pod 的 hosts 文件。目前正在讨论要改变这个情况。</p><h3 id="下表给出了Docker-与-Kubernetes中对应的字段名称。"><a href="#下表给出了Docker-与-Kubernetes中对应的字段名称。" class="headerlink" title="下表给出了Docker 与 Kubernetes中对应的字段名称。"></a>下表给出了Docker 与 Kubernetes中对应的字段名称。</h3><table><thead><tr><th>描述</th><th>Dockerfile</th><th>Kubernetes</th></tr></thead><tbody><tr><td>容器运行的命令</td><td>Entrypoint</td><td>command</td></tr><tr><td>传递给命令的参数</td><td>Cmd</td><td>args</td></tr></tbody></table><h3 id="如果要覆盖默认的Entrypoint-与-Cmd，需要遵循如下规则："><a href="#如果要覆盖默认的Entrypoint-与-Cmd，需要遵循如下规则：" class="headerlink" title="如果要覆盖默认的Entrypoint 与 Cmd，需要遵循如下规则："></a>如果要覆盖默认的Entrypoint 与 Cmd，需要遵循如下规则：</h3><ul><li>如果在Pod资源清单中不提供command或args，则使用Docker镜像中定义的默认值。</li><li>如果在Pod资源清单中提供了command但不提供args，则仅使用提供的command。将忽略Docker镜像中定义的EntryPoint和Cmd。</li><li>如果仅为Pod资源清单提供args，则Docker镜像中定义默认的Entrypoint与您提供的args一起运行。</li><li>如果提供了command和args，则Docker镜像中定义的Entrypoint和Cmd将被忽略。直接运行你提供的command和args</li></ul><p><img src="/images/args.png" alt="args"></p><h3 id="Label（标签）"><a href="#Label（标签）" class="headerlink" title="Label（标签）"></a>Label（标签）</h3><blockquote><p>在kubernetes第一篇文章中已经对labels做了详细的描述，现在来看如何通过labels过滤指定查看某一种类型的pod</p></blockquote><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs crmsh"><span class="hljs-comment">#首先我们先查看所有的pod并显示出他们所定义的有哪些labels</span><br>[root@<span class="hljs-keyword">master</span> <span class="hljs-title">app</span>]<span class="hljs-comment"># kubectl get pods -n kube-system --show-labels</span><br></code></pre></td></tr></table></figure><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs crmsh"><span class="hljs-comment">#查看labels名是app</span><br>[root@<span class="hljs-keyword">master</span> <span class="hljs-title">app</span>]<span class="hljs-comment"># kubectl get pods -n kube-system -l app</span><br></code></pre></td></tr></table></figure><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs crmsh"><span class="hljs-comment">#查看labels  app=nginx</span><br>[root@<span class="hljs-keyword">master</span> <span class="hljs-title">app</span>]<span class="hljs-comment"># kubectl get pods -n kube-system -l app=nginx</span><br></code></pre></td></tr></table></figure><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-comment">#给指定pod打标签</span><br>kubectl label pods nginx-ye-69df458bc5-lqh84 <span class="hljs-attribute">release</span>=ye -n kube-system<br></code></pre></td></tr></table></figure><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs maxima">#如果<span class="hljs-built_in">key</span>值已存在则覆盖现有的<span class="hljs-built_in">key</span>值<br>kubectl <span class="hljs-built_in">label</span> --overwrite pods nginx-ye-69df458bc5-lqh84 release=dong -n kube-<span class="hljs-built_in">system</span><br></code></pre></td></tr></table></figure><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs crmsh"><span class="hljs-comment">#删除名为“zone”的label 。（使用“ - ”减号相连）</span><br>[root@<span class="hljs-literal">master</span>-<span class="hljs-number">1</span> app]<span class="hljs-comment"># kubectl label node node-0 zone-</span><br><span class="hljs-keyword">node</span><span class="hljs-title">/node-0</span> labeled<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Kubenetes 资源清单定义入门</title>
    <link href="/2019/08/23/Kubenetes-Resource/"/>
    <url>/2019/08/23/Kubenetes-Resource/</url>
    
    <content type="html"><![CDATA[<h3 id="Kubernetes-常用资源"><a href="#Kubernetes-常用资源" class="headerlink" title="Kubernetes 常用资源:"></a>Kubernetes 常用资源:</h3><h4 id="我将它们简单的分类为以下几种资源对象："><a href="#我将它们简单的分类为以下几种资源对象：" class="headerlink" title="我将它们简单的分类为以下几种资源对象："></a>我将它们简单的分类为以下几种资源对象：</h4><table><thead><tr><th>类别</th><th>名称</th></tr></thead><tbody><tr><td>工作负载型资源对象</td><td>Pod、ReplicaSet、Replication Controller、Deployment、StatefulSet、DaemonSet、Job、CronJob</td></tr><tr><td>服务发现及负载均衡</td><td>Service、Ingress</td></tr><tr><td>配置与存储</td><td>Volume、Persistent Volume、CSl 、 configmap、secret 、DownwardAPI</td></tr><tr><td>集群资源</td><td>Namespace、Node、Role、ClusterRole、RoleBinding、ClusterRoleBinding</td></tr><tr><td>元数据资源</td><td>HPA、PodTemplate、LimitRange</td></tr></tbody></table><h4 id="利用命令获取一个Pod的资源清单内容并输出为yaml格式："><a href="#利用命令获取一个Pod的资源清单内容并输出为yaml格式：" class="headerlink" title="利用命令获取一个Pod的资源清单内容并输出为yaml格式："></a>利用命令获取一个Pod的资源清单内容并输出为yaml格式：</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><code class="hljs yaml">[<span class="hljs-string">root@master</span> <span class="hljs-string">app</span>]<span class="hljs-comment"># kubectl get pods nginx-deployment-67594d6bf6-8w947 -n kube-system -o yaml</span><br><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span>     <span class="hljs-comment"># K8S API版本，应该由两部分组成：group/version，group省略表示默认为core </span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Pod</span>           <span class="hljs-comment"># 资源类别： Pod、Deployment、Service等等</span><br><span class="hljs-attr">metadata:</span>          <span class="hljs-comment"># 资源元数据</span><br>  <span class="hljs-attr">creationTimestamp:</span> <span class="hljs-number">2018-09-27T06:29:25Z</span><br>  <span class="hljs-attr">generateName:</span> <span class="hljs-string">nginx-deployment-67594d6bf6-</span><br>  <span class="hljs-attr">labels:</span><br>    <span class="hljs-attr">app:</span> <span class="hljs-string">nginx</span><br>    <span class="hljs-attr">pod-template-hash:</span> <span class="hljs-string">&quot;2315082692&quot;</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">nginx-deployment-67594d6bf6-8w947</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">kube-system</span><br>  <span class="hljs-attr">ownerReferences:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">apiVersion:</span> <span class="hljs-string">apps/v1</span><br>    <span class="hljs-attr">blockOwnerDeletion:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">controller:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">kind:</span> <span class="hljs-string">ReplicaSet</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">nginx-deployment-67594d6bf6</span><br>    <span class="hljs-attr">uid:</span> <span class="hljs-string">ceebf775-acef-11e8-b183-d8490b8af3ae</span><br>  <span class="hljs-attr">resourceVersion:</span> <span class="hljs-string">&quot;5070139&quot;</span><br>  <span class="hljs-attr">selfLink:</span> <span class="hljs-string">/api/v1/namespaces/kube-system/pods/nginx-deployment-67594d6bf6-8w947</span><br>  <span class="hljs-attr">uid:</span> <span class="hljs-string">adca27df-c21e-11e8-8dd6-d8490b8af3ae</span><br><span class="hljs-attr">spec:</span>     <span class="hljs-comment"># specifications, 资源规格。（定义资源对象期望的状态），这个是最重要的字段，用于规定接下来要创建的资源对象应该拥有的特性。然后依靠控制器确保这些特性能够被满足。</span><br>  <span class="hljs-attr">containers:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">image:</span> <span class="hljs-string">nginx:1.7.9</span><br>    <span class="hljs-attr">imagePullPolicy:</span> <span class="hljs-string">IfNotPresent</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">nginx</span><br>    <span class="hljs-attr">ports:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">containerPort:</span> <span class="hljs-number">80</span><br>      <span class="hljs-attr">protocol:</span> <span class="hljs-string">TCP</span><br>    <span class="hljs-attr">resources:</span> &#123;&#125;<br>    <span class="hljs-attr">terminationMessagePath:</span> <span class="hljs-string">/dev/termination-log</span><br>    <span class="hljs-attr">terminationMessagePolicy:</span> <span class="hljs-string">File</span><br>  <span class="hljs-attr">dnsPolicy:</span> <span class="hljs-string">ClusterFirst</span><br>  <span class="hljs-attr">nodeName:</span> <span class="hljs-string">node1</span><br>  <span class="hljs-attr">restartPolicy:</span> <span class="hljs-string">Always</span><br>  <span class="hljs-attr">schedulerName:</span> <span class="hljs-string">default-scheduler</span><br>  <span class="hljs-attr">securityContext:</span> &#123;&#125;<br>  <span class="hljs-attr">terminationGracePeriodSeconds:</span> <span class="hljs-number">30</span><br><span class="hljs-attr">status:</span>       <span class="hljs-comment"># 用于显示这个资源对象当前的状态，这个字段是只读的。</span><br>  <span class="hljs-attr">conditions:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">lastProbeTime:</span> <span class="hljs-literal">null</span><br>    <span class="hljs-attr">lastTransitionTime:</span> <span class="hljs-number">2018-09-27T06:30:35Z</span><br>    <span class="hljs-attr">status:</span> <span class="hljs-string">&quot;True&quot;</span><br>    <span class="hljs-attr">type:</span> <span class="hljs-string">Initialized</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">lastProbeTime:</span> <span class="hljs-literal">null</span><br>    <span class="hljs-attr">lastTransitionTime:</span> <span class="hljs-number">2018-09-27T06:30:37Z</span><br>    <span class="hljs-attr">status:</span> <span class="hljs-string">&quot;True&quot;</span><br>    <span class="hljs-attr">type:</span> <span class="hljs-string">Ready</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">lastProbeTime:</span> <span class="hljs-literal">null</span><br>    <span class="hljs-attr">lastTransitionTime:</span> <span class="hljs-literal">null</span><br>    <span class="hljs-attr">status:</span> <span class="hljs-string">&quot;True&quot;</span><br>    <span class="hljs-attr">type:</span> <span class="hljs-string">ContainersReady</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">lastProbeTime:</span> <span class="hljs-literal">null</span><br>    <span class="hljs-attr">lastTransitionTime:</span> <span class="hljs-number">2018-09-27T06:29:25Z</span><br>    <span class="hljs-attr">status:</span> <span class="hljs-string">&quot;True&quot;</span><br>    <span class="hljs-attr">type:</span> <span class="hljs-string">PodScheduled</span><br>  <span class="hljs-attr">containerStatuses:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">containerID:</span> <span class="hljs-string">docker://3e1b5e5f2590bf50d04c98540c937b3d3bf9ea4ffb6a5a08979ac0914f161e49</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">nginx:1.7.9</span><br>    <span class="hljs-attr">imageID:</span> <span class="hljs-string">docker-pullable://nginx@sha256:e3456c851a152494c3e4ff5fcc26f240206abac0c9d794affb40e0714846c451</span><br>    <span class="hljs-attr">lastState:</span> &#123;&#125;<br>    <span class="hljs-attr">name:</span> <span class="hljs-string">nginx</span><br>    <span class="hljs-attr">ready:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">restartCount:</span> <span class="hljs-number">0</span><br>    <span class="hljs-attr">state:</span><br>      <span class="hljs-attr">running:</span><br>        <span class="hljs-attr">startedAt:</span> <span class="hljs-number">2018-09-27T06:30:36Z</span><br>  <span class="hljs-attr">hostIP:</span> <span class="hljs-number">172.19</span><span class="hljs-number">.0</span><span class="hljs-number">.204</span><br>  <span class="hljs-attr">phase:</span> <span class="hljs-string">Running</span><br>  <span class="hljs-attr">podIP:</span> <span class="hljs-number">10.1</span><span class="hljs-number">.35</span><span class="hljs-number">.2</span><br>  <span class="hljs-attr">qosClass:</span> <span class="hljs-string">BestEffort</span><br>  <span class="hljs-attr">startTime:</span> <span class="hljs-number">2018-09-27T06:30:35Z</span><br></code></pre></td></tr></table></figure><h4 id="缺少部分："><a href="#缺少部分：" class="headerlink" title="缺少部分："></a>缺少部分：</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">tolerations:</span>        <span class="hljs-comment"># 容忍度，能够容忍哪些污点</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">effect:</span> <span class="hljs-string">NoExecute</span><br>  <span class="hljs-attr">key:</span> <span class="hljs-string">node.kubernetes.io/not-ready</span><br>  <span class="hljs-attr">operator:</span> <span class="hljs-string">Exists</span><br>  <span class="hljs-attr">tolerationSeconds:</span> <span class="hljs-number">300</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">effect:</span> <span class="hljs-string">NoExecute</span><br>  <span class="hljs-attr">key:</span> <span class="hljs-string">node.kubernetes.io/unreachable</span><br>  <span class="hljs-attr">operator:</span> <span class="hljs-string">Exists</span><br>  <span class="hljs-attr">tolerationSeconds:</span> <span class="hljs-number">300</span><br><span class="hljs-attr">volumes:</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">default-token-rqmtb</span><br>  <span class="hljs-attr">secret:</span><br>    <span class="hljs-attr">defaultMode:</span> <span class="hljs-number">420</span><br>    <span class="hljs-attr">secretName:</span> <span class="hljs-string">default-token-rqmtb</span><br></code></pre></td></tr></table></figure><h3 id="创建资源清单的方法："><a href="#创建资源清单的方法：" class="headerlink" title="创建资源清单的方法："></a>创建资源清单的方法：</h3><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">apiserver 仅接受<span class="hljs-keyword">JOSN格式的资源定义</span><br><span class="hljs-keyword"></span>yaml格式提供配置清单，apiserver自动转成<span class="hljs-keyword">json格式，然后在提交</span><br></code></pre></td></tr></table></figure><h3 id="大部分资源的配置清单："><a href="#大部分资源的配置清单：" class="headerlink" title="大部分资源的配置清单："></a>大部分资源的配置清单：</h3><figure class="highlight pf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs pf">apiVersion: 格式：<span class="hljs-keyword">group</span>/version 查看 kubectl apiversion<br>kind: Pod Replicaset Deployments ...<br>metadata: name namespace labels annotations<br>spec: 定义用户期望状态 disired <span class="hljs-keyword">state</span><br>status: 定义当前状态 current <span class="hljs-keyword">state</span> 该字段由kubenetes集群维护；<br></code></pre></td></tr></table></figure><h3 id="配置清单格式："><a href="#配置清单格式：" class="headerlink" title="配置清单格式："></a>配置清单格式：</h3><figure class="highlight pf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs pf">apiVersion: v1     <span class="hljs-comment"># kubectl api-versions（查看命令）</span><br><br>kind: 资源类别（Pod Replicaset Deployments ...）<br><br>metadata: 元数据<br>    name: 资源名称<br>    namespace: 名称空间<br>    labels: 标签，键值数据。数据大小有限制。<br>    annotations: 注解，也是键值数据，但是它的数据没有大小限制。<br><br>spec: 期望的状态，disired <span class="hljs-keyword">state</span>，由用户定义，最重要。每种资源支持的字段不一样。<br>status: 当前状态，current <span class="hljs-keyword">state</span>, 本字段由K8S集群维护。<br></code></pre></td></tr></table></figure><h3 id="通过命令查看如何定义资源-标有-required-意味是必填项"><a href="#通过命令查看如何定义资源-标有-required-意味是必填项" class="headerlink" title="通过命令查看如何定义资源 (标有 required 意味是必填项)"></a>通过命令查看如何定义资源 (标有 required 意味是必填项)</h3><h4 id="kubectl-explain-命令语法："><a href="#kubectl-explain-命令语法：" class="headerlink" title="kubectl explain 命令语法："></a>kubectl explain 命令语法：</h4><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">kubectl <span class="hljs-keyword">explain</span> RESOURCE [<span class="hljs-keyword">options</span>]<br></code></pre></td></tr></table></figure><h4 id="示例："><a href="#示例：" class="headerlink" title="示例："></a>示例：</h4><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs crmsh"><span class="hljs-comment">#获取pods资源及其字段的文档</span><br>kubectl explain pods<br><br><span class="hljs-comment">#获取pods资源的特定字段的文档（只要字段后面有&lt;Object&gt;关键字就表示有二级字段）</span><br>kubectl explain pods.<span class="hljs-keyword">spec</span>.containers<br></code></pre></td></tr></table></figure><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs gauss">[root<span class="hljs-comment">@master app]# kubectl explain pod             查看如何定义pod</span><br><span class="hljs-comment">KIND:     Pod</span><br><span class="hljs-comment">VERSION:  v1</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">DESCRIPTION:</span><br><span class="hljs-comment">     Pod is a collection of containers that can run on a host. This resource is</span><br><span class="hljs-comment">     created by clients and scheduled onto hosts.</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">FIELDS:</span><br><span class="hljs-comment">   apiVersion   &lt;string&gt;</span><br><span class="hljs-comment">     APIVersion defines the versioned schema of this representation of an</span><br><span class="hljs-comment">     object. Servers should convert recognized schemas to the latest internal</span><br><span class="hljs-comment">     value, and may reject unrecognized values. More info:</span><br><span class="hljs-comment">     https://git.k8s.io/community/contributors/devel/api-conventions.md#resources</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">   kind &lt;string&gt;</span><br><span class="hljs-comment">     Kind is a string value representing the REST resource this object</span><br><span class="hljs-comment">     represents. Servers may infer this from the endpoint the client submits</span><br><span class="hljs-comment">     requests to. Cannot be updated. In CamelCase. More info:</span><br><span class="hljs-comment">     https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">   metadata &lt;Object&gt;</span><br><span class="hljs-comment">     Standard object&#x27;s metadata. More info:</span><br><span class="hljs-comment">           https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">   spec &lt;Object&gt;</span><br><span class="hljs-comment">     Specification of the desired behavior of the pod. More info:</span><br><span class="hljs-comment">     https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">   status   &lt;Object&gt;</span><br><span class="hljs-comment">     Most recently observed status of the pod. This data may not be up to date.</span><br><span class="hljs-comment">     Populated by the system. Read-only. More info:</span><br><span class="hljs-comment">     https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status</span><br></code></pre></td></tr></table></figure><blockquote><p>注释：map类型的不需要在前面加“-”线，list类型的需要在前面加“-”线</p></blockquote><h3 id="定义一个简单的资源清单："><a href="#定义一个简单的资源清单：" class="headerlink" title="定义一个简单的资源清单："></a>定义一个简单的资源清单：</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">apps/v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Deployment</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">nginx-ye</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">kube-system</span><br>  <span class="hljs-attr">labels:</span><br>    <span class="hljs-attr">app:</span> <span class="hljs-string">myapp</span>              <span class="hljs-comment">#deployment的labels</span><br><span class="hljs-attr">spec:</span><br>    <span class="hljs-attr">replicas:</span> <span class="hljs-number">5</span><br>    <span class="hljs-attr">selector:</span><br>      <span class="hljs-attr">matchLabels:</span><br>        <span class="hljs-attr">app:</span> <span class="hljs-string">frontend</span><br>    <span class="hljs-attr">template:</span><br>      <span class="hljs-attr">metadata:</span><br>        <span class="hljs-attr">labels:</span><br>          <span class="hljs-attr">app:</span> <span class="hljs-string">frontend</span>      <span class="hljs-comment">#pods的labels</span><br>      <span class="hljs-attr">spec:</span><br>        <span class="hljs-attr">containers:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">nginx</span><br>          <span class="hljs-attr">image:</span> <span class="hljs-string">nginx:1.7.9</span><br></code></pre></td></tr></table></figure><h3 id="kubectl-create-命令"><a href="#kubectl-create-命令" class="headerlink" title="kubectl create 命令:"></a>kubectl create 命令:</h3><h4 id="描述："><a href="#描述：" class="headerlink" title="描述："></a>描述：</h4><blockquote><p>通过配置文件名或stdin创建一个集群资源对象。支持JSON和YAML格式的文件。</p></blockquote><h4 id="语法："><a href="#语法：" class="headerlink" title="语法："></a>语法：</h4><figure class="highlight sas"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sas">kubectl <span class="hljs-keyword">create</span> -f <span class="hljs-keyword">FILENAME</span> [<span class="hljs-keyword">options</span>]<br></code></pre></td></tr></table></figure><h4 id="示例"><a href="#示例" class="headerlink" title="示例:"></a>示例:</h4><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">通过pod.json文件创建资源。<br>kubectl <span class="hljs-keyword">create</span> -f pod.json<br><br>根据docker-registry.yaml文件创建资源。<br>kubectl <span class="hljs-keyword">create</span> -f docker-registry.yaml<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Kubectl 命令详解</title>
    <link href="/2019/08/23/Kubectl-Command-details/"/>
    <url>/2019/08/23/Kubectl-Command-details/</url>
    
    <content type="html"><![CDATA[<h3 id="kubectl-describe命令："><a href="#kubectl-describe命令：" class="headerlink" title="kubectl describe命令："></a>kubectl describe命令：</h3><p>输出指定的一个或多个资源的详细信息</p><h4 id="语法："><a href="#语法：" class="headerlink" title="语法："></a>语法：</h4><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">kubectl describe (-f FILENAME | <span class="hljs-keyword">TYPE</span> [NAME_PREFIX | -l label] | <span class="hljs-keyword">TYPE</span>/<span class="hljs-type">NAME</span>) [<span class="hljs-keyword">options</span>]<br></code></pre></td></tr></table></figure><h4 id="示例："><a href="#示例：" class="headerlink" title="示例："></a>示例：</h4><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs maxima"># 查看一个node<br>kubectl <span class="hljs-built_in">describe</span> nodes master<br><br># 查看一个pod<br>kubectl <span class="hljs-built_in">describe</span> pods/nginx<br><br># 查看pod.json中的资源类型和名称指定的pod<br>kubectl <span class="hljs-built_in">describe</span> -f pod.json<br><br># 查看所有的pod<br>kubectl <span class="hljs-built_in">describe</span> pods<br><br># 查看所有包含<span class="hljs-built_in">label</span> name=myLabel的pod<br>kubectl <span class="hljs-built_in">describe</span> po -l name=myLabel<br><br># 查看deployments副本控制中被名为nginx管理的pod<br>kubectl <span class="hljs-built_in">describe</span> pods nginx -n kube-<span class="hljs-built_in">system</span><br><br># 查看kube-<span class="hljs-built_in">system</span>名称空间service中名称为ye-nginx-service的详细信息<br>kubectl <span class="hljs-built_in">describe</span> svc/ye-nginx-service -n kube-<span class="hljs-built_in">system</span><br></code></pre></td></tr></table></figure><h3 id="kubectl-run-命令："><a href="#kubectl-run-命令：" class="headerlink" title="kubectl run 命令："></a>kubectl run 命令：</h3><ul><li>创建并运行一个或多个容器镜像。</li><li>创建一个deployment 或job 来管理容器。</li></ul><h4 id="语法：-1"><a href="#语法：-1" class="headerlink" title="语法："></a>语法：</h4><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros">kubectl <span class="hljs-built_in">run</span> NAME <span class="hljs-attribute">--image</span>=image [<span class="hljs-attribute">--env</span>=<span class="hljs-string">&quot;key=value&quot;</span>] [<span class="hljs-attribute">--port</span>=port] [<span class="hljs-attribute">--replicas</span>=replicas] [<span class="hljs-attribute">--dry-run</span>=bool]<br>[<span class="hljs-attribute">--overrides</span>=inline-json] [--command] -- [COMMAND] [args<span class="hljs-built_in">..</span>.] [options]<br></code></pre></td></tr></table></figure><h4 id="示例：-1"><a href="#示例：-1" class="headerlink" title="示例："></a>示例：</h4><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs routeros">启动nginx实例，默认是创建在default名称空间<br>kubectl <span class="hljs-built_in">run</span> nginx <span class="hljs-attribute">--image</span>=nginx<br><br>创建到指定的kube-system空间中<br>kubectl <span class="hljs-built_in">run</span> nginx <span class="hljs-attribute">--image</span>=nginx:1.8 <span class="hljs-attribute">--replicas</span>=5 -l <span class="hljs-attribute">name</span>=nginx -n kube-system<br><br>启动hazelcast实例，暴露容器端口 5701。<br>kubectl <span class="hljs-built_in">run</span> hazelcast <span class="hljs-attribute">--image</span>=hazelcast <span class="hljs-attribute">--port</span>=5701<br><br>启动nginx实例，设置副本数5。<br>kubectl <span class="hljs-built_in">run</span> nginx <span class="hljs-attribute">--image</span>=nginx <span class="hljs-attribute">--replicas</span>=5<br><br>启动一个名为busybox的实例，镜像busybox，并且进入容器内。<br>kubectl <span class="hljs-built_in">run</span> -i -t busybox <span class="hljs-attribute">--image</span>=busybox <span class="hljs-attribute">--restart</span>=Never<br></code></pre></td></tr></table></figure><h3 id="kubectl-delete-命令："><a href="#kubectl-delete-命令：" class="headerlink" title="kubectl delete 命令："></a>kubectl delete 命令：</h3><p>通过文件名、控制台输入、资源名或者label selector删除资源。接受JSON和YAML格式的描述文件。</p><p>只能指定以下参数类型中的一种：文件名、资源类型和名称、资源类型和label selector。 注意：delete命令不检查资源版本，如果有人在你进行删除操作的同时进行更新操作，他所做的更新将随资源同时被删除。</p><h4 id="语法"><a href="#语法" class="headerlink" title="语法:"></a>语法:</h4><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">kubectl <span class="hljs-keyword">delete</span> ([-f FILENAME] | <span class="hljs-keyword">TYPE</span> [(<span class="hljs-type">NAME</span> | -l label | <span class="hljs-comment">--all)]) [options]</span><br></code></pre></td></tr></table></figure><h4 id="示例：-2"><a href="#示例：-2" class="headerlink" title="示例："></a>示例：</h4><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">使用 pod.json中指定的资源类型和名称删除pod。<br>kubectl <span class="hljs-keyword">delete</span> -f ./pod.json<br><br>根据传入stdin的<span class="hljs-type">JSON</span>所指定的类型和名称删除pod。<br>cat pod.json | kubectl <span class="hljs-keyword">delete</span> -f -<br><br>删除名为“baz”和“foo”的Pod和Service。<br>kubectl <span class="hljs-keyword">delete</span> pod,service baz foo<br><br>删除 Label <span class="hljs-type">name</span> = myLabel的pod和Service。<br>kubectl <span class="hljs-keyword">delete</span> pods,services -l <span class="hljs-type">name</span>=myLabel<br><br>强制删除dead node上的pod<br>kubectl <span class="hljs-keyword">delete</span> pod foo <span class="hljs-comment">--grace-period=0 --force</span><br><br>删除所有pod<br>kubectl <span class="hljs-keyword">delete</span> pods <span class="hljs-comment">--all</span><br><br>删除deployments控制器中名字为nginx<br>kubectl <span class="hljs-keyword">delete</span> deployments nginx<br><br>删除kube-<span class="hljs-keyword">system</span>名称空间中的nginx<br>kubectl <span class="hljs-keyword">delete</span> deployments nginx -n kube-<span class="hljs-keyword">system</span> <br></code></pre></td></tr></table></figure><p>默认情况下，所有删除在30秒内都是正常的。<br><code>kubectl delete</code>命令支持<code>-grace-period = &lt;seconds&gt;</code> 选项，该选项允许用户覆盖默认值并指定自己的值。值<code>0</code>强制删除<code>pod</code>.<br>在<code>kubectl version&gt; = 1.5</code>中，必须指定一个附加标志<code>--force</code>以及<code>--grace-period = 0</code>才能执行强制删除。</p><h3 id="kubectl-expose命令"><a href="#kubectl-expose命令" class="headerlink" title="kubectl expose命令:"></a>kubectl expose命令:</h3><p>将资源暴露为新的Kubernetes Service。</p><h4 id="语法-1"><a href="#语法-1" class="headerlink" title="语法:"></a>语法:</h4><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros">kubectl expose (-f FILENAME |<span class="hljs-built_in"> TYPE </span>NAME) [<span class="hljs-attribute">--port</span>=port] [<span class="hljs-attribute">--protocol</span>=TCP|UDP] [<span class="hljs-attribute">--target-port</span>=number-or-name]<br>[<span class="hljs-attribute">--name</span>=name] [<span class="hljs-attribute">--external-ip</span>=external-ip-of-service] [<span class="hljs-attribute">--type</span>=type] [options]<br></code></pre></td></tr></table></figure><h4 id="示例"><a href="#示例" class="headerlink" title="示例:"></a>示例:</h4><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs routeros">为deployments的nginx创建service，并通过Service的80端口转发至容器的8000端口上。<br>kubectl expose rc nginx <span class="hljs-attribute">--port</span>=80 <span class="hljs-attribute">--target-port</span>=8000<br><br>由“nginx-controller.yaml”中指定的type和name标识的RC创建Service，并通过Service的80端口转发至容器的8000端口上。<br>kubectl expose -f nginx-controller.yaml <span class="hljs-attribute">--port</span>=80 <span class="hljs-attribute">--target-port</span>=8000<br><br>暴露指定空间中的资源，例如下面指定暴露kube-system中的nginx资源暴露service名称为ye-nginx-service暴露的端口是80，容器的端口也是80（target-port）。<br>kubectl expose deployments nginx  <span class="hljs-attribute">--port</span>=80 <span class="hljs-attribute">--protocol</span>=TCP <span class="hljs-attribute">--target-port</span>=80  <span class="hljs-attribute">--name</span>=ye-nginx-service -n kube-system<br></code></pre></td></tr></table></figure><h3 id="kubectl-get-命令："><a href="#kubectl-get-命令：" class="headerlink" title="kubectl get 命令："></a>kubectl get 命令：</h3><p>获取列出一个或多个资源的信息。</p><h4 id="可以使用的资源包括："><a href="#可以使用的资源包括：" class="headerlink" title="可以使用的资源包括："></a>可以使用的资源包括：</h4><ul><li>componentstatuses (缩写 cs)</li><li>deployments (缩写 deploy)</li><li>namespaces (缩写 ns)</li><li>nodes (缩写 no)</li><li>pods (缩写 po)</li><li>replicasets (缩写 rs)</li><li>services (缩写 svc)</li></ul><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs coq">kubectl get [(-o|<span class="hljs-type">--output</span>=)json|<span class="hljs-type">yaml</span>|<span class="hljs-type">wide</span>|<span class="hljs-type">custom</span>-columns=...|<span class="hljs-type">custom</span>-columns-file=...|<span class="hljs-type">go</span>-template=...|<span class="hljs-type">go</span>-template-file=...|<span class="hljs-type">jsonpath</span>=...|<span class="hljs-type">jsonpath</span>-file=...] (TYPE[.VERSION][.GROUP] [NAME | <span class="hljs-type">-l</span> label] | <span class="hljs-type">TYPE</span>[.VERSION][.GROUP]/NAME ...) [flags] [options]<br></code></pre></td></tr></table></figure><h4 id="示例-1"><a href="#示例-1" class="headerlink" title="示例"></a>示例</h4><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs routeros">列出所有运行的Pod信息。<br>kubectl <span class="hljs-built_in">get</span> pods<br><br>列出Pod以及运行Pod节点信息。<br>kubectl <span class="hljs-built_in">get</span> pods -o wide<br><br>列出Pod以及运行Pod节点信息以及labels信息。<br>kubectl <span class="hljs-built_in">get</span> pods -o wide --show-labels<br><br>查看指定名称空间的详细信息<br>kubectl <span class="hljs-built_in">get</span> pods -n kube-system -o wide<br><br>列出指定NAME的信息。<br>kubectl <span class="hljs-built_in">get</span> deployments nginx -n kube-system<br><br>列出组件的状态信息<br>kubectl <span class="hljs-built_in">get</span> cs<br><br>列出kubernetes名称空间<br>kubectl <span class="hljs-built_in">get</span> ns<br><br>查看kubenetes节点信息<br>kubectl <span class="hljs-built_in">get</span> nodes<br><br>查看default中的service服务<br>kubectl <span class="hljs-built_in">get</span> svc<br><br>查看kube-system中的service服务<br>kubectl <span class="hljs-built_in">get</span> svc -n kube-system<br><br>查看kubu-system中service服务的详细信息和label标签<br>kubectl <span class="hljs-built_in">get</span> svc -n kube-system --show-labels -o wide<br></code></pre></td></tr></table></figure><h3 id="kubectl-scale-命令："><a href="#kubectl-scale-命令：" class="headerlink" title="kubectl scale 命令："></a>kubectl scale 命令：</h3><p>扩容或缩容 Deployment、ReplicaSet、Replication Controller或 Job 中Pod数量。<br>scale也可以指定多个前提条件，如：当前副本数量或 –resource-version ，进行伸缩比例设置前，系统会先验证前提条件是否成立。</p><h4 id="语法：-2"><a href="#语法：-2" class="headerlink" title="语法："></a>语法：</h4><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">kubectl scale [<span class="hljs-attribute">--resource-version</span>=version] [<span class="hljs-attribute">--current-replicas</span>=count] <span class="hljs-attribute">--replicas</span>=COUNT (-f FILENAME |<span class="hljs-built_in"> TYPE </span>NAME) [options]<br></code></pre></td></tr></table></figure><h4 id="示例：-3"><a href="#示例：-3" class="headerlink" title="示例："></a>示例：</h4><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs routeros">将deployments副本控制器中名为nginx的pod副本数设置为3。<br>kubectl scale <span class="hljs-attribute">--replicas</span>=3 deployments nginx -n kube-system<br><br>将由“foo.yaml”配置文件中指定的资源对象和名称标识的Pod资源副本设为3。<br>kubectl scale <span class="hljs-attribute">--replicas</span>=3 -f foo.yaml<br><br>如果当前副本数为2，则将其扩展至3。<br>kubectl scale <span class="hljs-attribute">--current-replicas</span>=2 <span class="hljs-attribute">--replicas</span>=3 deployment/mysql<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Kubernetes 命令大全</title>
    <link href="/2019/08/23/Kubernetes-command/"/>
    <url>/2019/08/23/Kubernetes-command/</url>
    
    <content type="html"><![CDATA[<h3 id="状态查询"><a href="#状态查询" class="headerlink" title="状态查询"></a>状态查询</h3><figure class="highlight nsis"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs nsis"><span class="hljs-comment"># 查看集群信息</span><br>kubectl cluster-info<br><span class="hljs-params">system</span>ctl status kube-apiserver<br><span class="hljs-params">system</span>ctl status kubelet<br><span class="hljs-params">system</span>ctl status kube-proxy<br><span class="hljs-params">system</span>ctl status kube-scheduler<br><span class="hljs-params">system</span>ctl status kube-controller-manager<br><span class="hljs-params">system</span>ctl status docker<br></code></pre></td></tr></table></figure><h3 id="node相关"><a href="#node相关" class="headerlink" title="node相关"></a>node相关</h3><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-comment"># 查看namespaces</span><br>kubectl <span class="hljs-built_in">get</span> namespaces<br>kubectl <span class="hljs-built_in">get</span> ns<br><br><span class="hljs-comment"># 为节点增加lable</span><br>kubectl label nodes 10.126.72.31 <span class="hljs-attribute">points</span>=test<br><br><span class="hljs-comment"># 查看节点和lable</span><br>kubectl <span class="hljs-built_in">get</span> nodes --show-labels<br><br><span class="hljs-comment"># 查看状态</span><br>kubectl <span class="hljs-built_in">get</span> componentstatuses<br>kubectl <span class="hljs-built_in">get</span> cs<br><br><span class="hljs-comment"># Node的隔离与恢复</span><br><span class="hljs-comment">## 隔离</span><br>kubectl cordon k8s-node1<br><br><span class="hljs-comment">## 恢复</span><br>kubectl uncordon k8s-node1<br></code></pre></td></tr></table></figure><h3 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h3><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-comment"># 查看所有nodes节点</span><br>kubectl <span class="hljs-built_in">get</span> nodes<br><br><span class="hljs-comment"># 查看一个node</span><br>$ kubectl describe nodes node1<br><br><span class="hljs-comment"># 通过yaml文件查询</span><br>kubectl <span class="hljs-built_in">get</span> -f xxx-yaml/<br><br><span class="hljs-comment"># endpoints端</span><br>kubectl <span class="hljs-built_in">get</span> endpoints<br><br><span class="hljs-comment">#### 查看pods ####</span><br><br><span class="hljs-comment"># 查看指定空间`kube-system`的pods</span><br>kubectl <span class="hljs-built_in">get</span> po -n kube-system<br><br><span class="hljs-comment"># 查看所有空间的</span><br>kubectl <span class="hljs-built_in">get</span> pods -o wide --all-namespaces<br><br><span class="hljs-comment"># 其他的写法</span><br>kubectl <span class="hljs-built_in">get</span> pod -o wide <span class="hljs-attribute">--namespace</span>=kube-system<br><br><span class="hljs-comment"># 获取svc</span><br>kubectl <span class="hljs-built_in">get</span> svc --all-namespaces<br><br><span class="hljs-comment"># 其他写法</span><br>kubectl <span class="hljs-built_in">get</span> services --all-namespaces<br><br><span class="hljs-comment"># 通过lable查询</span><br>kubectl <span class="hljs-built_in">get</span> pods -l <span class="hljs-attribute">app</span>=nginx -o yaml|grep podIP<br><br><span class="hljs-comment"># 当我们发现一个pod迟迟无法创建时，可以使用describe来查看详细信息。</span><br>kubectl describe pod xxx<br></code></pre></td></tr></table></figure><h3 id="删除所有pod"><a href="#删除所有pod" class="headerlink" title="删除所有pod"></a>删除所有pod</h3><figure class="highlight nsis"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs nsis"><span class="hljs-comment"># 删除所有pods</span><br>kubectl <span class="hljs-keyword">delete</span> pods --<span class="hljs-literal">all</span><br><br><span class="hljs-comment"># 删除所有包含某个lable的pod和serivce</span><br>kubectl <span class="hljs-keyword">delete</span> pods,services -l <span class="hljs-keyword">name</span>=&lt;lable-<span class="hljs-keyword">name</span>&gt;<br><br><span class="hljs-comment"># 删除ui server,然后重建</span><br>kubectl <span class="hljs-keyword">delete</span> deployments kubernetes-dashboard --namespace=kube-<span class="hljs-params">system</span><br>kubectl <span class="hljs-keyword">delete</span> services kubernetes-dashboard --namespace=kube-<span class="hljs-params">system</span><br><br><span class="hljs-comment"># 强制删除部署</span><br>kubectl <span class="hljs-keyword">delete</span> deployment kafka-<span class="hljs-number">1</span><br><br><span class="hljs-comment"># 删除rc</span><br>kubectl <span class="hljs-keyword">delete</span> rs --<span class="hljs-literal">all</span> &amp;&amp; kubectl <span class="hljs-keyword">delete</span> rc --<span class="hljs-literal">all</span><br><br><span class="hljs-comment">## 强制删除Terminating状态的pod</span><br>kubectl <span class="hljs-keyword">delete</span> deployment kafka-<span class="hljs-number">1</span> --grace-period=<span class="hljs-number">0</span> --<span class="hljs-literal">force</span><br></code></pre></td></tr></table></figure><h3 id="滚动"><a href="#滚动" class="headerlink" title="滚动"></a>滚动</h3><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli"><span class="hljs-comment"># 升级</span><br>kubectl apply -f xxx.yaml <span class="hljs-params">--record</span><br><br><span class="hljs-comment"># 回滚</span><br>kubectl rollout undo deployment javademo<br><br><span class="hljs-comment"># 查看滚动升级记录</span><br>kubectl rollout <span class="hljs-keyword">history</span> deployment &#123;名称&#125;<br></code></pre></td></tr></table></figure><h3 id="查看日志"><a href="#查看日志" class="headerlink" title="查看日志"></a>查看日志</h3><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-comment"># 查看指定镜像的日志</span><br>kubectl logs -f kube-dns-699984412-vz1q6 -n kube-system<br><br>kubectl logs <span class="hljs-attribute">--tail</span>=10 nginx  <br><br><span class="hljs-comment">#指定其中一个查看日志</span><br>kubectl logs kube-dns-699984412-n5zkz -c kubedns <span class="hljs-attribute">--namespace</span>=kube-system<br>kubectl logs kube-dns-699984412-vz1q6 -c dnsmasq <span class="hljs-attribute">--namespace</span>=kube-system<br>kubectl logs kube-dns-699984412-mqb14 -c sidecar <span class="hljs-attribute">--namespace</span>=kube-system<br><br><span class="hljs-comment"># 看日志</span><br>journalctl -f<br></code></pre></td></tr></table></figure><h3 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h3><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-comment"># 扩展副本</span><br>kubectl scale rc xxxx <span class="hljs-attribute">--replicas</span>=3<br>kubectl scale rc mysql <span class="hljs-attribute">--replicas</span>=1<br>kubectl scale <span class="hljs-attribute">--replicas</span>=3 -f foo.yaml<br></code></pre></td></tr></table></figure><h3 id="执行"><a href="#执行" class="headerlink" title="执行"></a>执行</h3><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-comment"># 启动</span><br>nohup kubectl<span class="hljs-built_in"> proxy </span><span class="hljs-attribute">--address</span>=<span class="hljs-string">&#x27;10.1.70.247&#x27;</span> <span class="hljs-attribute">--port</span>=8001 <span class="hljs-attribute">--accept-hosts</span>=<span class="hljs-string">&#x27;^*$&#x27;</span> &gt;/dev/<span class="hljs-literal">null</span> 2&gt;&amp;1 &amp;<br><br><span class="hljs-comment"># 进入镜像</span><br>kubectl exec kube-dns-699984412-vz1q6 -n kube-system -c kubedns ifconfig<br>kubectl exec kube-dns-699984412-vz1q6 -n kube-system -c kubedns ifconfig /bin/bash<br><br><span class="hljs-comment"># 执行镜像内命令</span><br>kubectl exec kube-dns-4140740281-pfjhr -c etcd <span class="hljs-attribute">--namespace</span>=kube-system etcdctl <span class="hljs-built_in">get</span> /skydns/local/cluster/default/redis-master<br></code></pre></td></tr></table></figure><h3 id="无限循环命令"><a href="#无限循环命令" class="headerlink" title="无限循环命令"></a>无限循环命令</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-keyword">while</span> <span class="hljs-literal">true</span>; <span class="hljs-keyword">do</span> <span class="hljs-built_in">sleep</span> 1; <span class="hljs-keyword">done</span><br></code></pre></td></tr></table></figure><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs gauss"><span class="hljs-meta"># 创建和删除</span><br>kubectl <span class="hljs-keyword">create</span> -f dashboard-controller.yaml<br>kubectl <span class="hljs-keyword">delete</span> -f dashboard-dashboard.yaml<br><br><span class="hljs-meta"># 查看指定pods的环境变量</span><br>kubectl <span class="hljs-built_in">exec</span> xxx env<br><br><span class="hljs-meta"># 判断dns是否通</span><br>kubectl <span class="hljs-built_in">exec</span> busybox -- nslookup kube-dns.kube-<span class="hljs-keyword">system</span><br><br><span class="hljs-meta"># kube-proxy状态</span><br>systemctl status kube-proxy -l<br><br><span class="hljs-meta"># token的</span><br>kubectl get serviceaccount/kube-dns --namespace=kube-<span class="hljs-keyword">system</span> -o yaml|grep <span class="hljs-built_in">token</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Kubernetes Namespace介绍</title>
    <link href="/2019/08/23/Kubernetes-Namespace/"/>
    <url>/2019/08/23/Kubernetes-Namespace/</url>
    
    <content type="html"><![CDATA[<p>Namespace（命名空间）是Kubernetes系统中的另一个非常重要的概念，Namespace在很多情况下用于实现多租户的资源隔离。Nameaspace通过将集群内部的资源对象“分配”到不同的Namespce中，形成逻辑上分组的不同项目、小组或用户组，便于不同的分组在共享使用整个集群的资源的同时还能被分别管理。</p><p>Kubernetes集群在启动后，会创建一个名为“default”的Namespace，通过kubectl可以查看到：</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs x86asm">$ kubectl get namespaces<br>NAME          STATUS    AGE<br><span class="hljs-meta">default</span>       Active    <span class="hljs-number">21h</span><br>docker        Active    <span class="hljs-number">21h</span><br>kube-<span class="hljs-meta">public</span>   Active    <span class="hljs-number">21h</span><br>kube-system   Active    <span class="hljs-number">21h</span><br></code></pre></td></tr></table></figure><p>接下来，如果不特别指明Namespace，则用户创建的Pod、RC、Service都被系统创建到这个默认的名为default的Namespace中。</p><p>Namespace的定义很简单。如下所示的yaml定义了名为development的Namespace。</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">apiVersion:</span> v1<br><span class="hljs-symbol">kind:</span> Namespace<br><span class="hljs-symbol">metadata:</span><br><span class="hljs-symbol">  name:</span> development<br></code></pre></td></tr></table></figure><p>一旦创建了Namespace，我们在创建资源对象时就可以指定这个资源对象属于哪个Namespace。比如在下面的例子中，我们定义了一个名为busybox的Pod，放人development这个Namespace里：</p><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-attribute">apiVersion</span><span class="hljs-punctuation">:</span> <span class="hljs-string">v1</span><br><span class="hljs-attribute">kind</span><span class="hljs-punctuation">:</span> <span class="hljs-string">Pod</span><br><span class="hljs-attribute">metadata</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">busybox</span><br>  <span class="hljs-attribute">namespace</span><span class="hljs-punctuation">:</span> <span class="hljs-string">development</span><br><span class="hljs-attribute">spec</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">containers</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">image: busybox</span><br>    <span class="hljs-attribute">command</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">sleep</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;3600&quot;</span><br>    <span class="hljs-attribute">name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">busybox</span><br></code></pre></td></tr></table></figure><p>此时，使用kubectl get命令查看将无法显示：</p><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs fortran"># kubectl get pods<br><span class="hljs-keyword">NAME</span>                       READY     <span class="hljs-keyword">STATUS</span>    RESTARTS   AGE<br></code></pre></td></tr></table></figure><p>这是因为如果不加参数，则kubectl get 命令将仅显示属于“default”命名空间的资源对象。</p><p>可以在kubectl命令中加入–namespace参数来查看某个命名空间中的对象：</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs angelscript"># kubectl <span class="hljs-keyword">get</span> pods --<span class="hljs-keyword">namespace</span>=<span class="hljs-symbol">development</span><br><span class="hljs-symbol">NAME</span>      <span class="hljs-symbol">READY</span>     <span class="hljs-symbol">STATUS</span>    <span class="hljs-symbol">RESTARTS</span>   <span class="hljs-symbol">AGE</span><br><span class="hljs-symbol">busybox</span>   <span class="hljs-symbol">1</span>/<span class="hljs-symbol">1</span>       <span class="hljs-symbol">Running</span>   <span class="hljs-symbol">0</span>          <span class="hljs-symbol">2m</span><br></code></pre></td></tr></table></figure><p>当我们給每个租户创建一个Namespace来实现多租户的资源隔离时，还能结合Kubernetes的资源配额管理，限定不同租户能占用的资源，例如CPU使用量、内存使用量等。关于资源配额管理等问题，在后面的章节中会详细介绍。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>自动扩容之Horizontal Pod Autoscaling（HPA）</title>
    <link href="/2019/08/22/Horizontal-Pod-Autoscaling/"/>
    <url>/2019/08/22/Horizontal-Pod-Autoscaling/</url>
    
    <content type="html"><![CDATA[<p>我们通过手动执行kubectl scale命令，可以实现Pod扩容。但是，分布式系统要能够根据当前负载的变化情况自动触发水平扩展或缩容的行为，因为这一过程可能是频繁发生的、不可预料的，所以手动控制的方式是不现实的。</p><p>因此，在Kubernetes1.1版本中首次发布了这一重量级新特性—–Horizontal Pod Autoscaler。</p><p>Horizontal Pod Autoscaler简称HAP，意思是Pod横向自动扩容，与之前的RC、Deployment一样，也属于一种Kubernetes资源对象。通过追踪分析RC控制的所有目标Pod的负载来自动水平扩容，如果系统负载超过预定值，就开始增加Pod的个数，如果低于某个值，就自动减少Pod的个数。</p><h3 id="目前，可以有以下两种方式作为Pod负载的度量指标："><a href="#目前，可以有以下两种方式作为Pod负载的度量指标：" class="headerlink" title="目前，可以有以下两种方式作为Pod负载的度量指标："></a>目前，可以有以下两种方式作为Pod负载的度量指标：</h3><p>1、CPU utilization percentageb，<br>2、应用程序自定义的度量指标，比如服务在每秒内的相应的请求数（TPS或QPS）。</p><p>CPU utilization percentage是一个算术平均值，即目标pod所有副本自身的CPU利用率的平均值。一个Pod自身的CPU利用率是该Pod当前CPU使用量除以它的Pod request的值。比如当我们定义一个Pod的pod request为0.4，而当前pod的cpu使用量为0.2，则使用率为50%。如此可以得出一个平均值，如果某一个时刻CPU utilization percentage超过80%，则意味着当前Pod副本不足以支撑接下来更多的请求，需要进行动态扩容。而当请求高峰时段过去后，Pod CPU利用率又会降下来，此时对应的Pod副本数应该自动减少到一个合理的水平。</p><p>CPU utilization percentage计算过程使用到的Pod的CPU使用量通常是1分钟的平均值。</p><h3 id="条件"><a href="#条件" class="headerlink" title="条件"></a>条件</h3><p>HPA通过定期（定期轮询的时间通过–horizontal-pod-autoscaler-sync-period选项来设置，默认的时间为30秒）通过Status.PodSelector来查询pods的状态，获得pod的CPU使用率。然后，通过现有pods的CPU使用率的平均值（计算方式是最近的pod使用量（最近一分钟的平均值，从heapster中获得）除以设定的每个Pod的CPU使用率限额）跟目标使用率进行比较，并且在扩容时，还要遵循预先设定的副本数限制：MinReplicas &lt;&#x3D; Replicas &lt;&#x3D; MaxReplicas。</p><p>计算扩容后Pod的个数：sum(最近一分钟内某个Pod的CPU使用率的平均值)&#x2F;CPU使用上限的整数+1</p><h3 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h3><p>1、创建HPA资源，设定目标CPU使用率限额，以及最大、最小实例数<br>2、收集一组中（PodSelector）每个Pod最近一分钟内的CPU使用率，并计算平均值<br>3、读取HPA中设定的CPU使用限额<br>4、计算：平均值之和&#x2F;限额，求出目标调整的实例个数<br>5、目标调整的实例数不能超过1中设定的最大、最小实例数，如果没有超过，则扩容；超过，则扩容至最大的实例个数</p><h3 id="例外"><a href="#例外" class="headerlink" title="例外"></a>例外</h3><p>考虑到自动扩展的决策可能需要一段时间才会生效，例如当pod所需要的CPU负荷过大，从而运行一个新的pod进行分流，在创建过程中，系统的CPU使用量可能会有一个攀升的过程。所以，在每一次作出决策后的一段时间内，将不再进行扩展决策。对于ScaleUp而言，这个时间段为3分钟，Scaledown为5分钟。</p><p>HPA允许一定范围内的CPU使用量的不稳定，只有avg(CurrentPodsConsumption) &#x2F; Target小于90%或者大于110%时才会触发扩容或缩容，避免频繁扩容、缩容造成颠簸。</p><h3 id="为什么选择相对比率"><a href="#为什么选择相对比率" class="headerlink" title="为什么选择相对比率"></a>为什么选择相对比率</h3><p>为了简便，选用了相对比率（90%的CPU资源）而不是0.6个CPU core来描述扩容、缩容条件。如果选择使用绝对度量，用户需要保证目标（限额）要比请求使用的低，否则，过载的Pod未必能够消耗那么多，从而自动扩容永远不会被触发：假设设置CPU为1个核，那么这个pod只能使用1个核，可能Pod在过载的情况下也不能完全利用这个核，所以扩容不会发生。在修改申请资源时，还有同时调整扩容的条件，比如将1个core变为1.2core，那么扩容条件应该同步改为1.2core，真是太麻烦了，与自动扩容的目标相悖。</p><h3 id="下面是HPA定义的一个具体例子："><a href="#下面是HPA定义的一个具体例子：" class="headerlink" title="下面是HPA定义的一个具体例子："></a>下面是HPA定义的一个具体例子：</h3><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">apiVersion:</span> autoscaling/v1<br><span class="hljs-symbol">kind:</span> HorizontalPodAutoscaler<br><span class="hljs-symbol">metadata:</span><br><span class="hljs-symbol">  name:</span> java-apache<br><span class="hljs-symbol">  namespace:</span> default<br><span class="hljs-symbol">spec:</span><br><span class="hljs-symbol">  minReplicas:</span> <span class="hljs-number">1</span><br><span class="hljs-symbol">  maxReplicas:</span> <span class="hljs-number">10</span><br><span class="hljs-symbol">  scaleTargetRef:</span><br><span class="hljs-symbol">    kind:</span> Deployment<br><span class="hljs-symbol">    name:</span> java-apache<br><span class="hljs-symbol">  targetCPUUtilizationPercentage:</span> <span class="hljs-number">90</span><br></code></pre></td></tr></table></figure><p>根据上面的定义，我们可以知道，这个HPA控制的目标对象为一个名叫java-apache的Deployment里的Pod副本，当这些Pod副本的CPUUtilizationPercentage的值超过90%时会触发自动动态扩容行为，扩容或缩容时必须满足的一个约束条件是Pod的副本数要介于1与10之间。</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">kubectl autoscale deployment java-apache <span class="hljs-attribute">--cpu-percent</span>=90 <span class="hljs-attribute">--min</span>=1 <span class="hljs-attribute">--max</span>=10 <br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Kubernetes Deployment介绍</title>
    <link href="/2019/08/22/Kubernetes-Deployment-Overview/"/>
    <url>/2019/08/22/Kubernetes-Deployment-Overview/</url>
    
    <content type="html"><![CDATA[<p>Deployment是Kubernetes v1.2引入的概念，引入的目的是为了更好地解决Pod的编排问题。为此，Deployment在内部使用了Replica Set来实现目的，无论从Deployment的作用与目的，它的YAML定义，还是从它的具体命令行操作来看，我们都可以把它看作RC的一次升级，两者相似度超过90%。</p><p>Deployment相对于RC的一个最大升级是我们随时知道当前Pod“部署”的进度。实际上由于一个Pod的创建、调度、绑定节点及在目标Node上启动对应的容器这一完整过程需要一定的时间，所以我们期待系统启动N个Pod副本的目标状态，实际上是一个连续变化的“部署过程”导致的最终状态。</p><h3 id="Deployment的典型使用场景有以下几个。"><a href="#Deployment的典型使用场景有以下几个。" class="headerlink" title="Deployment的典型使用场景有以下几个。"></a>Deployment的典型使用场景有以下几个。</h3><ul><li>创建一个Deployment对象来生成对应的Replica Set并完成Pod副本的创建过程。</li><li>检查Deployment的状态来看部署动作是否完成（Pod副本的数量是否达到预期的值）。</li><li>更新Deployment以创建新的Pod（比如镜像升级）。</li><li>如果当前Deployment不稳定，则回滚到一个早先的Deployment版本。</li><li>暂停Deployment以便于一次性修改多个PodTemplateSpec的配置项，之后再恢复Deployment，进行新的发布。</li><li>扩展Deployment以应对高负载。</li><li>查看Deployment的状态，以此作为发布是否成功的指标。</li><li>清理不再需要的旧版本ReplicaSets。</li></ul><p>Deployment的定义与Replica Set的定义很类似，除了Kind类型有所区别：</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">apiVersion:</span> apps/v1                 apiVersion: apps/v1<br><span class="hljs-symbol">kind:</span> Deployment                    kind: ReplicaSet<br><span class="hljs-symbol">metadata:</span>                           metadata:<br><span class="hljs-symbol">  name:</span> nginx-deployment              name: nginx-repset<br></code></pre></td></tr></table></figure><p>下面我们通过运行一些例子来一起直观地感受这个新概念。首先创建一个名为tomcat-deployment.yaml的Deployment描述文件，内容如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">apps/v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Deployment</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">frontend</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">replicas:</span> <span class="hljs-number">1</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">matchLabels:</span><br>      <span class="hljs-attr">tier:</span> <span class="hljs-string">frontend</span><br>    <span class="hljs-attr">matchExpressions:</span><br>      <span class="hljs-bullet">-</span> &#123;<span class="hljs-attr">key:</span> <span class="hljs-string">tier</span>, <span class="hljs-attr">operator:</span> <span class="hljs-string">In</span>, <span class="hljs-attr">values:</span> [<span class="hljs-string">frontend</span>]&#125;<br>  <span class="hljs-attr">template:</span><br>    <span class="hljs-attr">metadata:</span><br>      <span class="hljs-attr">labels:</span><br>        <span class="hljs-attr">app:</span> <span class="hljs-string">app-demo</span><br>        <span class="hljs-attr">tier:</span> <span class="hljs-string">frontend</span><br>    <span class="hljs-attr">spec:</span><br>      <span class="hljs-attr">containers:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">tomcat-demo</span><br>        <span class="hljs-attr">image:</span> <span class="hljs-string">tomcat</span><br>        <span class="hljs-attr">imagePullPolicy:</span> <span class="hljs-string">IfNotPresent</span><br>        <span class="hljs-attr">ports:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">containerPort:</span> <span class="hljs-number">8080</span><br></code></pre></td></tr></table></figure><h3 id="运行下述命令创建Deploymeny"><a href="#运行下述命令创建Deploymeny" class="headerlink" title="运行下述命令创建Deploymeny:"></a>运行下述命令创建Deploymeny:</h3><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-comment"># kubectl create -f tomcat-deployment.yaml</span><br><span class="hljs-attribute">deployment</span> <span class="hljs-string">&quot;tomcat-deploy&quot;</span> created<br></code></pre></td></tr></table></figure><h3 id="运行下述命令查看Deployment的信息："><a href="#运行下述命令查看Deployment的信息：" class="headerlink" title="运行下述命令查看Deployment的信息："></a>运行下述命令查看Deployment的信息：</h3><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-comment"># kubectl get deployments</span><br><span class="hljs-attribute">NAME</span>            DESIRED     CURRENT     UP-TO-DATE      AVAILABLE   AGE<br><span class="hljs-attribute">tomcat</span>-deploy   <span class="hljs-number">1</span>           <span class="hljs-number">1</span>           <span class="hljs-number">1</span>               <span class="hljs-number">1</span>           <span class="hljs-number">4</span>m<br></code></pre></td></tr></table></figure><h3 id="对上述输出中涉及的数量解释如下："><a href="#对上述输出中涉及的数量解释如下：" class="headerlink" title="对上述输出中涉及的数量解释如下："></a>对上述输出中涉及的数量解释如下：</h3><ul><li>DESIRED：Pod副本数量的期望值，即Deployment里定义的Replica。</li><li>CURRENT：当前Replica的值，实际上是Deployment所创建的Replica Set里的Replica值，这个值不断增加，直到达到DESIRED为止，表明整个部署过程完成。</li><li>UP-TO-DATE：最新版本的Pod副本数量，用于指示在滚动升级的过程中，有多少个Pod副本已经成功升级。</li><li>AVAILABLE：当前集群中可用的Pod副本数量，即集群中当前存活的Pod数量。</li></ul><p>运行下述命令查看对应的Replica Set，我们看到它的命名与Deployment的名字有关系：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-comment"># kubectl get rs</span><br><span class="hljs-attribute">NAME</span>                        DESIRED     CURRENT     AGE<br><span class="hljs-attribute">tomcat</span>-deploy-<span class="hljs-number">1640611518</span>    <span class="hljs-number">1</span>           <span class="hljs-number">1</span>           <span class="hljs-number">1</span>m<br></code></pre></td></tr></table></figure><p>运行下述命令查看创建的Pod，我们发现Pod的命名以Deployment对应的Replica Set的名字为前缀，这种命名很清晰地表明了一个Replica Set创建了哪些Pod，对于滚动升级这种复杂的过程来说，很容易排查错误：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-comment"># kubectl get pods</span><br><span class="hljs-attribute">NAME</span>                            READY       STATUS      RESTARTS    AGE<br><span class="hljs-attribute">tomcat</span>-deploy-<span class="hljs-number">1640611518</span>-zhrsc  <span class="hljs-number">1</span>/<span class="hljs-number">1</span>         Running     <span class="hljs-number">0</span>           <span class="hljs-number">3</span>m<br></code></pre></td></tr></table></figure><p>运行kubectl describe deployments，可以清楚地看到Deployment控制的Pod的水平扩展过程。</p><p>Pod的管理对象，除了RC和Deployment，还包括ReplicaSet、DaemonSet、StatefulSet、Job等，分别用于不同的应用场景中，下面的会陆续介绍。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>kubernetes Pod控制器</title>
    <link href="/2019/08/22/kubernetes-Pod-controller/"/>
    <url>/2019/08/22/kubernetes-Pod-controller/</url>
    
    <content type="html"><![CDATA[<h3 id="Controller-Manager"><a href="#Controller-Manager" class="headerlink" title="Controller Manager"></a>Controller Manager</h3><p>Kubernetes 通常不会直接创建 Pod，而是通过 Controller 来管理 Pod 的。Controller 中定义了 Pod 的部署特性，比如有几个副本，在什么样的 Node 上运行等。为了满足不同的业务场景，Kubernetes 提供了多种 Controller，包括 Deployment、ReplicaSet、DaemonSet、StatefuleSet、Job 等，我们逐一讨论。</p><h3 id="Replication-controllers"><a href="#Replication-controllers" class="headerlink" title="Replication controllers"></a>Replication controllers</h3><p>Replication Controller（简称RC），本节对RC的概念进行深入描述。</p><p>RC是Kubernetes系统中的核心概念之一，简单来说，它其实是定义了一个期望的场景，即声明某种Pod的副本数量在任意时刻都符合某个预期值，所以RC的定义包括如下几个部分。</p><ul><li>Pod期待的副本数（replicas）。</li><li>用于筛选目标Pod的Label Selector。</li><li>当Pod的副本数量小于预期数量时，用于创建新Pod的Pod模版（template）。</li></ul><p>下面是一个完整的RC定义的例子，即确保拥有tier&#x3D;frontend标签的这个Pod（运行Tomcat容器）在整个Kubernetes集群中始终只有一个副本：</p><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-attribute">apiVersion</span><span class="hljs-punctuation">:</span> <span class="hljs-string">v1</span><br><span class="hljs-attribute">kind</span><span class="hljs-punctuation">:</span> <span class="hljs-string">ReplicationController</span><br><span class="hljs-attribute">metadata</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">frontend</span><br><span class="hljs-attribute">spec</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">replicas</span><span class="hljs-punctuation">:</span> <span class="hljs-string">1</span><br>  <span class="hljs-attribute">selector</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-attribute">tier</span><span class="hljs-punctuation">:</span> <span class="hljs-string">frontend</span><br><span class="hljs-attribute">template</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">metadata</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-attribute">labels</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-attribute">app</span><span class="hljs-punctuation">:</span> <span class="hljs-string">app-demo</span><br>      <span class="hljs-attribute">tier</span><span class="hljs-punctuation">:</span> <span class="hljs-string">frontend</span><br>  <span class="hljs-attribute">spec</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-attribute">containers</span><span class="hljs-punctuation">:</span><br>     <span class="hljs-bullet">-</span> <span class="hljs-string">name: tomcat-demo</span><br>       <span class="hljs-attribute">image</span><span class="hljs-punctuation">:</span> <span class="hljs-string">tomcat</span><br>       <span class="hljs-attribute">ports</span><span class="hljs-punctuation">:</span><br>       <span class="hljs-attribute">imagePullPolicy</span><span class="hljs-punctuation">:</span> <span class="hljs-string">IfNotPresent</span><br>       <span class="hljs-attribute">env</span><span class="hljs-punctuation">:</span><br>       <span class="hljs-bullet">-</span> <span class="hljs-string">name: GET_HOSTS_FROM</span><br>         <span class="hljs-attribute">value</span><span class="hljs-punctuation">:</span> <span class="hljs-string">dns</span><br>       <span class="hljs-attribute">ports</span><span class="hljs-punctuation">:</span><br>       <span class="hljs-bullet">-</span> <span class="hljs-string">containerPort: 80</span><br></code></pre></td></tr></table></figure><p>当我们定义了一个RC并提交到Kubernetes集群中以后，Master节点上的Controller Manager组件就得到通知，定期巡检系统中当前存活的目标Pod，并确保目标Pod实例的数量刚好等于此RC的期望值，如果有过多的Pod副本在运行，系统就会停掉一些Pod，否则系统就会再自动创建一些Pod。可以说，通过RC，Kubernetes实现了用户应用集群的高可用性，并且大大减少了系统管理员在传统IT环境中需要完成的许多手工运维工作（如主机监控脚本、应用监控脚本、故障恢复脚本等）。</p><p>下面我们以3个Node节点的集群为例，说明Kubernetes如何通过RC来实现Pod副本数量自动控制的机制。假如我们的RC里定义redis-slave这个Pod需要保持2个副本，系统将可能在其中的两个Node上创建Pod。如下图描述了在两个Node上创建redis-slave Pod的情形。</p><p><img src="/images/master.png" alt="master"></p><p>假设Node2上的Pod2意外终止，根据RC定义的replicas数量2，Kubernetes将会自动创建并启动一个新的Pod，以保住整个集群中始终有两个redis-slave Pod在运行。</p><h5 id="如下图所示，系统可能选择Node3或者Node1来创建一个新的Pod。"><a href="#如下图所示，系统可能选择Node3或者Node1来创建一个新的Pod。" class="headerlink" title="如下图所示，系统可能选择Node3或者Node1来创建一个新的Pod。"></a>如下图所示，系统可能选择Node3或者Node1来创建一个新的Pod。</h5><p><img src="/images/node1.png" alt="node1"></p><p>此外，在运行时，我们可以通过修改RC的副本数量，来实现Pod的动态缩放（Scaling）功能，还可以通过执行kubectl scale命令来一键完成：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-variable">$kubectl</span> scale rc redis-slave <span class="hljs-attribute">--replicas</span>=3<br>scaled<br></code></pre></td></tr></table></figure><h5 id="Scaling的执行结果如下图所示"><a href="#Scaling的执行结果如下图所示" class="headerlink" title="Scaling的执行结果如下图所示"></a>Scaling的执行结果如下图所示</h5><p><img src="/images/node2.png" alt="Scaling"></p><p>需要注意的是，删除RC并不会影响通过该RC已创建好的Pod。为了删除所有Pod，可以设置replicas的值为0，然后更新该RC。另外，kubectl提供了stop和delete命令来一次性删除RC和RC控制的全部Pod。</p><p>当我们的应用升级时，通常会通过Build一个新的Docker镜像，并用新的镜像版本来替代旧的版本的方式达到目的，在系统升级的过程中，我们希望是平滑的方式，比如当前系统中10个对应的旧版本的Pod，最佳的方式是旧版本的Pod每次停止一个，同时创建一个新版本的Pod，在整个升级过程中，此消彼长，而运行中的Pod数量始终是10个，几分钟以后，当所有的Pod都已经是最新版本时，升级过程完成。通过RC的机制，Kubernetes很容易就实现了这种高级实用的特性，被称为“滚动升级”（Rolling Update）。</p><h3 id="Replica-Set"><a href="#Replica-Set" class="headerlink" title="Replica Set"></a>Replica Set</h3><p>在新版本的 Kubernetes 中建议使用 ReplicaSet（简称为RS ）来取代 ReplicationController。官方解释为“下一代的RC”，它与RC当前存在的唯一区别是：Replica Sets支持基于集合的Label selector（Set-based selector），而RC只支持基于等式的Label Selector（equality-based selector），这使得Replica Set的功能更强，下面是等价于之前RC例子的Replica Set的定义（省去了Pod模版部分的内容）</p><h3 id="ReplicaSet的创建"><a href="#ReplicaSet的创建" class="headerlink" title="ReplicaSet的创建"></a>ReplicaSet的创建</h3><p>Kubernetes官方强烈建议避免直接使用ReplicaSet，而应该通过Deployment来创建RS和Pod。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">apps/v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">ReplicaSet</span><br><span class="hljs-string">metadata：</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">frontend</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">matchLabels:</span><br>      <span class="hljs-attr">tier:</span> <span class="hljs-string">frontend</span><br>    <span class="hljs-attr">matchExpression:</span><br>      <span class="hljs-bullet">-</span> &#123;<span class="hljs-attr">key:</span> <span class="hljs-string">tier</span>, <span class="hljs-attr">operator:</span> <span class="hljs-string">In</span>, <span class="hljs-attr">values:</span> [<span class="hljs-string">frontend</span>]&#125;<br>  <span class="hljs-attr">template:</span><br>  <span class="hljs-string">.......</span><br></code></pre></td></tr></table></figure><p>kubectl命令工具适用于RC的绝大部分命令都同样适用于Replica Set。此外，当前我们很少单独使用Replica Set，它主要被Deployment这个更高层的资源对象所使用，从而形成一整套Pod创建、删除、更新的编排机制。当我们使用Deployment时，无须关心它是如何创建和维护Replica Set的，这一切都是自动发生的。</p><p>Replica Set与Deployment这两个重要资源对象逐步替换了之前的RC的作用，是Kubernetes v1.3里Pod自动扩容（伸缩）这个告警功能实现的基础，也将继续在Kubernetes未来的版本中发挥重要的作用。</p><p>最后我们总结一下关于RC（Replica Set）的一些特性与作用。</p><ul><li>在大多数情况下，我们通过定义一个RC实现Pod的创建过程及副本数量的自动控制。</li><li>RC里包括完整的Pod定义模版。</li><li>RC通过Label Selector机制实现对Pod副本的自动控制。</li><li>通过改变RC里的Pod副本数量，可以实现Pod的扩容或缩容功能。</li><li>通过改变RC里的Pod模版中的镜像版本，可以实现Pod的滚动升级功能。</li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>kubernetes 重要概念</title>
    <link href="/2019/08/21/kubernetes-Basic-concepts/"/>
    <url>/2019/08/21/kubernetes-Basic-concepts/</url>
    
    <content type="html"><![CDATA[<p>在实践之前，必须先学习 Kubernetes 的几个重要概念，它们是组成 Kubernetes 集群的基石。</p><h3 id="Master"><a href="#Master" class="headerlink" title="Master"></a>Master</h3><p>Master 是 Cluster 的大脑，它的主要职责是调度，即决定将应用放在哪里运行。Master 运行 Linux 操作系统，可以是物理机或者虚拟机。为了实现高可用，可以运行多个 Master。</p><p>Master节点上运行着以下一组关键进程。</p><ul><li>Kubernetes API Server(kube-apiserver), 提供 HTTP Rest 接口的关键服务程序，kubernets里所有资源增、删、改、查等操作的唯一入口，也是集群控制的入口进程</li><li>Kubernetes Controller Manager(kube-controller-manager)，所有资源对象的自动化控制中心（资源对象的大总管）</li><li>Kubernetes Scheduler(kube-scheduler)，资源调度(pod)的进程（调度室）</li><li>etcd Server，Kubernetes 里所有资源对象的数据全部是保持在etcd中</li></ul><h3 id="Node"><a href="#Node" class="headerlink" title="Node"></a>Node</h3><p>Node 的职责是运行容器应用。Node 由 Master 管理，Node 负责监控并汇报容器的状态，并根据 Master 的要求管理容器的生命周期。Node 运行在 Linux 操作系统，可以是物理机或者是虚拟机。</p><p>Node运行着一些关键进程：</p><ul><li>kubelet：负责Pod对应的容器的创建、启停等任务，同时与Master节点密切协作，实现集群管理的基本功能。</li><li>kube-proxy：实现Kubernetes Service的通信与负载均衡机制的重要组件。</li><li>Docker Engine （docker）：Docker引擎，负责本机的容器创建和管理工作。</li></ul><h3 id="Pod"><a href="#Pod" class="headerlink" title="Pod"></a>Pod</h3><p>Pod 是 Kubernetes 的最小工作单元。每个 Pod 包含一个或多个容器。Pod 中的容器会作为一个整体被 Master 调度到一个 Node 上运行。(注意：可以把pod想象成豌豆荚，豌豆就是容器，可以有一个或多个。)<br>说到Pod，简单介绍其概念。首先，Pod运行在一个我们称之为节点（Node）的环境中，这个节点可能是物理机或虚拟机，通常一个节点上上面运行几百个Pod；其次每个Pod运行着一个特殊的被称之为根容器（Pause），和一组用户容器组成，这些业务容器共享根容器（Pause）的网络栈和Volume挂载卷，因此它们之间的通信和数据交换效率更为高效。在设计时我们可以充分利用这一特性将一组密切相关的服务进程放到同一个Pod中。最后需要注意的是并不是每一个Pod和它里面运行的容器都能映射到一个Service上，只有那些提供服务的一组Pod才会被映射成一个服务。</p><h3 id="静态Pod-amp-普通Pod"><a href="#静态Pod-amp-普通Pod" class="headerlink" title="静态Pod &amp; 普通Pod"></a>静态Pod &amp; 普通Pod</h3><ul><li><p>普通的Pod:<br>普通Pod一旦被创建，就会被放入到etcd中存储，随后会被Kubernetes Master调度到某个具体的Node上并进行绑定(Binding),随后该Pod 被对应的Node上的kubelet进程实例化成一组相关的docker容器运行起来。<br>当Pod里的某个容器停止时，Kubernetes会自动检测到这个问题并且重新启动这个Pod (重启Pod里的所有容器)，如果Pod所在的Node宕机，则会将这个Node上所有的Pod从新调度到其他节点上。</p></li><li><p>静态Pod (STatic Pod):<br>静态Pod不存放在Kubernetes的etcd存储里，而是存放在某个具体的Node上的文件中，并且只在此Node上启动运行。<br>静态Pod是由kubelet进行管理的仅存在于特定Node上的Pod。他们不能通过API Server进行管理，无法与ReplicationController(RC)、Deployment、或者DaemonSet进行关联，并且kubelet也无法对它们进行健康检查。静态Pod总是由kubelet进行创建的，并且总是在kubelet所在的Node上运行的</p></li></ul><h3 id="副本控制器类型（Pod叫副本）"><a href="#副本控制器类型（Pod叫副本）" class="headerlink" title="副本控制器类型（Pod叫副本）"></a>副本控制器类型（Pod叫副本）</h3><ul><li>ReplicationController （简称为RC）</li><li>ReplicaSet (简称为RS) </li><li>Deployment</li><li>StatefulSet</li><li>DaemonSet</li><li>Job,Cronjob</li></ul><h3 id="Kubernetes-引入-Pod-主要基于下面两个目的："><a href="#Kubernetes-引入-Pod-主要基于下面两个目的：" class="headerlink" title="Kubernetes 引入 Pod 主要基于下面两个目的："></a>Kubernetes 引入 Pod 主要基于下面两个目的：</h3><ul><li><p>可管理性:<br>有些容器天生就是需要紧密联系，一起工作。Pod 提供了比容器更高层次的抽象，将它们封装到一个部署单元中。Kubernetes 以 Pod 为最小单位进行调度、扩展、共享资源、管理生命周期。</p></li><li><p>通信和资源共享:<br>Pod 中的所有容器使用同一个网络 namespace，即相同的 IP 地址和 Port 空间。它们可以直接用 localhost 通信。同样的，这些容器可以共享存储，当 Kubernetes 挂载 volume 到 Pod，本质上是将 volume 挂载到 Pod 中的每一个容器。</p></li></ul><h3 id="Pods-有两种使用方式："><a href="#Pods-有两种使用方式：" class="headerlink" title="Pods 有两种使用方式："></a>Pods 有两种使用方式：</h3><ul><li><p>运行单一容器:<br>one-container-per-Pod 是 Kubernetes 最常见的模型，这种情况下，只是将单个容器简单封装成 Pod。即便是只有一个容器，Kubernetes 管理的也是 Pod 而不是直接管理容器。</p></li><li><p>运行多个容器:<br>但问题在于：哪些容器应该放到一个 Pod 中？<br>答案是：这些容器联系必须 非常紧密，而且需要 直接共享资源。</p></li></ul><blockquote><h5 id="举个例子"><a href="#举个例子" class="headerlink" title="举个例子:"></a>举个例子:</h5></blockquote><p>下面这个 Pod 包含两个容器：一个 File Puller，一个是 Web Server。他们两个container的net namespace、uts namespace、ipc namespace是属于共享的。 mnt namespace、user namespace、pid namespace是互相隔离的。</p><p><img src="/images/volume.png" alt="volumes"></p><h3 id="Label"><a href="#Label" class="headerlink" title="Label:"></a>Label:</h3><p>Label是Kubernetes系统中另外一个核心概念。一个Label是一个key&#x3D;value的键值对，其中key与vaue由用户自己指定。Label可以附加到各种资源对象上，例如Node、Pod、Service、RC等，一个资源对象可以定义任意数量的Label，同一个Label也可以被添加到任意数量的资源对象上去，Label通常在资源对象定义时确定，也可以在对象创建后动态添加或者删除。</p><p>我们可以通过指定的资源对象捆绑一个或多个不同的Label来实现多维度的资源分组管理功能，以便于灵活、方便地进行资源分配、调度、配置、部署等管理工作。例如：部署不同版本的应用到不同的环境中；或者监控和分析应用（日志记录、监控、告警）等。一些常用等label示例如下。</p><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs erlang">版本标签：<span class="hljs-string">&quot;release&quot;</span> : <span class="hljs-string">&quot;stable&quot;</span> , <span class="hljs-string">&quot;release&quot;</span> : <span class="hljs-string">&quot;canary&quot;</span>...<br>环境标签：<span class="hljs-string">&quot;environment&quot;</span> : <span class="hljs-string">&quot;dev&quot;</span> , <span class="hljs-string">&quot;environment&quot;</span> : <span class="hljs-string">&quot;production&quot;</span><br>架构标签：<span class="hljs-string">&quot;tier&quot;</span> : <span class="hljs-string">&quot;frontend&quot;</span> , <span class="hljs-string">&quot;tier&quot;</span> : <span class="hljs-string">&quot;backend&quot;</span> , <span class="hljs-string">&quot;tier&quot;</span> : <span class="hljs-string">&quot;middleware&quot;</span><br>分区标签：<span class="hljs-string">&quot;partition&quot;</span> : <span class="hljs-string">&quot;customerA&quot;</span> , <span class="hljs-string">&quot;partition&quot;</span> : <span class="hljs-string">&quot;customerB&quot;</span>...<br>质量管控标签：<span class="hljs-string">&quot;track&quot;</span> : <span class="hljs-string">&quot;daily&quot;</span> , <span class="hljs-string">&quot;track&quot;</span> : <span class="hljs-string">&quot;weekly&quot;</span><br></code></pre></td></tr></table></figure><p>Label相当于我们熟悉的“标签”，給某个资源对象定义一个Label，就相当于給它打了一个标签，随后可以通过Label Selector（标签选择器）查询和筛选拥有某些Label的资源对象，Kubernetes通过这种方式实现了类似SQL的简单又通用的对象查询机制。</p><p>Label Selector可以被类比为SQL语句中的where查询条件，例如，name&#x3D;redis-slave这个label Selector作用于Pod时，可以被类比为select * from pod where pod’s name &#x3D; ‘redis-slave’这样的语句。当前有两种Label Selector的表达式：基于等式的（Equality-based）和基于集合的（Set-based），前者采用“等式类”的表达式匹配标签，下面是一些具体的例子。</p><ul><li><p>基于等式的表达式匹配标签实例：<br>name&#x3D;redis-slave：匹配所有具有标签name&#x3D;redis-slave的资源对象。<br>env !&#x3D; production：匹配所有不具有标签env&#x3D;production的资源对象。</p></li><li><p>基于集合方式的表达式匹配标签实例：<br>name in (redis-master,redis-slave)：匹配所有具有标签name&#x3D;redis-master或者name&#x3D;redis-slave的资源对象。<br>name notin (php-frontend)：匹配所有不具有标签name&#x3D;php-frontend的资源对象。</p></li></ul><p>可以通过多个Label Selector表达式的组合实现复杂的条件，多个表达式之间用“,”进行分隔即可，几个条件之间是“AND”的关系，即同时满足多个条件，比如下面的例子：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">name=redis-slave,<span class="hljs-built_in">env</span>!=production<br>name notin (php-fronted),<span class="hljs-built_in">env</span>!=production<br></code></pre></td></tr></table></figure><h3 id="Label-Selector在Kubernetes中多重要使用场景有以下几处"><a href="#Label-Selector在Kubernetes中多重要使用场景有以下几处" class="headerlink" title="Label Selector在Kubernetes中多重要使用场景有以下几处:"></a>Label Selector在Kubernetes中多重要使用场景有以下几处:</h3><ul><li>kube-controller进程通过资源对象RC上定义都Label Selector来筛选要监控的Pod副本的数量，从而实现Pod副本的数量始终符合预期设定的全自动控制流程。</li><li>kube-proxy进程通过Service的Label Selector来选择对应的Pod，自动建立起每个Service到对应Pod的请求转发路由表，从而实现Service的智能负载均衡机制。</li><li>通过对某些Node定义特定的Label，并且在Pod定义文件中使用NodeSelector这种标签调度策略，kube-scheduler进程可以实现Pod“定向调度”的特性。</li></ul><p>前面我们只是介绍了一个name&#x3D;XXX的Label Selector。让我们看一个更复杂的例子。假设为Pod定义了Label: release、env和role，不同的Pod定义了不同的Label值，如图1.7所示，如果我们设置了“role&#x3D;frontend”的Label Selector，则会选取到Node 1和Node 2上到Pod。</p><p><img src="/images/label1.png" alt="label1"></p><p>而设置“release&#x3D;beta”的Label Selector，则会选取到Node 2和Node 3上的Pod，如下图所示。</p><p><img src="/images/label2.png" alt="label2"></p><p>总结：使用Label可以給对象创建多组标签，Label和Label Selector共同构成了Kubernetes系统中最核心的应用模型，使得被管理对象能够被精细地分组管理，同时实现了整个集群的高可用性。</p><h3 id="Service和ReplicationController"><a href="#Service和ReplicationController" class="headerlink" title="Service和ReplicationController"></a>Service和ReplicationController</h3><p>对于这两种对象的Label选择器是用map定义在json或者yaml文件中的，并且只支持基于等式(Equality-based)的条件：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-attr">&quot;selector&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;component&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;redis&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>要么：</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">selector:</span><br><span class="hljs-symbol">    component:</span> redis<br></code></pre></td></tr></table></figure><p>此选择器（分别为json或yaml格式）等同于component&#x3D;redis或component in (redis)。</p><h3 id="支持set-based的资源"><a href="#支持set-based的资源" class="headerlink" title="支持set-based的资源"></a>支持set-based的资源</h3><p>Job，Deployment，Replica Set，和Daemon Set，支持基于集合方式(set-based)的两种表达式。</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">selector:</span><br><span class="hljs-symbol">  matchLabels:</span><br><span class="hljs-symbol">    component:</span> redis<br></code></pre></td></tr></table></figure><p>matchLabels 是一个{key,value}的映射。一个单独的 {key,value} 。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">selector:</span><br>  <span class="hljs-attr">matchExpressions:</span><br>    <span class="hljs-bullet">-</span> &#123;<span class="hljs-attr">key:</span> <span class="hljs-string">tier</span>, <span class="hljs-attr">operator:</span> <span class="hljs-string">In</span>, <span class="hljs-attr">values:</span> [<span class="hljs-string">cache</span>,<span class="hljs-string">backup</span>]&#125;       <br>    <span class="hljs-bullet">-</span> &#123;<span class="hljs-attr">key:</span> <span class="hljs-string">environment</span>, <span class="hljs-attr">operator:</span> <span class="hljs-string">NotIn</span>, <span class="hljs-attr">values:</span> [<span class="hljs-string">dev</span>]&#125;<br></code></pre></td></tr></table></figure><blockquote><p>注释：以上实例表示<br><code>key</code> 键 <code>tier</code><br><code>operator</code> 操作符 <code>in</code><br><code>values</code> 值 <code>[cache,backup]</code><br>表示<code>key</code>键<code>tier</code>要包含<code>cache</code>和<code>backup</code></p></blockquote><p>matchExpressions 是一个pod的选择器条件的list 。有效运算符包含In, NotIn, Exists, 和DoesNotExist。在In和NotIn的情况下，value必须不能为空列表。Exists和DoesNotExist的情况下，value必须为空列表。当包含 matchLabels 和 matchExpressions都纯在时，会用AND符号连接，他们必须都被满足才能完成匹配。</p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
